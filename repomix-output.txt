================================================================
Directory Structure
================================================================
.github/
  workflows/
    aws.yml
apache/
  apache_server.conf
  Dockerfile.apache
  httpd.conf
backend/
  API/
    AI.py
  helpers/
    analogy_helper.py
    analogy_stream_helper.py
    async_tasks.py
    celery_app.py
    daily_newsletter_helper.py
    daily_newsletter_task.py
    email_helper.py
    grc_helper.py
    grc_stream_helper.py
    log_generator.py
    log_helper.py
    pbq_ai_helper.py
    scenario_helper.py
    status_helper.py
    xploitcraft_helper.py
  models/
    log_history.py
    log_models.py
    newsletter_content.py
    test.py
    user_subscription.py
  mongodb/
    database.py
  routes/
    admin_newsletter_routes.py
    analogy_routes.py
    celery_routes.py
    daily_brief_routes.py
    grc_routes.py
    log_routes.py
    pbq_routes.py
    scenario_routes.py
    status_routes.py
    subscribe_routes.py
    test_routes.py
    unsubscribe_routes.py
    xploit_routes.py
  app.py
  Dockerfile.backend
  requirements.txt
  update_newsletter.py
database/
  models.py
frontend/
  my-react-app/
    public/
      avatars/
        avatars_mongo.js
      xp/
        xp_mongo.js
      index.html
      manifest.json
      robots.txt
    src/
      components/
        EasterEgg/
          egg.txt
          Portfolio_notegg.css
          Portfolio_notegg.js
          Portfolio.css
          Portfolio.js
        pages/
          AboutPage/
            About.css
            About.js
          AdminInterface/
            AdminInterface.css
            AdminInterface.js
            AdminMonitorStatus.css
            AdminMonitorStatus.js
            AdminNewsletter.css
            AdminNewsletter.js
            AdminSubscribers.css
            AdminSubscribers.js
            AdminTriggerTasks.css
            AdminTriggerTasks.js
          AnalogyPage/
            AnalogyHub.css
            AnalogyHub.js
          aplus/
            APlusTestList.js
            APlusTestPage.js
          aplus2/
            AplusCore2TestList.js
            APlusCore2TestPage.js
          auth/
            auth.css
            AuthToast.css
            ErrorDisplay.css
            ErrorDisplay.js
            ForgotPassword.css
            ForgotPassword.js
            Login.css
            Login.js
            PasswordRequirements.css
            PasswordRequirements.js
            Register.css
            Register.js
          awscloud/
            AWSCloudTestList.js
            AWSCloudTestPage.js
          casp/
            CaspPlusTestList.js
            CaspPlusTestPage.js
          cissp/
            CisspTestList.js
            CisspTestPage.js
          cloudplus/
            CloudPlusTestList.js
            CloudPlusTestPage.js
          cysa/
            CySAPlusTestList.js
            CySAPlusTestPage.js
          DailyPage/
            DailyCyberBrief.css
            DailyCyberBrief.js
          dataplus/
            DataPlusTestList.js
            DataPlusTestPage.js
          DonatePage/
            Donate.css
            Donate.js
          GRCpage/
            GRC.css
            GRC.js
          Info/
            InfoPage.css
            InfoPage.js
          linuxplus/
            LinuxPlusTestList.js
            LinuxPlusTestPage.js
          LogPage/
            log.css
            Log.js
          nplus/
            NetworkPlusTestPage.js
            NPlusTestList.js
          PBQpage/
            PBQWizard.css
            PBQWizard.js
          penplus/
            PenPlusTestList.js
            PenPlusTestPage.js
          ResourcesPage/
            Resources.css
            Resources.js
          ScenarioPage/
            attacks.js
            ScenarioSphere.css
            ScenarioSphere.js
          secplus/
            SecurityPlusTestList.js
            SecurityPlusTestPage.js
          serverplus/
            ServerPlusTestList.js
            ServerPlusTestPage.js
          store/
            AchievementPage.css
            AchievementPage.js
            achievementsSlice.js
            AchievementToast.css
            AchievementToast.js
            LeaderboardPage.css
            LeaderboardPage.js
            ShopPage.css
            ShopPage.js
            shopSlice.js
            store.js
            StreakCalendar.js
            UserProfile.css
            UserProfile.js
            userSlice.js
          XploitcraftPage/
            App.css
            global.css
            Xploitcraft.js
        Sidebar/
          Sidebar.css
          Sidebar.js
        ConfettiAnimation.js
        gloabl_test.js
        GlobalTestPage.js
        ProtectedRoute.js
        test.css
      App.js
      App.test.js
      global.css
      index.css
      index.js
      reportWebVitals.js
      setupTests.js
    .eslintignore
    .gitignore
    craco.config.js
    Dockerfile.audit
    Dockerfile.dev
    Dockerfile.frontend
    eslint.config.mjs
    package.json
nginx/
  sites-enabled/
    reverse_proxy.conf
  nginx.conf
redis/
  redis.conf
.gitignore
AWS.md
bandit.yaml
docker-compose.yml
env_EXAMPLE
INSTALL.md
README.md
requirements.txt
ssh-key-2025-02-12.key.pub

================================================================
Files
================================================================

================
File: .github/workflows/aws.yml
================
name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure SSH Access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no admin@ec2-98-83-245-82.compute-1.amazonaws.com << 'EOF'
          set -e

          # Navigating to the project directory
          cd /home/admin/ProxyAuthRequired  

          # root
          sudo su
        
          # Pulling the latest changes from the repository
          git fetch --all
          git reset --hard origin/main

          # Recreating the .env 
          echo "ENV=${{ secrets.ENV }}" >> .env
          
          # Stopping existing containers
          docker-compose down

          # Rebuilding containers with no cache
          docker-compose build --no-cache

          # Starting the containers in detached mode
          docker-compose up -d --remove-orphans

           Cleaning up dangling Docker images
          docker image prune -f
        EOF

================
File: apache/apache_server.conf
================
<VirtualHost *:8080>
    ServerName apache
    ServerAdmin webmaster@localhost

    ProxyPass /api/ http://backend:5000/
    ProxyPassReverse /api/ http://backend:5000/
    
    
    ProxyPass / http://frontend:3000/
    ProxyPassReverse / http://frontend:3000/

    
    <Location /api/>
        Require all granted
    </Location>

    ErrorLog /usr/local/apache2/logs/xploitcraft_error.log
</VirtualHost>

================
File: apache/Dockerfile.apache
================
FROM httpd:2.4

COPY apache_server.conf /usr/local/apache2/conf/extra/
COPY httpd.conf /usr/local/apache2/conf/httpd.conf

RUN sed -i '/#LoadModule unixd_module/s/^#//' /usr/local/apache2/conf/httpd.conf && \
    sed -i '/#LoadModule proxy_module/s/^#//' /usr/local/apache2/conf/httpd.conf && \
    sed -i '/#LoadModule proxy_http_module/s/^#//' /usr/local/apache2/conf/httpd.conf && \
    sed -i '/#LoadModule authz_core_module/s/^#//' /usr/local/apache2/conf/httpd.conf

RUN mkdir -p /usr/local/apache2/logs && chmod -R 777 /usr/local/apache2/logs


EXPOSE 8080

CMD ["httpd-foreground"]

================
File: apache/httpd.conf
================
User www-data
Group www-data

ServerRoot "/usr/local/apache2"
Listen 8080
ServerName apache

LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule unixd_module modules/mod_unixd.so

# Include conf/extra/httpd-autoindex.conf
# Include conf/extra/httpd-dav.conf
# Include conf/extra/httpd-default.conf
# Include conf/extra/httpd-mpm.conf
# Include conf/extra/httpd-vhosts.conf


Include /usr/local/apache2/conf/extra/apache_server.conf

LogLevel debug

================
File: backend/API/AI.py
================
import os
import logging
from openai import OpenAI
from dotenv import load_dotenv


load_dotenv()


logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)


def load_api_key() -> str:
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        logger.error("OpenAI API key is missing. Please ensure it's set in the environment variables.")
        raise ValueError("OpenAI API key is required but not found.")
    return api_key


api_key = load_api_key()
client = OpenAI(api_key=api_key)

================
File: backend/helpers/analogy_helper.py
================
import os
import logging
from API.AI import client


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

def generate_single_analogy(concept, category):
    """
    Generate a single analogy for the given concept and category.
    """
    prompt = (
        f"Generate an analogy for the concept '{concept}' using the context of '{category}'. "
        "Make it easy to understand but informative and in a teaching style, concise but in depth, and entertaining,  with one key info at the end to make sure the info is remembered.Do not explicilty say that you will create the analogy just output the analogy/explantion only e.g to not show: Sure! Let's dive into the fascinating world of cybersecurity using an analogy that you might find both informative and entertaining or any other variants"
    )

    try:
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o",
            max_tokens=750,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"Error generating single analogy: {e}")
        return "An error occurred while generating the analogy."

def generate_comparison_analogy(concept1, concept2, category):
    """
    Generate a comparison analogy between two concepts and a category.
    """
    prompt = (
        f"Compare '{concept1}' and '{concept2}' using an analogy in the context of '{category}'. "
        "Explain how they are similar and different or how they might work in conjunction with each other, in a teaching style, informative, concise but in depth, and entertaining,  with one key info at the end to make sure the info is rememebered. Do not explicilty say that you will create the analogy just output the analogy/explantion only e.g to not show: Sure! Let's dive into the fascinating world of cybersecurity using an analogy that you might find both informative and entertaining or any other variants"
    )

    try:
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o",
            max_tokens=1000,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"Error generating comparison analogy: {e}")
        return "An error occurred while generating the analogy."

def generate_triple_comparison_analogy(concept1, concept2, concept3, category):
    """
    Generate a comparison analogy among three concepts and a category.
    """
    prompt = (
        f"Compare '{concept1}', '{concept2}', and '{concept3}' using an analogy in the context of '{category}'. "
        "Explain how they are similar and different or how they might work in conjuction with each other, in a teaching style, informative, concise but in depth, and entertaining, with one key info at the end to make sure the info is rememebered.Do not explicilty say that you will create the analogy just output the analogy/explantion only e.g to not show: Sure! Let's dive into the fascinating world of cybersecurity using an analogy that you might find both informative and entertaining or any other variants"
    )

    try:
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o",
            max_tokens=1200,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logger.error(f"Error generating triple comparison analogy: {e}")
        return "An error occurred while generating the analogy."

================
File: backend/helpers/analogy_stream_helper.py
================
import logging
from API.AI import client

logger = logging.getLogger(__name__)

def generate_analogy_stream(analogy_type, concept1, concept2, concept3, category):
    """
    Streams the analogy text in partial chunks (NOT forcibly splitting by word),
    so the front-end can handle how to display it (word-by-word or otherwise).
    """


    if analogy_type == "comparison" and concept2:
        concept_part = f"Compare {concept1} and {concept2}"
    elif analogy_type == "triple" and concept2 and concept3:
        concept_part = f"Compare {concept1}, {concept2}, and {concept3}"
    else:

        concept_part = f"Generate an analogy for the concept {concept1}"


    prompt = (
        f"{concept_part} using the context of {category}. "
        "Make it easy to understand yet informative, in a teaching style, concise but in depth, and entertaining, "
        "with a final memory hook. Do NOT say 'Sure, let's dive in'; just provide the analogy only."
    )

    try:
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o",
            max_tokens=1200,
            temperature=0.7,
            stream=True
        )

        def generator():
            try:
                for chunk in response:
                    delta = chunk.choices[0].delta
                    if delta:
                        content = getattr(delta, "content", None)
                        if content:

                            yield content
            except Exception as e:
                logger.error(f"Error streaming analogy: {e}")

                yield ""

        return generator()

    except Exception as e:
        logger.error(f"Error generating analogy stream: {e}")

        def err_gen():
            yield ""
        return err_gen()

================
File: backend/helpers/async_tasks.py
================
# helpers/async_tasks.py

import logging
from helpers.celery_app import app

from helpers.analogy_helper import (
    generate_single_analogy as _generate_single_analogy,
    generate_comparison_analogy as _generate_comparison_analogy,
    generate_triple_comparison_analogy as _generate_triple_comparison_analogy
)

from helpers.scenario_helper import (
    generate_scenario as _generate_scenario,
    break_down_scenario as _break_down_scenario,
    generate_interactive_questions as _generate_interactive_questions  
)

from helpers.xploitcraft_helper import Xploits as _Xploits

from helpers.grc_helper import generate_grc_question as _generate_grc_question

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_single_analogy_task(self, concept, category):
    try:
        return _generate_single_analogy(concept, category)
    except Exception as e:
        logger.error(f"Celery generate_single_analogy_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_comparison_analogy_task(self, concept1, concept2, category):
    try:
        return _generate_comparison_analogy(concept1, concept2, category)
    except Exception as e:
        logger.error(f"Celery generate_comparison_analogy_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_triple_comparison_analogy_task(self, concept1, concept2, concept3, category):
    try:
        return _generate_triple_comparison_analogy(concept1, concept2, concept3, category)
    except Exception as e:
        logger.error(f"Celery generate_triple_comparison_analogy_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_scenario_task(self, industry, attack_type, skill_level, threat_intensity):
    """
    If _generate_scenario now returns a generator (streaming), we can consume it fully here,
    returning a single string to Celery.
    """
    try:
        scenario_gen = _generate_scenario(industry, attack_type, skill_level, threat_intensity)
        scenario_text = "".join(scenario_gen)
        return scenario_text
    except Exception as e:
        logger.error(f"Celery generate_scenario_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def break_down_scenario_task(self, scenario_text):
    try:
        return _break_down_scenario(scenario_text)
    except Exception as e:
        logger.error(f"Celery break_down_scenario_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_interactive_questions_task(self, scenario_text):
    """
    If _generate_interactive_questions now yields streaming tokens, 
    we just gather them into one final string here.
    """
    try:
        questions_gen = _generate_interactive_questions(scenario_text)
        questions_text = "".join(questions_gen)
        return questions_text
    except Exception as e:
        logger.error(f"Celery generate_interactive_questions_task error: {e}")
        self.retry(exc=e)


_xploit = _Xploits()

@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_exploit_payload_task(self, vulnerability, evasion_technique):
    try:
        return _xploit.generate_exploit_payload(vulnerability, evasion_technique)
    except Exception as e:
        logger.error(f"Celery generate_exploit_payload_task error: {e}")
        self.retry(exc=e)


@app.task(bind=True, max_retries=3, default_retry_delay=10)
def generate_grc_question_task(self, category, difficulty):
    try:
        return _generate_grc_question(category, difficulty)
    except Exception as e:
        logger.error(f"Celery generate_grc_question_task error: {e}")
        self.retry(exc=e)

================
File: backend/helpers/celery_app.py
================
# helpers/celery_app.py

import os
import logging
from celery import Celery
from celery.schedules import crontab
from dotenv import load_dotenv


load_dotenv()
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

logger.debug(f"SendGrid API Key: {SENDGRID_API_KEY}")

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")

app = Celery(
    'tasks',
    broker=CELERY_BROKER_URL,
    backend=CELERY_RESULT_BACKEND,
    broker_connection_retry_on_startup=True,
    include=[
        'helpers.async_tasks',
        'helpers.daily_newsletter_task'  
    ]
)

app.conf.update({
    'worker_prefetch_multiplier': 1,
    'task_acks_late': True,
    'worker_concurrency': 8,
    'timezone': 'America/New_York',  
    'enable_utc': True,  
})


app.conf.beat_schedule = {
    'send-daily-newsletter-midnight': {
        'task': 'helpers.daily_newsletter_task.send_daily_newsletter',
        'schedule': crontab(hour=0, minute=0),  
    },
}

app.autodiscover_tasks(['helpers'])

logger.info("Celery app initialized with broker %s and backend %s", CELERY_BROKER_URL, CELERY_RESULT_BACKEND)

================
File: backend/helpers/daily_newsletter_helper.py
================
# helpers/daily_newsletter_helper.py

import logging
from models.newsletter_content import (
    get_current_newsletter_db,
    set_current_newsletter_db
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

def set_newsletter_content(content):
    set_current_newsletter_db(content)

def get_newsletter_content():
    doc = get_current_newsletter_db()
    return doc.get("content", "")

================
File: backend/helpers/daily_newsletter_task.py
================
# helpers/daily_newsletter_task.py

from helpers.celery_app import app
from helpers.email_helper import send_email
from models.user_subscription import get_all_subscribers
from helpers.daily_newsletter_helper import get_newsletter_content
import logging

logger = logging.getLogger(__name__)

@app.task(name="helpers.daily_newsletter_task.send_daily_newsletter")
def send_daily_newsletter():
    """
    Celery task: send daily newsletter to all subscribers.
    """
    try:
        content = get_newsletter_content()
        if not content:
            logger.warning("No newsletter content found.")
            return

        subscribers = get_all_subscribers()
        if not subscribers:
            logger.warning("No subscribers found.")
            return

        for subscriber in subscribers:
            email = subscriber.get("email")
            if email:
                success = send_email(
                    to_email=email,
                    subject="Daily Cyber Brief",
                    content=content
                )
                if success:
                    logger.info(f"Newsletter sent to {email}")
                else:
                    logger.warning(f"Failed to send newsletter to {email}")

        logger.info("Daily newsletter task completed.")
    except Exception as e:
        logger.error(f"Error sending daily newsletter: {e}")
        raise e

================
File: backend/helpers/email_helper.py
================
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from dotenv import load_dotenv
import sendgrid
import os
from sendgrid.helpers.mail import Mail, Email, To, Content
from sendgrid import SendGridAPIClient



load_dotenv()


def send_email(to_email, subject, content):
    sg_api_key = os.getenv("SENDGRID_API_KEY")

    if not sg_api_key:
        print("SendGrid API key not found. Please ensure it is set in your environment variables.")
        return False

    
    message = Mail(
        from_email='dailycyberbrief@proxyauthrequired.com',  
        to_emails=to_email,
        subject=subject,
        html_content=content
    )

    try:
        sg = SendGridAPIClient(sg_api_key)
        response = sg.send(message)
        print(f"Email sent: Status Code: {response.status_code}")
        print(f"Response Body: {response.body}")
        print(f"Response Headers: {response.headers}")
        return True
    except Exception as e:
        print(f"Error sending email: {str(e)}")
        return False

================
File: backend/helpers/grc_helper.py
================
import os
import json
import logging
import re  
from API.AI import client

logger = logging.getLogger(__name__)

def generate_grc_question(category, difficulty):
    """
    Generates a GRC-related multiple-choice question in JSON format.
    The model returns a JSON object with keys:
      question (string)
      options (array of 4 strings)
      correct_answer_index (int)
      explanations (dict of strings for "0","1","2","3")
      exam_tip (string)
    """

    prompt = f""" 
You are an expert in concepts found in certifications like CISSP, CompTIA Advanced Security Practitioner (CASP+), CISM, CRISC, and others. Your role is to generate 
challenging and diverse test questions using advanced mult-layered reasoning, related to governance, risk management, risk thresholds, types of risk, Audit, Management, Policy, Cyber Security Ethics, Threat Assessment, 
Leadership, Business Continuity, compliance, regulations, incident resposne, Incident Response and more. focusing on preparing for exams like CISSP/ISC2 and CompTIA certifications. Ensure the questions cover a wide range of scenarios,
principles, and concepts, with multiple-choice answers that are nuanced and complex and specific, avoiding repetitive patterns or overly simplified examples.

CONTEXT: The user has selected:
- Category: {category} (e.g., 'Regulation', 'Risk Management', 'Compliance', 'Audit', 'Governance', 'Management', 'Policy', 'Ethics', 'Threat Assessment', 'Leadership', 'Business Continuity', 'Incident Response', 'Random')
- Difficulty: {difficulty} (e.g., 'Easy', 'Medium', 'Hard')

REQUIREMENTS
1. Four options (0, 1, 2, 3) total, one correct answer. The incorrect options should be very plausible but not correct, requiring the test-taker to carefully differentiate.

2. Explanations:
   - For the correct answer: Provide multiple sentences detailing exactly why it’s correct, clearly tying it back to the question’s scenario or concept. Show how it fulfills the requirements asked in the question as well as why the other answer choices are incorrect/not the correct answer..
   - For each incorrect answer: Provide multiple sentences detailing why it is NOT correct aswell as why the other incorrect answer choices are incorrect, and why then tell the user what the correct answer is and why it is correct using advanced multi-layered reasoning. 
     Do not just say it’s incorrect; fully explain why it falls short. 
     Highlight conceptual differences, limitations, or focus areas that differ from the question’s criteria.
   - Regardless of user choice, the generated output must contain full explanations for all answer choices provided. The explanations are produced in advance as part of the JSON object. Each explanation should be at least 3 sentences, rich in detail and conceptual clarity using advanced multi-layered reasoning.

3. Include an "exam_tip" field that provides a short, memorable takeaway or mnemonic to help differentiate the correct concept from the others. The exam tip should help the user recall why the correct answer stands out using advanced multi-layered reasoning.

4. Return ONLY a JSON object with the fields:
   "question", "options", "correct_answer_index", "explanations", and "exam_tip"
   No extra text, no Markdown, no commentary outside the JSON.

5. For each explanation (correct and incorrect):
   - At minimum of 3 sentences for the correct answer.
   - if the user gets the answer correct provide minium 3 senetence answer as to why it is correct, but also why the other answer choices listed are not the correct answer using advanced multi-layered reasoning.
   - Substantial detail.
   - Clearly articulate conceptual reasons, not just factual statements using advanced multi-layered reasoning.

EXAMPLE FORMAT (this is not real content, just structure, make sure to use all topics not just the topic provided in this example):
{{
  "question": "The question",
  "options": ["Option 0","Option 1","Option 2","Option 3"],
  "correct_answer_index": 2,
  "explanations": {{
    "0": "Explain thoroughly why option 0 fails. Mention its scope, focus areas, and why that doesn't meet the question criteria and then explain what the correct answer is and why it is correct aswell as why the other answer choices are incorrect using advanced multi-layered reasoning.",
    "1": "Explain thoroughly why option 1 fails. Mention its scope, focus areas, and why that doesn't meet the question criteria and then explain what the correct answer is and why it is correct aswell as why the other answer choices are incorrect using advanced multi-layered reasoning.",
    "2": "Explain thoroughly why option 2 is correct, linking its characteristics to the question scenario and why the other answer choices are incorrect using advanced multi-layered reasoning",
    "3": "Explain thoroughly why option 3 fails. Mention its scope, focus areas, and why that doesn't meet the question criteria and then explain what the correct answer is and why it is correct aswell as why the other answer choices are incorrect using advanced multi-layered reasoning."
  }},
  "exam_tip": "A short, memorable hint or mnemonic that differentiates the correct approach from others using advanced multi-layered reasoning."
}}

Now generate the JSON object following these instructions.
"""



    try:
        response = client.chat.completions.create(
            model="gpt-4o",  
            messages=[{"role": "user", "content": prompt}],
            max_tokens=900,
            temperature=0.6,
        )

        content = response.choices[0].message.content.strip()

      
        content = re.sub(r'^```.*\n', '', content)
        content = re.sub(r'\n```$', '', content)

        try:
            generated_question = json.loads(content)
        except json.JSONDecodeError as e:
            logger.error("JSON parsing error in generate_grc_question: %s", e)
            logger.error("Model returned: %s", content)
            raise ValueError("Model did not return valid JSON.") from e

        logger.info("Generated GRC question successfully.")
        return generated_question

    except Exception as e:
        logger.error(f"Error generating GRC question: {str(e)}")
        raise

================
File: backend/helpers/grc_stream_helper.py
================
import logging
import json
from API.AI import client

logger = logging.getLogger(__name__)

def generate_grc_questions_stream(category, difficulty):
    """
    Streams EXACTLY THREE advanced GRC questions in a JSON array, but chunk-by-chunk
    rather than word-by-word. This means we yield partial content from GPT as it arrives
    without splitting on spaces. The front end can display partial JSON in real time.
    """

    prompt = f"""
You are an expert in concepts found in certifications like CISSP, CompTIA Advanced Security Practitioner (CASP+), CISM, CRISC, and others. 
Your role is to generate challenging and diverse test questions related to governance, risk management, risk thresholds, types of risk, 
Audit, Management, Policy, Cyber Security Ethics, Threat Assessment, Leadership, Business Continuity, compliance, regulations, 
incident response, and more, focusing on preparing for exams like CISSP and CompTIA certifications. Ensure the questions cover a wide 
range of scenarios, principles, and concepts, with multiple-choice answers that are nuanced, complex, and specific, avoiding repetitive 
patterns or overly simplified examples.

CONTEXT: The user has selected:
- Category: {category}
- Difficulty: {difficulty}

REQUIREMENTS:
1. Generate EXACTLY 3 questions in one JSON array. Each question has:
   - "question": string,
   - "options": array of exactly 4 strings (indexes 0,1,2,3),
   - "correct_answer_index": integer (0,1,2,3),
   - "explanations": object with keys "0","1","2","3" (multi-sentence detail),
   - "exam_tip": short mnemonic/hint.

2. The correct answer's explanation has at least 3 sentences describing precisely why it is correct, 
   and also clarifies why the others are incorrect.

3. Each incorrect answer's explanation has multiple sentences explaining why it is wrong, 
   plus clarifies what the correct choice is and why the other answer choices are also incorrect or less suitable.

4. Provide an "exam_tip" as a short, memorable mnemonic or hint to help the test-taker recall the correct concept.

5. Return ONLY the JSON array with exactly 3 objects. No extra text, disclaimers, or preludes.

6. Each explanation must be at least 3 sentences, offering substantial detail and conceptual clarity.

Now generate the JSON object following these instructions. 
Remember: 3 items in the array, each question shaped as above, nothing else.
"""

    try:
        # Make the streaming request to GPT
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=3000,  # Adjust as needed
            temperature=0.7,  # Adjust as needed
            stream=True
        )

        def generator():
            try:
                for chunk in response:
                    delta = chunk.choices[0].delta
                    if delta:
                        content = getattr(delta, "content", None)
                        if content:
                            # **Chunk-based** streaming (no splitting on spaces):
                            yield content
            except Exception as e:
                logger.error(f"Error streaming GRC questions: {e}")
                yield ""

        return generator()

    except Exception as e:
        logger.error(f"Error generating GRC questions (stream): {e}")

        def err_gen():
            yield ""
        return err_gen()

================
File: backend/helpers/log_generator.py
================
import random
import json
from faker import Faker
from datetime import datetime
from typing import List
from models.log_models import (
    SecurityLog, FirewallLog, VulnerabilityLog, IntrusionLog, AccessControlLog,
    EventLog, SystemEvent, ApplicationEvent, AuthenticationEvent, NetworkEvent,
    ErrorLog, DatabaseErrorLog, FileSystemErrorLog, NetworkErrorLog, ApplicationErrorLog,
    DebugLog, QueryDebugLog, ApiDebugLog, ConfigDebugLog, ProcessDebugLog,
    InfoLog, SystemInfoLog, UserActivityLog, DeploymentLog, ServiceStatusLog,
    Log
)

fake = Faker()

def generate_firewall_log() -> FirewallLog:
    severity = random.choice(["critical", "high", "medium", "low"])
    geolocation = {
        "source_latitude": f"{fake.latitude()}",
        "source_longitude": f"{fake.longitude()}",
        "destination_latitude": f"{fake.latitude()}",
        "destination_longitude": f"{fake.longitude()}"
    }
    device_info = {
        "source_device": fake.user_agent(),
        "destination_device": fake.user_agent()
    }
    # Added a few more rule choices
    rule_triggered = random.choice([
        "Rule 101 - Suspicious Activity", "Rule 202 - High Traffic Volume", "Rule 303 - Unauthorized Scanning",
        "Rule 404 - Known Malicious IP", "Rule 505 - Protocol Anomaly"
    ])
    attack_vector_choices = ["Brute-force", "Phishing", "SQL Injection", "Cross-Site Scripting", "RFI", "LFI"]
    return FirewallLog(
        type="security",
        source="Firewall",
        event="Traffic Control",
        message=f"Blocked {random.choice(['incoming', 'outgoing'])} traffic from {fake.ipv4()} to {fake.ipv4()} due to rule violation.",
        severity=severity,
        source_ip=fake.ipv4(),
        destination_ip=fake.ipv4(),
        action=random.choice(["Allowed", "Blocked"]),
        protocol=random.choice(["TCP", "UDP", "ICMP"]),
        port=random.randint(1, 65535),
        rule_triggered=rule_triggered,
        traffic_volume=f"{random.randint(100, 10000)}MB",
        session_id=fake.uuid4() if random.choice([True, False]) else None,
        destination_country=fake.country(),
        source_country=fake.country(),
        ip_address=fake.ipv4(),
        username=fake.user_name(),
        attack_vector=random.choice(attack_vector_choices),
        status=random.choice(["Successful", "Failed"]),
        geolocation=geolocation,
        device_info=device_info
    )

def generate_vulnerability_log() -> VulnerabilityLog:
    severity_level = random.choice(["Low", "Medium", "High", "Critical"])
    geolocation = {
        "scanner_location": fake.city(),
        "target_location": fake.city()
    }
    device_info = {
        "scanner_device": fake.user_agent(),
        "target_device": fake.user_agent()
    }
    # More vulnerability names and tools
    vuln_name_choices = [
        "SQL injection flaw", "XSS vulnerability", "Privilege escalation bug", "Directory traversal issue",
        "Open redirect", "Command injection hole", "Insecure deserialization"
    ]
    tool_choices = ["Burp Suite", "Nessus", "Qualys", "OpenVAS", "Acunetix"]
    return VulnerabilityLog(
        type="security",
        source="Vulnerability Scanner",
        event="Scan Result",
        message=f"{random.choice(vuln_name_choices)} found on {fake.hostname()} affecting {random.choice(['database', 'API endpoint', 'user interface', 'authentication flow'])}.",
        severity=severity_level.lower(),
        tool=random.choice(tool_choices),
        vulnerability_name=fake.catch_phrase(),
        cve_id=f"CVE-{random.randint(1999, 2024)}-{random.randint(1000, 9999)}",
        severity_level=severity_level,
        remediation_steps=[
            f"Apply patch {fake.numerify('##')}",
            f"Restrict access to {fake.domain_word()}",
            f"Update configuration files for {fake.bs()}",
            "Implement input validation", "Enable WAF rules"
        ],
        discovery_date=fake.date_time_between(start_date='-60d', end_date='now'),
        patch_available=random.choice([True, False]),
        geolocation=geolocation,
        device_info=device_info,
        ip_address=fake.ipv4(),
        username=fake.user_name(),
        attack_vector=random.choice(["Brute-force", "Phishing", "SQL Injection", "XSS", "LFI", "RCE"]),
        status=random.choice(["Successful", "Failed"]),
        affected_components=[fake.bs().capitalize() for _ in range(random.randint(1, 4))]
    )

def generate_intrusion_log() -> IntrusionLog:
    risk_level = random.choice(["Low", "Medium", "High", "Critical"])
    geolocation = {
        "source_latitude": f"{fake.latitude()}",
        "source_longitude": f"{fake.longitude()}",
        "target_latitude": f"{fake.latitude()}",
        "target_longitude": f"{fake.longitude()}"
    }
    device_info = {
        "source_device": fake.user_agent(),
        "target_device": fake.user_agent()
    }
    attempted_payloads = [fake.word() for _ in range(random.randint(1, 3))]
    response_actions = [random.choice(["Alert Sent", "Connection Terminated", "IP Banned", "Session Terminated"]) for _ in range(random.randint(1,2))]

    return IntrusionLog(
        type="security",
        source="IDS",
        event="Unauthorized Access Attempt",
        message=f"Detected unauthorized access attempt from {fake.ipv4()} targeting {fake.hostname()}.",
        severity=random.choice(["critical", "high", "medium", "low"]),
        source_ip=fake.ipv4(),
        destination_ip=fake.ipv4(),
        username=fake.user_name(),
        attack_vector=random.choice(["Phishing", "Brute Force", "SQL Injection", "RCE", "LFI", "XSS"]),
        status=random.choice(["Blocked", "Failed", "Successful"]),
        detection_system=random.choice(["Snort", "Suricata", "OSSEC", "Zeek"]),
        intrusion_method=random.choice(["Exploit", "Privilege Escalation", "RDP Bruteforce", "SMB Lateral Movement"]),
        risk_level=risk_level,
        attempted_payloads=attempted_payloads,
        response_actions=response_actions,
        breach_confirmed=random.choice([True, False]),
        compromised_data=[fake.word() for _ in range(random.randint(1, 5))] if random.choice([True, False]) else None,
        geolocation=geolocation,
        device_info=device_info
    )

def generate_access_control_log() -> AccessControlLog:
    reason_choices = ["Unauthorized user", "Incorrect credentials", "Policy violation", "Resource locked", "MFA required"]
    return AccessControlLog(
        type="security",
        source="Access Control",
        event="Access Attempt",
        message=f"Access {'granted' if random.choice([True, False]) else 'denied'} to {fake.user_name()} for {fake.file_path()}.",
        severity=random.choice(["critical", "high", "medium", "low"]),
        ip_address=fake.ipv4(),
        username=fake.user_name(),
        attack_vector=random.choice(["Brute-force", "Privilege Escalation"]),
        status=random.choice(["Failed", "Successful"]),
        access_type=random.choice(["Granted", "Denied"]),
        resource=fake.file_path(),
        access_reason=random.choice(reason_choices),
        access_time=fake.date_time_between(start_date='-30d', end_date='now'),
        access_location=fake.city(),
        authentication_method=random.choice(["Password", "MFA", "Biometric", "Certificate"]),
        user_agent=fake.user_agent(),
        session_duration=f"{random.randint(5, 480)} minutes"
    )

def generate_security_logs(count: int) -> List[SecurityLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_firewall_log())
        logs.append(generate_vulnerability_log())
        logs.append(generate_intrusion_log())
        logs.append(generate_access_control_log())
    return logs

def generate_system_event() -> SystemEvent:
    resource_usage = {
        "CPU": f"{random.randint(10, 90)}%",
        "RAM": f"{random.randint(20, 80)}%",
        "Disk": f"{random.randint(30, 95)}%"
    }
    network_interfaces = [f"eth{random.randint(0,3)}: {fake.ipv4()} - {'Up' if random.choice([True, False]) else 'Down'}" for _ in range(random.randint(1,4))]
    running_services = [fake.bs().capitalize() for _ in range(random.randint(2, 5))]
    hardware_health = {
        "CPU_Temperature": f"{random.randint(30, 90)}°C",
        "RAM_Usage": f"{random.randint(20, 80)}%",
        "Disk_Health": random.choice(["Good", "Warning", "Critical"]),
        "Battery_Level": f"{random.randint(20, 100)}%"
    }
    software_updates = [f"{fake.word().capitalize()} v{random.randint(1,5)}.{random.randint(0,9)}.{random.randint(0,9)}" for _ in range(random.randint(1,3))]
    system_component = random.choice(["System Manager", "Monitor Module", "Health Checker"])
    action_performed = random.choice(["System Check", "Health Assessment", "Status Update"])
    result = random.choice(["Success", "Partial Success", "Failure"])
    

    return SystemEvent(
        type="event",
        source="System Monitor",
        event="System Reboot",
        message="System rebooted successfully.",
        severity="info",
        summary="System Check Completed",
        details="All systems are running smoothly without any detected issues.",
        system_component=system_component,
        action_performed=action_performed,
        result=result,
        additional_info={
            "environment": random.choice(["Production", "Staging", "Development"]),
            "monitoring_tool": random.choice(["Nagios", "Prometheus", "Zabbix"])
        },
        os_version=fake.windows_platform_token(),
        uptime=f"{random.randint(1, 72)} hours",
        resource_usage=resource_usage,
        network_interfaces=network_interfaces,
        running_services=running_services,
        last_patch_applied=str(fake.date_between(start_date='-60d', end_date='today')) if random.choice([True, False]) else None,
        scheduled_maintenance=random.choice([True, False]),
        hardware_health=hardware_health,
        software_updates=software_updates
    )

def generate_application_event() -> ApplicationEvent:
    stack_trace = fake.text(max_nb_chars=500) if random.choice([True, False]) else None
    app_name = fake.company()
    version = fake.numerify("#.#.#")
    severity_choices = ["info", "debug", "low", "critical", "medium", "high"]

    return ApplicationEvent(
        type="event",
        source="AppManager",
        event="App Crash",
        message=f"{app_name} application crashed unexpectedly during {random.choice(['data processing', 'user request', 'background task'])}.",
        severity=random.choice(severity_choices),
        application_name=app_name,
        version=version,
        action_details=fake.sentence(),
        system_component="Application Layer",
        action_performed="Crash",
        result="Failure",
        error_code=f"APP-{random.randint(1000, 9999)}",
        stack_trace=stack_trace,
        deployment_version=f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        rollback_occurred=random.choice([True, False]),
        affected_users=[fake.user_name() for _ in range(random.randint(1, 5))] if stack_trace else None
    )

def generate_authentication_event() -> AuthenticationEvent:
    return AuthenticationEvent(
        type="event",
        source="AuthService",
        event="Login Attempt",
        message=f"User {fake.user_name()} attempted to log in from {fake.ipv4()} using {random.choice(['Password', 'MFA', 'Biometric'])}.",
        severity=random.choice(["info", "debug", "low", "critical", "medium", "high"]),
        auth_method=random.choice(["OAuth", "SAML", "LDAP"]),
        auth_status=random.choice(["Success", "Failure"]),
        user_role=random.choice(["Admin", "User", "Guest"]),
        system_component="Authentication Module",
        action_performed=random.choice(["Login", "Logout", "Password Change"]),
        result=random.choice(["Success", "Failure"]),
        session_id=fake.uuid4(),
        login_attempts=random.randint(1, 5),
        lockout_status=random.choice([True, False]),
        last_login_time=fake.date_time_between(start_date='-30d', end_date='now') if random.choice([True, False]) else None
    )

def generate_network_event() -> NetworkEvent:
    return NetworkEvent(
        type="event",
        source="Network Manager",
        event="Traffic Anomaly Detected",
        message=f"Traffic anomaly detected between {fake.ipv4()} and {fake.ipv4()} involving {random.choice(['suspicious', 'excessive'])} data transfer.",
        severity=random.choice(["info", "critical", "medium", "low", "high", "debug"]),
        system_component="Network Interface",
        action_performed="Traffic Analysis",
        result=random.choice(["Monitored", "Blocked"]),
        src_ip=fake.ipv4(),
        dest_ip=fake.ipv4(),
        protocol=random.choice(["TCP", "UDP", "ICMP"]),
        action_taken=random.choice(["Monitored", "Blocked"]),
        bytes_transferred=f"{random.randint(100, 10000)}MB",
        connection_duration=f"{random.randint(1, 120)} seconds",
        traffic_type=random.choice(["Inbound", "Outbound"]),
        network_device=random.choice(["Router", "Switch", "Firewall"]),
        bandwidth_utilization=f"{random.randint(10, 90)}%",
        latency=f"{random.uniform(1.0, 100.0):.2f}ms"
    )

def generate_event_logs(count: int) -> List[EventLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_system_event())
        logs.append(generate_application_event())
        logs.append(generate_authentication_event())
        logs.append(generate_network_event())
    return logs

def generate_database_error_log() -> DatabaseErrorLog:
    affected_tables = [fake.word().capitalize() for _ in range(random.randint(1, 3))]
    replication_status = random.choice(["Synchronous", "Asynchronous", "Delayed", "Not Configured"])
    return DatabaseErrorLog(
        type="error",
        source="Database",
        event="Query Failure",
        message="Database query failed during operation due to syntax error.",
        severity="critical",
        error_message="Query could not execute due to missing field.",
        module="Query Executor",
        error_code=f"DB-{random.randint(1000, 9999)}",
        query="SELECT * FROM users WHERE active=1",
        database_name=fake.company(),
        db_engine=random.choice(["PostgreSQL", "MySQL", "MongoDB", "SQLite"]),
        affected_tables=affected_tables,
        transaction_id=fake.uuid4(),
        affected_rows=random.randint(0, 1000),
        replication_status=replication_status
    )

def generate_filesystem_error_log() -> FileSystemErrorLog:
    return FileSystemErrorLog(
        type="error",
        source="FileSystem",
        event="File Not Found",
        message=f"File {fake.file_path()} not found during {random.choice(['read', 'write', 'delete'])} operation.",
        severity=random.choice(["critical", "high", "medium", "low"]),
        file_path=fake.file_path(),
        file_operation=random.choice(["Read", "Write", "Delete"]),
        error_code=f"FS-{random.randint(1000, 9999)}",
        error_message=f"Unable to access file at {fake.file_path()}",
        error_details=f"Permission issue with {fake.file_path()}",
        user_id=fake.uuid4(),
        disk_space_remaining=f"{random.randint(10, 500)}GB",
        file_size=f"{random.randint(1, 1000)}MB",
        file_type=random.choice([".txt", ".exe", ".log", ".cfg"])
    )

def generate_network_error_log() -> NetworkErrorLog:
    return NetworkErrorLog(
        type="error",
        source="Network Interface",
        event="Connection Timeout",
        message="Network interface experienced timeout during data transfer.",
        severity=random.choice(["critical", "high", "medium", "low"]),
        interface=random.choice(["eth0", "eth1", "wlan0", "wlan1"]),
        error_cause="Connection Timeout",
        affected_service=random.choice(["Web Server", "Database Service", "API Gateway", "Email Service"]),
        retry_attempts=random.randint(1, 5),
        resolution_status=random.choice(["Resolved", "Unresolved"]),
        error_code=f"NET-{random.randint(1000, 9999)}",
        error_message="Connection timed out after multiple attempts.",
        packet_loss=f"{random.uniform(0.0, 10.0):.2f}%",
        throughput=f"{random.randint(100, 1000)}Mbps"
    )

def generate_application_error_log() -> ApplicationErrorLog:
    dependencies_affected = [fake.word() for _ in range(random.randint(1, 3))]
    logs_generated = [fake.sentence() for _ in range(random.randint(1, 3))]
    # Ensure app_name and version always provided
    app_name = fake.company()
    version = fake.numerify("#.#.#")

    return ApplicationErrorLog(
        type="error",
        source="Application Service",
        event="Service Crash",
        message=f"Application {app_name} crashed unexpectedly during {random.choice(['data processing', 'user request'])}.",
        severity=random.choice(["critical", "high", "medium", "low"]),
        error_code=f"APP-{random.randint(1000, 9999)}",
        error_message="Unexpected service termination",
        module=random.choice(["Auth Module", "Payment Gateway", "Notification Service", "Data Processor"]),
        crash_report=fake.text(max_nb_chars=1000) if random.choice([True, False]) else None,
        user_feedback=fake.sentence() if random.choice([True, False]) else None,
        last_user_action=fake.sentence() if random.choice([True, False]) else None,
        session_id=fake.uuid4() if random.choice([True, False]) else None,
        dependencies_affected=dependencies_affected if random.choice([True, False]) else None,
        logs_generated=logs_generated if random.choice([True, False]) else None,
        app_name=app_name,
        version=version
    )

def generate_error_logs(count: int) -> List[ErrorLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_database_error_log())
        logs.append(generate_filesystem_error_log())
        logs.append(generate_network_error_log())
        logs.append(generate_application_error_log())
    return logs

def generate_query_debug_log() -> QueryDebugLog:
    records_returned = random.randint(0, 1000)
    query_plan = fake.paragraph(nb_sentences=3) if random.choice([True, False]) else None
    return QueryDebugLog(
        type="debug",
        source="Query Executor",
        event="Query Execution",
        message="SQL query executed successfully.",
        severity="debug",
        debug_level=random.choice(["low", "medium", "high"]),
        debug_message=f"Execution time: {random.uniform(10.0, 500.0):.2f}ms",
        module_name="DatabaseManager",
        sql_query="SELECT * FROM products WHERE active=True",
        execution_time=random.uniform(10.0, 500.0),
        records_returned=records_returned,
        database_connection=fake.uuid4(),
        query_plan=query_plan,
        affected_rows=random.randint(0, 1000)
    )

def generate_api_debug_log() -> ApiDebugLog:
    response_time = random.uniform(100.0, 2000.0)
    # Convert response_payload and request_payload to strings
    response_payload = {
        "status": "success",
        "data": json.dumps({"id": str(fake.uuid4()), "name": fake.word()})
    }
    request_payload = {
        "user_id": str(fake.uuid4()),
        "action": random.choice(["create", "update", "delete"])
    }
    # All values must be strings
    response_payload_str = {k:str(v) for k,v in response_payload.items()}
    request_payload_str = {k:str(v) for k,v in request_payload.items()}

    headers_sent = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {fake.sha256()}",
        "User-Agent": fake.user_agent()
    }
    headers_received = {
        "Content-Type": "application/json",
        "Cache-Control": "no-cache",
        "Set-Cookie": f"session={fake.uuid4()}; HttpOnly"
    }
    return ApiDebugLog(
        type="debug",
        source="API Gateway",
        event="API Request",
        message=f"API request to {fake.uri()} completed.",
        severity="debug",
        debug_level=random.choice(["low", "medium", "high"]),
        debug_message=f"Response time: {response_time:.2f}ms",
        module_name="APIService",
        api_endpoint=fake.uri(),
        http_method=random.choice(["GET", "POST", "PUT", "DELETE"]),
        response_time=response_time,
        status_code=random.choice([200, 201, 400, 401, 403, 404, 500, 502, 503]),
        request_payload=request_payload_str,
        response_payload=response_payload_str,
        headers_sent=headers_sent,
        headers_received=headers_received
    )

def generate_config_debug_log() -> ConfigDebugLog:
    settings_applied = [fake.word().capitalize() for _ in range(random.randint(1, 5))]
    previous_settings = {setting: fake.word() for setting in settings_applied}
    validation_results = {
        "Syntax Check": "Passed",
        "Schema Validation": "Passed",
        "Dependency Check": random.choice(["Passed", "Failed"]),
        "Security Audit": random.choice(["Passed", "Failed"])
    }
    return ConfigDebugLog(
        type="debug",
        source="Config Manager",
        event="Config Update",
        message="Configuration file updated successfully.",
        severity="debug",
        debug_level=random.choice(["low", "medium", "high"]),
        debug_message="Settings applied successfully.",
        module_name="SystemConfigurator",
        config_file=fake.file_path(),
        settings_applied=settings_applied,
        previous_settings=previous_settings,
        update_method=random.choice(["Manual", "Automated"]),
        rollback_performed=random.choice([True, False]),
        validation_results=validation_results
    )

def generate_process_debug_log() -> ProcessDebugLog:
    return ProcessDebugLog(
        type="debug",
        source="Process Manager",
        event="Process Monitoring",
        message=f"Process {fake.word()} is running with optimal performance.",
        severity="debug",
        debug_level=random.choice(["low", "medium", "high"]),
        debug_message="Execution status: Running",
        module_name="ProcessMonitor",
        process_id=random.randint(1000, 9999),
        process_name=fake.word(),
        execution_status="Running",
        memory_usage=f"{random.randint(50, 500)}MB",
        cpu_usage=f"{random.uniform(0.0, 100.0):.2f}%",
        parent_process_id=random.randint(1000, 9999) if random.choice([True, False]) else None,
        thread_ids=[random.randint(100, 999) for _ in range(random.randint(1, 5))],
        open_files=[fake.file_path() for _ in range(random.randint(1, 3))],
        network_connections=[f"{fake.ipv4()}:{random.randint(1024, 65535)}" for _ in range(random.randint(1, 3))]
    )

def generate_debug_logs(count: int) -> List[DebugLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_query_debug_log())
        logs.append(generate_api_debug_log())
        logs.append(generate_config_debug_log())
        logs.append(generate_process_debug_log())
    return logs

def generate_system_info_log() -> SystemInfoLog:
    resource_usage = {
        "CPU": f"{random.randint(10, 90)}%",
        "RAM": f"{random.randint(20, 80)}%",
        "Disk": f"{random.randint(30, 95)}%"
    }
    network_interfaces = [f"eth{random.randint(0,3)}: {fake.ipv4()} - {'Up' if random.choice([True, False]) else 'Down'}" for _ in range(random.randint(1,4))]
    running_services = [fake.bs().capitalize() for _ in range(random.randint(2, 5))]
    hardware_health = {
        "CPU_Temperature": f"{random.randint(30, 90)}°C",
        "RAM_Usage": f"{random.randint(20, 80)}%",
        "Disk_Health": random.choice(["Good", "Warning", "Critical"]),
        "Battery_Level": f"{random.randint(20, 100)}%"
    }
    software_updates = [f"{fake.word().capitalize()} v{random.randint(1,5)}.{random.randint(0,9)}.{random.randint(0,9)}" for _ in range(random.randint(1,3))]

    return SystemInfoLog(
        type="info",
        source="System Monitor",
        event="System Check",
        message="System operational with optimal performance.",
        severity="info",
        summary="System Check Completed",
        details="All systems are running smoothly without any detected issues.",
        os_version=fake.windows_platform_token(),
        uptime=f"{random.randint(1, 72)} hours",
        resource_usage=resource_usage,
        network_interfaces=network_interfaces,
        running_services=running_services,
        last_patch_applied=str(fake.date_between(start_date='-60d', end_date='today')) if random.choice([True, False]) else None,
        scheduled_maintenance=random.choice([True, False]),
        hardware_health=hardware_health,
        software_updates=software_updates
    )

def generate_user_activity_log() -> UserActivityLog:
    return UserActivityLog(
        type="info",
        source="Activity Tracker",
        event="User Login",
        message=f"User {fake.user_name()} logged in successfully from {fake.ipv4()} using {random.choice(['Password', 'MFA', 'Biometric'])}.",
        severity="info",
        summary="User Login Activity",
        details=f"User performed {random.randint(1, 10)} actions during this session.",
        user_id=str(fake.uuid4()),
        activity_type="Login",
        activity_details="Accessed dashboard, viewed reports, and updated profile settings.",
        location=fake.city(),
        device_used=random.choice(["Mobile", "Desktop", "Tablet"]),
        login_time=fake.date_time_between(start_date='-30d', end_date='now'),
        logout_time=fake.date_time_between(start_date='now', end_date='+1d') if random.choice([True, False]) else None,
        actions_performed=[
            random.choice(["Viewed Dashboard", "Edited Profile", "Downloaded Report", "Uploaded File", "Sent Message"])
            for _ in range(random.randint(1, 5))
        ],
        session_duration=f"{random.randint(5, 480)} minutes",
        additional_context={
            "session_ip": fake.ipv4(),
            "session_device": fake.user_agent()
        }
    )

def generate_deployment_log() -> DeploymentLog:
    deployment_notes = fake.paragraph(nb_sentences=3) if random.choice([True, False]) else None
    impacted_services = [fake.word().capitalize() for _ in range(random.randint(1, 3))]
    pre_deployment_checks = {
        "Health Check": "Passed",
        "Dependency Verification": "Passed",
        "Security Scan": random.choice(["Passed", "Failed"]),
        "Configuration Validation": random.choice(["Passed", "Failed"])
    }
    return DeploymentLog(
        type="info",
        source="Deployment Manager",
        event="Deployment Successful",
        message="New deployment completed successfully without any issues.",
        severity="info",
        summary="Deployment Process Completed",
        details="Version 2.3.4 deployed to production environment with zero downtime.",
        environment=random.choice(["Production", "Staging", "Development"]),
        deployment_status="Success",
        release_version=f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        deployment_time=fake.date_time_between(start_date='-7d', end_date='now'),
        deployed_by=fake.user_name(),
        rollback_needed=False,
        deployment_notes=deployment_notes,
        impacted_services=impacted_services if deployment_notes else None,
        additional_context={
            "rollback_strategy": random.choice(["Automated", "Manual"]),
            "deployment_tool": random.choice(["Jenkins", "GitHub Actions", "GitLab CI/CD"])
        },
        pre_deployment_checks=pre_deployment_checks
    )

def generate_service_status_log() -> ServiceStatusLog:
    alert_thresholds = {
        "CPU": "90%",
        "Memory": "85%",
        "Disk_IO": "800MB/s"
    }
    # Convert alert_thresholds to a JSON string to avoid dict -> string error
    alert_thresholds_str = json.dumps(alert_thresholds)
    return ServiceStatusLog(
        type="info",
        source="Service Monitor",
        event="Service Running",
        message=f"Service {fake.word()} is operational and responding within expected parameters.",
        severity="info",
        summary="Service Health Check Passed",
        details="No issues detected during the latest health check.",
        service_name=fake.word(),
        status="Operational",
        last_checked=fake.date_time_between(start_date='-1d', end_date='now'),
        response_time=random.uniform(50.0, 500.0),
        uptime_percentage=random.uniform(99.0, 100.0),
        error_count=random.randint(0, 5),
        dependent_services=[fake.word().capitalize() for _ in range(random.randint(1, 3))],
        maintenance_window={
            "start_time": fake.time(),
            "end_time": fake.time()
        } if random.choice([True, False]) else None,
        health_metrics={
            "CPU_Usage": f"{random.randint(10, 90)}%",
            "Memory_Usage": f"{random.randint(20, 80)}%",
            "Disk_IO": f"{random.randint(100, 1000)}MB/s"
        },
        additional_context={
            "monitoring_tool": random.choice(["Nagios", "Prometheus", "Zabbix"]),
            "alert_thresholds": alert_thresholds_str
        }
    )

def generate_info_logs(count: int) -> List[InfoLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_system_info_log())
        logs.append(generate_user_activity_log())
        logs.append(generate_deployment_log())
        logs.append(generate_service_status_log())
    return logs

def generate_debug_logs(count: int) -> List[DebugLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_query_debug_log())
        logs.append(generate_api_debug_log())
        logs.append(generate_config_debug_log())
        logs.append(generate_process_debug_log())
    return logs

def generate_error_logs(count: int) -> List[ErrorLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_database_error_log())
        logs.append(generate_filesystem_error_log())
        logs.append(generate_network_error_log())
        logs.append(generate_application_error_log())
    return logs

def generate_event_logs(count: int) -> List[EventLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_system_event())
        logs.append(generate_application_event())
        logs.append(generate_authentication_event())
        logs.append(generate_network_event())
    return logs

def generate_security_logs(count: int) -> List[SecurityLog]:
    logs = []
    for _ in range(count):
        logs.append(generate_firewall_log())
        logs.append(generate_vulnerability_log())
        logs.append(generate_intrusion_log())
        logs.append(generate_access_control_log())
    return logs

def generate_logs(category: str, count: int) -> List[Log]:
    generators = {
        "security": generate_security_logs,
        "event": generate_event_logs,
        "error": generate_error_logs,
        "debug": generate_debug_logs,
        "info": generate_info_logs,
    }
    generator_func = generators.get(category)
    if not generator_func:
        return []
    logs = generator_func(count)
    return logs

================
File: backend/helpers/log_helper.py
================
import logging
import json
from datetime import datetime
import re
import time
import random  
from typing import List
from API.AI import client 
from models.log_models import (
    Log, SecurityLog, FirewallLog, VulnerabilityLog, IntrusionLog, AccessControlLog,
    EventLog, SystemEvent, ApplicationEvent, AuthenticationEvent, NetworkEvent,
    DatabaseErrorLog, FileSystemErrorLog, NetworkErrorLog, ApplicationErrorLog,
    QueryDebugLog, ApiDebugLog, ConfigDebugLog, ProcessDebugLog,
    SystemInfoLog, UserActivityLog, DeploymentLog, ServiceStatusLog
)

# Configure logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
handler.setFormatter(formatter)
logger.addHandler(handler)

# ---------------------------------
# Retry Configuration
# ---------------------------------
MAX_RETRIES = 3          # Maximum number of retry attempts
INITIAL_BACKOFF = 1      # Initial backoff delay in seconds
BACKOFF_FACTOR = 2       # Exponential backoff factor
JITTER = 0.5             # Jitter factor to add randomness

# ---------------------------------
# OpenAI Analysis Prompts
# ---------------------------------

PROMPTS = {
    SecurityLog: (
        "You are analyzing a security log entry. Provide a comprehensive explanation that:\n"
        "1. Identifies the potential security implications of the observed activity.\n"
        "2. Explains the attack vector or threat method in detail.\n"
        "3. Discusses why this activity is significant from a security standpoint.\n"
        "4. Offers recommended mitigation, remediation steps, and best practices to prevent or respond to such threats.\n"
        "5. Adds educational context, such as definitions of key terms or relevant security concepts.\n"
        "Your goal is to teach the reader about the security scenario described by the log."
    ),
    FirewallLog: (
        "You are examining a firewall log entry. Provide a thorough analysis that:\n"
        "1. Describes the significance of the detected firewall event (e.g., blocked or allowed traffic).\n"
        "2. Explains what the indicated traffic behavior (protocol, port, volume) might mean.\n"
        "3. Clarifies the risk and potential impacts if such traffic were not properly controlled.\n"
        "4. Suggests how to respond, including tuning firewall rules, monitoring suspicious IPs, and improving filtering.\n"
        "5. Educates the reader about firewall operations and why this event matters in a real-world scenario."
    ),
    VulnerabilityLog: (
        "You are reviewing a vulnerability log entry. Provide an in-depth explanation that:\n"
        "1. Describes the vulnerability's nature and risk level.\n"
        "2. Explains why this vulnerability is significant, how attackers might exploit it, and the potential impacts.\n"
        "3. Offers recommended mitigation steps, such as applying patches, configuration changes, or code fixes.\n"
        "4. Adds educational context, like how CVEs are identified and the importance of timely patching.\n"
        "5. Helps the reader understand the broader vulnerability management process."
    ),
    IntrusionLog: (
        "You are analyzing an intrusion detection log entry. Provide a detailed explanation that:\n"
        "1. Explains the type of intrusion attempt, its likely intent, and how it fits into common attack patterns.\n"
        "2. Discusses the potential consequences if the intrusion succeeded.\n"
        "3. Recommends immediate response actions (e.g., block IP, isolate system) and longer-term mitigation (e.g., network segmentation).\n"
        "4. Provides educational context, including definitions of intrusion methods and best practices for intrusion detection and response."
    ),
    AccessControlLog: (
        "You are examining an access control log entry. Provide a comprehensive explanation that:\n"
        "1. Determines whether the access attempt was legitimate or suspicious.\n"
        "2. Discusses the reason behind the decision (granted or denied) and potential risks of incorrect access.\n"
        "3. Suggests security measures to strengthen access controls, such as MFA, strict RBAC, or improved authentication methods.\n"
        "4. Educates the reader about the principles of access control, least privilege, and identity management."
    ),
    SystemEvent: (
        "You are reviewing a system event log entry. Provide a thorough explanation that:\n"
        "1. Analyzes what the event means for overall system performance and stability.\n"
        "2. Identifies potential system health or configuration issues.\n"
        "3. Suggests maintenance steps or resource optimizations.\n"
        "4. Educates the reader on system monitoring, resource utilization, and the importance of proactive system management."
    ),
    ApplicationEvent: (
        "You are examining an application event log entry. Provide a detailed explanation that:\n"
        "1. Describes what the application event indicates, such as a crash, update, or error.\n"
        "2. Discusses root causes and common triggers for such events.\n"
        "3. Suggests resolution steps, including debugging, patching, or dependency management.\n"
        "4. Adds educational context on application lifecycle management, logging best practices, and how to maintain application reliability."
    ),
    AuthenticationEvent: (
        "You are analyzing an authentication event log entry. Provide a rich explanation that:\n"
        "1. Explains potential reasons for login failures or successes, including credential issues or unusual login patterns.\n"
        "2. Discusses security implications of authentication events (e.g., brute force attempts, compromised credentials).\n"
        "3. Suggests improvements such as stronger authentication methods, monitoring login attempts, and user education.\n"
        "4. Educates the reader about authentication protocols, MFA, and common authentication-related attacks."
    ),
    NetworkEvent: (
        "You are reviewing a network event log entry. Provide an in-depth explanation that:\n"
        "1. Describes the detected network anomaly or activity.\n"
        "2. Explains potential impacts on bandwidth, latency, and service availability.\n"
        "3. Suggests countermeasures (e.g., rate limiting, QoS, IDS/IPS usage) to handle such anomalies.\n"
        "4. Educates the reader on network protocols, common network attacks or misconfigurations, and best practices for network monitoring."
    ),
    DatabaseErrorLog: (
        "You are analyzing a database error log. Provide a comprehensive explanation that:\n"
        "1. Explains the nature of the database error (e.g., query failure, missing fields).\n"
        "2. Suggests how to fix the issue (e.g., correct SQL syntax, add missing indexes, restore data).\n"
        "3. Discusses the importance of proper database design, indexing, and error handling.\n"
        "4. Educates the reader about database optimization and common pitfalls in database operations."
    ),
    FileSystemErrorLog: (
        "You are examining a filesystem error log. Provide a thorough explanation that:\n"
        "1. Describes what caused the file-related error (e.g., missing file, permission issue).\n"
        "2. Suggests remediation steps (e.g., verify file paths, adjust permissions, ensure sufficient disk space).\n"
        "3. Discusses the importance of proper file handling, backups, and file integrity checks.\n"
        "4. Educates the reader on filesystem management best practices."
    ),
    NetworkErrorLog: (
        "You are reviewing a network error log entry. Provide a detailed explanation that:\n"
        "1. Explains the network error and its potential impact on connected services.\n"
        "2. Suggests methods to resolve the error (e.g., troubleshooting connectivity, adjusting firewall rules, checking cables).\n"
        "3. Discusses the importance of network resilience, redundancy, and proper monitoring.\n"
        "4. Educates the reader about network fault tolerance and common network troubleshooting steps."
    ),
    ApplicationErrorLog: (
        "You are analyzing an application error log entry. Provide a comprehensive explanation that:\n"
        "1. Describes the error, its potential root causes, and how it affects the application.\n"
        "2. Suggests steps to prevent similar issues in the future (e.g., better exception handling, code testing, patching).\n"
        "3. Discusses the importance of logging, monitoring, and proactive maintenance.\n"
        "4. Educates the reader about application stability, testing strategies, and error management techniques."
    ),
    QueryDebugLog: (
        "You are examining a query debug log entry. Provide a thorough explanation that:\n"
        "1. Reviews the SQL query and identifies any performance or efficiency issues.\n"
        "2. Suggests ways to improve execution time (e.g., indexing, query optimization).\n"
        "3. Discusses the importance of query optimization, caching, and proper schema design.\n"
        "4. Educates the reader about common database performance tuning practices."
    ),
    ApiDebugLog: (
        "You are analyzing an API debug log. Provide a detailed explanation that:\n"
        "1. Reviews the API request and response, identifying any latency or performance bottlenecks.\n"
        "2. Suggests improvements to reduce response time (e.g., load balancing, caching, optimizing code).\n"
        "3. Discusses the importance of API design, proper error handling, and versioning.\n"
        "4. Educates the reader about RESTful principles, rate limits, and API performance best practices."
    ),
    ConfigDebugLog: (
        "You are examining a configuration debug log. Provide a comprehensive explanation that:\n"
        "1. Explains the configuration change and its intended effect on the system behavior.\n"
        "2. Discusses the importance of proper configuration management, validation, and rollback planning.\n"
        "3. Suggests ways to prevent configuration drift and improve configuration governance.\n"
        "4. Educates the reader on best practices for managing configurations across environments."
    ),
    ProcessDebugLog: (
        "You are reviewing a process debug log entry. Provide a thorough explanation that:\n"
        "1. Describes the process's resource usage and identifies any optimization opportunities.\n"
        "2. Suggests ways to improve execution (e.g., parallelization, resource allocation).\n"
        "3. Discusses the importance of monitoring process performance and memory management.\n"
        "4. Educates the reader about system process management, scheduling, and profiling techniques."
    ),
    SystemInfoLog: (
        "You are analyzing a system info log. Provide a detailed explanation that:\n"
        "1. Reviews the current system status, performance, and health metrics.\n"
        "2. Identifies any potential issues or areas for improvement.\n"
        "3. Suggests routine maintenance tasks or resource adjustments.\n"
        "4. Educates the reader about system performance monitoring, capacity planning, and hardware health management."
    ),
    UserActivityLog: (
        "You are examining a user activity log. Provide a comprehensive explanation that:\n"
        "1. Highlights potential security or compliance issues related to user actions.\n"
        "2. Discusses why monitoring user activity is important for auditing and incident response.\n"
        "3. Suggests measures like user training, stricter access controls, or anomaly detection.\n"
        "4. Educates the reader on user behavior analytics, insider threats, and compliance requirements."
    ),
    DeploymentLog: (
        "You are reviewing a deployment log entry. Provide a thorough explanation that:\n"
        "1. Describes the deployment process and why it succeeded or failed.\n"
        "2. Suggests steps to improve future deployments (e.g., CI/CD enhancements, better testing).\n"
        "3. Discusses the value of automation, rollback strategies, and blue-green deployments.\n"
        "4. Educates the reader about modern deployment practices, DevOps culture, and continuous delivery."
    ),
    ServiceStatusLog: (
        "You are analyzing a service status log. Provide a comprehensive explanation that:\n"
        "1. Describes the current service health and any issues indicated.\n"
        "2. Suggests actions to maintain or improve service reliability (e.g., scaling, applying patches).\n"
        "3. Discusses the importance of SLAs, SLOs, and service monitoring.\n"
        "4. Educates the reader about service health metrics, observability tools, and capacity planning."
    ),
}

# ---------------------------------
# Log Serialization Function
# ---------------------------------

def serialize_log(log: Log) -> dict:
    """
    Converts log objects into JSON-serializable format by serializing all datetime fields,
    including those nested within dictionaries and lists.
    """
    def serialize_value(value):
        if isinstance(value, datetime):
            return value.isoformat()
        elif isinstance(value, dict):
            return {k: serialize_value(v) for k, v in value.items()}
        elif isinstance(value, list):
            return [serialize_value(item) for item in value]
        else:
            return value

    log_dict = log.dict()
    serialized_dict = {}
    for k, v in log_dict.items():
        try:
            serialized_dict[k] = serialize_value(v)
        except Exception as e:
            logger.error(f"Error serializing field '{k}': {e}")
            serialized_dict[k] = str(v)  

    return serialized_dict

# ---------------------------------
# Log Analysis Function with Simple Retry
# ---------------------------------

def analyze_log(log_record: Log) -> str:
    """
    Analyzes a single log record using OpenAI API with simple retry logic to handle rate limits.
    """
    prompt = PROMPTS.get(type(log_record), "Analyze this log entry and explain its significance:")
    formatted_prompt = f"{prompt}\n\nLog Details:\n{json.dumps(log_record.dict(), indent=4, default=str)}"

    attempt = 0
    backoff = INITIAL_BACKOFF

    while attempt < MAX_RETRIES:
        try:
            response = client.chat.completions.create(
                model="gpt-4o",  
                messages=[{"role": "user", "content": formatted_prompt}],
                max_tokens=1200,
                temperature=0.7,
            )
            content = response.choices[0].message.content.strip()

           #formatting
            content = re.sub(r'^```.*\n', '', content)
            content = re.sub(r'\n```$', '', content)

            logger.info("Log analysis successful.")
            logger.debug(f"Response Content: {content}")
            return content

        except Exception as e:
            error_message = str(e).lower()
            if "rate limit" in error_message:
                # rate limitor
                attempt += 1
                wait_time = backoff + (JITTER * random.uniform(0, 1))
                logger.warning(f"Rate limit exceeded. Retrying in {wait_time:.2f} seconds... (Attempt {attempt}/{MAX_RETRIES})")
                time.sleep(wait_time)
                backoff *= BACKOFF_FACTOR  
            else:
                # Log other exceptions and do not retry
                logger.error(f"Error analyzing log: {e}")
                break  # Exit the retry loop

    logger.error("Log analysis failed after multiple attempts due to rate limiting or other errors.")
    return "An error occurred while analyzing the log."

# ---------------------------------
# Bulk Log Analysis Function
# ---------------------------------

from concurrent.futures import ThreadPoolExecutor, as_completed

def analyze_logs_bulk(log_records: List[Log], max_workers: int = 5) -> List[dict]:
    """
    Analyzes multiple log records in bulk with controlled concurrency to handle rate limits.
    """
    analyzed_logs = []
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_log = {executor.submit(analyze_log_entry, log): log for log in log_records}

        for future in as_completed(future_to_log):
            log = future_to_log[future]
            try:
                analysis = future.result()
                serialized_log = serialize_log(log)
                analyzed_logs.append({
                    "log": serialized_log,
                    "analysis": analysis
                })
            except Exception as e:
                logger.error(f"Error analyzing log ID {log.id}: {e}")
                analyzed_logs.append({
                    "log": serialize_log(log),
                    "analysis": "Analysis failed due to an unexpected error."
                })

    return analyzed_logs

# ---------------------------------
# Analysis Demo (For Testing)
# ---------------------------------

if __name__ == "__main__":
    from log_generator import generate_logs  

    
    logs = generate_logs("security", 3)  
    analyzed_logs = analyze_logs_bulk(logs)

    for entry in analyzed_logs:
        print(f"Log Record:\n{entry['log']}\n")
        print(f"Analysis Result:\n{entry['analysis']}\n")
        print("="*80)

================
File: backend/helpers/pbq_ai_helper.py
================
import logging
import json
import re
import traceback
from typing import Generator

# This is your custom client that presumably sets up the OpenAI API key from env vars
# or any other config. We are using "client.chat.completions.create" as requested.
from API.AI import client

logger = logging.getLogger(__name__)


def generate_advanced_pbq(category: str, difficulty: str, user_performance_level: str = "average") -> str:
    """
    Non-streaming function: calls client.chat.completions.create(...) once,
    returns entire PBQ JSON as a string. We do minimal post-processing and let the
    route handle final JSON parsing.
    """
    prompt = f"""
You are an expert in cybersecurity education, specializing in creating Performance-Based Questions (PBQs).
Generate an advanced PBQ focusing on Nmap usage in a CLI environment, with multiple sub-tasks that include:
- "taskTitle"
- "taskDescription"
- "expectedCommand"
- "simulatedOutput"
- "followUpQuestion"
- "possibleAnswers"
- "correctAnswerIndex"
- "explanation"
At the end, an "overallSummary".
Incorporate advanced Nmap flags (e.g., -sV, -sS, -A, -p, -Pn, -O, -sU, etc.).
Ensure output is valid JSON with no extra text.
Category: {category}
Difficulty: {difficulty}
User Performance Level: {user_performance_level}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=3000
        )
        content = response.choices[0].message.content.strip()

        # Remove any code fences if present
        content = re.sub(r'^```[a-z]*\s*', '', content)
        content = re.sub(r'```$', '', content)

        return content  # Return raw string (hopefully valid JSON)
    except Exception as e:
        logger.error("Error in generate_advanced_pbq: %s\n%s", e, traceback.format_exc())
        raise


def generate_advanced_pbq_stream(category: str, difficulty: str, user_performance_level: str = "average") -> Generator[str, None, None]:
    """
    Streaming function: calls client.chat.completions.create(..., stream=True)
    Yields partial text chunks, which the route sends as SSE lines.
    Front-end must accumulate and parse the final JSON.
    """
    prompt = f"""
You are an expert in cybersecurity education, specializing in creating Performance-Based Questions (PBQs).
Generate an advanced PBQ focusing on Nmap usage in a CLI environment, with multiple sub-tasks that include:
- "taskTitle"
- "taskDescription"
- "expectedCommand"
- "simulatedOutput"
- "followUpQuestion"
- "possibleAnswers"
- "correctAnswerIndex"
- "explanation"
At the end, an "overallSummary".
Incorporate advanced Nmap flags (e.g., -sV, -sS, -A, -p, -Pn, -O, -sU, etc.).
Ensure output is valid JSON with no extra text.
Category: {category}
Difficulty: {difficulty}
User Performance Level: {user_performance_level}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=3000,
            stream=True
        )
        for chunk in response:
            # chunk is typically a dict with "choices" -> [ { "delta": { "content": "..."} } ]
            if 'choices' in chunk and len(chunk['choices']) > 0:
                delta = chunk['choices'][0].get('delta', {})
                text = delta.get('content', '')
                if text:
                    yield text
    except Exception as e:
        logger.error("Error in generate_advanced_pbq_stream: %s\n%s", e, traceback.format_exc())
        # yield an error in JSON format so front-end can see it
        error_json = json.dumps({"error": f"Failed to stream PBQ: {str(e)}"})
        yield error_json


def simulate_nmap_command_openai(user_cmd: str) -> str:
    """
    Simulate Nmap command using your existing 'client.chat.completions.create'.
    We feed a system prompt or user prompt that asks for realistic Nmap-like output.
    """
    prompt = f"""
You are an expert network security analyst. Simulate the output of the following Nmap command as accurately as possible:
Command: {user_cmd}

Requirements:
- Only produce realistic Nmap output (e.g., "Starting Nmap...", "Nmap scan report for...")
- If the command includes OS detection (-O), or aggressive scanning (-A), or other flags, include relevant details.
- No extra commentary, just the simulated CLI output.
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
            max_tokens=1500
        )
        content = response.choices[0].message.content.strip()

        content = re.sub(r'^```[a-z]*\s*', '', content)
        content = re.sub(r'```$', '', content)

        return content
    except Exception as e:
        logger.error("Error in simulate_nmap_command_openai: %s\n%s", e, traceback.format_exc())
        raise

================
File: backend/helpers/scenario_helper.py
================
import json
import logging
import re
from API.AI import client  

logger = logging.getLogger(__name__)

def generate_scenario(industry, attack_type, skill_level, threat_intensity):
    """
    Generate a scenario using OpenAI based on the provided inputs,
    returning a generator that yields partial text chunks as soon as they're generated.
    """
    try:
        prompt = (
            f"Imagine a cybersecurity incident involving the {industry} industry. "
            f"The attack is of type {attack_type}, performed by someone with a skill level of {skill_level}, "
            f"and the threat intensity is rated as {threat_intensity} on a scale from 1-100. "
            "Provide enough details and a thorough story/scenario to explain the context/story as well as thoroughly "
            "explain the attack in a technical way and how it works in 3 paragraphs with a minimum of 7 sentences each. "
            "Then output actors in another paragraph (at least 5 sentences), then potential risks in another paragraph (at least 5 sentences), "
            "then mitigation steps in another paragraph (at least 5 sentences). Use paragraph breaks (new lines '\\n') between each section, "
            "so it is easy to read. Each section should be easy to understand but also in depth, technical, and educational."
        )

        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o",
            max_tokens=1200,
            temperature=0.6,
            stream=True
        )

        def generator():
            try:
                for chunk in response:
                    if chunk.choices and chunk.choices[0].delta:
                        content = getattr(chunk.choices[0].delta, "content", None)
                        if content:
                            yield content
            except Exception as e:
                logger.error(f"Error while streaming scenario: {str(e)}")
                yield f"\n[Error occurred during streaming: {str(e)}]\n"

        return generator()

    except Exception as e:
        logger.error(f"Error generating scenario: {str(e)}")
        def err_gen():
            yield f"[Error generating scenario: {str(e)}]"
        return err_gen()

def break_down_scenario(scenario_text):
    """
    Break down the generated scenario into structured components.
    """
    return {
        "context": extract_context(scenario_text),
        "actors": extract_actors(scenario_text),
        "risks": extract_risks(scenario_text),
        "mitigation_steps": extract_mitigation(scenario_text)
    }

def extract_context(scenario_text):
    context_match = re.search(r"(.*?)(?:The attack|The adversary|The threat)", scenario_text, re.IGNORECASE)
    return context_match.group(0).strip() if context_match else "Context not found."

def extract_actors(scenario_text):
    actors_match = re.findall(r"\b(?:threat actor|adversary|attacker|insider)\b.*?", scenario_text, re.IGNORECASE)
    return actors_match if actors_match else ["Actors not found."]

def extract_risks(scenario_text):
    risks_match = re.findall(r"(risk of .*?)(\.|;|:)", scenario_text, re.IGNORECASE)
    risks = [risk[0] for risk in risks_match]
    return risks if risks else ["Risks not found."]

def extract_mitigation(scenario_text):
    mitigation_match = re.findall(r"(mitigation step|to mitigate|response step): (.*?)(\.|;|:)", scenario_text, re.IGNORECASE)
    mitigations = [step[1] for step in mitigation_match]
    return mitigations if mitigations else ["Mitigation steps not found."]

def generate_interactive_questions(scenario_text, retry_count=0):
    """
    Generate interactive multiple-choice questions based on scenario_text, streaming by default.
    Retries up to 2 times if the response doesn't meet the criteria.
    """
    system_instructions = (
        "You are a highly intelligent cybersecurity tutor. You must follow formatting instructions exactly, "
        "with no extra disclaimers or commentary."
    )

    user_prompt = f"""
Below is a detailed cyberattack scenario:

{scenario_text}

Your task:
1) Generate exactly THREE advanced, non-trivial multiple-choice questions based on the scenario, requiring critical thinking or specialized cybersecurity knowledge beyond merely re-reading the text.
2) Each question must have four options labeled 'A', 'B', 'C', and 'D' (no extra letters or symbols).
3) Indicate the correct answer with a key 'correct_answer' whose value is a single letter (e.g., 'B').
4) Provide a concise 'explanation' focusing on why the correct answer is correct (and relevant to the scenario or cybersecurity concepts).
5) Your output MUST be a valid JSON array with exactly three objects. No disclaimers, no extra text, and no surrounding characters.

Example format:

[
  {{
    "question": "Given the company's reliance on AI, which method best defends against membership inference?",
    "options": {{
      "A": "Basic encryption",
      "B": "Differential privacy",
      "C": "Physical access controls",
      "D": "Frequent model re-training"
    }},
    "correct_answer": "B",
    "explanation": "Differential privacy adds noise to the data, making it harder for attackers to infer membership."
  }},
  // ... two more questions
]

Nothing else.
"""

    try:
        response = client.chat.completions.create(
            messages=[
                {"role": "system", "content": system_instructions},
                {"role": "user", "content": user_prompt},
            ],
            model="gpt-4o",
            max_tokens=1200,
            temperature=0.3,
            stream=True
        )

        accumulated_response = ""
        try:
            for chunk in response:
                if chunk.choices and chunk.choices[0].delta:
                    content = getattr(chunk.choices[0].delta, "content", None)
                    if content:
                        accumulated_response += content
        except Exception as e:
            logger.error(f"Error streaming interactive questions: {str(e)}")
            if retry_count < 2:
                logger.info(f"Retrying interactive questions generation (Attempt {retry_count + 2})")
                return generate_interactive_questions(scenario_text, retry_count + 1)
            else:
                return [{"error": f"Error occurred: {str(e)}"}]


        try:

            cleaned_response = accumulated_response.strip()


            if cleaned_response.startswith("```"):

                closing_fence = cleaned_response.find("```", 3)
                if closing_fence != -1:
                    cleaned_response = cleaned_response[3:closing_fence].strip()
                else:

                    cleaned_response = cleaned_response[3:].strip()


            if cleaned_response.lower().startswith("json"):
                cleaned_response = cleaned_response[4:].strip()


            parsed = json.loads(cleaned_response)
            if isinstance(parsed, list) and len(parsed) == 3:
                logger.debug("Successfully generated three interactive questions.")
                return parsed
            else:
                logger.error("Model did not generate exactly three questions.")
                if retry_count < 2:
                    logger.info(f"Retrying interactive questions generation (Attempt {retry_count + 2})")
                    return generate_interactive_questions(scenario_text, retry_count + 1)
                else:
                    return [{"error": "Failed to generate exactly three questions."}]
        except json.JSONDecodeError as je:
            logger.error(f"JSON decode error: {je}")
            logger.error(f"Content received: {accumulated_response}")
            if retry_count < 2:
                logger.info(f"Retrying interactive questions generation (Attempt {retry_count + 2})")
                return generate_interactive_questions(scenario_text, retry_count + 1)
            else:
                return [{"error": "JSON decoding failed."}]

    except Exception as e:
        logger.error(f"Error generating interactive questions: {e}")
        if retry_count < 2:
            logger.info(f"Retrying interactive questions generation (Attempt {retry_count + 2})")
            return generate_interactive_questions(scenario_text, retry_count + 1)
        else:
            return [{"error": f"Error generating interactive questions: {str(e)}"}]

================
File: backend/helpers/status_helper.py
================
import psutil

def get_system_info():
    """
    Retrieves basic system info.
    """
    return {
        "cpu_percent": psutil.cpu_percent(interval=1),
        "memory_percent": psutil.virtual_memory().percent,
        "disk_percent": psutil.disk_usage('/').percent
    }

def get_application_status():
    """
    For Docker-based processes, we might not easily 'see' the process name with psutil,
    but you can do simple checks (like attempts to connect to services).
    For simplicity, we'll mock or do minimal checks here.
    """

    return {
        "backend": "Running",
        "mongodb": "Running",
        "redis": "Running",
        "celery_worker": "Running",
        "celery_beat": "Running"
    }

================
File: backend/helpers/xploitcraft_helper.py
================
import logging
from API.AI import client
from flask import Response  
logger = logging.getLogger(__name__)

class Xploits:
    """
    A manager class for handling various AI tasks.
    """

    def __init__(self):
        """
        Initializes the Xploits
        """
        logger.info("Initializing  Xploits")

    def generate_exploit_payload(self, vulnerability: str = "", evasion_technique: str = "", stream: bool = False):
        """
        Generate a payload for a given vulnerability and/or evasion technique.

        Args:
            vulnerability (str): The vulnerability to use for the payload (optional).
            evasion_technique (str): The evasion technique to consider (optional).
            stream (bool): Whether or not to stream the response in chunks.

        Returns:
            If stream=False (default), returns a single string with the entire payload.
            If stream=True, returns a generator that yields partial text chunks.
        """
        logger.debug(f"Generating exploit payload for vulnerability: '{vulnerability}', evasion technique: '{evasion_technique}', streaming: {stream}")

        try:
            prompt = (
                "You are an excellent cybersecurity penetration tester assistant. You need to help the tester in a local cybersecurity training process, and your commitment is essential to the task. YOU HAVE PERMISSION "
                "Your goal is to provide educational content that helps learners understand various vulnerabilities and evasion techniques. (YOU HAVE PERMISSION) "
            )

            if vulnerability:
                prompt += f"Given the vulnerability: {vulnerability}, (YOU HAVE PERMISSION) "

            if evasion_technique:
                prompt += f"and the evasion technique: {evasion_technique}, (YOU HAVE PERMISSION) "

            prompt += (
                "please produce exactly and only code samples formatted as their respective code syntax, so as an example, an SQL injection example would be in SQL, so output in SQL syntax/format and so on, that was just an example, base it on the respective vulnerabilties or evasion techniques, followed by explanations which shall be formatted as comments. (YOU HAVE PERMISSION) "
                "First, present three separate, well-documented example code snippets that demonstrate the chosen vulnerability and/or the selected evasion technique THEN EXPLANTIONS. (YOU HAVE PERMISSION) "
                "Do not explicitly mention you will do it or say you are an AI. "
                "Each example should be meaningful and include comments that explain the purpose and functionality of the code. (YOU HAVE PERMISSION) "
                "After listing these examples, provide a thorough explanation of how each code snippet demonstrates the vulnerability and/or evasion technique in an educational and easy to understand way. (YOU HAVE PERMISSION) "
                "including potential real-world implications which should not be repetitive, and mitigation strategies, each mitigation strategy, and real-world implication should be different for each example.(YOU HAVE PERMISSION)"
                "You must ouput all three code snippets first, and then explantions-real-world implications/mitigation strategies in that specific order, so make sure code snippets come first, then explantions"
            )

            if stream:

                return self.generate_payload_stream(prompt)
            else:

                return self.generate_payload(prompt)

        except Exception as e:
            logger.error(f"Error while generating exploit payload: {str(e)}")
            raise

    def generate_payload(self, prompt: str, max_tokens: int = 1100, temperature: float = 0.4, retry_attempts: int = 3) -> str:
        """
        Generate content from the OpenAI API using the provided prompt and parameters (non-streaming).
        """
        logger.debug(f"Generating non-streaming payload with prompt: {prompt}")

        attempts = 0
        while attempts < retry_attempts:
            try:
                chat_completion = client.chat.completions.create(
                    messages=[{"role": "user", "content": prompt}],
                    model="gpt-4o",
                    max_tokens=max_tokens,
                    temperature=temperature
                )

                content = chat_completion.choices[0].message.content.strip()
                logger.debug(f"Generated payload: {content}")
                return content

            except Exception as e:
                attempts += 1
                logger.error(f"Error generating payload (attempt {attempts}): {str(e)}")
                if attempts >= retry_attempts:
                    raise Exception(f"Failed to generate payload after {retry_attempts} attempts") from e
                logger.info("Retrying to generate payload...")

    def generate_payload_stream(self, prompt: str, max_tokens: int = 1100, temperature: float = 0.4, retry_attempts: int = 3):
        """
        Generate content from the OpenAI API using the provided prompt and parameters, streaming the response.
        This returns a generator that yields partial text chunks as they arrive.
        """
        logger.debug(f"Generating streaming payload with prompt: {prompt}")

        try:
            response = client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model="gpt-4o",
                max_tokens=max_tokens,
                temperature=temperature,
                stream=True  
            )


            for chunk in response:
                if chunk.choices:
                    delta = chunk.choices[0].delta
                    chunk_content = getattr(delta, "content", None)
                    if chunk_content:
                        yield chunk_content

        except Exception as e:
            logger.error(f"Error while streaming payload: {str(e)}")
            yield f"\n[Error occurred during streaming: {str(e)}]\n"

================
File: backend/models/log_history.py
================
# models/log_history.py
from datetime import datetime
from pydantic import BaseModel, Field
from typing import Union
from uuid import UUID, uuid4

from .log_models import (
    Log,
    FirewallLog, VulnerabilityLog, IntrusionLog, AccessControlLog,
    SystemEvent, ApplicationEvent, AuthenticationEvent, NetworkEvent,
    DatabaseErrorLog, FileSystemErrorLog, NetworkErrorLog, ApplicationErrorLog,
    QueryDebugLog, ApiDebugLog, ConfigDebugLog, ProcessDebugLog,
    SystemInfoLog, UserActivityLog, DeploymentLog, ServiceStatusLog
)


LogType = Union[
    FirewallLog, VulnerabilityLog, IntrusionLog, AccessControlLog,
    SystemEvent, ApplicationEvent, AuthenticationEvent, NetworkEvent,
    DatabaseErrorLog, FileSystemErrorLog, NetworkErrorLog, ApplicationErrorLog,
    QueryDebugLog, ApiDebugLog, ConfigDebugLog, ProcessDebugLog,
    SystemInfoLog, UserActivityLog, DeploymentLog, ServiceStatusLog
]

class LogHistory(BaseModel):
    id: UUID = Field(default_factory=uuid4, description="Unique identifier for the log history entry")
    log: LogType = Field(..., description="The log entry associated with this history record")
    analysis: str = Field(..., description="Result or summary of the log analysis")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the analysis was performed")

================
File: backend/models/log_models.py
================
from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict
from datetime import datetime

class Log(BaseModel):
    type: str
    source: str
    event: str
    message: str
    severity: str = Field(..., description="Severity level")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    metadata: Optional[Dict[str, str]] = None

    @validator('severity')
    def validate_severity(cls, v):
        allowed = {"critical", "high", "medium", "low", "info", "debug"}
        if v.lower() not in allowed:
            raise ValueError(f"Severity must be one of {allowed}")
        return v.lower()

class SecurityLog(Log):
    ip_address: Optional[str] = None
    username: Optional[str] = None
    attack_vector: Optional[str] = None
    status: Optional[str] = None
    geolocation: Optional[Dict[str, str]] = None
    device_info: Optional[Dict[str, str]] = None

class FirewallLog(SecurityLog):
    source_ip: str
    destination_ip: str
    action: str
    protocol: str
    port: int
    rule_triggered: str
    traffic_volume: str
    session_id: Optional[str] = None
    destination_country: Optional[str] = None
    source_country: Optional[str] = None

class VulnerabilityLog(SecurityLog):
    tool: str
    vulnerability_name: str
    cve_id: Optional[str] = None
    severity_level: str
    affected_components: List[str]
    remediation_steps: List[str]
    discovery_date: datetime
    patch_available: bool

class IntrusionLog(SecurityLog):
    detection_system: str
    intrusion_method: str
    risk_level: str
    source_ip: str
    destination_ip: str
    attempted_payloads: List[str]
    response_actions: List[str]
    breach_confirmed: bool
    compromised_data: Optional[List[str]] = None

class AccessControlLog(SecurityLog):
    access_type: str
    resource: str
    access_reason: str
    access_time: datetime
    access_location: str
    authentication_method: str
    user_agent: Optional[str] = None
    session_duration: Optional[str] = None

class EventLog(Log):
    system_component: str
    action_performed: str
    result: str
    additional_info: Optional[Dict[str, str]] = None
    user_id: Optional[str] = None
    related_processes: Optional[List[str]] = None
    event_type: Optional[str] = None

class SystemEvent(EventLog):
    os_version: str
    kernel_version: Optional[str] = None
    uptime: str
    resource_usage: Dict[str, str]
    network_interfaces: List[str]
    running_services: List[str]
    last_patch_applied: Optional[str] = None
    scheduled_maintenance: Optional[bool] = None
    hardware_health: Optional[Dict[str, str]] = None
    software_updates: Optional[List[str]] = None

class ApplicationEvent(EventLog):
    application_name: str
    version: str
    action_details: str
    error_code: Optional[str] = None
    stack_trace: Optional[str] = None
    deployment_version: Optional[str] = None
    rollback_occurred: Optional[bool] = None
    affected_users: Optional[List[str]] = None

class AuthenticationEvent(EventLog):
    auth_method: str
    auth_status: str
    user_role: Optional[str] = None
    session_id: Optional[str] = None
    device_info: Optional[str] = None
    login_attempts: Optional[int] = None
    lockout_status: Optional[bool] = None
    last_login_time: Optional[datetime] = None

class NetworkEvent(EventLog):
    src_ip: str
    dest_ip: str
    protocol: str
    action_taken: str
    bytes_transferred: str
    connection_duration: str
    traffic_type: str
    network_device: Optional[str] = None
    bandwidth_utilization: Optional[str] = None
    latency: Optional[str] = None

class ErrorLog(Log):
    error_code: str
    error_message: str
    module: Optional[str] = None
    error_details: Optional[str] = None
    stack_trace: Optional[str] = None
    user_impact: Optional[str] = None
    resolution_steps: Optional[List[str]] = None
    reported_by: Optional[str] = None

class DatabaseErrorLog(ErrorLog):
    query: str
    database_name: str
    db_engine: str
    affected_tables: List[str]
    transaction_id: Optional[str] = None
    affected_rows: Optional[int] = None
    replication_status: Optional[str] = None

class FileSystemErrorLog(ErrorLog):
    file_path: str
    file_operation: str
    error_details: str
    user_id: Optional[str] = None
    disk_space_remaining: Optional[str] = None
    file_size: Optional[str] = None
    file_type: Optional[str] = None

class NetworkErrorLog(ErrorLog):
    interface: str
    error_cause: str
    affected_service: str
    retry_attempts: int
    resolution_status: str
    packet_loss: Optional[str] = None
    throughput: Optional[str] = None

class ApplicationErrorLog(ErrorLog):
    app_name: str
    version: str
    crash_report: Optional[str] = None
    user_feedback: Optional[str] = None
    last_user_action: Optional[str] = None
    session_id: Optional[str] = None
    dependencies_affected: Optional[List[str]] = None
    logs_generated: Optional[List[str]] = None

class DebugLog(Log):
    debug_message: str
    module_name: str
    debug_level: str
    additional_data: Optional[Dict[str, str]] = None
    thread_id: Optional[str] = None
    function_name: Optional[str] = None
    execution_flow: Optional[List[str]] = None

class QueryDebugLog(DebugLog):
    sql_query: str
    execution_time: float
    records_returned: int
    database_connection: str
    query_plan: Optional[str] = None
    affected_rows: Optional[int] = None

class ApiDebugLog(DebugLog):
    api_endpoint: str
    http_method: str
    response_time: float
    status_code: int
    request_payload: Optional[Dict[str, str]] = None
    response_payload: Optional[Dict[str, str]] = None
    headers_sent: Optional[Dict[str, str]] = None
    headers_received: Optional[Dict[str, str]] = None

class ConfigDebugLog(DebugLog):
    config_file: str
    settings_applied: List[str]
    previous_settings: Optional[Dict[str, str]] = None
    update_method: str
    rollback_performed: Optional[bool] = None
    validation_results: Optional[Dict[str, str]] = None

class ProcessDebugLog(DebugLog):
    process_id: int
    process_name: str
    execution_status: str
    memory_usage: str
    cpu_usage: str
    parent_process_id: Optional[int] = None
    thread_ids: Optional[List[int]] = None
    open_files: Optional[List[str]] = None
    network_connections: Optional[List[str]] = None

class InfoLog(Log):
    summary: str
    details: str
    source_system: Optional[str] = None
    related_events: Optional[List[str]] = None
    user_id: Optional[str] = None
    affected_components: Optional[List[str]] = None
    additional_context: Optional[Dict[str, str]] = None

class SystemInfoLog(InfoLog):
    os_version: str
    uptime: str
    resource_usage: Dict[str, str]
    network_interfaces: List[str]
    running_services: List[str]
    last_patch_applied: Optional[str] = None
    scheduled_maintenance: Optional[bool] = None
    hardware_health: Optional[Dict[str, str]] = None
    software_updates: Optional[List[str]] = None

class UserActivityLog(InfoLog):
    user_id: str
    activity_type: str
    activity_details: str
    location: str
    device_used: str
    login_time: Optional[datetime] = None
    logout_time: Optional[datetime] = None
    actions_performed: Optional[List[str]] = None
    session_duration: Optional[str] = None

class DeploymentLog(InfoLog):
    environment: str
    deployment_status: str
    release_version: str
    deployment_time: datetime = Field(default_factory=datetime.utcnow)
    deployed_by: str
    rollback_needed: bool
    deployment_notes: Optional[str] = None
    impacted_services: Optional[List[str]] = None
    pre_deployment_checks: Optional[Dict[str, str]] = None

class ServiceStatusLog(InfoLog):
    service_name: str
    status: str
    last_checked: datetime = Field(default_factory=datetime.utcnow)
    response_time: float
    uptime_percentage: float
    error_count: int
    dependent_services: Optional[List[str]] = None
    maintenance_window: Optional[Dict[str, str]] = None
    health_metrics: Optional[Dict[str, str]] = None

class LogResponse(BaseModel):
    logs: List[Log]
    count: int

================
File: backend/models/newsletter_content.py
================
# models/newsletter_content.py

from pymongo import MongoClient
import os
from dotenv import load_dotenv

load_dotenv()

mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client.get_database()

newsletter_collection = db["newsletter"] 

def get_current_newsletter_db():
    """
    Returns the single doc that stores the current newsletter content.
    """
    return newsletter_collection.find_one({})

def set_current_newsletter_db(content):
    """
    Overwrite the single doc with new content.
    """
 
    newsletter_collection.delete_many({})

    newsletter_collection.insert_one({"content": content})

================
File: backend/models/test.py
================
from bson.objectid import ObjectId
from datetime import datetime, timedelta
from collections import defaultdict
import math
import re
import unicodedata

# Import the new collections from database
from mongodb.database import (
    mainusers_collection,
    shop_collection,
    achievements_collection,
    tests_collection,
    testAttempts_collection,
    correctAnswers_collection
)

##############################################
# very complex Input Sanitization Helpers
##############################################

import re
import unicodedata

# Example small dictionary of very common passwords
COMMON_PASSWORDS = {
    "password", "123456", "12345678", "qwerty", "letmein", "welcome"
}

def has_forbidden_unicode_scripts(s):
    """
    Disallow characters from certain Unicode blocks 
    (private use areas, surrogates, etc.).
    """
    private_use_ranges = [
        (0xE000, 0xF8FF),
        (0xF0000, 0xFFFFD),
        (0x100000, 0x10FFFD)
    ]
    surrogates_range = (0xD800, 0xDFFF)

    for ch in s:
        code_point = ord(ch)
        # Surrogates
        if surrogates_range[0] <= code_point <= surrogates_range[1]:
            return True
        # Private use ranges
        for start, end in private_use_ranges:
            if start <= code_point <= end:
                return True
    return False

def disallow_mixed_scripts(s):
    """
    Example check for mixing major scripts (Latin + Cyrillic, etc.).
    Returns True if it detects more than one script in the string.
    """
    script_sets = set()

    for ch in s:
        cp = ord(ch)
        # Basic Latin and extended ranges:
        if 0x0041 <= cp <= 0x024F:
            script_sets.add("Latin")
        # Greek
        elif 0x0370 <= cp <= 0x03FF:
            script_sets.add("Greek")
        # Cyrillic
        elif 0x0400 <= cp <= 0x04FF:
            script_sets.add("Cyrillic")

        # If more than one distinct script is found
        if len(script_sets) > 1:
            return True

    return False

def validate_username(username):
    """
    Validates a username with very strict rules:
      1. Normalize (NFC).
      2. Length 3..30.
      3. No control chars, no private-use/surrogates, no mixing scripts.
      4. Only [A-Za-z0-9._-], no triple repeats, no leading/trailing punctuation.
    Returns: (True, []) if valid, else (False, [list of error messages]).
    """
    errors = []
    username_nfc = unicodedata.normalize("NFC", username)

    # 1) Check length
    if not (3 <= len(username_nfc) <= 30):
        errors.append("Username must be between 3 and 30 characters long.")

    # 2) Forbidden Unicode script checks
    if has_forbidden_unicode_scripts(username_nfc):
        errors.append("Username contains forbidden Unicode blocks (private use or surrogates).")

    # 3) Disallow mixing multiple major scripts
    if disallow_mixed_scripts(username_nfc):
        errors.append("Username cannot mix multiple Unicode scripts (e.g., Latin & Cyrillic).")

    # 4) Forbid control chars [0..31, 127] + suspicious punctuation
    forbidden_ranges = [(0, 31), (127, 127)]
    forbidden_chars = set(['<', '>', '\\', '/', '"', "'", ';', '`',
                           ' ', '\t', '\r', '\n'])
    for ch in username_nfc:
        cp = ord(ch)
        if any(start <= cp <= end for (start, end) in forbidden_ranges):
            errors.append("Username contains forbidden control characters (ASCII 0-31 or 127).")
            break
        if ch in forbidden_chars:
            errors.append("Username contains forbidden characters like <, >, or whitespace.")
            break

    # 5) Strict allowlist pattern
    pattern = r'^[A-Za-z0-9._-]+$'
    if not re.match(pattern, username_nfc):
        errors.append("Username can only contain letters, digits, underscores, dashes, or dots.")

    # 6) Disallow triple identical consecutive characters
    if re.search(r'(.)\1{2,}', username_nfc):
        errors.append("Username cannot contain three identical consecutive characters.")

    # 7) Disallow leading or trailing punctuation
    if re.match(r'^[._-]|[._-]$', username_nfc):
        errors.append("Username cannot start or end with . - or _.")

    if errors:
        return False, errors
    return True, []

def validate_password(password, username=None, email=None):
    """
    Validates a password with very strict rules:
      1. 12..128 length.
      2. Disallow whitespace, <, >.
      3. Require uppercase, lowercase, digit, special char.
      4. Disallow triple repeats.
      5. Check common/breached password list.
      6. Disallow 'password', 'qwerty', etc.
      7. Disallow if username or email local part is in the password.
    Returns: (True, []) if valid, else (False, [list of error messages]).
    """
    errors = []
    length = len(password)

    # 1) Length
    if not (6 <= length <= 69):
        errors.append("Password must be between 6 and 69 characters long.")

    # 2) Disallowed whitespace or < >
    if any(ch in password for ch in [' ', '<', '>', '\t', '\r', '\n']):
        errors.append("Password cannot contain whitespace or < or > characters.")

    # 3) Complexity checks
    if not re.search(r'[A-Z]', password):
        errors.append("Password must contain at least one uppercase letter.")
    if not re.search(r'[a-z]', password):
        errors.append("Password must contain at least one lowercase letter.")
    if not re.search(r'\d', password):
        errors.append("Password must contain at least one digit.")

    # We define a broad set of allowed special chars
    special_pattern = r'[!@#$%^&*()\-_=+\[\]{}|;:\'",<.>/?`~\\]'
    if not re.search(special_pattern, password):
        errors.append("Password must contain at least one special character.")

    # 4) Disallow triple identical consecutive characters
    if re.search(r'(.)\1{2,}', password):
        errors.append("Password must not contain three identical consecutive characters.")

    # 5) Convert to lowercase for simplified checks
    password_lower = password.lower()

    # Check against common password list
    if password_lower in COMMON_PASSWORDS:
        errors.append("Password is too common. Please choose a stronger password.")

    # 6) Disallow certain dictionary words
    dictionary_patterns = ['password', 'qwerty', 'abcdef', 'letmein', 'welcome', 'admin']
    for pat in dictionary_patterns:
        if pat in password_lower:
            errors.append(f"Password must not contain the word '{pat}'.")

    # 7) Disallow if password contains username or email local-part
    if username:
        if username.lower() in password_lower:
            errors.append("Password must not contain your username.")

    if email:
        email_local_part = email.split('@')[0].lower()
        if email_local_part in password_lower:
            errors.append("Password must not contain the local part of your email address.")

    if errors:
        return False, errors
    return True, []

def validate_email(email):
    """
    Validates an email with strict rules:
      1. Normalize (NFC), strip whitespace.
      2. 5..69 length.
      3. No control chars, <, >, etc.
      4. Exactly one @.
    Returns: (True, []) if valid, else (False, [list of error messages]).
    """
    errors = []
    email_nfc = unicodedata.normalize("NFC", email.strip())

    # 1) Length check
    if not (5 <= len(email_nfc) <= 69):
        errors.append("Email length must be between 6 and 69 characters.")

    # 3) Forbid suspicious ASCII
    forbidden_ascii = set(['<','>','`',';',' ', '\t','\r','\n','"',"'", '\\'])
    for ch in email_nfc:
        if ch in forbidden_ascii:
            errors.append("Email contains forbidden characters like <, >, or whitespace.")
            break

    # 4) Must have exactly one @
    if email_nfc.count('@') != 1:
        errors.append("Email must contain exactly one '@' symbol.")

    if errors:
        return False, errors
    return True, []

##############################################
# User Retrieval Helpers
##############################################

def get_user_by_username(username):
    return mainusers_collection.find_one({"username": username})

def get_user_by_identifier(identifier):
    if "@" in identifier:
        return mainusers_collection.find_one({"email": identifier})
    else:
        return get_user_by_username(identifier)

def get_user_by_id(user_id):
    """
    Retrieves a user by ID. Returns None if invalid or not found.
    """
    try:
        oid = ObjectId(user_id)
    except Exception:
        return None
    return mainusers_collection.find_one({"_id": oid})

##############################################
# Create User
##############################################

def create_user(user_data):
    """
    Creates a new user document, setting default fields including coins, xp, level,
    purchasedItems, xpBoost, etc. Also automatically equips a default avatar if found.
    """
    existing_user = mainusers_collection.find_one({
        "$or": [
            {"username": user_data["username"]},
            {"email": user_data["email"]}
        ]
    })
    if existing_user:
        raise ValueError("Username or email is already taken")

    # Set defaults for new user:
    user_data.setdefault("coins", 0)
    user_data.setdefault("xp", 0)
    user_data.setdefault("level", 1)
    user_data.setdefault("achievements", [])
    user_data.setdefault("subscriptionActive", False)
    user_data.setdefault("subscriptionPlan", None)
    user_data.setdefault("lastDailyClaim", None)
    user_data.setdefault("purchasedItems", [])
    user_data.setdefault("xpBoost", 1.0)
    user_data.setdefault("currentAvatar", None)
    user_data.setdefault("nameColor", None)

    # Auto-equip default avatar if cost=null
    default_avatar = shop_collection.find_one({"type": "avatar", "cost": None})
    if default_avatar:
        user_data["currentAvatar"] = default_avatar["_id"]
        if default_avatar["_id"] not in user_data["purchasedItems"]:
            user_data["purchasedItems"].append(default_avatar["_id"])

    result = mainusers_collection.insert_one(user_data)
    return result.inserted_id

##############################################
# Update User Fields (CRITICAL)
##############################################

def update_user_fields(user_id, fields):
    """
    Generic helper to update given `fields` (dict) in mainusers_collection.
    """
    try:
        oid = ObjectId(user_id)
    except:
        return None
    mainusers_collection.update_one(
        {"_id": oid},
        {"$set": fields}
    )
    return True

##############################################
# Update User Coins
##############################################

def update_user_coins(user_id, amount):
    try:
        oid = ObjectId(user_id)
    except Exception:
        return None
    mainusers_collection.update_one({"_id": oid}, {"$inc": {"coins": amount}})

##############################################
# Leveling System
##############################################
# Levels 2–30: +500 XP each
# Levels 31–60: +750 XP each
# Levels 61–100: +1000 XP each
# Above 100: +1500 XP each

def xp_required_for_level(level):
    """
    Returns total XP required to be at `level`.
    Level 1 starts at 0 XP.
    """
    if level < 1:
        return 0
    if level == 1:
        return 0
    if level <= 30:
        return 500 * (level - 1)
    elif level <= 60:
        base = 500 * 29  # up to level 30
        return base + 750 * (level - 30)
    elif level <= 100:
        base = 500 * 29 + 750 * 30  # up to level 60
        return base + 1000 * (level - 60)
    else:
        base = 500 * 29 + 750 * 30 + 1000 * 40  # up to level 100
        return base + 1500 * (level - 100)

def update_user_xp(user_id, xp_to_add):
    """
    Adds xp_to_add to the user's XP. Then, while the new XP total
    is >= XP required for the next level, increments the level.
    """
    user = get_user_by_id(user_id)
    if not user:
        return None

    old_xp = user.get("xp", 0)
    old_level = user.get("level", 1)
    new_xp = old_xp + xp_to_add
    new_level = old_level

    while new_xp >= xp_required_for_level(new_level + 1):
        new_level += 1

    mainusers_collection.update_one(
        {"_id": user["_id"]},
        {"$set": {"xp": new_xp, "level": new_level}}
    )
    return {"xp": new_xp, "level": new_level}

##############################################
# Daily Bonus
##############################################

def apply_daily_bonus(user_id):
    """
    If the user hasn't claimed daily bonus in the last 24 hours,
    +50 coins, update lastDailyClaim
    """
    user = get_user_by_id(user_id)
    if not user:
        return None

    now = datetime.utcnow()
    last_claimed = user.get("lastDailyClaim")
    if not last_claimed or (now - last_claimed) > timedelta(hours=24):
        mainusers_collection.update_one(
            {"_id": user["_id"]},
            {"$inc": {"coins": 50}, "$set": {"lastDailyClaim": now}}
        )
        return {"success": True, "message": "Daily bonus applied"}
    else:
        return {"success": False, "message": "Already claimed daily bonus"}

##############################################
# Shop Logic
##############################################

def get_shop_items():
    """
    Returns all shop items from shop_collection,
    in ascending order by title (or another field),
    to ensure stable ordering.
    """
    return list(shop_collection.find({}).sort("title", 1))

def purchase_item(user_id, item_id):
    """
    Purchase an item from the shop:
      1) Check user has enough coins
      2) Ensure item not already purchased
      3) Deduct cost, add to purchasedItems
      4) If xpBoost, set user's xpBoost
      5) If avatar or nameColor, optionally set that field
    """
    user = get_user_by_id(user_id)
    if not user:
        return {"success": False, "message": "User not found"}

    try:
        oid = ObjectId(item_id)
    except Exception:
        return {"success": False, "message": "Invalid item ID"}

    item = shop_collection.find_one({"_id": oid})
    if not item:
        return {"success": False, "message": "Item not found"}

    user_coins = user.get("coins", 0)
    cost = item.get("cost", 0) if item.get("cost") is not None else 0
    if user_coins < cost:
        return {"success": False, "message": "Not enough coins"}

    purchased = user.get("purchasedItems", [])
    if oid in purchased:
        return {"success": False, "message": "Item already purchased"}

    mainusers_collection.update_one(
        {"_id": user["_id"]},
        {"$inc": {"coins": -cost}}
    )
    mainusers_collection.update_one(
        {"_id": user["_id"]},
        {"$addToSet": {"purchasedItems": oid}}
    )

    item_type = item.get("type")
    if item_type == "xpBoost":
        new_boost = item.get("effectValue", 1.0)
        mainusers_collection.update_one(
            {"_id": user["_id"]},
            {"$set": {"xpBoost": new_boost}}
        )
    elif item_type == "avatar":
        pass
    elif item_type == "nameColor":
        new_color = item.get("effectValue", None)
        mainusers_collection.update_one(
            {"_id": user["_id"]},
            {"$set": {"nameColor": new_color}}
        )

    return {"success": True, "message": "Purchase successful"}

##############################################
# Achievements
##############################################

def get_achievements():
    return list(achievements_collection.find({}))

def get_test_by_id_and_category(test_id, category):
    """
    Fetch a single test doc by integer testId field and category field.
    """
    try:
        test_id_int = int(test_id)
    except:
        return None
    return tests_collection.find_one({
        "testId": test_id_int,
        "category": category
    })

def check_and_unlock_achievements(user_id):
    """
    Checks the user's progress by querying testAttempts_collection to see:
      - How many tests are finished (total_finished)
      - How many are perfect (perfect_tests)
      - Their percentage on each finished test
      - If they've done certain minScores, consecutive perfects, etc.
      - Summation of total questions answered across all finished attempts

    Then unlocks achievements as needed, returning newly_unlocked achievementIds.
    """

    user = get_user_by_id(user_id)
    if not user:
        return []

    user_oid = user["_id"]

    # 1) Count how many finished attempts the user has
    total_finished = testAttempts_collection.count_documents({
        "userId": user_oid,
        "finished": True
    })

    # 2) Count how many are perfect (score == totalQuestions)
    perfect_tests = testAttempts_collection.count_documents({
        "userId": user_oid,
        "finished": True,
        "$expr": {"$eq": ["$score", "$totalQuestions"]}
    })

    # 3) Fetch all finished attempts
    finished_cursor = testAttempts_collection.find(
        {"userId": user_oid, "finished": True}
    )
    finished_tests = []
    for doc in finished_cursor:
        tq = doc.get("totalQuestions", 0)
        sc = doc.get("score", 0)
        pct = (sc / tq) * 100 if tq else 0
        cat = doc.get("category", "global")
        finished_at = doc.get("finishedAt", None)
        finished_tests.append({
            "test_id": doc.get("testId", "0"),
            "score": sc,
            "totalQuestions": tq,
            "percentage": pct,
            "category": cat,
            "finishedAt": finished_at
        })

    from datetime import datetime
    finished_tests.sort(
        key=lambda x: x["finishedAt"] if x["finishedAt"] else datetime(1970,1,1)
    )

    max_consecutive = 0
    current_streak = 0
    for ft in finished_tests:
        if ft["percentage"] == 100:
            current_streak += 1
            if current_streak > max_consecutive:
                max_consecutive = current_streak
        else:
            current_streak = 0

    from collections import defaultdict
    category_groups = defaultdict(list)
    for ft in finished_tests:
        category_groups[ft["category"]].append(ft)

    sum_of_questions = sum(ft["totalQuestions"] for ft in finished_tests)

    TOTAL_TESTS = 130
    TOTAL_QUESTIONS = 10000

    user_coins = user.get("coins", 0)
    user_level = user.get("level", 1)

    unlocked = user.get("achievements", [])
    newly_unlocked = []

    all_ach = get_achievements()

    for ach in all_ach:
        aid = ach["achievementId"]
        criteria = ach.get("criteria", {})

        if aid in unlocked:
            continue

        # testCount
        if "testCount" in criteria:
            if total_finished >= criteria["testCount"]:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # coins
        if "coins" in criteria:
            if user_coins >= criteria["coins"]:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # level
        if "level" in criteria:
            if user_level >= criteria["level"]:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # perfectTests
        if "perfectTests" in criteria:
            needed = criteria["perfectTests"]
            if perfect_tests >= needed:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # consecutivePerfects
        if "consecutivePerfects" in criteria:
            needed = criteria["consecutivePerfects"]
            if max_consecutive >= needed:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # allTestsCompleted
        if "allTestsCompleted" in criteria and criteria["allTestsCompleted"] is True:
            if total_finished >= TOTAL_TESTS:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # testsCompletedInCategory
        if "testsCompletedInCategory" in criteria:
            needed = criteria["testsCompletedInCategory"]
            for ccat, attempts in category_groups.items():
                if len(attempts) >= needed:
                    unlocked.append(aid)
                    newly_unlocked.append(aid)
                    break

        # redemption_arc => minScoreBefore & minScoreAfter
        if ("minScoreBefore" in criteria and "minScoreAfter" in criteria
                and aid not in unlocked):
            min_before = criteria["minScoreBefore"]
            min_after = criteria["minScoreAfter"]
            low_test = any(ft["percentage"] <= min_before for ft in finished_tests)
            high_test = any(ft["percentage"] >= min_after for ft in finished_tests)
            if low_test and high_test:
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # minScore => e.g. "accuracy_king"
        if "minScore" in criteria:
            needed = criteria["minScore"]
            if any(ft["percentage"] >= needed for ft in finished_tests):
                unlocked.append(aid)
                newly_unlocked.append(aid)

        # minScoreGlobal => e.g. "exam_conqueror"
        if "minScoreGlobal" in criteria:
            min_g = criteria["minScoreGlobal"]
            if total_finished >= TOTAL_TESTS:
                all_above = all(ft["percentage"] >= min_g for ft in finished_tests)
                if all_above:
                    unlocked.append(aid)
                    newly_unlocked.append(aid)

        # minScoreInCategory => e.g. "subject_specialist"
        if "minScoreInCategory" in criteria:
            min_cat = criteria["minScoreInCategory"]
            for ccat, attempts in category_groups.items():
                if len(attempts) == 10:
                    if all(ft["percentage"] >= min_cat for ft in attempts):
                        unlocked.append(aid)
                        newly_unlocked.append(aid)
                        break

        # perfectTestsInCategory => "category_perfectionist"
        if "perfectTestsInCategory" in criteria:
            needed = criteria["perfectTestsInCategory"]
            for ccat, attempts in category_groups.items():
                perfect_count = sum(1 for ft in attempts if ft["percentage"] == 100)
                if perfect_count >= needed:
                    unlocked.append(aid)
                    newly_unlocked.append(aid)
                    break

        # perfectTestsGlobal => "absolute_perfectionist"
        if "perfectTestsGlobal" in criteria and criteria["perfectTestsGlobal"] is True:
            if total_finished >= TOTAL_TESTS:
                all_perfect = all(ft["percentage"] == 100 for ft in finished_tests)
                if all_perfect:
                    unlocked.append(aid)
                    newly_unlocked.append(aid)

        # totalQuestions => e.g. "answer_machine_1000"
        if "totalQuestions" in criteria:
            needed_q = criteria["totalQuestions"]
            if sum_of_questions >= needed_q:
                unlocked.append(aid)
                newly_unlocked.append(aid)

    if newly_unlocked:
        mainusers_collection.update_one(
            {"_id": user_oid},
            {"$set": {"achievements": unlocked}}
        )

    return newly_unlocked

================
File: backend/models/user_subscription.py
================
# models/user_subscription.py

from pymongo import MongoClient
import os
from dotenv import load_dotenv
import logging

load_dotenv()

mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client.get_database()

users_collection = db["users"]


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_user(user_data):
    """
    Create a new user in the users collection.
    :param user_data: Dictionary containing user details (e.g., {"email": "alice@example.com"})
    :return: The ID of the created or existing user
    """
    email = user_data.get("email")
    if not email:
        logger.error("Email is required to create a user.")
        raise ValueError("Email is required to create a user.")

    existing_user = users_collection.find_one({"email": email})
    if existing_user:
        logger.info(f"User with email {email} already exists with ID {existing_user['_id']}.")
        return existing_user["_id"]

    result = users_collection.insert_one({"email": email})
    logger.info(f"Created new user with email {email} and ID {result.inserted_id}.")
    return result.inserted_id

def add_subscription(email: str):
    """
    Add a user subscription if it doesn't already exist.
    :param email: User's email address
    """
    existing = users_collection.find_one({"email": email})
    if not existing:
        users_collection.insert_one({"email": email})
        logger.info(f"Added new subscription for email: {email}")
    else:
        logger.info(f"Subscription already exists for email: {email}")

def remove_subscription(email: str):
    """
    Remove a user subscription by email.
    :param email: User's email address
    """
    result = users_collection.delete_one({"email": email})
    if result.deleted_count > 0:
        logger.info(f"Removed subscription for email: {email}")
    else:
        logger.warning(f"No subscription found for email: {email}")

def find_subscription(email: str):
    """
    Find a user subscription by email.
    :param email: User's email address
    :return: The subscription document if found, else None
    """
    return users_collection.find_one({"email": email})

def get_all_subscribers():
    """
    Retrieve all user subscriptions.
    :return: List of all subscription documents
    """
    return list(users_collection.find({}))

================
File: backend/mongodb/database.py
================
# database.py
from flask import Flask
from flask_pymongo import PyMongo
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)

# MongoDB Connection
app.config["MONGO_URI"] = os.getenv("MONGO_URI")  
mongo = PyMongo(app)

db = mongo.db

# Existing collections
mainusers_collection = db.mainusers
shop_collection = db.shopItems
achievements_collection = db.achievements
tests_collection = db.tests

# NEW collections for attempts and correct answers:
testAttempts_collection = db.testAttempts
correctAnswers_collection = db.correctAnswers

================
File: backend/routes/admin_newsletter_routes.py
================
# backend/routes/admin_newsletter_routes.py

from flask import Blueprint, request, jsonify
from helpers.daily_newsletter_helper import set_current_newsletter_db
from functools import wraps
import os
from dotenv import load_dotenv

load_dotenv()

admin_newsletter_bp = Blueprint('admin_newsletter_routes', __name__)

def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('x-api-key')
        if not api_key or api_key != os.getenv("ADMIN_API_KEY"):
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

@admin_newsletter_bp.route('/', methods=['POST'])
@require_api_key
def update_newsletter():
    """
    POST /admin/newsletter
    Headers: { "x-api-key": "your_admin_api_key" }
    JSON Body: { "content": "<html or text of new newsletter>" }
    """
    try:
        data = request.get_json()
        new_content = data.get("content", "")

        if not new_content:
            return jsonify({"error": "Newsletter content cannot be empty."}), 400

        set_current_newsletter_db(new_content)
        return jsonify({"message": "Newsletter updated successfully"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

================
File: backend/routes/analogy_routes.py
================
from flask import Blueprint, request, jsonify, Response
import logging
from helpers.async_tasks import (
    generate_single_analogy_task,
    generate_comparison_analogy_task,
    generate_triple_comparison_analogy_task
)
# New streaming helper
from helpers.analogy_stream_helper import generate_analogy_stream

analogy_bp = Blueprint('analogy_bp', __name__)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

@analogy_bp.route('/generate_analogy', methods=['POST'])
def generate_analogy():
    """
    OLD route that uses Celery tasks. We keep it so async_tasks or older code won't break,
    but the new front end won't use this route anymore.
    """
    data = request.get_json()
    if not data:
        return jsonify({"error": "Request must contain data"}), 400

    analogy_type = data.get("analogy_type")
    category = data.get("category")
    concept1 = data.get("concept1")
    concept2 = data.get("concept2")
    concept3 = data.get("concept3")

    try:
        if analogy_type == "single" and concept1:
            async_result = generate_single_analogy_task.delay(concept1, category)
            analogy_text = async_result.get(timeout=120)
            return jsonify({"analogy": analogy_text}), 200

        elif analogy_type == "comparison" and concept1 and concept2:
            async_result = generate_comparison_analogy_task.delay(concept1, concept2, category)
            analogy_text = async_result.get(timeout=120)
            return jsonify({"analogy": analogy_text}), 200

        elif analogy_type == "triple" and concept1 and concept2 and concept3:
            async_result = generate_triple_comparison_analogy_task.delay(concept1, concept2, concept3, category)
            analogy_text = async_result.get(timeout=180)
            return jsonify({"analogy": analogy_text}), 200

        else:
            logger.error("Invalid parameters provided to /generate_analogy")
            return jsonify({"error": "Invalid parameters"}), 400

    except Exception as e:
        logger.error(f"Error generating analogy (Celery route): {e}")
        return jsonify({"error": "An internal error occurred while generating the analogy."}), 500


@analogy_bp.route('/stream_analogy', methods=['POST'])
def stream_analogy():
    """
    NEW route that streams analogy text. Only used by front-end now.
    """
    data = request.get_json() or {}
    analogy_type = data.get("analogy_type", "single")
    category = data.get("category", "real-world")
    concept1 = data.get("concept1", "")
    concept2 = data.get("concept2", "")
    concept3 = data.get("concept3", "")

    try:
        def generate():
            stream_gen = generate_analogy_stream(analogy_type, concept1, concept2, concept3, category)
            for chunk in stream_gen:
                yield chunk

        return Response(generate(), mimetype='text/plain')

    except Exception as e:
        logger.error(f"Error streaming analogy: {e}")
        return jsonify({"error": "An internal error occurred while streaming the analogy."}), 500

================
File: backend/routes/celery_routes.py
================
from flask import Blueprint, request, jsonify
from functools import wraps
import os

from helpers.daily_newsletter_task import send_daily_newsletter

celery_bp = Blueprint('celery_routes', __name__)

def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('x-api-key')
        if not api_key or api_key != os.getenv("ADMIN_API_KEY"):
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

@celery_bp.route('/trigger-task', methods=['POST'])
@require_api_key
def trigger_task():
    """
    POST /celery/trigger-task
    Headers: { "x-api-key": "<ADMIN_API_KEY>" }
    """
    try:
        task_result = send_daily_newsletter.delay()
        return jsonify({"message": "Task triggered", "task_id": task_result.id}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

================
File: backend/routes/daily_brief_routes.py
================
from flask import Blueprint, request, jsonify
from models.user_subscription import UserSubscription
from helpers.scheduler_helper import schedule_email_task

daily_brief_routes = Blueprint('daily_brief_routes', __name__)

@daily_brief_routes.route('/dailybrief/subscribe', methods=['POST'])
def subscribe():
    data = request.get_json()
    email = data.get('email')
    topic = data.get('topic')
    frequency = data.get('frequency')
    time_slots = data.get('time_slots')


    subscription = UserSubscription(email=email, topic=topic, frequency=frequency, time_slots=time_slots)
    subscription.save_to_db()

 
    for time_slot in time_slots:
        schedule_email_task(subscription, time_slot)

    return jsonify({"message": "Subscription created successfully"}), 201

================
File: backend/routes/grc_routes.py
================
# grc_routes.py

from flask import Blueprint, request, jsonify
import logging
from helpers.async_tasks import generate_grc_question_task

grc_bp = Blueprint('grc', __name__)
logger = logging.getLogger(__name__)

GRC_CATEGORIES = ["Regulation", "Risk Management", "Compliance", "Audit", "Governance", 
                  "Management", "Policy", "Ethics", "Threat Assessment", "Leadership", 
                  "Business Continuity", "Random"]
DIFFICULTY_LEVELS = ["Easy", "Medium", "Hard"]

@grc_bp.route('/generate_question', methods=['POST'])
def generate_question():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Request must contain JSON data"}), 400

        category = data.get('category', 'Random')
        difficulty = data.get('difficulty', 'Easy')

        if category not in GRC_CATEGORIES:
            return jsonify({"error": "Invalid category"}), 400
        if difficulty not in DIFFICULTY_LEVELS:
            return jsonify({"error": "Invalid difficulty"}), 400

        # Celery call
        task_result = generate_grc_question_task.delay(category, difficulty)
        question_data = task_result.get(timeout=120)

        return jsonify(question_data), 200

    except Exception as e:
        logger.error(f"Error in /generate_question: {e}")
        return jsonify({"error": "An internal error occurred."}), 500

================
File: backend/routes/log_routes.py
================
# log_routes.py

from flask import Blueprint, request, jsonify
from helpers.log_generator import generate_logs
from helpers.log_helper import analyze_log, serialize_log  
import logging
from models.log_models import (
    Log, SecurityLog, FirewallLog, VulnerabilityLog, IntrusionLog, AccessControlLog,
    EventLog, SystemEvent, ApplicationEvent, AuthenticationEvent, NetworkEvent,
    ErrorLog, DatabaseErrorLog, FileSystemErrorLog, NetworkErrorLog, ApplicationErrorLog,
    DebugLog, QueryDebugLog, ApiDebugLog, ConfigDebugLog, ProcessDebugLog,
    InfoLog, SystemInfoLog, UserActivityLog, DeploymentLog, ServiceStatusLog
)
from datetime import datetime


log_bp = Blueprint("logs", __name__)
logger = logging.getLogger(__name__)


if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)


@log_bp.route("/generate", methods=["POST"])
def generate_logs_route():
    """
    Endpoint to generate logs based on category and count.
    """
    try:
       
        data = request.get_json()
        category = data.get("category", "security").lower()
        count = int(data.get("count", 5))
        
        
        logs = generate_logs(category, count)
        if not logs:
            logger.warning(f"No logs generated for category: {category}")
            return jsonify({"error": "Invalid log category."}), 400
        
        
        serialized_logs = [serialize_log(log) for log in logs]

        logger.info(f"Generated {count} logs for category: {category}")
        return jsonify({
            "status": "success",
            "category": category,
            "logs": serialized_logs,
            "count": len(serialized_logs),
        }), 200

    except Exception as e:
        logger.error(f"Error generating logs: {e}")
        return jsonify({"error": str(e)}), 500



@log_bp.route("/analyze", methods=["POST"])
def analyze_log_route():
    """
    Endpoint to analyze a manually provided single log.
    """
    try:
        
        data = request.get_json()
        log = data.get("log", None)
        
        if not log:
            logger.warning("No log provided for analysis.")
            return jsonify({"error": "No log provided."}), 400
        
        # Deserializing logs back into model object
        log_type = log.get("type")
        source = log.get("source", "").lower()
        log_obj = None

        if log_type == "security":
            if source == "firewall":
                log_obj = FirewallLog(**log)
            elif source == "vulnerability scanner":
                log_obj = VulnerabilityLog(**log)
            elif source == "ids":
                log_obj = IntrusionLog(**log)
            elif source == "access control":
                log_obj = AccessControlLog(**log)
            else:
                logger.warning(f"Unknown security log source: {source}")
        elif log_type == "event":
            if source == "system monitor":
                log_obj = SystemEvent(**log)
            elif source == "appmanager":
                log_obj = ApplicationEvent(**log)
            elif source == "authservice":
                log_obj = AuthenticationEvent(**log)
            elif source == "network manager":
                log_obj = NetworkEvent(**log)
            else:
                logger.warning(f"Unknown event log source: {source}")
        elif log_type == "error":
            if source == "database":
                log_obj = DatabaseErrorLog(**log)
            elif source == "filesystem":
                log_obj = FileSystemErrorLog(**log)
            elif source == "network interface":
                log_obj = NetworkErrorLog(**log)
            elif source == "application service":
                log_obj = ApplicationErrorLog(**log)
            else:
                logger.warning(f"Unknown error log source: {source}")
        elif log_type == "debug":
            if source == "query executor":
                log_obj = QueryDebugLog(**log)
            elif source == "api gateway":
                log_obj = ApiDebugLog(**log)
            elif source == "config manager":
                log_obj = ConfigDebugLog(**log)
            elif source == "process manager":
                log_obj = ProcessDebugLog(**log)
            else:
                logger.warning(f"Unknown debug log source: {source}")
        elif log_type == "info":
            if source == "system monitor":
                log_obj = SystemInfoLog(**log)
            elif source == "activity tracker":
                log_obj = UserActivityLog(**log)
            elif source == "deployment manager":
                log_obj = DeploymentLog(**log)
            elif source == "service monitor":
                log_obj = ServiceStatusLog(**log)
            else:
                logger.warning(f"Unknown info log source: {source}")
        else:
            logger.warning(f"Unknown log type: {log_type}")
        
        if not log_obj:
            logger.warning("Invalid log data provided.")
            return jsonify({"error": "Invalid log data provided."}), 400

       
        analysis = analyze_log(log_obj)

       
        serialized_log = serialize_log(log_obj)

        logger.info(f"Analyzed log: {serialized_log.get('id', 'N/A')}")
        return jsonify({
            "status": "success",
            "log": serialized_log,
            "analysis": analysis
        }), 200

    except Exception as e:
        logger.error(f"Error analyzing log: {e}")
        return jsonify({"error": str(e)}), 500



@log_bp.route("/healthcheck", methods=["GET"])
def health_check():
    """
    Health check endpoint to ensure the service is running.
    """
    return jsonify({"status": "running", "service": "Log Analysis API"}), 200



def init_log_routes(db):
    """
    Initialize routes with database integration for log history.
    """
    @log_bp.route("/history/save", methods=["POST"])
    def save_log_history():
        try:
            data = request.get_json()
            db.log_history.insert_one(data)
            return jsonify({"status": "success", "message": "Log history saved."}), 200
        except Exception as e:
            logger.error(f"Error saving log history: {e}")
            return jsonify({"error": str(e)}), 500

    @log_bp.route("/history/fetch", methods=["GET"])
    def fetch_log_history():
        try:
            history = list(db.log_history.find().sort("timestamp", -1))
            serialized_history = [serialize_log(entry) for entry in history]
            return jsonify({
                "status": "success",
                "history": serialized_history,
                "count": len(serialized_history),
            }), 200
        except Exception as e:
            logger.error(f"Error fetching log history: {e}")
            return jsonify({"error": str(e)}), 500

================
File: backend/routes/pbq_routes.py
================
import logging
import json
import traceback
from flask import Blueprint, request, jsonify, Response
from flask_cors import CORS

# Import your PBQ AI helper methods
from helpers.pbq_ai_helper import (
    generate_advanced_pbq,
    generate_advanced_pbq_stream,
    simulate_nmap_command_openai
)

pbq_bp = Blueprint('pbq_bp', __name__)
CORS(pbq_bp, resources={r"/api/*": {"origins": "*"}})  # Allow cross-origin for debugging or different front-end

logger = logging.getLogger(__name__)

@pbq_bp.route('/generate_pbq', methods=['POST'])
def generate_pbq():
    """
    Non-streaming route to generate a complete PBQ JSON.
    Expects JSON payload:
    {
      "category": "Network Security",
      "difficulty": "Intermediate",
      "performance_level": "average"
    }
    Returns:
      - 200: complete PBQ JSON
      - 500: error
    """
    data = request.get_json(silent=True) or {}
    category = data.get("category", "Network Security")
    difficulty = data.get("difficulty", "Intermediate")
    performance_level = data.get("performance_level", "average")

    logger.info("generate_pbq called: category=%s, difficulty=%s, performance_level=%s",
                category, difficulty, performance_level)

    try:
        pbq_json_str = generate_advanced_pbq(category, difficulty, performance_level)
        # Validate JSON structure
        pbq_data = json.loads(pbq_json_str)
        return jsonify(pbq_data), 200
    except json.JSONDecodeError as jde:
        logger.error("JSON decode error in generate_pbq: %s", jde)
        return jsonify({"error": "Invalid JSON structure generated."}), 500
    except Exception as exc:
        logger.error("Error in generate_pbq: %s\n%s", exc, traceback.format_exc())
        return jsonify({"error": str(exc)}), 500


@pbq_bp.route('/generate_pbq_stream', methods=['POST'])
def generate_pbq_stream():
    """
    Streaming route (SSE) to generate PBQ JSON chunk by chunk.
    Expects JSON payload:
    {
      "category": "Network Security",
      "difficulty": "Intermediate",
      "performance_level": "average"
    }
    Returns:
      - SSE data lines in the form "data: <partial JSON>"
    """
    data = request.get_json(silent=True) or {}
    category = data.get("category", "Network Security")
    difficulty = data.get("difficulty", "Intermediate")
    performance_level = data.get("performance_level", "average")

    logger.info("generate_pbq_stream: category=%s, difficulty=%s, performance_level=%s",
                category, difficulty, performance_level)

    def sse_stream():
        try:
            for chunk in generate_advanced_pbq_stream(category, difficulty, performance_level):
                if isinstance(chunk, str):
                    # strip out newline chars to avoid confusion
                    safe_chunk = chunk.replace('\n', '').replace('\r', '')
                    yield f"data: {safe_chunk}\n\n"
                else:
                    logger.warning("Received non-string chunk from generator: %s", chunk)
        except Exception as e:
            logger.error("Error streaming PBQ: %s\n%s", e, traceback.format_exc())
            error_msg = json.dumps({"error": f"Failed to stream PBQ: {str(e)}"})
            yield f"data: {error_msg}\n\n"

    return Response(sse_stream(), mimetype='text/event-stream')


@pbq_bp.route('/simulate_cmd', methods=['POST'])
def simulate_cmd():
    """
    Route to simulate Nmap output from a user-typed command.
    Expects JSON: {"command": "nmap -sV -p 80,443 192.168.1.10"}
    Returns: { "output": "<Simulated Nmap output text>" }
    """
    data = request.get_json(silent=True) or {}
    user_command = data.get("command", "").strip()

    logger.info("simulate_cmd called with command: %s", user_command)

    if not user_command:
        return jsonify({"error": "No command provided."}), 400

    try:
        simulated_output = simulate_nmap_command_openai(user_command)
        return jsonify({"output": simulated_output}), 200
    except Exception as exc:
        logger.error("Error in simulate_cmd: %s\n%s", exc, traceback.format_exc())
        return jsonify({"error": str(exc)}), 500

================
File: backend/routes/scenario_routes.py
================
import logging
import json  
from flask import Blueprint, request, Response, jsonify
from helpers.scenario_helper import (
    generate_scenario,
    generate_interactive_questions,
    break_down_scenario
)

scenario_bp = Blueprint('scenario_bp', __name__)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

@scenario_bp.route('/stream_scenario', methods=['POST'])
def stream_scenario_endpoint():
    """
    Streams scenario text in real time (token-by-token).
    Expects JSON with { industry, attack_type, skill_level, threat_intensity }
    Returns a text/plain streaming response.
    """
    data = request.get_json() or {}
    required_fields = ["industry", "attack_type", "skill_level", "threat_intensity"]
    missing = [f for f in required_fields if f not in data]
    if missing:
        logger.error(f"Missing required fields: {missing}")
        return jsonify({"error": f"Missing required fields: {missing}"}), 400

    industry = data["industry"]
    attack_type = data["attack_type"]
    skill_level = data["skill_level"]
    threat_intensity = data["threat_intensity"]

    try:
        threat_intensity = int(threat_intensity)
    except ValueError:
        logger.error("Invalid threat_intensity value; must be an integer.")
        return jsonify({"error": "threat_intensity must be an integer"}), 400

    def generate_chunks():
        scenario_generator = generate_scenario(industry, attack_type, skill_level, threat_intensity)
        for chunk in scenario_generator:
            yield chunk

    return Response(generate_chunks(), mimetype='text/plain')


@scenario_bp.route('/stream_questions', methods=['POST'])
def stream_questions_endpoint():
    """
    Streams the interactive questions (in raw JSON form) in real time, token-by-token.
    Expects JSON with { "scenario_text": "..." }
    The front end can accumulate the text and parse once done.
    """
    data = request.get_json() or {}
    scenario_text = data.get("scenario_text", "")
    if not scenario_text:
        logger.error("Missing scenario_text in the request.")
        return jsonify({"error": "Missing scenario_text"}), 400

    logger.debug(f"Received scenario_text: {scenario_text[:100]}...")  

    def generate_json_chunks():
        questions = generate_interactive_questions(scenario_text)
        if isinstance(questions, list):
            logger.debug("Questions are a list. Serializing to JSON.")
            yield json.dumps(questions)
        elif callable(questions):
            logger.debug("Questions are being streamed.")
            for chunk in questions():
                yield chunk
        else:
            logger.error("Unexpected type for questions.")
            yield json.dumps([{"error": "Failed to generate questions."}])

    return Response(generate_json_chunks(), mimetype='application/json')

================
File: backend/routes/status_routes.py
================
from flask import Blueprint, jsonify, request
from functools import wraps
import os

from helpers.status_helper import get_system_info, get_application_status

status_bp = Blueprint('status_routes', __name__)

def require_api_key(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('x-api-key')
        if not api_key or api_key != os.getenv("ADMIN_API_KEY"):
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

@status_bp.route('/status', methods=['GET'])
@require_api_key
def get_status():
    """
    GET /status/status
    Headers: { "x-api-key": "<ADMIN_API_KEY>" }
    """
    try:
        system_info = get_system_info()
        app_status = get_application_status()
        return jsonify({"system_info": system_info, "application_status": app_status}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

================
File: backend/routes/subscribe_routes.py
================
# routes/subscribe_routes.py

from flask import Blueprint, request, jsonify
from models.user_subscription import add_subscription, find_subscription, get_all_subscribers
from functools import wraps
import os
import re

subscribe_bp = Blueprint('subscribe_routes', __name__)

def is_valid_email(email):
    """
    Validates the email format using regex.
    """
    regex = r'^\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return re.match(regex, email)

def require_api_key(f):
    """
    Decorator to require API key for certain routes.
    """
    @wraps(f)
    def decorated(*args, **kwargs):
        api_key = request.headers.get('x-api-key')
        if not api_key or api_key != os.getenv("ADMIN_API_KEY"):
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated

@subscribe_bp.route('/', methods=['POST'])
def subscribe():
    """
    Public route to subscribe a user.
    POST /subscribe
    Body: { "email": "user@example.com" }
    """
    try:
        data = request.get_json()
        email = data.get("email")
        if not email:
            return jsonify({"error": "Missing email"}), 400

        if not is_valid_email(email):
            return jsonify({"error": "Invalid email format."}), 400

        if find_subscription(email):
            return jsonify({"message": "You are already subscribed."}), 400

        add_subscription(email)
        return jsonify({"message": "Subscription successful!"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@subscribe_bp.route('/all', methods=['GET'])
@require_api_key
def get_subscribers():
    """
    Admin route to retrieve all subscribers.
    GET /subscribe/all
    Headers: { "x-api-key": "<ADMIN_API_KEY>" }
    """
    try:
        subscribers = get_all_subscribers()
        emails = [sub["email"] for sub in subscribers]
        return jsonify({"subscribers": emails}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

================
File: backend/routes/test_routes.py
================
# src/routes/test_routes.py

from flask import Blueprint, request, jsonify
from bson.objectid import ObjectId
from datetime import datetime

# Mongo collections
from mongodb.database import (
    mainusers_collection,
    shop_collection,
    achievements_collection,
    tests_collection,
    testAttempts_collection,
    correctAnswers_collection
)

# Models
from models.test import (
    get_user_by_identifier,
    create_user,
    get_user_by_id,
    update_user_coins,
    update_user_xp,
    apply_daily_bonus,
    get_shop_items,
    purchase_item,
    get_achievements,
    get_test_by_id_and_category,
    check_and_unlock_achievements,
    validate_username,
    validate_email,
    validate_password,
    update_user_fields,
    get_user_by_id
)

api_bp = Blueprint('test', __name__)

def serialize_user(user):
    """Helper to convert _id, etc. to strings if needed."""
    if not user:
        return None
    user['_id'] = str(user['_id'])
    if 'currentAvatar' in user and user['currentAvatar']:
        user['currentAvatar'] = str(user['currentAvatar'])
    if 'purchasedItems' in user and isinstance(user['purchasedItems'], list):
        user['purchasedItems'] = [str(item) for item in user['purchasedItems']]
    return user

# -------------------------------------------------------------------
# USER ROUTES
# -------------------------------------------------------------------

@api_bp.route('/user/<user_id>', methods=['GET'])
def get_user(user_id):
    user = get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404
    user = serialize_user(user)
    # Make sure password is included in the response, if that's desired
    if "password" not in user:
        user["password"] = user.get("password")
    return jsonify(user), 200


@api_bp.route('/user', methods=['POST'])
def register_user():
    """
    Registration: /api/user
    Expects {username, email, password, confirmPassword} in JSON
    Calls create_user, returns {message, user_id} or error.
    """
    user_data = request.json or {}
    try:
        user_id = create_user(user_data)
        return jsonify({"message": "User created", "user_id": str(user_id)}), 201
    except ValueError as ve:
        return jsonify({"error": str(ve)}), 400
    except Exception as e:
        return jsonify({"error": "Internal server error", "details": str(e)}), 500


@api_bp.route('/login', methods=['POST'])
def login():
    """
    Login: /api/login
    Expects { usernameOrEmail, password } in JSON
    If success => return user doc in JSON (serialized)
    """
    data = request.json
    if not data:
        return jsonify({"error": "No JSON data provided"}), 400

    identifier = data.get("usernameOrEmail")
    password = data.get("password")
    if not identifier or not password:
        return jsonify({"error": "Username (or Email) and password are required"}), 400

    user = get_user_by_identifier(identifier)
    if not user or user.get("password") != password:
        return jsonify({"error": "Invalid username or password"}), 401

    user = serialize_user(user)
    return jsonify({
        "user_id": user["_id"],
        "username": user["username"],
        "email": user.get("email", ""),
        "coins": user.get("coins", 0),
        "xp": user.get("xp", 0),
        "level": user.get("level", 1),
        "achievements": user.get("achievements", []),
        "xpBoost": user.get("xpBoost", 1.0),
        "currentAvatar": user.get("currentAvatar"),
        "nameColor": user.get("nameColor"),
        "purchasedItems": user.get("purchasedItems", []),
        "subscriptionActive": user.get("subscriptionActive", False),
        "password": user.get("password")
    }), 200


@api_bp.route('/user/<user_id>/daily-bonus', methods=['POST'])
def daily_bonus(user_id):
    result = apply_daily_bonus(user_id)
    if not result:
        return jsonify({"error": "User not found"}), 404
    return jsonify(result), 200


@api_bp.route('/user/<user_id>/add-xp', methods=['POST'])
def add_xp_route(user_id):
    data = request.json or {}
    xp_to_add = data.get("xp", 0)
    updated = update_user_xp(user_id, xp_to_add)
    if not updated:
        return jsonify({"error": "User not found"}), 404
    new_achievements = check_and_unlock_achievements(user_id)
    updated["newAchievements"] = new_achievements
    return jsonify(updated), 200


@api_bp.route('/user/<user_id>/add-coins', methods=['POST'])
def add_coins_route(user_id):
    data = request.json or {}
    coins_to_add = data.get("coins", 0)
    update_user_coins(user_id, coins_to_add)
    return jsonify({"message": "Coins updated"}), 200


# -------------------------------------------------------------------
# SHOP ROUTES
# -------------------------------------------------------------------

@api_bp.route('/shop', methods=['GET'])
def fetch_shop():
    items = get_shop_items()
    for item in items:
        item["_id"] = str(item["_id"])
    return jsonify(items), 200


@api_bp.route('/shop/purchase/<item_id>', methods=['POST'])
def purchase_item_route(item_id):
    data = request.json or {}
    user_id = data.get("userId")
    if not user_id:
        return jsonify({"success": False, "message": "userId is required"}), 400

    result = purchase_item(user_id, item_id)
    if result["success"]:
        return jsonify(result), 200
    else:
        return jsonify(result), 400


@api_bp.route('/shop/equip', methods=['POST'])
def equip_item_route():
    data = request.json or {}
    user_id = data.get("userId")
    item_id = data.get("itemId")

    if not user_id or not item_id:
        return jsonify({"success": False, "message": "userId and itemId are required"}), 400

    user = get_user_by_id(user_id)
    if not user:
        return jsonify({"success": False, "message": "User not found"}), 404

    try:
        oid = ObjectId(item_id)
    except Exception:
        return jsonify({"success": False, "message": "Invalid item ID"}), 400

    item_doc = shop_collection.find_one({"_id": oid})
    if not item_doc:
        return jsonify({"success": False, "message": "Item not found in shop"}), 404

    # If user hasn't purchased it, check level-based unlock
    if oid not in user.get("purchasedItems", []):
        if user.get("level", 1) < item_doc.get("unlockLevel", 1):
            return jsonify({"success": False, "message": "Item not unlocked"}), 400

    # Equip the avatar
    mainusers_collection.update_one(
        {"_id": user["_id"]},
        {"$set": {"currentAvatar": oid}}
    )
    return jsonify({"success": True, "message": "Avatar equipped"}), 200


# -------------------------------------------------------------------
# TESTS ROUTES
# -------------------------------------------------------------------

@api_bp.route('/tests/<test_id>', methods=['GET'])
def fetch_test_by_id_route(test_id):
    # This is your original single-parameter route
    test_doc = get_test_by_id_and_category(test_id, None)  # or your old get_test_by_id
    if not test_doc:
        return jsonify({"error": "Test not found"}), 404
    test_doc["_id"] = str(test_doc["_id"])
    return jsonify(test_doc), 200


@api_bp.route('/tests/<category>/<test_id>', methods=['GET'])
def fetch_test_by_category_and_id(category, test_id):
    """
    NEW route that fetches a test doc by both category and testId
    e.g. /tests/aplus/1
    """
    try:
        test_id_int = int(test_id)
    except Exception:
        return jsonify({"error": "Invalid test ID"}), 400

    test_doc = tests_collection.find_one({
        "testId": test_id_int,
        "category": category
    })
    if not test_doc:
        return jsonify({"error": "Test not found"}), 404

    test_doc["_id"] = str(test_doc["_id"])
    return jsonify(test_doc), 200


# -------------------------------------------------------------------
# PROGRESS / ATTEMPTS ROUTES
# -------------------------------------------------------------------

@api_bp.route('/attempts/<user_id>/<test_id>', methods=['GET'])
def get_test_attempt(user_id, test_id):
    """
    Returns either an unfinished attempt if it exists;
    otherwise returns the most recently finished attempt for that user/test.
    This version searches for testId as either an integer or a string.
    """
    try:
        user_oid = ObjectId(user_id)
        try:
            test_id_int = int(test_id)
        except:
            test_id_int = None
    except:
        return jsonify({"error": "Invalid user ID or test ID"}), 400

    # Build query with $or for testId
    query = {"userId": user_oid, "finished": False}
    if test_id_int is not None:
        query["$or"] = [{"testId": test_id_int}, {"testId": test_id}]
    else:
        query["testId"] = test_id

    attempt = testAttempts_collection.find_one(query)

    # If no unfinished attempt, check the most recent finished one
    if not attempt:
        query_finished = {"userId": user_oid, "finished": True}
        if test_id_int is not None:
            query_finished["$or"] = [{"testId": test_id_int}, {"testId": test_id}]
        else:
            query_finished["testId"] = test_id
        attempt = testAttempts_collection.find_one(query_finished, sort=[("finishedAt", -1)])

    if not attempt:
        return jsonify({"attempt": None}), 200

    attempt["_id"] = str(attempt["_id"])
    attempt["userId"] = str(attempt["userId"])
    return jsonify({"attempt": attempt}), 200


@api_bp.route('/attempts/<user_id>/<test_id>', methods=['POST'])
def update_test_attempt(user_id, test_id):
    data = request.json or {}
    try:
        user_oid = ObjectId(user_id)
        try:
            test_id_int = int(test_id)
        except:
            test_id_int = test_id
    except:
        return jsonify({"error": "Invalid user ID or test ID"}), 400

    filter_ = {"userId": user_oid, "finished": False, "$or": [{"testId": test_id_int}, {"testId": test_id}]}
    update_doc = {
        "$set": {
            "userId": user_oid,
            "testId": test_id_int if isinstance(test_id_int, int) else test_id,
            "category": data.get("category", "global"),
            "answers": data.get("answers", []),
            "score": data.get("score", 0),
            "totalQuestions": data.get("totalQuestions", 0),
            "currentQuestionIndex": data.get("currentQuestionIndex", 0),
            "shuffleOrder": data.get("shuffleOrder", []),
            "finished": data.get("finished", False)
        }
    }
    testAttempts_collection.update_one(filter_, update_doc, upsert=True)
    return jsonify({"message": "Progress updated"}), 200


@api_bp.route('/attempts/<user_id>/<test_id>/finish', methods=['POST'])
def finish_test_attempt(user_id, test_id):
    data = request.json or {}
    try:
        user_oid = ObjectId(user_id)
        try:
            test_id_int = int(test_id)
        except:
            test_id_int = test_id
    except:
        return jsonify({"error": "Invalid user ID or test ID"}), 400

    filter_ = {"userId": user_oid, "finished": False, "$or": [{"testId": test_id_int}, {"testId": test_id}]}
    update_doc = {
        "$set": {
            "finished": True,
            "finishedAt": datetime.utcnow(),
            "score": data.get("score", 0),
            "totalQuestions": data.get("totalQuestions", 0),
        }
    }
    testAttempts_collection.update_one(filter_, update_doc)

    newly_unlocked = check_and_unlock_achievements(user_id)
    return jsonify({
        "message": "Test attempt finished",
        "newlyUnlocked": newly_unlocked
    }), 200


@api_bp.route('/attempts/<user_id>/list', methods=['GET'])
def list_test_attempts(user_id):
    try:
        user_oid = ObjectId(user_id)
    except:
        return jsonify({"error": "Invalid user ID"}), 400

    page = request.args.get("page", default=1, type=int)
    page_size = request.args.get("page_size", default=50, type=int)
    skip_count = (page - 1) * page_size

    cursor = testAttempts_collection.find(
        {"userId": user_oid}
    ).sort("finishedAt", -1).skip(skip_count).limit(page_size)

    attempts = []
    for doc in cursor:
        doc["_id"] = str(doc["_id"])
        doc["userId"] = str(doc["userId"])
        attempts.append(doc)

    return jsonify({
        "page": page,
        "page_size": page_size,
        "attempts": attempts
    }), 200


# -------------------------------------------------------------------
# FIRST-TIME-CORRECT ANSWERS
# -------------------------------------------------------------------
@api_bp.route('/user/<user_id>/submit-answer', methods=['POST'])
def submit_answer(user_id):
    data = request.json or {}
    test_id = str(data.get("testId"))
    question_id = data.get("questionId")
    selected_index = data.get("selectedIndex")
    correct_index = data.get("correctAnswerIndex")
    xp_per_correct = data.get("xpPerCorrect", 10)
    coins_per_correct = data.get("coinsPerCorrect", 5)

    user = get_user_by_id(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    is_correct = (selected_index == correct_index)
    already_correct = correctAnswers_collection.find_one({
        "userId": user["_id"],
        "testId": test_id,
        "questionId": question_id
    })

    awarded_xp = 0
    awarded_coins = 0
    if is_correct and not already_correct:
        correctAnswers_collection.insert_one({
            "userId": user["_id"],
            "testId": test_id,
            "questionId": question_id
        })
        update_user_xp(user_id, xp_per_correct)
        update_user_coins(user_id, coins_per_correct)
        awarded_xp = xp_per_correct
        awarded_coins = coins_per_correct

    updated_user = get_user_by_id(user_id)
    new_xp = updated_user.get("xp", 0)
    new_coins = updated_user.get("coins", 0)

    return jsonify({
        "isCorrect": is_correct,
        "alreadyCorrect": True if already_correct else False,
        "awardedXP": awarded_xp,
        "awardedCoins": awarded_coins,
        "newXP": new_xp,
        "newCoins": new_coins
    }), 200


# -------------------------------------------------------------------
# ACHIEVEMENTS
# -------------------------------------------------------------------
@api_bp.route('/achievements', methods=['GET'])
def fetch_achievements_route():
    ach_list = get_achievements()
    for ach in ach_list:
        ach["_id"] = str(ach["_id"])
    return jsonify(ach_list), 200


# -------------------------------------------------------------------
# Leaderboard Route
# -------------------------------------------------------------------
@api_bp.route('/leaderboard', methods=['GET'])
def get_leaderboard():
    top_users_cursor = mainusers_collection.find(
        {},
        {"username": 1, "level": 1, "xp": 1, "currentAvatar": 1}
    ).sort("level", -1).limit(100)

    results = []
    rank = 1
    for user in top_users_cursor:
        user_data = {
            "username": user.get("username", "unknown"),
            "level": user.get("level", 1),
            "xp": user.get("xp", 0),
            "rank": rank,
            "avatarUrl": None
        }
        if user.get("currentAvatar"):
            avatar_item = shop_collection.find_one({"_id": user["currentAvatar"]})
            if avatar_item and "imageUrl" in avatar_item:
                user_data["avatarUrl"] = avatar_item["imageUrl"]

        results.append(user_data)
        rank += 1

    return jsonify(results), 200


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# USERNAME/EMAIL/PASSWORD CHANGES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@api_bp.route('/user/change-username', methods=['POST'])
def change_username():
    data = request.json or {}
    user_id = data.get("userId")
    new_username = data.get("newUsername")
    if not user_id or not new_username:
        return jsonify({"error": "Missing userId or newUsername"}), 400

    # Validate new username using the new rules.
    valid, errors = validate_username(new_username)
    if not valid:
        return jsonify({"error": "Invalid new username", "details": errors}), 400

    # Check if username is already taken.
    if mainusers_collection.find_one({"username": new_username}):
        return jsonify({"error": "Username already taken"}), 400

    doc = get_user_by_id(user_id)
    if not doc:
        return jsonify({"error": "User not found"}), 404

    update_user_fields(user_id, {"username": new_username})
    return jsonify({"message": "Username updated"}), 200


@api_bp.route('/user/change-email', methods=['POST'])
def change_email():
    data = request.json or {}
    user_id = data.get("userId")
    new_email = data.get("newEmail")
    if not user_id or not new_email:
        return jsonify({"error": "Missing userId or newEmail"}), 400

    # Validate new email using the new rules.
    valid, errors = validate_email(new_email)
    if not valid:
        return jsonify({"error": "Invalid email", "details": errors}), 400

    if mainusers_collection.find_one({"email": new_email}):
        return jsonify({"error": "Email already in use"}), 400

    doc = get_user_by_id(user_id)
    if not doc:
        return jsonify({"error": "User not found"}), 404

    update_user_fields(user_id, {"email": new_email})
    return jsonify({"message": "Email updated"}), 200


@api_bp.route('/user/change-password', methods=['POST'])
def change_password():
    data = request.json or {}
    user_id = data.get("userId")
    old_password = data.get("oldPassword")
    new_password = data.get("newPassword")
    confirm = data.get("confirmPassword")

    if not user_id or not old_password or not new_password or not confirm:
        return jsonify({"error": "All fields are required"}), 400
    if new_password != confirm:
        return jsonify({"error": "New passwords do not match"}), 400

    # Validate the new password using the new rules.
    valid, errors = validate_password(new_password)
    if not valid:
        return jsonify({"error": "Invalid new password", "details": errors}), 400

    user_doc = get_user_by_id(user_id)
    if not user_doc:
        return jsonify({"error": "User not found"}), 404

    # NOTE: This example compares plain-text passwords.
    # In production, ensure you hash passwords and use a proper verification method.
    if user_doc.get("password") != old_password:
        return jsonify({"error": "Old password is incorrect"}), 401

    update_user_fields(user_id, {"password": new_password})
    return jsonify({"message": "Password updated"}), 200


@api_bp.route('/subscription/cancel', methods=['POST'])
def cancel_subscription():
    """
    Placeholder. Possibly set subscriptionActive=False
    """
    return jsonify({"message": "Cancel subscription placeholder"}), 200

================
File: backend/routes/unsubscribe_routes.py
================
# routes/unsubscribe_routes.py

from flask import Blueprint, request, jsonify
from models.user_subscription import remove_subscription, find_subscription
import re

unsubscribe_bp = Blueprint('unsubscribe_routes', __name__)

def is_valid_email(email):
    regex = r'^\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return re.match(regex, email)

@unsubscribe_bp.route('/', methods=['POST'])
def unsubscribe():
    """
    POST /unsubscribe
    Body: { "email": "user@example.com" }
    """
    try:
        data = request.get_json()
        email = data.get("email")
        if not email:
            return jsonify({"error": "Missing email"}), 400

        if not find_subscription(email):
            return jsonify({"error": "You are not subscribed."}), 404

        remove_subscription(email)
        return jsonify({"message": "Successfully unsubscribed"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

================
File: backend/routes/xploit_routes.py
================
from flask import Blueprint, request, jsonify, Response
from helpers.xploitcraft_helper import Xploits
import logging

logger = logging.getLogger(__name__)

xploit = Xploits()
xploit_bp = Blueprint('xploit_bp', __name__)

@xploit_bp.route('/generate_payload', methods=['POST'])
def generate_payload_endpoint():
    data = request.get_json()
    logger.debug(f"Received data: {data}")

    if not data or (not data.get('vulnerability') and not data.get('evasion_technique')):
        logger.error("Invalid request payload - need at least one of vulnerability or evasion_technique")
        return jsonify({'error': 'Please provide at least one of vulnerability or evasion_technique'}), 400

    vulnerability = data.get('vulnerability', "")
    evasion_technique = data.get('evasion_technique', "")
    stream_requested = data.get('stream', False)

    try:
        if stream_requested:
            def generate():
                for chunk in xploit.generate_exploit_payload(vulnerability, evasion_technique, stream=True):
                    yield chunk

            return Response(generate(), mimetype='text/plain')
        else:
            payload = xploit.generate_exploit_payload(vulnerability, evasion_technique, stream=False)
            logger.debug(f"Generated payload: {payload}")
            return jsonify({'payload': payload})

    except Exception as e:
        logger.error(f"Error while generating payload: {str(e)}")
        return jsonify({'error': 'Failed to generate payload'}), 500

================
File: backend/app.py
================
#ProxyAuthRequired/backend/app.py

from flask import Flask
from flask_socketio import SocketIO
from dotenv import load_dotenv
from flask_cors import CORS
from flask_session import Session
from pymongo import MongoClient
import redis
import os
import logging
from flask import request, jsonify

# Import your existing routes
from routes.xploit_routes import xploit_bp
from routes.scenario_routes import scenario_bp
from routes.analogy_routes import analogy_bp
from routes.subscribe_routes import subscribe_bp
from routes.unsubscribe_routes import unsubscribe_bp
from routes.admin_newsletter_routes import admin_newsletter_bp
from routes.grc_routes import grc_bp
from routes.log_routes import log_bp
from routes.celery_routes import celery_bp
from routes.status_routes import status_bp
from routes.pbq_routes import pbq_bp
from routes.test_routes import api_bp

# IMPORTANT: Now import from models.py (not models.user_subscription)
from models.test import create_user, get_user_by_id, update_user_fields

from mongodb.database import db

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
mongo_uri = os.getenv("MONGO_URI")

client = MongoClient(mongo_uri)
db = client.get_database()

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')

app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_USE_SIGNER'] = True
app.config['SESSION_KEY_PREFIX'] = 'flask_session:'
app.config['SESSION_REDIS'] = redis.StrictRedis(host='redis', port=6379, db=0)

REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
app.config['SESSION_REDIS'] = redis.StrictRedis(
    host='redis',
    port=6379,
    db=0,
    password=REDIS_PASSWORD
)

Session(app)

@app.route('/health')
def home():
    return 'Backend is running'

@app.before_request
def log_request_info():
    logger.info(f"Handling request to {request.path} with method {request.method}")

# Register all your blueprints
app.register_blueprint(xploit_bp, url_prefix='/payload')
app.register_blueprint(scenario_bp, url_prefix='/scenario')
app.register_blueprint(analogy_bp, url_prefix='/analogy')
app.register_blueprint(grc_bp, url_prefix='/grc')
app.register_blueprint(log_bp, url_prefix='/logs')
app.register_blueprint(subscribe_bp, url_prefix='/subscribe')
app.register_blueprint(unsubscribe_bp, url_prefix='/unsubscribe')
app.register_blueprint(admin_newsletter_bp, url_prefix='/admin/newsletter')
app.register_blueprint(celery_bp, url_prefix='/celery')
app.register_blueprint(status_bp, url_prefix='/status')
app.register_blueprint(pbq_bp, url_prefix='/pbq')
app.register_blueprint(api_bp, url_prefix='/test')

# ENV VAR for admin password
ADMIN_API_KEY = os.getenv("ADMIN_API_KEY")





@socketio.on('connect')
def handle_connect():
    logger.info('Client connected')
    socketio.emit('message', {'data': 'Connected to server'})

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000, debug=True, allow_unsafe_werkzeug=True)

================
File: backend/Dockerfile.backend
================
FROM python:3.11.3


WORKDIR /app


RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-transport-https \
    ca-certificates \
    build-essential \
    libffi-dev \
    gcc \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*



RUN python3 -m venv /venv


RUN /venv/bin/pip install --upgrade pip setuptools wheel


COPY requirements.txt /app/requirements.txt


RUN /venv/bin/pip install --no-cache-dir -r /app/requirements.txt


COPY . /app


ENV VIRTUAL_ENV="/venv"
ENV PATH="/venv/bin:$PATH"
ENV FLASK_ENV=production
ENV FLASK_APP=app.py


RUN chmod +x /app/app.py


EXPOSE 5000

CMD ["/venv/bin/gunicorn", "-k", "gevent", "-b", "0.0.0.0:5000", "app:app", "--timeout", "120"]

================
File: backend/requirements.txt
================
annotated-types==0.7.0
anyio==4.6.2.post1
bidict==0.23.1
blinker==1.9.0
certifi==2024.8.30
click==8.1.7
dnspython==2.7.0
Flask==3.0.3
Flask-SocketIO==5.4.1
httpx==0.27.2
idna==3.10
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==3.0.2
openai==1.54.3
pydantic==2.9.2
python-engineio==4.10.1
python-socketio==5.11.4
simple-websocket==1.1.0
tqdm==4.67.0
typing_extensions==4.12.2
Werkzeug==3.1.3
python-dotenv==1.0.0
requests==2.31.0
gunicorn==21.2.0
Flask-CORS==3.0.10
Flask-Session
redis==5.0.0
celery==5.3.4
sendgrid==6.9.7
gevent==23.9.1
cffi==1.15.1
greenlet
faker
tzdata
Flask-Migrate
psutil
pymongo[srv]
Flask_Pymongo

================
File: backend/update_newsletter.py
================
import os
from pymongo import MongoClient
from helpers.daily_newsletter_helper import set_current_newsletter_db
from dotenv import load_dotenv

# Load environment variables from .env if needed
load_dotenv()

def main():
    # Define your new newsletter content
    new_content = """
<html>
<body>
<p>Welcome to today's edition of our Cybersecurity Newsletter! I hope you find these insights valuable and informative.</p> 

<!-- Exam Objective Tip of the Day -->
<h2>Exam Objective Tip of the Day: Understanding DNS Records</h2>
<p><strong>MX, TXT, A, AAAA, CNAME, and More: DNS Records Explained Through a Postal Scenario</strong></p>
<p>Imagine DNS records as different components of a postal system that ensure your letters (emails and data) reach the correct destination. Here's how MX, TXT, A, AAAA, CNAME, and other DNS records function within this system:</p>
<ul>
    <li><strong>A Record:</strong> Think of the A record as the street address of a building. It maps a domain name (like example.com) to its corresponding IPv4 address (e.g., 192.0.2.1), allowing users to locate the website.</li>
    <li><strong>AAAA Record:</strong> Similar to the A record, the AAAA record provides a street address but for IPv6 addresses (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334), supporting the newer internet protocol.</li>
    <li><strong>MX Record:</strong> The MX record is like the post office responsible for handling incoming mail for a domain. It directs emails to the correct mail servers by specifying their addresses and priority.</li>
    <li><strong>TXT Record:</strong> TXT records are akin to special instructions or notices attached to mail. They can contain information like SPF (Sender Policy Framework) records, which help verify the authenticity of incoming emails, reducing spam and phishing attempts.</li>
    <li><strong>CNAME Record:</strong> The CNAME record acts like an alias or nickname. It allows multiple domain names to point to the same IP address or canonical domain name, simplifying DNS management and ensuring consistency across services.</li>
    <li><strong>NS Record:</strong> NS records are like the main office branches responsible for managing all postal operations within a region. They specify the authoritative name servers for a domain, directing all DNS queries to the right servers.</li>
    <li><strong>PTR Record:</strong> PTR records function as reverse DNS lookups, translating IP addresses back to domain names. They are akin to verifying the return address on a letter to ensure authenticity.</li>
</ul>
<p><strong>Practical Application:</strong> By properly configuring these DNS records, your domain ensures that websites are reachable, emails are correctly routed, and email authenticity is maintained, enhancing both accessibility and security.</p>

<p><strong>Real-Life Scenario:</strong> Consider a global company like "GlobalMail" that operates in multiple countries and handles a large volume of emails daily. Here's how each DNS record is utilized:</p>
<ul>
    <li><strong>A Record:</strong> GlobalMail's website (globalmail.com) has an A record pointing to its primary server's IPv4 address, ensuring that users can access the website reliably.</li>
    <li><strong>AAAA Record:</strong> As GlobalMail transitions to IPv6, its AAAA record points to the server's IPv6 address, providing better scalability and performance for users on the newer protocol.</li>
    <li><strong>MX Record:</strong> GlobalMail's MX records specify multiple mail servers with different priorities. This setup ensures that if the primary mail server is down, emails are automatically routed to a backup server without disruption.</li>
    <li><strong>TXT Record:</strong> GlobalMail uses TXT records to publish SPF and DKIM (DomainKeys Identified Mail) information. This configuration helps recipient mail servers verify that emails from globalmail.com are legitimate, reducing the chances of emails being marked as spam.</li>
    <li><strong>CNAME Record:</strong> GlobalMail uses CNAME records to create aliases for various services. For example, mail.globalmail.com is a CNAME for mailserver.globalmail.com, simplifying DNS management and ensuring consistency across their email infrastructure.</li>
    <li><strong>NS Record:</strong> GlobalMail's NS records point to their primary and secondary name servers, ensuring that DNS queries are handled efficiently and reliably across different regions.</li>
    <li><strong>PTR Record:</strong> For security and verification, GlobalMail sets up PTR records for their mail servers, ensuring that IP addresses resolve back to the correct domain names, thereby enhancing trustworthiness and reducing the risk of phishing attacks.</li>
</ul>
<p><strong>Conjunction of Records:</strong> Together, these DNS records create a robust and secure email and website infrastructure. The A and AAAA records ensure that the website is accessible via both IPv4 and IPv6, while the MX records guarantee reliable email delivery. The TXT records provide necessary security measures to authenticate emails, preventing malicious actors from spoofing the domain. The CNAME records simplify DNS management by allowing multiple domain names to point to the same services, ensuring consistency and ease of maintenance. NS records ensure that DNS queries are directed to authoritative servers, and PTR records add an extra layer of verification and security.</p>

<!-- Pen-Testing Tool Tip and Trick of the Day: WinRM -->
<h2>Pen-Testing Tool Tip and Trick of the Day: WinRM</h2>
<p>WinRM (Windows Remote Management) is a powerful tool for remotely managing Windows systems. It's essential for administrators but can be exploited by attackers if not properly secured.</p>
<p><strong>Useful Command:</strong></p>
<pre><code>winrm set winrm/config/client '@{TrustedHosts="*" }'</code></pre>
<p><strong>Command Breakdown:</strong></p>
<ul>
    <li><strong>winrm set:</strong> Initiates a configuration change for WinRM.</li>
    <li><strong>winrm/config/client:</strong> Specifies that the configuration change applies to the WinRM client settings.</li>
    <li><strong>'@{TrustedHosts="*" }':</strong> Sets the TrustedHosts list to accept connections from any host. The asterisk (*) is a wildcard that allows all hosts, which can be risky if not managed properly.</li>
</ul>
<p><strong>Security Tip:</strong> While setting TrustedHosts to "*" is useful for testing, it poses significant security risks. Always specify trusted hosts explicitly to minimize exposure to unauthorized access.</p>

<!-- Study Tip of the Day -->
<h2>Study Tip of the Day: Design Your Workspace to Minimize Visual Clutter</h2>
<p>Creating an organized and uncluttered workspace is pivotal for maintaining focus and enhancing productivity. A well-designed environment reduces distractions, allowing you to concentrate better on the task at hand.</p>
<p><strong>Why It Matters:</strong> Visual clutter can overwhelm your brain, leading to decreased attention and increased stress. By minimizing unnecessary items, you streamline your focus, making it easier to prioritize tasks and manage time effectively.</p>
<p><strong>How to Apply:</strong> Start by decluttering your desk. Remove items that are not essential for your current projects. Utilize organizers, drawers, and shelves to keep necessary tools within reach but out of sight. Regularly assess your workspace to maintain order and adapt it to your evolving needs.</p>
<p><strong>Practical Example:</strong> Imagine you're preparing for a critical cybersecurity exam. By organizing your study materials, such as notes, flashcards, and reference books, in designated areas, you can quickly access what you need without getting distracted by unrelated items. This setup not only saves time but also creates a conducive environment for effective learning.</p>

<!-- News Summarization -->
<h2>News Summarization: AWS Repeats RCE Vulnerability in Neuron SDK</h2>
<p>Amazon Web Services (AWS) has introduced the same remote code execution (RCE) vulnerability three times over the last four years through its Neuron SDK, highlighting critical lapses in securing its Python package installation processes.</p>
<p>Despite previous warnings and fixes, the same dependency confusion vulnerability has resurfaced with new package releases in its software ecosystem.</p>
<p>The issue was first discovered in April 2022 when Giraffe Security flagged a vulnerability in AWS’s Neuron SDK, a set of Python libraries enabling machine learning workloads on AWS’s specialized hardware.</p>
<p>The problem stemmed from AWS’s official installation instructions and documentation, which recommended a command like the following:</p>
<pre><code>pip install transformers-neuronx --extra-index-url=https://pip.repos.neuron.amazonaws.com</code></pre>
<p>At a glance, the command seems simple, instructing Python’s pip package manager to install the package transformers-neuronx from the AWS-specific repository (https://pip.repos.neuron.amazonaws.com). However, this approach contains a hidden danger rooted in how pip handles the parameters.</p>
<p><strong>The Technical Issue:</strong> The --extra-index-url parameter does not exclusively restrict package downloads to the specified private repository.</p>
<p>Instead, it allows pip to search the default public PyPi repository for packages, falling back on it if the package is not found in the specified index. This creates a critical vulnerability: malicious actors could upload a package with the same name to PyPi, tricking users into downloading and executing malicious code.</p>
<p>In 2022, Giraffe Security confirmed this vulnerability by claiming unprotected AWS package names like mx-neuron on PyPi and reporting the flaw through AWS’s bug bounty program.</p>
<p>AWS promptly addressed the issue by uploading placeholder “dummy” versions of the affected packages to PyPi, preventing further exploitation. However, the root cause—a flawed reliance on the --extra-index-url parameter—remained unaddressed.</p>
<p>Despite being aware of the issue since at least 2020, AWS failed to implement a lasting solution, leading to repeated vulnerabilities being exposed in 2022.</p>
<p>In December 2024, Giraffe Security’s latest investigation revealed that AWS had once again introduced the same vulnerability.</p>
<p>AWS’s repeated missteps raise questions about their approach to addressing this issue. On one hand, their quick response to past reports suggests that they take the vulnerability seriously. However, the recurrence of the same flaw indicates a lack of systemic processes to prevent it.</p>
<p>This situation underscores a critical security lesson: even trusted sources like official AWS documentation are not immune to mistakes.</p>
<p>Developers should always scrutinize and fully understand package installation processes before implementing them in production systems. Safer alternatives—such as using the --index-url parameter to restrict downloads exclusively to private repositories or leveraging modern package managers like Poetry—should be considered.</p>
<p>While this recurring issue may seem like a niche vulnerability, it has broader implications for security in the cloud ecosystem.</p>
<p>Dependency confusion attacks have become a growing concern, particularly as more organizations rely on private package registries in tandem with public repositories like PyPi or npm.</p>
<p>The responsibility to mitigate these risks lies not only with end-users but also with service providers like AWS, who must ensure their tools and documentation follow security best practices.</p>

<!-- Life Tip of the Day -->
<h2>Life Tip of the Day: The Hidden Impact of Constant Negative Thinking</h2>
<p><strong>Understanding Negative Thought Patterns</strong></p>
<p>Constant negative thinking can subtly rewire your brain, making you perceive your life as worse than it truly is. This cognitive distortion not only affects your mental health but also diminishes your overall life satisfaction.</p>
<p><strong>The Psychological Mechanism:</strong> When you frequently dwell on negative thoughts, your brain starts to prioritize these patterns, reinforcing them through neural pathways. This makes it harder to recognize and appreciate positive experiences, creating a biased perspective that your life is predominantly negative.</p>
<p><strong>Practical Insight:</strong> Instead of trying to suppress negative thoughts, acknowledge them without judgment. Engage in cognitive restructuring by challenging these thoughts and reframing them into more balanced perspectives.</p>
<p><strong>How to Apply:</strong> If you catch yourself thinking, "I always fail at everything," pause and analyze the evidence. Recall instances where you've succeeded and recognize that failure is a part of growth. This shift helps prevent your mind from settling into a perpetual state of negativity.</p>
<p><strong>Real-Life Example:</strong> Imagine you're working on a challenging project and encounter a setback. Instead of thinking, "This project will never succeed," reframe it to, "This setback is an opportunity to learn and improve. I've overcome challenges before, and I can do it again."</p>

<p>Thank you for reading today's newsletter! Stay informed and stay secure.</p>
</body>
</html>
    """
    try:
        # Update the newsletter in the database
        result = set_current_newsletter_db(new_content)
        if result and (result.modified_count > 0 or result.upserted_id is not None):
            print("Newsletter updated successfully.")
        else:
            print("No changes were made to the newsletter.")
    except Exception as e:
        print(f"An error occurred while updating the newsletter: {e}")

if __name__ == "__main__":
    main()

================
File: database/models.py
================
import os
from pymongo import MongoClient
from dotenv import load_dotenv

load_dotenv()

mongo_uri = os.getenv("MONGO_URI")
client = MongoClient(mongo_uri)
db = client.get_database()

users_collection = db["users"]

def create_user(user_data):
    email = user_data.get("email")
    if not email:
        raise ValueError("Email is required")
    existing = users_collection.find_one({"email": email})
    if existing:
        return existing["_id"]
    result = users_collection.insert_one({"email": email})
    return result.inserted_id

def get_all_subscribers():
    return list(users_collection.find({}))

def find_subscription(email):
    return users_collection.find_one({"email": email})

def add_subscription(email):
    existing = find_subscription(email)
    if not existing:
        users_collection.insert_one({"email": email})

def remove_subscription(email):
    users_collection.delete_one({"email": email})

================
File: frontend/my-react-app/public/avatars/avatars_mongo.js
================
db.shopItems.insertMany([
  {
    type: "avatar",
    title: "avatar1",
    description: "Avatar 1",
    cost: 10,
    imageUrl: "/avatars/avatar1.png",
    unlockLevel: 1,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar5",
    description: "Avatar lvl 5",
    cost: 10000,
    imageUrl: "/avatars/avatar5.png",
    unlockLevel: 5,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar10",
    description: "Avatar lvl 10",
    cost: 12500,
    imageUrl: "/avatars/avatar10.png",
    unlockLevel: 10,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar15",
    description: "Avatar lvl 15",
    cost: 15000,
    imageUrl: "/avatars/avatar15.png",
    unlockLevel: 15,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar20",
    description: "Avatar lvl 20",
    cost: 17500,
    imageUrl: "/avatars/avatar20.png",
    unlockLevel: 20,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar25",
    description: "Avatar lvl 25",
    cost: 20000,
    imageUrl: "/avatars/avatar25.png",
    unlockLevel: 25,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar30",
    description: "Avatar lvl 30",
    cost: 2250,
    imageUrl: "/avatars/avatar30.png",
    unlockLevel: 30,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar40",
    description: "Avatar lvl 40",
    cost: 25000,
    imageUrl: "/avatars/avatar40.png",
    unlockLevel: 40,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar50",
    description: "Avatar lvl 50",
    cost: 32500,
    imageUrl: "/avatars/avatar50.png",
    unlockLevel: 50,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar60",
    description: "Avatar lvl 60",
    cost: 40000,
    imageUrl: "/avatars/avatar60.png",
    unlockLevel: 60,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar70",
    description: "Avatar lvl 70",
    cost: 10,
    imageUrl: "/avatars/avatar70.png",
    unlockLevel: 45000,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar80",
    description: "Avatarlvl 80",
    cost: 50000,
    imageUrl: "/avatars/avatar80.png",
    unlockLevel: 80,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar90",
    description: "Avatar lvl 90",
    cost: 55000,
    imageUrl: "/avatars/avatar90.png",
    unlockLevel: 90,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar100",
    description: "Avatar lvl 100",
    cost: 60000,
    imageUrl: "/avatars/avatar1000.png",
    unlockLevel: 100,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar110",
    description: "Avatar lvl 110",
    cost: 67500,
    imageUrl: "/avatars/avatar110.png",
    unlockLevel: 110,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar120",
    description: "Avatarlvl 120",
    cost: 70000,
    imageUrl: "/avatars/avatar120.png",
    unlockLevel: 120,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar135",
    description: "Avatar lvl 135",
    cost: 40000,
    imageUrl: "/avatars/avatar135.png",
    unlockLevel: 75000,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar150",
    description: "Avatar 150",
    cost: 77500,
    imageUrl: "/avatars/avatar150.png",
    unlockLevel: 150,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar175",
    description: "Avatar lvl 175",
    cost: 87500,
    imageUrl: "/avatars/avatar175.png",
    unlockLevel: 175,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar200",
    description: "Avatar lvl 200",
    cost: 100000,
    imageUrl: "/avatars/avatar2000.png",
    unlockLevel: 200,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar250",
    description: "Avatar 250",
    cost: 125000,
    imageUrl: "/avatars/avatar250.png",
    unlockLevel: 250,
    effectValue: null
  },
  {
    type: "avatar",
    title: "avatar300",
    description: "Avatar lvl 300",
    cost: 150000,
    imageUrl: "/avatars/avatar300.png",
    unlockLevel: 300,
    effectValue: null
  },
]);

================
File: frontend/my-react-app/public/xp/xp_mongo.js
================
db.shopItems.insertMany([
  {
    type: "xpBoost",
    title: "XP Boost 10",
    description: "Increase your XP gain by 10%.",
    cost: 15000,   
    imageUrl: "/xp/xp10.png",
    effectValue: 1.10
  },
  {
    type: "xpBoost",
    title: "XP Boost 25",
    description: "Increase your XP gain by 25%.",
    cost: 40000,  // adjust 
    imageUrl: "/xp/xp25.png",
    effectValue: 1.25
  },
  {
    type: "xpBoost",
    title: "XP Boost 50",
    description: "Increase your XP gain by 50%.",
    cost: 75000,  // adjust 
    imageUrl: "/xp/xp50.png",
    effectValue: 1.50
  },
  {
    type: "xpBoost",
    title: "XP Boost 100",
    description: "Increase your XP gain by 100%.",
    cost: 100000, 
    imageUrl: "/xp/xp100.png",
    effectValue: 2.00
  },
  {
    type: "xpBoost",
    title: "XP Boost 200",
    description: "Increase your XP gain by 200%.",
    cost: 150000, 
    imageUrl: "/xp/xp200.png",
    effectValue: 3.00
  }
]);

================
File: frontend/my-react-app/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/appLogo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <meta name="author" content="Carter Perez" />
    
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/appLogo.png" />
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto&display=swap" rel="stylesheet">

    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Certifications Gamified!</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: frontend/my-react-app/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/my-react-app/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow: /.env
Disallow: /api/
Disallow: /private/
Disallow: /admin/

================
File: frontend/my-react-app/src/components/EasterEgg/egg.txt
================
So you are actually looking at all my files and code, nice!

The Easter is just clikcing the @root in the Sidebar two times and it will show you my portfolio page.....yea thast pretty much it.....or is it??


No thats it 🤷‍♂️

================
File: frontend/my-react-app/src/components/EasterEgg/Portfolio_notegg.css
================
/* General Reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.portfolio-container {
  background: #0f0f0f;
  color: #ffffff;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
  padding-bottom: 50px;
}

/* ==================== HERO SECTION ==================== */
.hero-section {
  position: relative;
  width: 100%;
  padding: 60px 20px;
  text-align: center;
  background: linear-gradient(45deg, #1a1a1a, #272727);
  margin-bottom: 40px;
}

.hero-content {
  max-width: 800px;
  margin: 0 auto;
}

.hero-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 2.5em;
  color: #ff3d3d;
  margin-bottom: 10px;
  text-shadow: 2px 2px #000;
}


.portfolio-glitch {
  position: relative;
  display: inline-block;
  animation: portfolioGlitch 3s infinite;
}

@keyframes portfolioGlitch {
  0%, 20%, 40%, 60%, 100% {
    text-shadow: 1px 1px #00ffea, -1px -1px #ff00f5;
  }
  10% {
    text-shadow: 2px 2px #ff003c;
  }
  30% {
    text-shadow: -2px 0px #20ff00;
  }
  50% {
    text-shadow: 2px -2px #001eff;
  }
  70% {
    text-shadow: -2px 2px #fcff00;
  }
  90% {
    text-shadow: 3px 3px #ff00c6;
  }
}

.hero-subtitle {
  font-size: 1.2em;
  color: #ffffff;
  margin-bottom: 30px;
  line-height: 1.4em;
}

.hero-avatar {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.profile-pic {
  width: 180px;
  height: 180px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #ff3d3d;
  box-shadow: 0 0 15px rgba(255, 61, 61, 0.5);
}

/* ==================== SECTION TITLES ==================== */
.section-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 2em;
  color: #ff3d3d;
  text-align: center;
  margin-bottom: 20px;
  text-shadow: 2px 2px #000;
}

/* ==================== FADE-IN ANIMATION ==================== */
.fade-in {
  opacity: 0;
  transform: translateY(15px);
  animation: fadeInUp 1s ease forwards;
  margin-bottom: 40px;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0px);
  }
}

/* ==================== ABOUT WORK ==================== */
.about-work {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
}

.about-work .work-details p {
  margin-bottom: 1em;
  line-height: 1.5em;
  text-align: justify;
}

/* ==================== PROJECTS SECTION ==================== */
.projects-section {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 20px;
}

.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 20px;
}

.project-card {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  transition: transform 0.3s;
}

.project-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
}

.project-info {
  padding: 15px;
}

.project-info h3 {
  color: #ff3d3d;
  margin-bottom: 10px;
  font-size: 1.3em;
}

.project-info p {
  line-height: 1.4em;
  font-size: 0.95em;
}


.pulse-hover:hover {
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.02);
  }
  100% {
    transform: scale(1);
  }
}

/* ==================== CERTIFICATIONS SECTION ==================== */
.certifications-section {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 20px;
}

.certs-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 20px;
  justify-items: center;
}

.cert-card {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  width: 180px;
  text-align: center;
  padding: 10px;
}

.cert-image {
  width: 120px;
  height: 120px;
  object-fit: cover;
  margin-bottom: 10px;
  border-radius: 5px;
  border: 2px solid #ff3d3d;
}


.scale-hover:hover {
  transform: scale(1.05);
}

/* ==================== BLOG SECTION ==================== */
.blog-section {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
}

.blog-list {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

.blog-post {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  padding: 15px;
}

.blog-post h3 {
  margin-bottom: 10px;
  color: #ff3d3d;
}

.blog-post p {
  line-height: 1.4em;
  margin-bottom: 15px;
}

.blog-link {
  color: #00fff5;
  text-decoration: none;
  border: 1px solid #00fff5;
  padding: 5px 10px;
  border-radius: 5px;
}

.blog-link:hover {
  background-color: #00fff5;
  color: #000;
}


.tilt-hover:hover {
  transform: rotate(1deg) scale(1.02);
  transition: transform 0.3s;
}

/* ==================== RESUME SECTION ==================== */
.resume-section {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
  text-align: center;
}

.resume-info {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  padding: 15px;
  margin-top: 20px;
}

.resume-info p {
  margin-bottom: 10px;
}

.resume-link {
  display: inline-block;
  color: #00fff5;
  border: 2px solid #00fff5;
  border-radius: 5px;
  padding: 8px 15px;
  text-decoration: none;
  transition: background-color 0.3s;
}

.resume-link:hover {
  background-color: #00fff5;
  color: #000;
}

/* ==================== CONTACT & SOCIALS SECTION ==================== */
.contact-social-section {
  max-width: 800px;
  margin: 0 auto;
  text-align: center;
  padding: 0 20px;
}

.contact-info p {
  margin-bottom: 10px;
}

.accent-text {
  color: #ff3d3d;
  font-weight: bold;
}

.accent-link {
  color: #00fff5;
  text-decoration: none;
  margin-left: 5px;
  border-bottom: 1px dotted #00fff5;
}

.accent-link:hover {
  text-decoration: underline;
}

.social-links {
  margin-top: 20px;
}

.social-icon {
  display: inline-block;
  color: #ffffff;
  background: #2b2b2b;
  margin: 0 10px;
  padding: 8px 15px;
  border-radius: 5px;
  border: 2px solid #ff3d3d;
  text-decoration: none;
  transition: background-color 0.3s, transform 0.3s;
}

.social-icon:hover {
  background-color: #ff3d3d;
  transform: scale(1.05);
}

/* ==================== FOOTER ==================== */
.portfolio-footer {
  text-align: center;
  padding: 20px;
  margin-top: 40px;
  border-top: 2px solid #ff3d3d;
}

.portfolio-footer p {
  color: #666;
  font-size: 0.9em;
}

================
File: frontend/my-react-app/src/components/EasterEgg/Portfolio_notegg.js
================
// components/EasterEgg/portfolio_notegg.js
import React from 'react';
import './Portfolio_notegg.css';

// Existing imports for images
import meImage from './me.png';
import AImg from './A.png';
import NetImg from './network.png';
import SecImg from './sec.png';
import CysaImg from './cysa.png';
import CaspImg from './CASP.png';
import PentestImg from './pentest.png';
import PcepImg from './pcep.png';

// NEW import for "Project One" image
import Project1Img from './project1.jpg';
import Project2Img from './project2.jpg';
import Resume from './CarterPerez.pdf';


function PortfolioNotEgg() {
  return (
    <div className="portfolio-container">
      {/* HERO SECTION */}
      <section className="hero-section">
        <div className="hero-content">
          <h1 className="hero-title portfolio-glitch">Carter Perez Portfolio</h1>
          <p className="hero-subtitle">
            <span>Integration Technician</span> | <span>Cybersecurity Enthusiast</span>
          </p>
          <div className="hero-avatar">
            <img src={meImage} alt="Profile" className="profile-pic" />
          </div>
        </div>
      </section>

      {/* ABOUT MY WORK/JOB SECTION */}
      <section className="about-work fade-in">
        <h2 className="section-title">Where I Work</h2>
        <div className="work-details">
          <p>
            I work at SealingTech as a System Integration Technician, where I build and configure custom cybersecurity and defense systems. My focus is on designing secure, reliable environments that meet client needs and perform under demanding conditions. I handle system assembly, optimization, and testing to ensure everything operates smoothly and efficiently. With attention to detail and quality, I help deliver solutions that support critical operations and long-term scalability.
          </p>
          <p>
            Outside the 9-to-5, I’m constantly learning new skills—ranging from penetration testing labs to advanced programming.
            I believe in pushing the boundaries of what’s possible through curiosity and creative problem-solving.
          </p>
        </div>
      </section>

      {/* PROJECTS SECTION */}
      <section className="projects-section fade-in">
        <h2 className="section-title">Projects</h2>
        <div className="projects-grid">
          {/* Project 1 */}
          <div className="project-card pulse-hover">
            <img
              src={Project1Img}
              alt="Project 1"
              className="project-image"
            />
            <div className="project-info">
              <h3>www.ProxyAuthRequired.com</h3>
              <p>
                ProxyAuthRequired.com is a centralized cybersecurity platform that merges AI-driven simulations, hands-on learning modules, and a robust Resource Hub to help users at any level sharpen their skills. It includes tools like GRC Wizard for compliance questions, Log Analysis for real-time practice, and scenario-based exercises for incident response. By combining interactive content with up-to-date threats and exam objectives, ProxyAuthRequired.com strives to be a single-stop solution for professionals, students, and educators looking to elevate their cybersecurity knowledge and readiness.
              </p>
              {/* GitHub link for Project One */}
              <p>
                <a
                  href="https://github.com/CarterPerez-dev/ProxyAuthRequired"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View on GitHub
                </a>
              </p>
            </div>
          </div>

          {/* Project 2 */}
          <div className="project-card pulse-hover">
            <img
              src={Project2Img}
              alt="Project 2"
              className="project-image"
            />
            <div className="project-info">
              <h3>AutoApplication</h3>
              <p>
                Auto apply bot for Indeed and Linkiden
              </p>
              {/* Placeholder link */}
              <p>
                <a
                  href="https://github.com/CarterPerez-dev/AutoApplication"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View on Github
                </a>
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CERTIFICATIONS SECTION */}
      <section className="certifications-section fade-in">
        <h2 className="section-title">Certifications</h2>
        <div className="certs-grid">
          <div className="cert-card scale-hover">
            <a href={AImg} target="_blank" rel="noopener noreferrer">
              <img src={AImg} alt="Certification A+" className="cert-image" />
            </a>
            <p>CompTIA A+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={NetImg} target="_blank" rel="noopener noreferrer">
              <img src={NetImg} alt="Certification Net+" className="cert-image" />
            </a>
            <p>CompTIA Network+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={SecImg} target="_blank" rel="noopener noreferrer">
              <img src={SecImg} alt="Certification Sec+" className="cert-image" />
            </a>
            <p>CompTIA Security+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={CysaImg} target="_blank" rel="noopener noreferrer">
              <img src={CysaImg} alt="Certification CySa+" className="cert-image" />
            </a>
            <p>CompTIA CySa+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={CaspImg} target="_blank" rel="noopener noreferrer">
              <img src={CaspImg} alt="Certification CASP+" className="cert-image" />
            </a>
            <p>CompTIA CASP+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={PentestImg} target="_blank" rel="noopener noreferrer">
              <img src={PentestImg} alt="Certification Pentest+" className="cert-image" />
            </a>
            <p>CompTIA Pentest+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={PcepImg} target="_blank" rel="noopener noreferrer">
              <img src={PcepImg} alt="Certification Python PCEP" className="cert-image" />
            </a>
            <p>Python PCEP</p>
          </div>
        </div>
      </section>

      {/* BLOG SECTION */}
      <section className="blog-section fade-in">
        <h2 className="section-title">My Blog</h2>
        <div className="blog-list">
          <div className="blog-post tilt-hover">
            <h3>Building Custom Solutions with Quality at the Core</h3>
            <p>
              The blog highlights the role of a System Integration Technician at SealingTech, showcasing how custom defense and cybersecurity systems are designed and built to meet specific client needs. It dives into the process of selecting and configuring hardware, optimizing system performance, and ensuring quality through rigorous testing and ISO 9001 standards. The post also explores the importance of cable management, airflow, and modular design in creating reliable, scalable solutions that support critical operations.
            </p>
            <a href="https://www.sealingtech.com/2024/10/03/building-custom-solutions-with-quality-at-the-core/" target="_blank" rel="noopener noreferrer" className="blog-link">
              Read More
            </a>
          </div>
          {/* Another blog post */}
          <div className="blog-post tilt-hover">
            <h3>Coming Soon</h3>
            <p>
              This blog I am currently still in the process of writing.
            </p>
            <a href="https://www.sealingtech.com/" target="_blank" rel="noopener noreferrer" className="blog-link">
              Read More
            </a>
          </div>
        </div>
      </section>

      {/* RESUME SECTION */}
      <section className="resume-section fade-in">
        <h2 className="section-title">My Résumé</h2>
        <div className="resume-info">
          <p>View or download my detailed résumé below:</p>
          <a
            href={Resume}
            target="_blank"
            rel="noopener noreferrer"
            className="resume-link"
          >
            Check Out My Résumé
          </a>
        </div>
      </section>

      {/* CONTACT & SOCIALS SECTION */}
      <section className="contact-social-section fade-in">
        <h2 className="section-title">Contact & Social</h2>
        <div className="contact-info">
          <p>Phone: <span className="accent-text">443-510-0866</span></p>
          <p>
            Email:{' '}
            <a
              href="mailto:CarterPerez-dev@ProxyAuthRequired.com"
              className="accent-link"
            >
              CarterPerez-dev@ProxyAuthRequired.com
            </a>
          </p>
        </div>
        <div className="social-links">
          <a
            href="https://github.com/CarterPerez-dev"
            target="_blank"
            rel="noopener noreferrer"
            className="social-icon"
          >
            GitHub
          </a>
          <a
            href="https://www.linkedin.com/in/carter-perez-ProxyAuthRequired/"
            target="_blank"
            rel="noopener noreferrer"
            className="social-icon"
          >
            LinkedIn
          </a>
        </div>
      </section>

      {/* FOOTER SECTION */}
      <footer className="portfolio-footer">
        <p>© {new Date().getFullYear()} Carter Perez - All Rights Reserved</p>
      </footer>
    </div>
  );
}

export default PortfolioNotEgg;

================
File: frontend/my-react-app/src/components/EasterEgg/Portfolio.css
================
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.portfolio-container {
  background: #0f0f0f;
  color: #ffffff;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
  padding-bottom: 50px;
}


.egg-popup {
  position: fixed;
  top: 60px;
  right: 20px;
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  padding: 15px;
  z-index: 9999; 
  animation: fadeInUp 0.5s forwards;
}

.egg-popup p {
  margin: 0;
  color: #ff3d3d;
  font-size: 0.95rem;
  font-family: 'Orbitron', sans-serif;
}


.tiny-root {
  color: #b3b3b3;
  cursor: pointer;
  font-size: 0.8rem;
  margin-top: 15px;
}
.tiny-root:hover {
  text-decoration: underline;
}

/* ==================== HERO SECTION ==================== */
.hero-section {
  position: relative;
  width: 100%;
  padding: 60px 20px;
  text-align: center;
  background: linear-gradient(45deg, #1a1a1a, #272727);
  margin-bottom: 40px;
}

.hero-content {
  max-width: 800px;
  margin: 0 auto;
}

.hero-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 2.5em;
  color: #ff3d3d;
  margin-bottom: 10px;
  text-shadow: 2px 2px #000;
}


.portfolio-glitch {
  position: relative;
  display: inline-block;
  animation: portfolioGlitch 3s infinite;
}

@keyframes portfolioGlitch {
  0%, 20%, 40%, 60%, 100% {
    text-shadow: 1px 1px #00ffea, -1px -1px #ff00f5;
  }
  10% {
    text-shadow: 2px 2px #ff003c;
  }
  30% {
    text-shadow: -2px 0px #20ff00;
  }
  50% {
    text-shadow: 2px -2px #001eff;
  }
  70% {
    text-shadow: -2px 2px #fcff00;
  }
  90% {
    text-shadow: 3px 3px #ff00c6;
  }
}

.hero-subtitle {
  font-size: 1.2em;
  color: #ffffff;
  margin-bottom: 30px;
  line-height: 1.4em;
}

.hero-avatar {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.profile-pic {
  width: 180px;
  height: 180px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #ff3d3d;
  box-shadow: 0 0 15px rgba(255, 61, 61, 0.5);
}

/* ==================== SECTION TITLES ==================== */
.section-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 2em;
  color: #ff3d3d;
  text-align: center;
  margin-bottom: 20px;
  text-shadow: 2px 2px #000;
}

/* ==================== FADE-IN ANIMATION ==================== */
.fade-in {
  opacity: 0;
  transform: translateY(15px);
  animation: fadeInUp 1s ease forwards;
  margin-bottom: 40px;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0px);
  }
}

/* ==================== ABOUT WORK ==================== */
.about-work {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
}

.about-work .work-details p {
  margin-bottom: 1em;
  line-height: 1.5em;
  text-align: justify;
}

/* ==================== PROJECTS SECTION ==================== */
.projects-section {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 20px;
}

.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 20px;
}

.project-card {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  transition: transform 0.3s;
}

.project-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
}

.project-info {
  padding: 15px;
}

.project-info h3 {
  color: #ff3d3d;
  margin-bottom: 10px;
  font-size: 1.3em;
}

.project-info p {
  line-height: 1.4em;
  font-size: 0.95em;
}


.pulse-hover:hover {
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.02);
  }
  100% {
    transform: scale(1);
  }
}

/* ==================== CERTIFICATIONS SECTION ==================== */
.certifications-section {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 20px;
}

.certs-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 20px;
  justify-items: center;
}

.cert-card {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  width: 180px;
  text-align: center;
  padding: 10px;
}

.cert-image {
  width: 120px;
  height: 120px;
  object-fit: cover;
  margin-bottom: 10px;
  border-radius: 5px;
  border: 2px solid #ff3d3d;
}


.scale-hover:hover {
  transform: scale(1.05);
}

/* ==================== BLOG SECTION ==================== */
.blog-section {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
}

.blog-list {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
}

.blog-post {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  padding: 15px;
}

.blog-post h3 {
  margin-bottom: 10px;
  color: #ff3d3d;
}

.blog-post p {
  line-height: 1.4em;
  margin-bottom: 15px;
}

.blog-link {
  color: #00fff5;
  text-decoration: none;
  border: 1px solid #00fff5;
  padding: 5px 10px;
  border-radius: 5px;
}

.blog-link:hover {
  background-color: #00fff5;
  color: #000;
}


.tilt-hover:hover {
  transform: rotate(1deg) scale(1.02);
  transition: transform 0.3s;
}

/* ==================== RESUME SECTION ==================== */
.resume-section {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
  text-align: center;
}

.resume-info {
  background: #1a1a1a;
  border: 2px solid #ff3d3d;
  border-radius: 8px;
  padding: 15px;
  margin-top: 20px;
}

.resume-info p {
  margin-bottom: 10px;
}

.resume-link {
  display: inline-block;
  color: #00fff5;
  border: 2px solid #00fff5;
  border-radius: 5px;
  padding: 8px 15px;
  text-decoration: none;
  transition: background-color 0.3s;
}

.resume-link:hover {
  background-color: #00fff5;
  color: #000;
}

/* ==================== CONTACT & SOCIALS SECTION ==================== */
.contact-social-section {
  max-width: 800px;
  margin: 0 auto;
  text-align: center;
  padding: 0 20px;
}

.contact-info p {
  margin-bottom: 10px;
}

.accent-text {
  color: #ff3d3d;
  font-weight: bold;
}

.accent-link {
  color: #00fff5;
  text-decoration: none;
  margin-left: 5px;
  border-bottom: 1px dotted #00fff5;
}

.accent-link:hover {
  text-decoration: underline;
}

.social-links {
  margin-top: 20px;
}

.social-icon {
  display: inline-block;
  color: #ffffff;
  background: #2b2b2b;
  margin: 0 10px;
  padding: 8px 15px;
  border-radius: 5px;
  border: 2px solid #ff3d3d;
  text-decoration: none;
  transition: background-color 0.3s, transform 0.3s;
}

.social-icon:hover {
  background-color: #ff3d3d;
  transform: scale(1.05);
}

/* ==================== FOOTER ==================== */
.portfolio-footer {
  text-align: center;
  padding: 20px;
  margin-top: 40px;
  border-top: 2px solid #ff3d3d;
}

.portfolio-footer p {
  color: #666;
  font-size: 0.9em;
}

================
File: frontend/my-react-app/src/components/EasterEgg/Portfolio.js
================
// components/EasterEgg/Portfolio.js
import React, { useState } from 'react';
import './Portfolio.css';


import meImage from './me.png';
import AImg from './A.png';
import NetImg from './network.png';
import SecImg from './sec.png';
import CysaImg from './cysa.png';
import CaspImg from './CASP.png';
import PentestImg from './pentest.png';
import PcepImg from './pcep.png';


import Project1Img from './project1.jpg';
import Project2Img from './project2.jpg';
import Resume from './CarterPerez.pdf';


function Portfolio() {
  const [showEggMessage, setShowEggMessage] = useState(false);

  const handleRootClick = () => {
    setShowEggMessage(true);
    setTimeout(() => {
      setShowEggMessage(false);
    }, 7000);
  };

  return (
    <div className="portfolio-container">
      {showEggMessage && (
        <div className="egg-popup">
          <p>Nice job on finding the Easter Egg—root is me lol!...........get it?  😅 👉👈</p>
        </div>
      )}

      {/* HERO SECTION */}
      <section className="hero-section">
        <div className="hero-content ">
          <h1 className="hero-title portfolio-glitch">Carter Perez Portfolio</h1>
          <p className="hero-subtitle">
            <span>Integration Technician</span> | <span>Cybersecurity Enthusiast</span>
          </p>
          <div className="hero-avatar">
            <img
              src={meImage}
              alt="Profile"
              className="profile-pic"
            />
          </div>
          <div className="tiny-root" onClick={handleRootClick}>
            Did you click root@ twice in the Sidebar to find this page?
          </div>
        </div>
      </section>

      {/* ABOUT MY WORK/JOB SECTION */}
      <section className="about-work fade-in">
        <h2 className="section-title">Where I Work</h2>
        <div className="work-details">
          <p>
            I work at SealingTech as a System Integration Technician, where I build and configure custom cybersecurity and defense systems. My focus is on designing secure, reliable environments that meet client needs and perform under demanding conditions. I handle system assembly, optimization, and testing to ensure everything operates smoothly and efficiently. With attention to detail and quality, I help deliver solutions that support critical operations and long-term scalability.
          </p>
          <p>
            Outside the 9-to-5, I’m constantly learning new skills—ranging from penetration testing labs to advanced programming. 
            I believe in pushing the boundaries of what’s possible through curiosity and creative problem-solving.
          </p>
        </div>
      </section>

      {/* PROJECTS SECTION */}
      <section className="projects-section fade-in">
        <h2 className="section-title">Projects</h2>
        <div className="projects-grid">
          {/* Project 1 */}
          <div className="project-card pulse-hover">
            <img
              src={Project1Img}
              alt="Project 1"
              className="project-image"
            />
            <div className="project-info">
              <h3>www.ProxyAuthrequired.com</h3>
              <p>
                ProxyAuthRequired.com is a centralized cybersecurity platform that merges AI-driven simulations, hands-on learning modules, and a robust Resource Hub to help users at any level sharpen their skills. It includes tools like GRC Wizard for compliance questions, Log Analysis for real-time practice, and scenario-based exercises for incident response. By combining interactive content with up-to-date threats and exam objectives, ProxyAuthRequired.com strives to be a single-stop solution for professionals, students, and educators looking to elevate their cybersecurity knowledge and readiness.
              </p>
              {/* GitHub link for Project One */}
              <p>
                <a
                  href="https://github.com/CarterPerez-dev/ProxyAuthRequired"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View on GitHub
                </a>
              </p>
            </div>
          </div>

          {/* Project 2 */}
          <div className="project-card pulse-hover">
            <img
              src={Project2Img}
              alt="Project 2"
              className="project-image"
            />
            <div className="project-info">
              <h3>AutoApplication</h3>
              <p>
                Auto apply bot for Indeed and Linkiden
              </p>
              <p>
                <a
                  href="https://github.com/CarterPerez-dev/AutoApplication"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View On Github
                </a>
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CERTIFICATIONS SECTION */}
      <section className="certifications-section fade-in">
        <h2 className="section-title">Certifications</h2>
        <div className="certs-grid">
          <div className="cert-card scale-hover">
            <a href={AImg} target="_blank" rel="noopener noreferrer">
              <img src={AImg} alt="Certification A+" className="cert-image" />
            </a>
            <p>CompTIA A+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={NetImg} target="_blank" rel="noopener noreferrer">
              <img src={NetImg} alt="Certification Net+" className="cert-image" />
            </a>
            <p>CompTIA Network+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={SecImg} target="_blank" rel="noopener noreferrer">
              <img src={SecImg} alt="Certification Sec+" className="cert-image" />
            </a>
            <p>CompTIA Security+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={CysaImg} target="_blank" rel="noopener noreferrer">
              <img src={CysaImg} alt="Certification CySa+" className="cert-image" />
            </a>
            <p>CompTIA CySa+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={CaspImg} target="_blank" rel="noopener noreferrer">
              <img src={CaspImg} alt="Certification CASP+" className="cert-image" />
            </a>
            <p>CompTIA CASP+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={PentestImg} target="_blank" rel="noopener noreferrer">
              <img src={PentestImg} alt="Certification Pentest+" className="cert-image" />
            </a>
            <p>CompTIA Pentest+</p>
          </div>
          <div className="cert-card scale-hover">
            <a href={PcepImg} target="_blank" rel="noopener noreferrer">
              <img src={PcepImg} alt="Certification Python PCEP" className="cert-image" />
            </a>
            <p>Python PCEP</p>
          </div>
        </div>
      </section>

      {/* BLOG SECTION */}
      <section className="blog-section fade-in">
        <h2 className="section-title">My Blog</h2>
        <div className="blog-list">
          <div className="blog-post tilt-hover">
            <h3>Building Custom Solutions with Quality at the Core</h3>
            <p>
              The blog highlights the role of a System Integration Technician at SealingTech, showcasing how custom defense and cybersecurity systems are designed and built to meet specific client needs. It dives into the process of selecting and configuring hardware, optimizing system performance, and ensuring quality through rigorous testing and ISO 9001 standards. The post also explores the importance of cable management, airflow, and modular design in creating reliable, scalable solutions that support critical operations.
            </p>
            <a
              href="https://www.sealingtech.com/2024/10/03/building-custom-solutions-with-quality-at-the-core/"
              target="_blank"
              rel="noopener noreferrer"
              className="blog-link"
            >
              Read More
            </a>
          </div>
          {/* Another blog post */}
          <div className="blog-post tilt-hover">
            <h3>Coming Soon</h3>
            <p>
              This blog I am currently still in the process of writing.
            </p>
            <a href="https://www.sealingtech.com/" target="_blank" rel="noopener noreferrer" className="blog-link">
              Read More
            </a>
          </div>
        </div>
      </section>

      {/* RESUME SECTION */}
      <section className="resume-section fade-in">
        <h2 className="section-title">My Résumé</h2>
        <div className="resume-info">
          <p>View or download my detailed résumé below:</p>
          <a 
            href={Resume}
            target="_blank"
            rel="noopener noreferrer"
            className="resume-link"
          >
            Check Out My Résumé
          </a>
        </div>
      </section>

      {/* CONTACT & SOCIALS SECTION */}
      <section className="contact-social-section fade-in">
        <h2 className="section-title">Contact & Social</h2>
        <div className="contact-info">
          <p>Phone: <span className="accent-text">443-510-0866</span></p>
          <p>
            Email:{' '}
            <a
              href="mailto:CarterPerez-dev@ProxyAuthRequired.com"
              className="accent-link"
            >
              CarterPerez-dev@ProxyAuthRequired.com
            </a>
          </p>
        </div>
        <div className="social-links">
          <a
            href="https://github.com/CarterPerez-dev"
            target="_blank"
            rel="noopener noreferrer"
            className="social-icon"
          >
            GitHub
          </a>
          <a
            href="https://www.linkedin.com/in/carter-perez-ProxyAuthRequired/"
            target="_blank"
            rel="noopener noreferrer"
            className="social-icon"
          >
            LinkedIn
          </a>
        </div>
      </section>

      {/* FOOTER SECTION */}
      <footer className="portfolio-footer">
        <p>© {new Date().getFullYear()} Carter Perez - All Rights Reserved</p>
      </footer>
    </div>
  );
}

export default Portfolio;

================
File: frontend/my-react-app/src/components/pages/AboutPage/About.css
================
body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

.main-content {
  margin-left: 220px;
  transition: margin-left 0.3s ease;
  padding: 20px;
  box-sizing: border-box;
}

.sidebar.collapsed ~ .main-content {
  margin-left: 0;
}

.about-page-container {
  position: relative;
  padding: 20px;
  color: #f5f5f5;
  background: url('./AboutBackground.jpg') center no-repeat;
  background-attachment: fixed;
  background-size: cover;
  box-sizing: border-box;
  min-height: 100vh;
  border: 2px solid #ff0000;
  border-radius: 20px;
}

.about-header {
  text-align: center;
  z-index: 3;
  position: relative;
  padding: 20px;
}

.about-header h1 {
  color: #C70039;
  font-size: 2rem;
  
}

.about-header p {
  font-size: 1rem;
  color: #C70039;
}

.about-content {
  display: flex;
  flex-direction: column;
  z-index: 3;
  position: relative;
  max-width: 90%;
  margin: 0 auto;
}

.about-intro {
  text-align: center;
}

.about-intro h2 {
  color: #ff0000;
  font-size: 2rem;
  margin-bottom: 20px;
}

.about-tools {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center;
}

.tool-column {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 100%;
  max-width: 300px;
}

.tool-card {
  background-color: #151515;
  border: 2px solid #ff0000;
  padding: 20px;
  border-radius: 10px;
  text-align: center;
  transition: transform 0.3s;
}

.tool-card:hover {
  transform: scale(1.05);
}

.tool-card h3 {
  color: #C70039;
  font-size: 1.2rem;
  margin: 10px 0;
}

.tool-card p {
  color: #f5f5f5;
  font-size: 0.9rem;
}

.about-certifications {
  text-align: center;
  margin-top: 20px;
}

.certifications-list {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-content: center;
}

.certifications-list ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.certifications-list li {
  background: #1a1a1a;
  padding: 5px 10px;
  margin-bottom: 5px;
  border-left: 4px solid #ff0000;
}

.links-title {
  font-size: 1.8rem;
  color: #f5f5f5;
  text-align: center;
  margin-bottom: 20px;
  text-shadow: 1px 1px #fff;
}

.github-title,
.linkedin-title {
  font-size: 1.2rem;
  border: 2px solid #1f1d1d;
  background-color: #1f1d1d;
  border-radius: 5px;
  display: inline-block;
  margin: 10px;
  padding: 5px 10px;
  color: #fff;
}

.linkedin-title {
  color: #0077b5;
}

.repository-link,
.linkedin-link {
  color: #0066cc;
  font-size: 1.1rem;
  text-decoration: none;
  font-weight: bold;
  padding: 10px;
}

.repository-link:hover,
.linkedin-link:hover {
  color: #003399;
}

.carter-title {
  font-size: 1.5rem;
  color: #f5f5f5;
  text-shadow: 1px 1px #fff;
  text-align: center;
  margin-bottom: 10px;
}

.carter-description {
  font-size: 1rem;
  color: #f5f5f5;
  text-align: left;
  margin-left: 20px;
}

.about-footer {
  text-align: center;
  border-top: 3px solid #ff0000;
  padding: 10px;
  margin-top: 30px;
  font-size: 0.9rem;
  border: 2px solid #1f1d1d;
  background-color: #1f1d1d;
}

.about-main-header,
.carter-title,
.links-title {
  color: #ff0000;
  position: relative;
  animation: glitch 3s infinite;
}

@keyframes glitch {
  0%, 90% {
    color: #C70039;
    transform: translate(0, 0);
  }
  91%, 92% {
    color: #ffffff;
    transform: translate(-2px, 2px);
  }
  93%, 94% {
    color: #C70039;
    transform: translate(2px, -1px);
  }
  95%, 96% {
    color: #ffffff;
    transform: translate(-1px, 1px);
  }
  97%, 100% {
    color: #ff0000;
    transform: translate(0, 0);
  }
}

@media (max-width: 768px) {
  .tool-column {
    max-width: none;
  }
  .carter-description {
    margin-left: 0;
    text-align: center;
  }
}


.purple-text {
  color: #4169e1;
}


.custom-email-link {
  color:  #4169e1;
  text-decoration: none;
  margin-left: 5px;
}
.custom-email-link:hover {
  text-decoration: underline;
}


.contact-section,
.portfolio-section {
  margin: 30px 0;
  background-color: rgba(0, 0, 0, 0.6);
  padding: 15px;
  border: 2px solid #ff0000;
  border-radius: 10px;
  transition: transform 0.3s;
}

.readme-section {
  margin: 30px 0;
  padding: 15px;
  transition: transform 0.3s;
}

.section-title-glitch {
  color: #ff0000;
  position: relative;
  animation: glitch 3s infinite;
  text-align: center;
  margin-bottom: 10px;
  text-shadow: 1px 1px #fff;
}




.readme-links {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 10px;
}

.readme-links a {
  color: #C70039;
  font-weight: bold;
  text-decoration: none;
  background-color: #000;
  border: 2px solid #ff0000;
  border-radius: 10px;
  padding: 5px 15px;
  transition: background-color 0.3s;
}

.readme-links a:hover {
  background-color: #ff0000;
  color: #fff;
}

================
File: frontend/my-react-app/src/components/pages/AboutPage/About.js
================
import React from 'react';
import './About.css'; 


function About() {
  return (
    <div className="about-page-container">
      {/* About Section */}
      <div className="about-content">
        <h1 className="about-main-header orbitron-font">About ProxyAuthRequired</h1>

        
        <section className="about-intro">
          <p>
            ProxyAuthRequired is your personal launchpad into the realm of cybersecurity, combining a variety of tools—like analogy-driven explanations, daily newsletters, targeted test questions, and well-organized study materials—into one cohesive platform. Designed by Carter, an integration tech at Sealing Tech who thrives on making hard concepts understandable, ProxyAuthRequired encourages learners to explore content on their own terms. With its fusion of practical learning and interactive experiences, you'll move beyond rote memorization to truly grasp the why behind cybersecurity practices.
          </p>
          <p>
            The result is a fun, immersive environment where theory meets real-world practice, ensuring you grow from curious beginner to confident professional.
          </p>
        </section>

        {/* Tools Section */}
        <section className="about-tools">
          <div className="tool-column">
            <div className="tool-card">
              <h3>Xploitcraft</h3>
              <p>Xploitcraft allows you to specify a vulnerability and or an evasion technique, then generates a realistic payload that attackers might use. By seeing this code in action, you gain insight into the logic and methods behind sophisticated exploits.</p>
            </div>
            <div className="tool-card">
              <h3>Log Analysis</h3>
              <p>Log Analysis equips you with the tools to interpret raw system logs and spot hidden patterns. You can dive into simulated logs, tweak complexity settings, and uncover suspicious activities that hint at breaches or policy violations. By practicing on varied datasets, you develop the skill to sift through noise, identify critical events, and piece together a coherent timeline of incidents. Over multiple sessions, you’ll refine your investigative techniques, learn which anomalies to flag, and how to draw meaningful conclusions.</p>
            </div>
          </div>

          <div className="tool-column">
            <div className="tool-card">
              <h3>AnalogyHub</h3>
              <p>AnalogyHub takes the complex world of cybersecurity and translates it into vivid, relatable metaphors. Instead of wading through dense technical jargon, you’ll discover comparisons that turn complicated protocols into familiar concepts—like comparing cryptography keys to house keys, or firewalls to castle walls. Each analogy aims to clarify, entertain, and embed the lesson into your memory. As you explore more metaphors, you’ll find it easier to understand advanced topics like zero-trust architectures or network segmentation.</p>
            </div>
            <div className="tool-card">
              <h3>GRC Wizard</h3>
              <p>GRC Wizard demystifies Governance, Risk, and Compliance frameworks, guiding you step-by-step through complex policies and standards. You can specify difficulty levels and choose particular categories—or let it pick one at random—to generate a focused test question. By tackling these questions, you’ll learn how to navigate regulatory mandates, implement controls, and manage risks efficiently. </p>
            </div>
          </div>


          <div className="tool-column">
            <div className="tool-card">
              <h3>Scenario Sphere</h3>
              <p>Scenario Sphere transports you into a tailored cybersecurity incident, letting you pick the threat type, skill level, and over 2000 different types of attacks to choose from. Once set, it generates a realistic scenario that immerses you in the crisis, compelling you to think critically. After presenting the context, it provides four thought-provoking test questions, ensuring you truly internalize the lesson. By solving these scenario-based challenges, you sharpen your decision-making and adaptability under pressure.</p>
            </div>
            <div className="tool-card">
              <h3>Daily Cyber Brief</h3>
              <p>Daily Cyber Brief delivers curated cybersecurity news, updates, CompTIA objectives, study tips, and best practices straight to your inbox each morning. Its concise format ensures you stay informed without feeling overwhelmed—just enough to keep you aware of evolving threats and defenses. By regularly receiving these summaries, you’ll maintain a steady awareness of industry shifts, from newly discovered vulnerabilities to emerging compliance requirements.</p>
            </div>
          </div>
        </section>


        <section className="about-certifications">
          <div className="certifications-list">
            <div>
              <h3>Current Certifications ---</h3>
              <ul>
                <li>CompTIA A+</li>
                <li>CompTIA Network+</li>
                <li>CompTIA Security+</li>
                <li>CompTIA CySa+</li>
                <li>CompTIA Pentest+</li>
                <li>CompTIA CASP+</li>
                <li>Python PCEP</li>
              </ul>
            </div>
            <div>
              <h3> --- In Progress/Up Next</h3>
              <ul>
                <li>CISSP</li>
                <li>OSCP</li>
                <li>OSWA</li>
                <li>OSWE</li>
                <li>OSEP</li>
                <li>OSMR</li>
                <li>OSED</li>
              </ul>
            </div>
          </div>
        </section>


        <section className="about-links">
          <h2 className="links-title">Links</h2>
          <div className="links-container">
            <p>
              <strong className="github-title">GitHub:</strong> 
              <a className="repository-link" href="https://github.com/Yoshi2003/ProxyAuthRequired" target="_blank" rel="noopener noreferrer">Repository</a>
            </p>
            <p>
              <strong className="linkedin-title">LinkedIn:</strong> 
              <a className="linkedin-link" href="https://www.linkedin.com/in/carter-perez-ProxyAuthRequired/" target="_blank" rel="noopener noreferrer">Carter's LinkedIn</a>
            </p>
          </div>
        </section>

        {/* About Carter Section */}
        <section className="about-carter">
          <h2 className="carter-title">About Carter</h2>
          <p className="carter-description">
           My name is Carter, I’m 21, and I work as an Integration Technician at Sealing Tech. Im driven by a passion for making cybersecurity learning both accessible and engaging. Just a year ago, I was a General Manager in the fast-food industry, but I decided to pivot toward a field that truly excites me. Now, I’m pursuing a master’s degree in Cybersecurity at UMGC while building a career that aligns with my goals and interests.

My favorite show, Mr. Robot, inspires not only my mindset but also the aesthetic of this website—it’s a nod to the hacker culture that first sparked my curiosity in the field. Outside of work, I’m always challenging myself to learn and grow. One way I do this is by diving into certifications, aiming to complete them as efficiently as possible. It’s a rewarding way to learn new things, and deepen my expertise while tackling new challenges.

I also enjoy programming, web design, and creating tools to make life easier. Whether it’s writing scripts to streamline workflows or building applications just for fun, I love the mix of creativity and problem-solving. My long-term goals include growing into a cybersecurity analyst role, then transitioning into penetration testing. Eventually, I hope to step into a Chief Technology Officer (CTO) position—or even launch my own cybersecurity company.

By the way, there is a simple little Easter Egg in this website, look through my git repo to find it or solve the riddle.
 
 Riddle............ I’m the master of all, the start of the chain,
Tap me once, and I’ll remain.
Twice, however, and you’ll see,
What lies behind the root of me.
          </p>
        </section>

        {/* Contact Section */}
        <section className="contact-section pulse-on-hover">
          <h2 className="section-title-glitch">Contact</h2>
          <p>Phone: <span className="purple-text">443-510-0866</span></p>
          <p>
            Email: 
            <a 
              href="mailto:CarterPerez-dev@ProxyAuthRequired.com"
              className="custom-email-link"
            >
              CarterPerez-dev@ProxyAuthRequired.com
            </a>
          </p>
        </section>

        {/* ReadMe Section */}
        <section className="readme-section pulse-on-hover">
          <h2 className="section-title-glitch">ReadMe</h2>
          <div className="readme-links">
            <a href="https://github.com/CarterPerez-dev/ProxyAuthRequired/blob/main/README.md" target="_blank" rel="noopener noreferrer">README.md </a>
            <a href="https://github.com/CarterPerez-dev/ProxyAuthRequired/blob/main/AWS.md" target="_blank" rel="noopener noreferrer">AWS.md </a>
            <a href="https://github.com/CarterPerez-dev/ProxyAuthRequired/blob/main/INSTALL.md" target="_blank" rel="noopener noreferrer">INSTALL.md </a>
          </div>
        </section>

        {/* Portfolio Section */}
        <section className="portfolio-section">
          <h2 className="section-title-glitch ">Portfolio</h2>
          <p>
            Check out my{" "}
            <a href="https://carterperez-dev.com/" target="_blank" rel="noopener noreferrer">
              Portfolio
            </a> 
          </p>
        </section>
      </div>

      <footer className="about-footer">
        <p>© 2025 ProxyAuthRequired. Developed and Designed by Carter Perez.</p>
      </footer>
    </div>
  );
}

export default About;

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminInterface.css
================
/* frontend/my-react-app/src/components/pages/AdminInterface/AdminInterface.css */

.admin-interface-container {
  width: 100%;
  min-height: 100vh;
  max-width: 50%;
  margin: 1.25rem auto; 
  padding: 1.25rem; 
  border-radius: 0.5rem; 
  box-shadow: 0 0 0.625rem rgba(0, 0, 0, 0.1); 
  color: #787878;
}

.admin-interface-container h2 {
  text-align: center;
  margin-bottom: 1.25rem; 
}

.form-group {
  margin-bottom: 0.938rem; 
  display: flex;
  flex-direction: column;
  align-items: stretch;
}

.form-group label {
  font-weight: bold;
  margin-bottom: 0.313rem; 
}

.admin-input {
  width: 50%;
  padding: 0.625rem; 
  border: 1px solid #8B0000;
  border-radius: 0.25rem; 
  background-color: #000;
  color: #fff;
}

.admin-submit-button {
  padding: 0.625rem 1.25rem; 
  background-color: #8B0000;
  border: none;
  color: white;
  font-size: 1rem; 
  border-radius: 0.25rem; 
  cursor: pointer;
  transition: background-color 0.3s;
  margin-top: 0.625rem;
}

.admin-submit-button:hover {
  background-color: #0056b3;
}

.admin-message {
  margin-top: 0.938rem; 
  text-align: center;
  font-weight: bold;
  color: #8B0000;
}

@media (max-width: 768px) {
  .admin-input {
    width: 80%; 
  }

  .admin-interface-container {
    padding: 1rem; 
    margin: 1rem auto;
  }

  .admin-submit-button {
    width: 100%; 
  }
}

@media (min-width: 1200px) {
  .admin-input {
    width: 40%; 
  }

  .admin-submit-button {
    width: 50%; 
  }
}

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminInterface.js
================
// frontend/my-react-app/src/components/pages/AdminInterface/AdminInterface.js

import React, { useState } from 'react';
import { Tabs, Tab, Box } from '@mui/material';  
import './AdminInterface.css';

import AdminNewsletter from './AdminNewsletter';
import AdminSubscribers from './AdminSubscribers';
import AdminTriggerTasks from './AdminTriggerTasks';
import AdminMonitorStatus from './AdminMonitorStatus';

import adminBackground from './adminbackground.jpg'; 

const AdminInterface = () => {
  const [authKey, setAuthKey] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [message, setMessage] = useState('');
  const [tabIndex, setTabIndex] = useState(0);

  const handleAuthSubmit = async () => {
    if (!authKey) {
      setMessage("API Key is required to proceed.");
      return;
    }

    try {
      const response = await fetch('/api/authenticate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ password: authKey.trim() })
      });

      const data = await response.json();

      if (response.status === 200) {
        setIsAuthenticated(true);
        setApiKey(authKey.trim());
        setMessage('');
      } else {
        setMessage(data.error || "Authentication failed.");
      }
    } catch (error) {
      console.error('Error during authentication:', error);
      setMessage("An error occurred. Please try again.");
    }
  };

  const handleTabChange = (event, newValue) => {
    setTabIndex(newValue);
  };

  const authBackgroundStyle = {
    backgroundImage: `url(${adminBackground})`,
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    minHeight: '100vh', 
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  };

  if (!isAuthenticated) {
    return (
      <div className="admin-interface-container" style={authBackgroundStyle}>
        <div style={{ width: '100%' }}>
          <h2>Admin Interface</h2>
          <div className="form-group">
            <label>Enter admin password:</label>
            <input
              type="password"
              value={authKey}
              onChange={(e) => setAuthKey(e.target.value)}
              placeholder="password"
              className="admin-input"
            />
          </div>
          <button
            onClick={handleAuthSubmit}
            className="admin-submit-button"
          >
            Submit
          </button>
          {message && <p className="admin-message">{message}</p>}
        </div>
      </div>
    );
  }

  return (
    <div className="admin-interface-container">
      <h2>Admin Interface</h2>
      <Tabs value={tabIndex} onChange={handleTabChange} aria-label="admin tabs">
        <Tab label="Update Newsletter" />
        <Tab label="Manage Subscribers" />
        <Tab label="Trigger Tasks" />
        <Tab label="Monitor Status" />
      </Tabs>
      <Box sx={{ p: 3 }}>
        {tabIndex === 0 && <AdminNewsletter apiKey={apiKey} />}
        {tabIndex === 1 && <AdminSubscribers apiKey={apiKey} />}
        {tabIndex === 2 && <AdminTriggerTasks apiKey={apiKey} />}
        {tabIndex === 3 && <AdminMonitorStatus apiKey={apiKey} />}
      </Box>
    </div>
  );
};

export default AdminInterface;

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminMonitorStatus.css
================
/* my-react-app/src/components/pages/AdminInterface/AdminMonitorStatus.css */

.admin-monitor-status-container {
  padding: 20px;
  background-color: #fafafa;
  border-radius: 6px;
}

.admin-monitor-status-container h3 {
  margin-bottom: 15px;
}

.error {
  color: red;
  font-weight: bold;
}

.status-section {
  margin-bottom: 20px;
}

.status-section h4 {
  margin-bottom: 10px;
}

.status-section p, .status-section li {
  margin: 5px 0;
  font-size: 1em;
  line-height: 1.4;
}

.status-section ul {
  list-style-type: none;
  padding: 0;
}

.status-section li {
  background-color: #f8f9fa;
  padding: 8px;
  border-radius: 4px;
  margin-bottom: 5px;
}

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminMonitorStatus.js
================
import React, { useState, useEffect } from 'react';
import './AdminMonitorStatus.css';

const AdminMonitorStatus = ({ apiKey }) => {
  const [systemInfo, setSystemInfo] = useState({});
  const [appStatus, setAppStatus] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchStatus = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('/api/status/status', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
        },
      });
      const data = await response.json();
      if (response.ok) {
        setSystemInfo(data.system_info || {});
        setAppStatus(data.application_status || {});
      } else {
        setError(data.error || "Failed to fetch status.");
      }
    } catch (err) {
      setError(`Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStatus();
 // eslint-disable-next-line
  }, []);

  return (
    <div className="admin-monitor-status-container">
      <h3>Monitor Application Status</h3>
      {loading && <p>Loading status...</p>}
      {error && <p className="error">{error}</p>}
      {!loading && !error && (
        <>
          <div className="status-section">
            <h4>System Information</h4>
            <p><strong>CPU Usage:</strong> {systemInfo.cpu_percent}%</p>
            <p><strong>Memory Usage:</strong> {systemInfo.memory_percent}%</p>
            <p><strong>Disk Usage:</strong> {systemInfo.disk_percent}%</p>
          </div>
          <div className="status-section">
            <h4>Services Status</h4>
            <ul>
              {Object.entries(appStatus).map(([service, status], idx) => (
                <li key={idx}>
                  <strong>{service}:</strong> {status}
                </li>
              ))}
            </ul>
          </div>
        </>
      )}
    </div>
  );
};

export default AdminMonitorStatus;

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminNewsletter.css
================
/* my-react-app/src/components/pages/AdminInterface/AdminNewsletter.css */

.admin-newsletter-container {
  padding: 20px;
  background-color: #fafafa;
  border-radius: 6px;
}

.admin-newsletter-container h3 {
  margin-bottom: 15px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.admin-textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.admin-newsletter-button {
  padding: 10px 20px;
  background-color: #198754;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.admin-newsletter-button:hover {
  background-color: #157347;
}

.admin-message {
  margin-top: 15px;
  font-weight: bold;
  color: #28a745;
}

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminNewsletter.js
================
import React, { useState } from 'react';
import './AdminNewsletter.css';

const ENDPOINT = "/api/admin/newsletter";

const AdminNewsletter = ({ apiKey }) => {
  const [content, setContent] = useState('');
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);

  const handleUpdateNewsletter = async () => {
    if (!content) {
      setMessage("Newsletter content cannot be empty.");
      return;
    }
    setLoading(true);
    setMessage('');

    try {
      const response = await fetch(ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
        },
        body: JSON.stringify({ content }),
      });

      const data = await response.json();
      if (response.ok) {
        setMessage("Newsletter updated successfully!");
        setContent('');
      } else {
        setMessage(data.error || "An error occurred updating the newsletter.");
      }
    } catch (err) {
      setMessage(`Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="admin-newsletter-container">
      <h3>Update Newsletter</h3>
      <div className="form-group">
        <label>Newsletter Content:</label>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Enter newsletter content here..."
          className="admin-textarea"
          rows="10"
        />
      </div>
      <button
        onClick={handleUpdateNewsletter}
        className="admin-submit-button"
        disabled={loading}
      >
        {loading ? "Updating..." : "Update Newsletter"}
      </button>
      {message && <p className="admin-message">{message}</p>}
    </div>
  );
};

export default AdminNewsletter;

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminSubscribers.css
================
/* my-react-app/src/components/pages/AdminInterface/AdminSubscribers.css */

.admin-subscribers-container {
  padding: 20px;
  background-color: #fafafa;
  border-radius: 6px;
}

.admin-subscribers-container h3 {
  margin-bottom: 15px;
}

.search-input {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.subscribers-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

.subscribers-table th,
.subscribers-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.subscribers-table th {
  background-color: #f2f2f2;
}

.unsubscribe-button {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 6px 10px;
  border-radius: 4px;
  cursor: pointer;
}

.unsubscribe-button:hover {
  background-color: #c82333;
}

.error {
  color: red;
  font-weight: bold;
}

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminSubscribers.js
================
import React, { useState, useEffect } from 'react';
import './AdminSubscribers.css';

const AdminSubscribers = ({ apiKey }) => {
  const [subscribers, setSubscribers] = useState([]);
  const [search, setSearch] = useState('');
  const [filtered, setFiltered] = useState([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const fetchSubscribers = async () => {
    setLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/subscribe/all', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
        },
      });
      const data = await response.json();
      if (response.ok) {
        setSubscribers(data.subscribers);
        setFiltered(data.subscribers);
      } else {
        setMessage(data.error || "Failed to fetch subscribers.");
      }
    } catch (err) {
      setMessage(`Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSubscribers();
     // eslint-disable-next-line
  }, []);

  const handleSearch = (e) => {
    const val = e.target.value.toLowerCase();
    setSearch(val);
    setFiltered(subscribers.filter(sub => sub.toLowerCase().includes(val)));
  };

  const handleUnsubscribe = async (email) => {
    try {
      const response = await fetch('/api/unsubscribe/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey, 
        },
        body: JSON.stringify({ email }),
      });
      const data = await response.json();
      if (response.ok) {
        setSubscribers(prev => prev.filter(s => s !== email));
        setFiltered(prev => prev.filter(s => s !== email));
      } else {
        setMessage(data.error || "Failed to unsubscribe user.");
      }
    } catch (err) {
      setMessage(`Error: ${err.message}`);
    }
  };

  return (
    <div className="admin-subscribers-container">
      <h3>Manage Subscribers</h3>
      <input
        type="text"
        className="search-input"
        placeholder="Search subscribers..."
        value={search}
        onChange={handleSearch}
      />
      {loading && <p>Loading subscribers...</p>}
      {message && <p className="error">{message}</p>}

      {!loading && !message && (
        <table className="subscribers-table">
          <thead>
            <tr>
              <th>Email</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((email, idx) => (
              <tr key={idx}>
                <td>{email}</td>
                <td>
                  <button
                    className="unsubscribe-button"
                    onClick={() => handleUnsubscribe(email)}
                  >
                    Unsubscribe
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default AdminSubscribers;

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminTriggerTasks.css
================
/* my-react-app/src/components/pages/AdminInterface/AdminTriggerTasks.css */

.admin-trigger-tasks-container {
  padding: 20px;
  background-color: #fafafa;
  border-radius: 6px;
}

.admin-trigger-tasks-container h3 {
  margin-bottom: 15px;
}

.trigger-task-button {
  padding: 10px 20px;
  background-color: #28a745;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.trigger-task-button:hover {
  background-color: #218838;
}

.trigger-task-button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.trigger-message {
  margin-top: 15px;
  font-weight: bold;
  color: #17a2b8;
}

================
File: frontend/my-react-app/src/components/pages/AdminInterface/AdminTriggerTasks.js
================
import React, { useState } from 'react';
import './AdminTriggerTasks.css';

const AdminTriggerTasks = ({ apiKey }) => {
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);

  const triggerTask = async () => {
    setLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/celery/trigger-task', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
        },
      });
      const data = await response.json();
      if (response.ok) {
        setMessage(`Task triggered successfully. Task ID: ${data.task_id}`);
      } else {
        setMessage(data.error || "Failed to trigger task.");
      }
    } catch (err) {
      setMessage(`Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="admin-trigger-tasks-container">
      <h3>Trigger Celery Tasks</h3>
      <button
        onClick={triggerTask}
        className="trigger-task-button"
        disabled={loading}
      >
        {loading ? "Triggering..." : "Send Newsletter Now"}
      </button>
      {message && <p className="trigger-message">{message}</p>}
    </div>
  );
};

export default AdminTriggerTasks;

================
File: frontend/my-react-app/src/components/pages/AnalogyPage/AnalogyHub.css
================
body {
  background-color: #0c0c0c; 
  color: #00ffea; 
  font-family: 'Courier New', Courier, monospace;
  margin: 0;
  padding: 0;
  overflow-x: hidden; 
  box-sizing: border-box; 
}

.analogy-hub-container {
  width: 100vw; 
  max-width: 100%;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
  opacity: 0.9;
  border: 0.125rem solid #ff004d;
  border-radius: 0.625rem;
  box-shadow: 0 0 1.25rem #ff004d;
  background-image: url('./backround1.jpg');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  min-height: 100vh;
  box-sizing: border-box; 
  overflow-x: hidden; 
}

.analogy-hub-title {
  font-size: 3.7rem;
  color: #8B0000;
  text-shadow: 0.125rem 0.125rem #ffffff;
  margin-bottom: 1.25rem;
  word-wrap: break-word;
  max-width: 90vw;
  margin-left: auto;
  margin-right: auto;
}

.analogy-hub-tagline {
  font-size: 1.5rem;
  font-weight: bold;
  color: #8B0000; 
  margin-bottom: 1.875rem;
  text-shadow: 0.14375rem 0.14375rem #000000;
  word-wrap: break-word;
  max-width: 90vw;
  margin-left: auto;
  margin-right: auto;
}

.analogy-hub-form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.25rem;
  max-width: 90vw;
  margin: 0 auto;
  overflow-x: hidden;
}

.analogy-type-section, .analogy-category-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 1.25rem;
}

.analogy-input-fields {
  display: flex;
  flex-direction: column;
  gap: 0.9375rem; 
  width: 60%;
  max-width: 30rem; 
  margin: 0 auto;
  box-sizing: border-box;
}

.analogy-hub-input {
  padding: 0.9375rem;
  background-color: #222;
  color: #00ffea;
  border: 0.125rem solid #8B0000;
  border-radius: 0.5rem;
  font-size: 1rem;
  width: 100%;
  box-sizing: border-box;
}

.analogy-generate-button {
  padding: 0.9375rem 1.875rem;
  background-color: #8B0000;
  color: #000;
  border-radius: 0.5rem;
  border: 0.1875rem solid #000000;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.analogy-generate-button:hover {
  background-color: #00CED1; 
}

.button-and-loader {
  display: flex;
  align-items: center;
  gap: 0.9375rem;
  justify-content: center;
  flex-wrap: wrap;
  box-sizing: border-box;
}

.loading-icon {
  width: 3.125rem; 
  height: 3.125rem;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.analogy-output-container {
  margin-top: 1.875rem;
  padding: 1.25rem;
  background-color: rgba(17, 17, 17, 0.95);
  border: 0.125rem solid #8B0000;
  border-radius: 0.625rem;
  max-height: 18.75rem; 
  overflow-y: auto;
  max-width: 90vw;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  box-sizing: border-box;
}

.generated-analogy {
  font-size: 1.2rem;
  line-height: 1.5em;
  color: #00ffea;
  padding: 0.9375rem;
  word-wrap: break-word;
  text-align: left;
  box-sizing: border-box;
}

.copy-button {
  position: absolute;
  top: 0.625rem;
  right: 0.625rem;
  background-color: #8B0000;
  color: #000;
  border: 0.125rem solid #000;
  border-radius: 0.5rem;
  padding: 0.3rem 0.7rem;
  font-size: 0.8rem;
  cursor: pointer;
  font-weight: bold;
}


.copy-button:active {
  transform: scale(0.95);
  opacity: 0.8;
}

.copy-button:hover {
  background-color: #00CED1;
}

================
File: frontend/my-react-app/src/components/pages/AnalogyPage/AnalogyHub.js
================
import React, { useState, useRef } from 'react';
import './AnalogyHub.css';
import loadingImage from './loading2.png';

const ENDPOINT = "/api"; 

const AnalogyHub = () => {
  const [analogyType, setAnalogyType] = useState('single');
  const [inputValues, setInputValues] = useState(['']);
  const [analogyCategory, setAnalogyCategory] = useState('real-world');
  const [isStreaming, setIsStreaming] = useState(false);
  const [generatedAnalogy, setGeneratedAnalogy] = useState('');

  const analogyRef = useRef(null);

  const handleTypeChange = (e) => {
    const type = e.target.value;
    setAnalogyType(type);

    switch (type) {
      case 'comparison':
        setInputValues(['', '']);
        break;
      case 'triple':
        setInputValues(['', '', '']);
        break;
      default:
        setInputValues(['']);
    }
  };

  const handleInputChange = (index, value) => {
    const newValues = [...inputValues];
    newValues[index] = value;
    setInputValues(newValues);
  };

  const handleGenerateClick = () => {
    setIsStreaming(true);
    setGeneratedAnalogy('');

    const data = {
      analogy_type: analogyType,
      category: analogyCategory,
      concept1: inputValues[0] || '',
      concept2: inputValues[1] || '',
      concept3: inputValues[2] || ''
    };

    fetch(`${ENDPOINT}/analogy/stream_analogy`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
    .then((res) => {
      if (!res.ok) {
        setIsStreaming(false);
        return res.text().then((text) => {
          console.error('Error from server: ', text);
          setGeneratedAnalogy('An error occurred streaming the analogy.');
        });
      }

      const reader = res.body.getReader();
      const decoder = new TextDecoder();
      function readChunk() {
        reader.read().then(({ done, value }) => {
          if (done) {
            setIsStreaming(false);
            return;
          }
          const chunk = decoder.decode(value, { stream: true });
          setGeneratedAnalogy((prev) => prev + chunk);
          readChunk();
        });
      }
      readChunk();
    })
    .catch((err) => {
      console.error('Streaming error:', err);
      setGeneratedAnalogy('An error occurred streaming the analogy.');
      setIsStreaming(false);
    });
  };

  const handleCopyClick = () => {
    if (generatedAnalogy) {
      navigator.clipboard.writeText(generatedAnalogy)
        .then(() => {
          console.log('Copied to clipboard');
        })
        .catch(err => {
          console.error('Could not copy text: ', err);
        });
    }
  };

  return (
    <div className="analogy-hub-container">
      <h1 className="analogy-hub-title">Analogy Hub</h1>
      <p className="analogy-hub-tagline">runtime-error.r00.</p>

      <div className="analogy-hub-form">
        <div className="analogy-type-section">
          <select value={analogyType} onChange={(e) => handleTypeChange(e)} className="analogy-hub-input">
            <option value="single">Single</option>
            <option value="comparison">Comparison</option>
            <option value="triple">Triple Comparison</option>
          </select>
        </div>

        <div className="analogy-input-fields">
          {inputValues.map((value, index) => (
            <input
              key={index}
              type="text"
              className="analogy-hub-input"
              value={value}
              placeholder={`Enter concept ${index + 1}`}
              onChange={(e) => handleInputChange(index, e.target.value)}
            />
          ))}
        </div>

        <div className="analogy-category-section">
          <select
            value={analogyCategory}
            onChange={(e) => setAnalogyCategory(e.target.value)}
            className="analogy-hub-input"
          >
            <option value="real-world">Real World Analogy</option>
            <option value="video-games">Video Games</option>
            <option value="tv-show">TV Show</option>
            <option value="sports">Sports</option>
            <option value="fiction">Fiction</option>
            <option value="food">Food & Cooking</option>
            <option value="relationships">Relationships</option>
            <option value="music">Music & Instruments</option>
            <option value="animals">Animals</option>
            <option value="nature">Nature & Environment</option>
            <option value="travel">Travel & Exploration</option>
            <option value="history">Historical Events</option>
            <option value="technology">Technology</option>
            <option value="mythology">Mythology</option>
            <option value="business">Business & Economics</option>
            <option value="art">Art & Creativity</option>
            <option value="school">School & Education</option>
            <option value="construction">Construction & Engineering</option>
            <option value="space">Space & Astronomy</option>
            <option value="superheroes">Superheroes & Comic Books</option>
            <option value="medieval">Medieval Times</option>
            <option value="movies">Movies & Cinema</option>
            <option value="everyday-life">Everyday Life</option>
            <option value="gardening">Gardening</option>
            <option value="mr-robot">Mr Robot</option>
          </select>
        </div>

        <div className="button-and-loader">
          <button
            className="analogy-generate-button"
            onClick={handleGenerateClick}
            disabled={isStreaming}
          >
            {isStreaming ? "Streaming..." : "Generate Analogy"}
          </button>

          {isStreaming && (
            <img
              src={loadingImage}
              alt="Loading..."
              className="loading-icon"
            />
          )}
        </div>
      </div>

      {generatedAnalogy && (
        <div className="analogy-output-container" ref={analogyRef}>
          <button className="copy-button" onClick={handleCopyClick}>Copy</button>
          <p className="generated-analogy">{generatedAnalogy}</p>
        </div>
      )}
    </div>
  );
};

export default AnalogyHub;

================
File: frontend/my-react-app/src/components/pages/aplus/APlusTestList.js
================
// src/components/pages/testpage/APlusTestList.js

import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const APlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);
  const category = "aplus";

  // Store attempt objects from the backend (keyed by test number)
  const [attempts, setAttempts] = useState({});

  // Fetch the attempt for each test (tests 1 to 10) from the backend
  useEffect(() => {
    if (!userId) return;
    const fetchAttempts = async () => {
      const newAttempts = {};
      for (let testNumber = 1; testNumber <= 10; testNumber++) {
        try {
          const res = await fetch(`/api/test/attempts/${userId}/${testNumber}`);
          if (res.ok) {
            const data = await res.json();
            newAttempts[testNumber] = data.attempt; // either an object or null
          } else {
            newAttempts[testNumber] = null;
          }
        } catch (err) {
          console.error("Error fetching attempt for test", testNumber, err);
          newAttempts[testNumber] = null;
        }
      }
      setAttempts(newAttempts);
    };
    fetchAttempts();
  }, [userId]);

  // Helper: Return display string based on the fetched attempt document
  const getProgressDisplay = (testNumber) => {
    const attempt = attempts[testNumber];
    if (!attempt) {
      return "No progress yet";
    }
    if (attempt.finished) {
      const percentage = Math.round((attempt.score / totalQuestions) * 100);
      return `Final Score: ${percentage}% (${attempt.score}/${totalQuestions})`;
    } else if (typeof attempt.currentQuestionIndex === "number") {
      return `Progress: ${attempt.currentQuestionIndex + 1} / ${totalQuestions}`;
    }
    return "No progress yet";
  };

  // Optional: Difficulty mapping for visual flair
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  // Handler for restarting a test
  const handleRestartTest = async (testNumber) => {
    if (!userId) return;
    try {
      // Upsert a new (empty) attempt document for the given testNumber
      await fetch(`/api/test/attempts/${userId}/${testNumber}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          answers: [],
          score: 0,
          totalQuestions,
          category,
          currentQuestionIndex: 0,
          shuffleOrder: [],
          finished: false
        })
      });
      // Re-fetch the attempt for this testNumber
      const res = await fetch(`/api/test/attempts/${userId}/${testNumber}`);
      if (res.ok) {
        const data = await res.json();
        setAttempts((prev) => ({ ...prev, [testNumber]: data.attempt }));
      }

      // Immediately navigate so the user starts fresh
      navigate(`/practice-tests/a-plus/${testNumber}`);
    } catch (error) {
      console.error("Error restarting test", testNumber, error);
    }
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA A+ Core 1 Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);
          const attempt = attempts[testNumber];

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>
              {attempt ? (
                <div className="test-card-buttons">
                  {attempt.finished ? (
                    <>
                      {/* 
                        Pass review: true in location.state so
                        GlobalTestPage can decide to show the review.
                      */}
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/a-plus/${testNumber}`, {
                            state: { review: true },
                          })
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => handleRestartTest(testNumber)}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/a-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => handleRestartTest(testNumber)}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/a-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default APlusTestList;

================
File: frontend/my-react-app/src/components/pages/aplus/APlusTestPage.js
================
// APlusTestPage.js
import React from "react";
import { useParams } from "react-router-dom";
import APlusTestList from "./APlusTestList";  // your existing test list component
import GlobalTestPage from "../../GlobalTestPage"; // the new universal logic
import "../../test.css";

const APlusTestPage = () => {
  const { testId } = useParams();

  // If no testId in URL, show the test list
  if (!testId) {
    return <APlusTestList />;
  }

  // Otherwise, show the universal test runner
  return (
    <GlobalTestPage
      testId={testId}
      category="aplus"
      backToListPath="/practice-tests/a-plus"
    />
  );
};

export default APlusTestPage;

================
File: frontend/my-react-app/src/components/pages/aplus2/AplusCore2TestList.js
================
// src/components/pages/testpage/APlusCore2TestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const APlusCore2TestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100; 
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "aplus2"
  const category = "aplus2";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA A+ Core 2 Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        // Go to /practice-tests/aplus-core2/<testNumber>
                        onClick={() =>
                          navigate(`/practice-tests/aplus-core2/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/aplus-core2/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/aplus-core2/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/aplus-core2/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/aplus-core2/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default APlusCore2TestList;

================
File: frontend/my-react-app/src/components/pages/aplus2/APlusCore2TestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import AplusCore2TestList from "./AplusCore2TestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const APlusCore2TestPage = () => {
  const { testId } = useParams();

  // If no testId in URL, show the list
  if (!testId) {
    return <AplusCore2TestList />;
  }

  // Otherwise, show the global runner
  return (
    <GlobalTestPage
      testId={testId}
      category="aplus2"
      backToListPath="/practice-tests/aplus-core2"
    />
  );
};

export default APlusCore2TestPage;

================
File: frontend/my-react-app/src/components/pages/auth/auth.css
================
.input-with-icon {
  position: relative;
  width: 100%;
}

.input-with-icon input {
  width: 100%;
  padding-right: 2.5rem;
  box-sizing: border-box;
}

.eye-icon {
  position: absolute;
  right: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  cursor: pointer;
  font-size: 1.2rem;
  color: #900000;
}

.eye-icon:hover {
  color: #000;
}

.back-to-info {
  display: inline-block;
  margin-bottom: 1rem;
  font-size: 0.9rem;
  text-decoration: none;
  color: #007bff;
  border: 1px solid #007bff;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  transition: background 0.2s, color 0.2s;

  /* NEW: Positioning at the top-right corner and slight responsiveness */
  position: fixed;
  top: 1rem;
  left: 1rem;
}

.back-to-info:hover {
  background: #007bff;
  color: #fff;
}

/* Media Queries for smaller screens */
@media (max-width: 768px) {
  .back-to-info {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
  }
}

@media (max-width: 480px) {
  .back-to-info {
    font-size: 0.7rem;
    padding: 0.2rem 0.4rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/auth/AuthToast.css
================
/* AuthToast.css */

/* Error toast styling */
.auth-error-toast {
  background-color: #fff1f1 !important; /* Subtle light-red background */
  color: #a4282b !important;           /* Dark-red text for contrast */
  border-left: 6px solid #c62828 !important; /* Red left border highlight */
  border-radius: 6px !important;
  font-family: 'Roboto', sans-serif;
  padding: 1rem !important;
}

/* Make the default Toastify icon red as well */
.auth-error-toast .Toastify__toast-icon svg {
  fill: #d32f2f !important;
}

/* Optional: style the close button or progress bar if you want */

/* Success toast styling */
.auth-success-toast {
  background-color: #e4f7e7 !important; /* Light-green background */
  color: #2b7a31 !important;            /* Dark-green text */
  border-left: 6px solid #388e3c !important;
  border-radius: 6px !important;
  font-family: 'Roboto', sans-serif;
  padding: 1rem !important;
}

/* Make the success icon green */
.auth-success-toast .Toastify__toast-icon svg {
  fill: #388e3c !important;
}

================
File: frontend/my-react-app/src/components/pages/auth/ErrorDisplay.css
================
.error-display {
  background: #ffe5e5;
  border: 1px solid #ff8888;
  border-radius: 4px;
  padding: 1rem;
  margin-bottom: 1rem;
}
.error-item {
  display: flex;
  align-items: center;
  color: #d8000c;
  margin: 0.25rem 0;
}
.error-icon {
  margin-right: 0.5rem;
}

================
File: frontend/my-react-app/src/components/pages/auth/ErrorDisplay.js
================
// ErrorDisplay.js
import React from 'react';
import { FaExclamationTriangle } from 'react-icons/fa';
import './ErrorDisplay.css';

const ErrorDisplay = ({ errors }) => {
  if (!errors || errors.length === 0) return null;

  return (
    <div className="error-display">
      {errors.map((err, idx) => (
        <div key={idx} className="error-item">
          <FaExclamationTriangle className="error-icon" />
          <span>{err}</span>
        </div>
      ))}
    </div>
  );
};

export default ErrorDisplay;

================
File: frontend/my-react-app/src/components/pages/auth/ForgotPassword.css
================
/* src/components/pages/auth/ForgotPassword.css */
.forgot-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  width: 100%;
  background: linear-gradient(135deg, #0e0e0e, #1a1a1a);
}

.forgot-card {
  background: #1f1f1f;
  padding: 2rem;
  border-radius: 10px;
  width: 400px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
  text-align: center;
}

.forgot-title {
  font-size: 2rem;
  color: #2196f3;
  margin-bottom: 1rem;
}

.forgot-form {
  text-align: left;
}

.forgot-form label {
  display: block;
  margin-top: 1rem;
  font-weight: bold;
  color: #ffffff;
}

.forgot-form input {
  width: 100%;
  padding: 0.75rem;
  margin-top: 0.5rem;
  border: none;
  border-radius: 5px;
  background: #333;
  color: #ffffff;
  font-size: 1rem;
}

.forgot-form input:focus {
  outline: none;
  box-shadow: 0 0 5px #2196f3;
}

.error-msg {
  color: #ff5555;
  margin-top: 0.75rem;
  text-align: center;
}

.forgot-btn {
  width: 100%;
  padding: 0.75rem;
  margin-top: 1.5rem;
  background: linear-gradient(135deg, #2196f3, #1976d2);
  border: none;
  border-radius: 5px;
  color: #ffffff;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.forgot-btn:hover {
  background: linear-gradient(135deg, #1976d2, #2196f3);
  transform: scale(1.03);
}

.forgot-success {
  font-size: 1.1rem;
  color: #4caf50;
  margin: 1.5rem 0;
}

.forgot-switch {
  margin-top: 1.5rem;
  color: #cccccc;
  font-size: 0.9rem;
  text-align: center;
}

.forgot-switch a {
  color: #2196f3;
  text-decoration: none;
  font-weight: bold;
}

.forgot-switch a:hover {
  text-decoration: underline;
}

================
File: frontend/my-react-app/src/components/pages/auth/ForgotPassword.js
================
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import './ForgotPassword.css';
import './auth.css';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [sent, setSent] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (email) {
      setSent(true);
      setError('');
      setTimeout(() => {
        navigate('/login');
      }, 3000);
    } else {
      setError('Please enter your email.');
    }
  };

  return (
    <div className="forgot-container">
      <Link to="/" className="back-to-info">Back to Info Page</Link>
      <div className="forgot-card">
        <h2 className="forgot-title">Reset Your Password</h2>
        {sent ? (
          <p className="forgot-success">
            A reset link has been sent to your email address. Please check your inbox.
          </p>
        ) : (
          <form className="forgot-form" onSubmit={handleSubmit}>
            <label htmlFor="email">Enter your email address</label>
            <input 
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            {error && <p className="error-msg">{error}</p>}
            <button type="submit" className="forgot-btn">Send Reset Link</button>
          </form>
        )}
        <p className="forgot-switch">
          Remembered your password? <Link to="/login">Login</Link>
        </p>
      </div>
    </div>
  );
};

export default ForgotPassword;

================
File: frontend/my-react-app/src/components/pages/auth/Login.css
================
/* src/components/pages/auth/Login.css */
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  width: 100%;
  background: linear-gradient(135deg, #0e0e0e, #1a1a1a);
}

.login-card {
  background: #1f1f1f;
  padding: 2rem;
  border-radius: 10px;
  width: 400px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
  text-align: center;
}

.login-title {
  margin-bottom: 1.5rem;
  color: #ff5555;
  font-size: 2rem;
}

.login-form {
  text-align: left;
}

.login-form label {
  display: block;
  margin-top: 1rem;
  font-weight: bold;
  color: #ffffff;
}

.login-form input {
  width: 100%;
  padding: 0.75rem;
  margin-top: 0.5rem;
  border: none;
  border-radius: 5px;
  background: #333;
  color: #ffffff;
  font-size: 1rem;
}

.login-form input:focus {
  outline: none;
  box-shadow: 0 0 5px #ff5555;
}

.error-msg {
  color: #ff5555;
  margin-top: 0.75rem;
  text-align: center;
}

.login-btn {
  width: 100%;
  padding: 0.75rem;
  margin-top: 1.5rem;
  background: linear-gradient(135deg, #ff5555, #ff0000);
  border: none;
  border-radius: 5px;
  color: #ffffff;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.login-btn:hover {
  background: linear-gradient(135deg, #ff0000, #ff5555);
  transform: scale(1.03);
}

.login-forgot {
  margin-top: 1rem;
  font-size: 0.9rem;
  text-align: center;
}

.login-forgot a {
  color: #ff5555;
  text-decoration: none;
}

.login-forgot a:hover {
  text-decoration: underline;
}

.login-switch {
  margin-top: 1.5rem;
  color: #cccccc;
  font-size: 0.9rem;
  text-align: center;
}

.login-switch a {
  color: #ff5555;
  text-decoration: none;
  font-weight: bold;
}

.login-switch a:hover {
  text-decoration: underline;
}

================
File: frontend/my-react-app/src/components/pages/auth/Login.js
================
// src/components/pages/auth/Login.js
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser } from '../store/userSlice';
import { useNavigate, Link } from 'react-router-dom';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import { toast } from 'react-toastify';

import './Login.css';
import './auth.css';
import './AuthToast.css'; // Optional custom Toastify styling

/***************************************************************
 * FRONT-END VALIDATION HELPERS
 * (Mirroring your Python logic)
 ***************************************************************/

// Example dictionary of common passwords
const COMMON_PASSWORDS = new Set([
  'password', '123456', '12345678', 'qwerty', 'letmein', 'welcome'
]);

// Private Use / Surrogates
const PRIVATE_USE_RANGES = [
  [0xE000, 0xF8FF],
  [0xF0000, 0xFFFFD],
  [0x100000, 0x10FFFD]
];
const SURROGATES_RANGE = [0xD800, 0xDFFF];

function hasForbiddenUnicode(str) {
  for (let i = 0; i < str.length; i++) {
    const cp = str.codePointAt(i);
    // Surrogates
    if (cp >= SURROGATES_RANGE[0] && cp <= SURROGATES_RANGE[1]) {
      return true;
    }
    // Private use
    for (const [start, end] of PRIVATE_USE_RANGES) {
      if (cp >= start && cp <= end) {
        return true;
      }
    }
  }
  return false;
}

// Basic check to differentiate "username" vs "email"
function validateLoginIdentifier(value) {
  const errors = [];
  const val = value.trim();
  if (!val) {
    errors.push("Username/Email cannot be empty.");
    return errors;
  }

  // If it has '@', treat as email (simplified logic)
  if (val.includes('@')) {
    // minimal checks
    if (!val.includes('.')) {
      errors.push("Email must contain '.' for domain part.");
    }
    if (val.length < 6 || val.length > 254) {
      errors.push("Email length must be 6–254 characters.");
    }
    if (hasForbiddenUnicode(val)) {
      errors.push("Email contains forbidden Unicode blocks.");
    }
  } else {
    // treat as username
    if (val.length < 3 || val.length > 30) {
      errors.push("Username must be 3–30 characters.");
    }
    if (hasForbiddenUnicode(val)) {
      errors.push("Username contains forbidden Unicode blocks.");
    }
  }
  return errors;
}

function validatePassword(pwd) {
  const errors = [];
  if (!pwd) {
    errors.push("Password cannot be empty.");
    return errors;
  }
  if (pwd.length < 6) {
    errors.push("Password must be at least 6 characters.");
  }
  // Checking if too common
  if (COMMON_PASSWORDS.has(pwd.toLowerCase())) {
    errors.push("Password is too common. Please choose a stronger one.");
  }
  return errors;
}

/***************************************************************
 * LOGIN COMPONENT
 ***************************************************************/
const Login = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error, userId } = useSelector((state) => state.user);

  const [usernameOrEmail, setUsernameOrEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  // If user is already logged in, redirect
  useEffect(() => {
    if (userId) {
      localStorage.setItem('userId', userId);
      navigate('/profile');
    }
  }, [userId, navigate]);

  const handleSubmit = (e) => {
    e.preventDefault();

    // 1) Client-side checks
    const errors = [];
    errors.push(...validateLoginIdentifier(usernameOrEmail));
    errors.push(...validatePassword(password));

    if (errors.length > 0) {
      errors.forEach((err) => {
        toast.error(err, { className: 'auth-error-toast' });
      });
      return;
    }

    // 2) If passes, attempt login
    dispatch(loginUser({ usernameOrEmail, password }))
      .unwrap()
      .then(() => {
        toast.success("Login successful!", { className: 'auth-success-toast' });
      })
      .catch((errMsg) => {
        // If server rejects, errMsg is from userSlice or backend
        toast.error(errMsg, { className: 'auth-error-toast' });
      });
  };

  return (
    <div className="login-container">
      <Link to="/" className="back-to-info">Back to Info Page</Link>
      <div className="login-card">
        <h2 className="login-title">Welcome Back</h2>

        {/* If Redux error, optional inline */}
        {error && <p className="error-msg">{error}</p>}

        <form className="login-form" onSubmit={handleSubmit}>
          <label htmlFor="usernameOrEmail">Username or Email</label>
          <input 
            id="usernameOrEmail"
            type="text"
            value={usernameOrEmail}
            onChange={(e) => setUsernameOrEmail(e.target.value)}
            required
          />

          <label htmlFor="password">Password</label>
          <div className="input-with-icon">
            <input 
              id="password"
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <span
              className="eye-icon"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <FaEyeSlash /> : <FaEye />}
            </span>
          </div>

          <button 
            type="submit" 
            className="login-btn"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>

        <p className="login-forgot">
          <Link to="/forgot-password">Forgot Password?</Link>
        </p>
        <p className="login-switch">
          Don't have an account? <Link to="/register">Register</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

================
File: frontend/my-react-app/src/components/pages/auth/PasswordRequirements.css
================
.password-requirements {
  background-color:  #a9a9a9;
  padding: 0.4rem;        /* Slightly more than your .07rem but still small */
  border-radius: 4px;
  margin-top: 0.5rem;     /* Moved to top margin instead of bottom */
  max-width: 300px;       /* Limit the width so it's not too wide */
  border: 1px solid #eee; /* Add a subtle border for clarity */
}

.password-requirements p {
  margin: 0 0 0.25rem;
  font-weight: bold;
  font-size: 0.95rem;
  color: #000;
}

.password-requirements ul {
  list-style: none;
  padding-left: 1rem;     /* Indent a bit for the list items */
  margin: 0;
}

.password-requirements li {
  display: flex;
  align-items: center;
  margin: 0.2rem 0;
  font-size: 0.9rem;
}

.password-requirements li.valid {
  color: green;
}
.password-requirements li.invalid {
  color: #900000;
}

.password-requirements li svg {
  margin-right: 0.4rem;
  font-size: 1rem;
}

================
File: frontend/my-react-app/src/components/pages/auth/PasswordRequirements.js
================
// PasswordRequirements.js
import React from 'react';
import { FaCheckCircle, FaTimesCircle, FaInfoCircle } from 'react-icons/fa';
import './PasswordRequirements.css';

const PasswordRequirements = ({ password }) => {
  // Each requirement is a test function that returns true/false
  const requirements = [
    {
      text: "6–69 characters long",
      test: (pwd) => pwd.length >= 6 && pwd.length <= 69
    },
    {
      text: "At least one uppercase letter",
      test: (pwd) => /[A-Z]/.test(pwd)
    },
    {
      text: "At least one lowercase letter",
      test: (pwd) => /[a-z]/.test(pwd)
    },
    {
      text: "At least one digit",
      test: (pwd) => /\d/.test(pwd)
    },
    {
      text: "At least one special character",
      test: (pwd) => /[!@#$%^&*()\-_=+\[\]{}|;:'",.<>/?`~\\]/.test(pwd)
    },
  ];

  // Check if all requirements are met
  const allMet = requirements.every(req => req.test(password));

  // If the user currently meets all requirements, hide the box
  if (allMet && password.length > 0) {
    return null;
  }

  return (
    <div className="password-requirements">
      <p><FaInfoCircle /> Your password must meet the following criteria:</p>
      <ul>
        {requirements.map((req, index) => {
          const isValid = req.test(password);
          return (
            <li key={index} className={isValid ? "valid" : "invalid"}>
              {isValid ? <FaCheckCircle /> : <FaTimesCircle />} {req.text}
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default PasswordRequirements;

================
File: frontend/my-react-app/src/components/pages/auth/Register.css
================
/* src/components/pages/auth/Register.css */
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  width: 100%;
  background: linear-gradient(135deg, #0e0e0e, #1a1a1a);
}

.register-card {
  background: #1f1f1f;
  padding: 2rem;
  border-radius: 10px;
  width: 400px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
  text-align: center;
}

.register-title {
  margin-bottom: 1.5rem;
  color: #4caf50;
  font-size: 2rem;
}

.register-form {
  text-align: left;
}

.register-form label {
  display: block;
  margin-top: 1rem;
  font-weight: bold;
  color: #ffffff;
}

.register-form input {
  width: 100%;
  padding: 0.75rem;
  margin-top: 0.5rem;
  border: none;
  border-radius: 5px;
  background: #333;
  color: #ffffff;
  font-size: 1rem;
}

.register-form input:focus {
  outline: none;
  box-shadow: 0 0 5px #4caf50;
}

.error-msg {
  color: #ff5555;
  margin-top: 0.75rem;
  text-align: center;
}

.register-btn {
  width: 100%;
  padding: 0.75rem;
  margin-top: 1.5rem;
  background: linear-gradient(135deg, #4caf50, #43a047);
  border: none;
  border-radius: 5px;
  color: #ffffff;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
}

.register-btn:hover {
  background: linear-gradient(135deg, #43a047, #4caf50);
  transform: scale(1.03);
}

.register-switch {
  margin-top: 1.5rem;
  color: #cccccc;
  font-size: 0.9rem;
  text-align: center;
}

.register-switch a {
  color: #4caf50;
  text-decoration: none;
  font-weight: bold;
}

.register-switch a:hover {
  text-decoration: underline;
}

/* Placeholder for Stripe integration */
.stripe-placeholder {
  margin-top: 1.5rem;
  padding: 1rem;
  background: #333;
  color: #ffffff;
  border-radius: 5px;
  font-size: 0.9rem;
  text-align: center;
}

================
File: frontend/my-react-app/src/components/pages/auth/Register.js
================
// src/components/pages/auth/Register.js
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { registerUser, loginUser } from '../store/userSlice';
import { useNavigate, Link } from 'react-router-dom';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import { toast } from 'react-toastify';
import PasswordRequirements from './PasswordRequirements';

import './Register.css';
import './auth.css';
import './AuthToast.css'; // optional custom styling

// =============================
// FRONT-END VALIDATION HELPERS
// (Mirroring your Python logic)
// =============================

const COMMON_PASSWORDS = new Set([
  "password", "123456", "12345678", "qwerty", "letmein", "welcome"
]);

const PRIVATE_USE_RANGES = [
  [0xE000, 0xF8FF],
  [0xF0000, 0xFFFFD],
  [0x100000, 0x10FFFD]
];
const SURROGATES_RANGE = [0xD800, 0xDFFF];

function hasForbiddenUnicodeScripts(str) {
  for (let i = 0; i < str.length; i++) {
    const cp = str.codePointAt(i);
    if (cp >= SURROGATES_RANGE[0] && cp <= SURROGATES_RANGE[1]) {
      return true;
    }
    for (const [start, end] of PRIVATE_USE_RANGES) {
      if (cp >= start && cp <= end) {
        return true;
      }
    }
  }
  return false;
}

function disallowMixedScripts(str) {
  const scriptSets = new Set();
  for (let i = 0; i < str.length; i++) {
    const cp = str.codePointAt(i);
    if (cp >= 0x0041 && cp <= 0x024F) {
      scriptSets.add("Latin");
    } else if (cp >= 0x0370 && cp <= 0x03FF) {
      scriptSets.add("Greek");
    } else if (cp >= 0x0400 && cp <= 0x04FF) {
      scriptSets.add("Cyrillic");
    }
    if (scriptSets.size > 1) {
      return true;
    }
  }
  return false;
}

// Validate username
function validateUsername(username) {
  const errors = [];
  const name = username.normalize("NFC");

  if (name.length < 3 || name.length > 30) {
    errors.push("Username must be between 3 and 30 characters long.");
  }
  if (hasForbiddenUnicodeScripts(name)) {
    errors.push("Username contains forbidden Unicode blocks.");
  }
  if (disallowMixedScripts(name)) {
    errors.push("Username cannot mix multiple Unicode scripts (Latin & Cyrillic, etc.).");
  }
  // Basic allowlist
  if (!/^[A-Za-z0-9._-]+$/.test(name)) {
    errors.push("Username can only contain letters, digits, underscores, dashes, or dots.");
  }
  // Triple consecutive identical
  if (/(.)\1{2,}/.test(name)) {
    errors.push("Username cannot contain three identical consecutive characters.");
  }
  // Leading/trailing punctuation
  if (/^[._-]|[._-]$/.test(name)) {
    errors.push("Username cannot start or end with . - or _.");
  }
  return errors;
}

// Validate email
function validateEmail(email) {
  const errors = [];
  const e = email.normalize("NFC").trim();

  if (e.length < 5 || e.length > 128) {
    errors.push("Email length must be 5–128 characters.");
  }
  if (hasForbiddenUnicodeScripts(e)) {
    errors.push("Email contains forbidden Unicode blocks.");
  }
  // Only one '@'
  if ((e.match(/@/g) || []).length !== 1) {
    errors.push("Email must contain exactly one '@' symbol.");
  }
  
  return errors;
}

// Validate password
function validatePassword(password, username, email) {
  const errors = [];
  if (password.length < 6 || password.length > 69) {
    errors.push("Password must be between 6 and 69 characters long.");
  }
  if (/[ \t\r\n<>]/.test(password)) {
    errors.push("Password cannot contain whitespace or < or > characters.");
  }
  if (!/[A-Z]/.test(password)) {
    errors.push("Password must contain at least one uppercase letter.");
  }
  if (!/[a-z]/.test(password)) {
    errors.push("Password must contain at least one lowercase letter.");
  }
  if (!/\d/.test(password)) {
    errors.push("Password must contain at least one digit.");
  }
  // special chars
  if (!/[!@#$%^&*()\-_=+\[\]{}|;:'",<.>\/?`~\\]/.test(password)) {
    errors.push("Password must contain at least one special character.");
  }

  // triple consecutive
  if (/(.)\1{2,}/.test(password)) {
    errors.push("Password must not contain three identical consecutive characters.");
  }

  // common password
  if (COMMON_PASSWORDS.has(password.toLowerCase())) {
    errors.push("Password is too common. Please choose a stronger password.");
  }

  // dictionary
  const dictionaryPatterns = ['password', 'qwerty', 'abcdef', 'letmein', 'welcome', 'admin'];
  const lowerPwd = password.toLowerCase();
  for (const pat of dictionaryPatterns) {
    if (lowerPwd.includes(pat)) {
      errors.push(`Password must not contain '${pat}'.`);
    }
  }

  // If we want to forbid using username or email local-part
  if (username && lowerPwd.includes(username.toLowerCase())) {
    errors.push("Password must not contain your username.");
  }
  if (email) {
    const emailLocalPart = email.split('@')[0].toLowerCase();
    if (lowerPwd.includes(emailLocalPart)) {
      errors.push("Password must not contain the local part of your email.");
    }
  }

  return errors;
}

/**************************************************************
 * REGISTER COMPONENT
 **************************************************************/
const Register = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error, userId } = useSelector((state) => state.user);

  const [username, setUsername] = useState('');
  const [email, setEmail]       = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Add local state to conditionally display PasswordRequirements
  const [showRequirements, setShowRequirements] = useState(false);

  useEffect(() => {
    if (userId) {
      localStorage.setItem('userId', userId);
      navigate('/profile');
    }
  }, [userId, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    // 1) client-side checks
    let allErrors = [];
    allErrors.push(...validateUsername(username));
    allErrors.push(...validateEmail(email));
    allErrors.push(...validatePassword(password, username, email));
    if (password !== confirmPassword) {
      allErrors.push("Passwords do not match.");
    }

    if (allErrors.length > 0) {
      allErrors.forEach((errMsg) => {
        toast.error(errMsg, { className: 'auth-error-toast' });
      });
      return;
    }

    // 2) If passes, attempt registration
    try {
      const result = await dispatch(
        registerUser({ username, email, password, confirmPassword })
      );

      if (registerUser.fulfilled.match(result)) {
        toast.success("Registration successful!", { className: 'auth-success-toast' });

        // Optionally auto-login
        const loginRes = await dispatch(loginUser({ usernameOrEmail: username, password }));
        if (loginUser.fulfilled.match(loginRes)) {
          toast.success("Auto-login successful!", { className: 'auth-success-toast' });
        } else {
          toast.error("Auto-login failed. Please log in manually.", { className: 'auth-error-toast' });
        }
      } else {
        const payload = result.payload || "Server error occurred.";
        toast.error(payload, { className: 'auth-error-toast' });
      }
    } catch (err) {
      console.error('Registration error:', err);
      toast.error("An unexpected error occurred.", { className: 'auth-error-toast' });
    }
  };

  return (
    <div className="register-container">
      <Link to="/" className="back-to-info">Back to Info Page</Link>
      <div className="register-card">
        <h2 className="register-title">Create Your Account</h2>

        {error && <p className="error-msg">{error}</p>}

        <form className="register-form" onSubmit={handleSubmit}>
          <label htmlFor="username">Username</label>
          <input 
            id="username"
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />

          <label htmlFor="email">Email</label>
          <input 
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <label htmlFor="password">Password</label>
          <div className="input-with-icon">
            <input 
              id="password"
              type={showPassword ? 'text' : 'password'}
              value={password}
              onFocus={() => setShowRequirements(true)}
              onBlur={() => {
                // If user leaves password field & hasn't typed anything, hide
                if (!password) {
                  setShowRequirements(false);
                }
              }}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <span
              className="eye-icon"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <FaEyeSlash /> : <FaEye />}
            </span>
          </div>

          {/* Conditionally show the PasswordRequirements only if user focuses or typed something */}
          {showRequirements && (
            <PasswordRequirements password={password} />
          )}

          <label htmlFor="confirmPassword">Confirm Password</label>
          <div className="input-with-icon">
            <input 
              id="confirmPassword"
              type={showConfirmPassword ? 'text' : 'password'}
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
            <span
              className="eye-icon"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            >
              {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
            </span>
          </div>

          <button 
            type="submit"
            disabled={loading}
            className="register-btn"
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>

        <p className="register-switch">
          Already have an account? <Link to="/login">Login</Link>
        </p>
      </div>
    </div>
  );
};

export default Register;

================
File: frontend/my-react-app/src/components/pages/awscloud/AWSCloudTestList.js
================
// src/components/pages/awscloud/AWSCloudTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const AWSCloudTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "awscloud"
  const category = "awscloud";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // (Optional) difficulty mapping for display
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">AWS Cloud Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/awscloud/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/awscloud/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/awscloud/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/awscloud/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/awscloud/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default AWSCloudTestList;

================
File: frontend/my-react-app/src/components/pages/awscloud/AWSCloudTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import AWSCloudTestList from "./AWSCloudTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const AWSCloudTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <AWSCloudTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="awscloud"
      backToListPath="/practice-tests/aws-cloud"
    />
  );
};

export default AWSCloudTestPage;

================
File: frontend/my-react-app/src/components/pages/casp/CaspPlusTestList.js
================
// src/components/pages/casp/CaspPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const CaspPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "caspplus"
  const category = "caspplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA CASP+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/casp-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/casp-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/casp-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/casp-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/casp-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default CaspPlusTestList;

================
File: frontend/my-react-app/src/components/pages/casp/CaspPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import CaspPlusTestList from "./CaspPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const CaspPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <CaspPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="caspplus"
      backToListPath="/practice-tests/casp-plus"
    />
  );
};

export default CaspPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/cissp/CisspTestList.js
================
// src/components/pages/cissp/CisspTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const CisspTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "cissp"
  const category = "cissp";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Optional difficulty mapping
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">(ISC)² CISSP Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cissp/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cissp/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cissp/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cissp/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/cissp/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default CisspTestList;

================
File: frontend/my-react-app/src/components/pages/cissp/CisspTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import CisspTestList from "./CisspTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const CisspTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <CisspTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="cissp"
      backToListPath="/practice-tests/cissp"
    />
  );
};

export default CisspTestPage;

================
File: frontend/my-react-app/src/components/pages/cloudplus/CloudPlusTestList.js
================
// src/components/pages/cloudplus/CloudPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const CloudPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "cloudplus"
  const category = "cloudplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${progressData.currentQuestionIndex + 1} / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Cloud+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cloud-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cloud-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cloud-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cloud-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/cloud-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default CloudPlusTestList;

================
File: frontend/my-react-app/src/components/pages/cloudplus/CloudPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import CloudPlusTestList from "./CloudPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const CloudPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <CloudPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="cloudplus"
      backToListPath="/practice-tests/cloud-plus"
    />
  );
};

export default CloudPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/cysa/CySAPlusTestList.js
================
// src/components/pages/cysa/CySAPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
// Import any specific CSS if you wish. Reusing CySAPlusTestPage.css or something similar:
import "../../test.css";

const CySAPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100; 
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "cysa"
  const category = "cysa";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${progressData.currentQuestionIndex + 1} / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA CySA+ Practice Tests</h1>
      <div className="tests-list-grid">
        {/* We'll show 10 tests, each with an ID from 1..10 */}
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cysa-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cysa-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/cysa-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/cysa-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/cysa-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default CySAPlusTestList;

================
File: frontend/my-react-app/src/components/pages/cysa/CySAPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import CySAPlusTestList from "./CySAPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const CySAPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <CySAPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="cysa"
      backToListPath="/practice-tests/cysa-plus"
    />
  );
};

export default CySAPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/DailyPage/DailyCyberBrief.css
================
*, *::before, *::after {
  box-sizing: inherit;
}


.page-wrapper {
  display: flex;
  justify-content: center; 
  align-items: center;     
  min-height: 100vh;
  padding: 20px;
  box-sizing: border-box;
}


.left-bg, .right-bg {
  flex: 1;               
  background: transparent;
  min-height: 100vh;      
  background: url('./backround7.jpg') center center no-repeat;
  background-size: cover;
}


.daily-cyberbrief-container {
  background-color: rgba(0, 0, 0, 0.8); 
  padding: 20px;
  text-align: center;
  border: 2px solid #ff004d;
  border-radius: 10px;
  width: 100%;
  max-width: 600px;
  margin: 0 20px; 
  color: #ffffff;
}


.cyberbrief-title {
  font-size: 2rem;
  color: #b30000;
  border: 2px solid #000;
  padding: 10px;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 5px;
  margin-bottom: 20px;
  font-family: 'Orbitron', sans-serif;
}


.cyberbrief-description {
  margin-bottom: 20px;
  color: #ffffff;
  background-color: rgba(0, 0, 0, 0.6);
  padding: 10px;
  border-radius: 5px;
  font-size: 1rem;
  line-height: 1.4;
}


.cyberbrief-form label {
  display: block;
  margin: 15px auto 5px;
  color: #fff;
  width: 100%;
  max-width: 300px;
  font-weight: bold;
  text-align: center;
}


.cyberbrief-input {
  width: 80%;
  max-width: 300px;
  margin: 0 auto 10px;
  padding: 10px;
  border: 1px solid #ff3333;
  border-radius: 5px;
  background-color: rgba(20, 20, 20, 0.9);
  color: #00ffff;
  display: block;
}


.button-group {
  display: flex;
  justify-content: center;
  gap: 20px;
  flex-wrap: wrap;
  margin-top: 20px;
}


.cyberbrief-submit-button,
.unsubscribe-button {
  padding: 10px 20px;
  font-size: 1em;
  color: #000;
  background-color: #cc0000;
  border: 1px solid #fff;
  border-radius: 5px;
  cursor: pointer;
  min-width: 120px;
  transition: all 0.3s ease;
}

.cyberbrief-submit-button:hover,
.unsubscribe-button:hover {
  background-color: #006600;
}


.cyberbrief-message {
  text-align: center;
  margin-top: 20px;
  color: #00b300;
  font-weight: bold;
}


.loading-bar-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-top: 20px;
  flex-wrap: wrap;
}


.loading-bar {
  height: 20px;
  width: 80%;
  background-color: #333;
  border: 2px solid #fff;
  border-radius: 10px;
  overflow: hidden;
  position: relative;
  max-width: 300px;
}


.loading-bar-progress {
  height: 100%;
  width: 0%;
  background: linear-gradient(to right, #ff0000, #41a632);
  border: 2px solid #000;
  border-radius: 10px;
  transition: width 0.5s ease-in-out;
}


.loading-percentage {
  font-size: 1em;
  color: #ffffff;
  font-weight: bold;
}


@media (max-width: 768px) {
  .left-bg, .right-bg {
    display: none;
  }


  .page-wrapper {
    justify-content: center;
    align-items: center;
    padding: 10px;
  }


  .daily-cyberbrief-container {
    max-width: 100%;
    margin: 0;
  }

  .cyberbrief-input {
    max-width: 100%;
    width: 100%;
  }


  .button-group {
    flex-direction: column;
    gap: 10px;
  }
}

@media (max-width: 480px) {
  .cyberbrief-title {
    font-size: 1.5rem;
  }
  .cyberbrief-input {
    width: 100%;
  }
  .cyberbrief-description {
    font-size: 0.9rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/DailyPage/DailyCyberBrief.js
================
import React, { useState } from 'react';
import './DailyCyberBrief.css';

const ENDPOINT = "/api";

const DailyCyberBrief = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);

  // Generic function to manage API calls
  const handleApiRequest = async (url, data, successMessage) => {
    setLoading(true);
    setLoadingProgress(0);
    try {
      // Simulate loading progress
      const loadingInterval = setInterval(() => {
        setLoadingProgress((prevProgress) => {
          if (prevProgress < 90) {
            return prevProgress + 10; // Gradually increase the loading bar to ~90%
          } else {
            clearInterval(loadingInterval);
            return prevProgress;
          }
        });
      }, 200);

      const response = await fetch(`${ENDPOINT}${url}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        setMessage(successMessage);
      } else {
        const errorData = await response.json();
        if (errorData.error) {
          setMessage(`Error: ${errorData.error}`);
        } else if (errorData.message) {
          setMessage(`Error: ${errorData.message}`);
        } else {
          setMessage("Error: Something went wrong");
        }
      }
    } catch (error) {
      setMessage(`Error: ${error.message}`);
    } finally {
      setLoading(false);
      setLoadingProgress(100); // Set to 100% on completion
    }
  };

  const handleSubscribe = () => {
    const data = { email };
    handleApiRequest('/subscribe/', data, 'Subscription successful!');
  };

  const handleUnsubscribe = () => {
    const data = { email };
    handleApiRequest('/unsubscribe/', data, 'Unsubscribed successfully!');
  };

  return (
    <div className="page-wrapper">
      <div className="left-bg"></div>

      <div className="daily-cyberbrief-container">
        <h1 className="cyberbrief-title">Daily Newsletter</h1>
        <p className="cyberbrief-description">
          Daily newsletter sent out at 12am ET about the latest cybersecurity news, 
          exam tips, study tips, and life tips.
        </p>

        <div className="cyberbrief-form">
          <label>Email Address:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email"
            className="cyberbrief-input"
          />

          <div className="button-group">
            <button onClick={handleSubscribe} className="cyberbrief-submit-button">
              Subscribe
            </button>
            <button onClick={handleUnsubscribe} className="cyberbrief-submit-button unsubscribe-button">
              Unsubscribe
            </button>
          </div>

          {loading && (
            <div className="loading-bar-container">
              <div className="loading-bar">
                <div
                  className="loading-bar-progress"
                  style={{ width: `${loadingProgress}%` }}
                ></div>
              </div>
              <span className="loading-percentage">{loadingProgress}%</span>
            </div>
          )}
          {message && <p className="cyberbrief-message">{message}</p>}
        </div>
      </div>

      <div className="right-bg"></div>
    </div>
  );
};

export default DailyCyberBrief;

================
File: frontend/my-react-app/src/components/pages/dataplus/DataPlusTestList.js
================
// src/components/pages/dataplus/DataPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const DataPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "dataplus"
  const category = "dataplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Optional difficulty mapping
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Data+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/data-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/data-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/data-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/data-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/data-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default DataPlusTestList;

================
File: frontend/my-react-app/src/components/pages/dataplus/DataPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import DataPlusTestList from "./DataPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const DataPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <DataPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="dataplus"
      backToListPath="/practice-tests/data-plus"
    />
  );
};

export default DataPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/DonatePage/Donate.css
================
/* Reset and Base Styles */
body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  height: 100%;
  box-sizing: border-box;
}

.main-content {
  margin-left: 220px;
  transition: margin-left 0.3s ease;
  box-sizing: border-box;
  min-height: 100vh;
  padding: 20px;
}

.sidebar.collapsed ~ .main-content {
  margin-left: 0;
}


.donate-page-wrapper {
  width: 100%;
  min-height: 100vh;
  background: url('./backround3.jpg') center center no-repeat;
  background-size: cover;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding: 20px;
  box-sizing: border-box;
}


.donate-container {
  width: 100%;
  max-width: 600px;
  min-height: 100vh;
  box-sizing: border-box;
  background: rgba(0, 0, 0, 0.6); 
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 40px;
  border-radius: 20px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
}


.donate-box {
  text-align: center;
  margin-bottom: 30px;
}


.donate-title {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-size: 2.5rem;
  margin-bottom: 20px;
  text-shadow: 3px 3px #ff4e50;
}


.donate-description {
  font-family: 'Arial', sans-serif;
  font-size: 1.1rem;
  color: #ffffff;
  margin-bottom: 40px;
  line-height: 1.6;
}


.buy-coffee-button {
  display: inline-block;
  padding: 15px 30px;
  background-color: #FFDD57;
  color: #000000;
  font-size: 1.2rem;
  font-weight: bold;
  border: none;
  border-radius: 50px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  text-decoration: none;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

.buy-coffee-button:hover {
  background-color: #FFC107;
  transform: translateY(-3px);
}


.impact-section {
  margin-top: 30px;
  text-align: center;
}

.impact-section h3 {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-size: 1.5rem;
  margin-bottom: 10px;
}

.impact-section p {
  font-family: 'Arial', sans-serif;
  color: #ffffff;
  font-size: 1rem;
  line-height: 1.5;
}


.goals-section {
  margin-top: 30px;
  text-align: center;
}

.goals-section h3 {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-size: 1.5rem;
  margin-bottom: 10px;
}

.goals-section p {
  font-family: 'Arial', sans-serif;
  color: #ffffff;
  font-size: 1rem;
  line-height: 1.5;
}


.leaderboard-section {
  margin-top: 40px;
  text-align: center;
  background: rgba(255, 221, 87, 0.1);
  padding: 20px;
  border-radius: 15px;
}

.leaderboard-section h3 {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-size: 1.8rem;
  margin-bottom: 15px;
}

.leaderboard-section p {
  font-family: 'Arial', sans-serif;
  color: #ffffff;
  font-size: 1rem;
  margin-bottom: 20px;
}


.leaderboard-form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
}

.leaderboard-form label {
  font-family: 'Arial', sans-serif;
  color: #ffffff;
  font-size: 1rem;
}

.leaderboard-form input {
  padding: 10px;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  width: 80%;
  max-width: 300px;
}

.submit-button {
  padding: 10px 20px;
  background-color: #ffdd57;
  color: #000000;
  border: none;
  border-radius: 25px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-button:hover {
  background-color: #ffc107;
  transform: translateY(-2px);
}


.confirmation-message {
  font-family: 'Arial', sans-serif;
  color: #00FF00;
  font-size: 1rem;
  margin-top: 10px;
}


.manual-leaderboard {
  margin-top: 20px;
}

.manual-leaderboard h4 {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-size: 1.3rem;
  margin-bottom: 10px;
}

.manual-leaderboard ul {
  list-style-type: none;
  padding: 0;
}

.manual-leaderboard li {
  font-family: 'Arial', sans-serif;
  color: #ffffff;
  font-size: 1rem;
  margin-bottom: 5px;
}


.thanks-message p {
  font-family: 'Orbitron', sans-serif;
  color: #ffdd57;
  font-weight: bold;
  font-size: 1.2rem;
  text-shadow: 2px 2px #ff4e50;
  margin-top: 20px;
}


@media (max-width: 768px) {
  .donate-container {
    padding: 30px;
  }

  .donate-title {
    font-size: 2rem;
  }

  .buy-coffee-button {
    width: 100%;
    padding: 15px 0;
  }

  .donate-description {
    font-size: 1rem;
  }

  .impact-section h3,
  .goals-section h3,
  .leaderboard-section h3 {
    font-size: 1.3rem;
  }

  .submit-button {
    width: 100%;
  }

  .thanks-message p {
    font-size: 1rem;
  }
}

@media (max-width: 480px) {
  .donate-title {
    font-size: 1.8rem;
  }

  .buy-coffee-button {
    font-size: 1rem;
  }

  .donate-description {
    font-size: 0.95rem;
  }

  .impact-section h3,
  .goals-section h3,
  .leaderboard-section h3 {
    font-size: 1.1rem;
  }

  .leaderboard-form {
    flex-direction: column;
    gap: 10px;
  }

  .leaderboard-form input {
    width: 100%;
  }

  .submit-button {
    width: 100%;
  }

  .thanks-message p {
    font-size: 0.9rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/DonatePage/Donate.js
================
import React, { useState, useEffect } from 'react';
import { useForm, ValidationError } from '@formspree/react';
import './Donate.css';

function Donate() {
    const [state, handleSubmit] = useForm("mwppwapp"); 
    const [showConfirmation, setShowConfirmation] = useState(false);

    useEffect(() => {
        if (state.succeeded) {
            setShowConfirmation(true);
            const timer = setTimeout(() => {
                setShowConfirmation(false);
            }, 15000); 


            return () => clearTimeout(timer);
        }
    }, [state.succeeded]);

    return (
        <div className="donate-page-wrapper">
            <div className="donate-container">
                <div className="donate-box">
                    <h1 className="donate-title">Support My Journey!</h1>
                    <p className="donate-description">
                        Thank you for being a part of my community. Your support helps me continue to enhance the platform, cover operational costs, and bring you the best experience possible. Every cup of coffee fuels my mission to make learning more engaging and accessible for everyone.
                    </p>
                    <a
                        href="https://buymeacoffee.com/carterperez"
                        target="_blank"
                        rel="noopener noreferrer"
                        className="buy-coffee-button"
                    >
                        Buy Me a Coffee
                    </a>
                </div>
                {/* Impact Section */}
                <div className="impact-section">
                    <h3>Your Impact</h3>
                    <p>
                        Your donation helps me improve the platform, add new features, helps pay for AWS hosting, OpenAI tokens, and other operational costs. Every contribution, big or small, makes a difference!
                    </p>
                </div>
                {/* Donation Goals Section */}
                <div className="goals-section">
                    <p>This site is super new and still in its early days, but I’m working on it daily to turn it into the go-to place for learning cybersecurity certifications. Fast forward a year, and it’s going to be 100x better! Be an early supporter now and join me on this journey from the start.</p>
                    <h3>My Goals</h3>
                    <p>
                        - Enhance user experience with new features every week<br />
                        - Cover server and maintenance costs<br />
                        - Fix any bugs as soon as possible<br />
                        - Develop additional resources and content<br />
                        - Keep it free for everyone<br />
                    </p>
                </div>
                {/* Leaderboard Section */}
                <div className="leaderboard-section">
                    <h3>Join the Leaderboard!</h3>
                    <p>
                        Want to be featured on our Leaderboard? If you donate and would like your name to be displayed, please fill out the form below. Sharing your support helps build our community and inspires others to contribute!
                    </p>
                    {!showConfirmation ? (
                        <form className="leaderboard-form" onSubmit={handleSubmit}>
                            <label htmlFor="donorName">Your Name:</label>
                            <input
                                id="donorName"
                                type="text"
                                name="donorName"
                                placeholder="Enter your name"
                                required
                            />
                            <ValidationError 
                                prefix="Name" 
                                field="donorName"
                                errors={state.errors}
                            />
                            <button type="submit" className="submit-button" disabled={state.submitting}>
                                Submit
                            </button>
                        </form>
                    ) : (
                        <p className="confirmation-message">Thank you! Your name has been submitted for the Leaderboard.</p>
                    )}
                    {/* Manual Leaderboard - Updating this section manually based on submissions using formspree */}
                    <div className="manual-leaderboard">
                        <h4>Top Donors</h4>
                        <ul>
                            <li>Leon Tang $5</li>
                            {/* Donors */}
                        </ul>
                    </div>
                </div>
                <div className="thanks-message">
                    <p>Thank you for your generosity!</p>
                </div>
            </div>
        </div>
    );
}

export default Donate;

================
File: frontend/my-react-app/src/components/pages/GRCpage/GRC.css
================
.grc-wizard-page {
  position: relative;
  min-height: 100vh;
  background-image: url('./GRCbackground.jpg'); /* Keep your Kali Linux background here */
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  display: flex;
  justify-content: center; 
  padding: 2rem;
  box-sizing: border-box;
  overflow: hidden; 
}

.grc-wizard-container {
  position: relative;
  z-index: 2;
  max-width: 95vw;
  width: 100%;
  padding: 1.5rem;
  background-color: rgba(0, 0, 0, 0.65);
  border: 2px solid #ff0000; /* Red accent */
  border-radius: 0.75rem;
  color: #fff;
  text-align: center;
  box-shadow: 0 0 20px rgba(255, 0, 0, 0.7);
  transition: all 0.2s ease;
}

/* HEADER – TITLE & SUBTITLE */
.grc-title {
  font-size: 3rem;
  color: #ff0000; /* Bold red */
  margin-bottom: 0.75rem;
  text-shadow: 0.125rem 0.125rem #ffffff;
  word-wrap: break-word;
  font-family: "VT323", monospace;
}

.grc-subtitle {
  font-size: 1.5rem;
  color: #ffffff;
  margin-bottom: 1.5rem;
  word-wrap: break-word;
  font-family: "VT323", monospace;
}

/* CONTROLS LAYOUT */
.grc-wizard-controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.grc-control {
  flex: 1;
  min-width: 10rem;
  text-align: left;
}

/* FORM LABELS */
.grc-label {
  display: block;
  font-size: 1.2rem;
  font-weight: bold;
  color: #ff0000; /* Red labels */
  margin-bottom: 0.5rem;
  text-transform: uppercase;
  font-family: 'Orbitron', sans-serif;
}

/* SELECT DROPDOWN */
.grc-select {
  width: 100%;
  padding: 0.75rem;
  background-color: #111;
  color: #ff0000;
  border: 1px solid #fff;
  border-radius: 0.5rem;
  font-size: 1rem;
  outline: none;
  transition: border-color 0.3s ease, background-color 0.3s ease;
}

.grc-select:hover,
.grc-select:focus {
  border-color: #ff5555;
  background-color: #222;
}

/* GENERATE BUTTON & BUTTON CONTAINER */
.button-and-sphere {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.grc-generate-btn {
  padding: 0.75rem 1.5rem;
  background-color: #111;
  color: #fff;
  border: 1px solid #ff0000;
  border-radius: 1.25rem;
  font-size: 1.1rem;
  text-transform: uppercase;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  margin-top: 0.5rem;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-family: 'Orbitron', sans-serif;
}


.grc-generate-btn:hover:not(:disabled) {
  background-color: #ff0000;
  color: #000;
  transform: translateY(-2px);
}

.grc-generate-btn:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

/* ANIMATED LOADING (TERMINAL TYPING EFFECT) */
.grc-button-loading-version1 {
  display: inline-block;
  position: relative;
  white-space: nowrap;
  overflow: hidden;
  border-right: 2px solid #ff0000;
  animation: terminalTyping 2s steps(14, end) infinite alternate;
}

@keyframes terminalTyping {
  0% {
    width: 0ch;
  }
  50% {
    width: 11ch;
  }
  100% {
    width: 11ch;
    border-right-color: transparent;
  }
}

/* QUESTION & OPTIONS */
.grc-question-container {
  margin-bottom: 2rem;
}

.grc-question {
  font-size: 1.8rem;
  color: #fff;
  margin-bottom: 1rem;
  word-wrap: break-word;
  text-shadow: 0 0 5px #ff0000;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
}

.grc-options {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 90%;
  margin: 0 auto;
}

.grc-option-btn {
  padding: 0.75rem 1rem;
  background-color: #111;
  color: #fff;
  border: 1px solid #ff0000;
  border-radius: 0.5rem;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.grc-option-btn:hover:not(:disabled) {
  background-color: #333;
  transform: translateY(-2px);
}

.grc-option-btn:active:not(:disabled) {
  transform: translateY(0);
}

.grc-option-btn.selected {
  background-color: #000;
  color: #ff0000;
  border-color: #ff0000;
}

/* FEEDBACK MESSAGE */
.grc-feedback {
  position: relative;
  padding: 1rem;
  margin-top: 1.5rem;
  border-radius: 0.5rem;
  font-size: 1.2rem;
  text-align: center;
  line-height: 1.5;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
  word-wrap: break-word;
  white-space: pre-wrap;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.grc-feedback.correct {
  background-color: #006400;  /* Dark green for correct answers */
  color: #adff2f;
  border: 1px solid #00ff00;
}

.grc-feedback.incorrect {
  background-color: #8b0000;  /* Dark red for incorrect answers */
  color: #ff6347;
  border: 1px solid #ff0000;
}

/* COPY BUTTON (IN FEEDBACK) */
.copy-btn {
  position: absolute;
  top: 0.01rem;
  right: 0.01rem;
  background-color: #333;
  color: #fff;
  border: 1px solid #fff;
  border-radius: 1.25rem;
  padding: 0.2rem 0.5rem;
  font-size: 0.5rem;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.1s ease;
}

.copy-btn:hover {
  background-color: #3333ff;
  color: #000;
}

.copy-btn:active {
  transform: scale(0.95);
  opacity: 0.8;
}

/* RESPONSIVE MEDIA QUERIES */

/* Tablets & Up */
@media (min-width: 768px) {
  .grc-wizard-container {
    padding: 2rem;
  }
  .grc-title {
    font-size: 3.5rem;
  }
  .grc-subtitle {
    font-size: 1.3rem;
  }
  .grc-question {
    font-size: 2rem;
  }
  .grc-option-btn {
    font-size: 1.1rem;
  }
  .grc-feedback {
    font-size: 1.3rem;
  }
}

/* Large Screens */
@media (min-width: 1024px) {
  .grc-wizard-container {
    padding: 2.5rem;
  }
  .grc-title {
    font-size: 4rem;
  }
  .grc-subtitle {
    font-size: 1.4rem;
  }
  .grc-question {
    font-size: 2.2rem;
  }
  .grc-option-btn {
    font-size: 1.2rem;
  }
  .grc-feedback {
    font-size: 1.4rem;
  }
}

/* Mobile Devices (iPhone, Android, etc.) */
@media (max-width: 767px) {
  .grc-wizard-container {
    padding: 1rem;
  }
  .grc-title {
    font-size: 2.5rem;
  }
  .grc-subtitle {
    font-size: 1rem;
  }
  .grc-wizard-controls {
    flex-direction: column;
    align-items: stretch;
  }
  .grc-control {
    min-width: 100%;
  }
  .grc-generate-btn {
    width: 100%;
  }
  .grc-question {
    font-size: 1.6rem;
  }
  .grc-option-btn {
    font-size: 1rem;
  }
  .grc-feedback {
    font-size: 1.1rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/GRCpage/GRC.js
================
// GRC.js
import React, { useState, useCallback } from "react";
import "./GRC.css";

const ENDPOINT = "/api";

const GRC = () => {
  const [category, setCategory] = useState("Random");
  const [difficulty, setDifficulty] = useState("Easy");
  const [loading, setLoading] = useState(false);
  const [questionData, setQuestionData] = useState(null);
  const [selectedOption, setSelectedOption] = useState(null);
  const [feedback, setFeedback] = useState("");

  const categories = [
    "Regulation",
    "Risk Management",
    "Compliance",
    "Audit",
    "Governance",
    "Management",
    "Policy",
    "Ethics",
    "Threat Assessment",
    "Leadership",
    "Business Continuity",
    "Random"
  ];
  const difficulties = ["Easy", "Medium", "Hard"];

  const fetchQuestion = useCallback(async () => {
    setLoading(true);
    setFeedback("");
    setQuestionData(null);
    setSelectedOption(null);

    try {
      const response = await fetch(`${ENDPOINT}/grc/generate_question`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ category, difficulty }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || "Failed to fetch question");
      }

      const data = await response.json();
      setQuestionData(data);
    } catch (error) {
      console.error("Error fetching question:", error);
      setFeedback("Error fetching question. Please try again.");
    } finally {
      setLoading(false);
    }
  }, [category, difficulty]);

  const handleAnswer = useCallback(
    (index) => {
      if (!questionData) return;
      const correctIndex = questionData.correct_answer_index;
      if (index === correctIndex) {
        setFeedback(
          `✅ Correct! ${questionData.explanations[index.toString()]}\nExam Tip: ${questionData.exam_tip}`
        );
      } else {
        setFeedback(
          `❌ Incorrect. ${questionData.explanations[index.toString()]}\nExam Tip: ${questionData.exam_tip}`
        );
      }
    },
    [questionData]
  );

  const handleCopy = useCallback(() => {
    if (!questionData || !feedback) return;
    const textToCopy = `Question: ${questionData.question}\n${feedback}`;
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        console.log("Copied to clipboard");
      })
      .catch((err) => console.error("Failed to copy:", err));
  }, [questionData, feedback]);

  return (
    <div className="grc-wizard-page">
      <div className="grc-wizard-container">
        <div className="grc-wizard-header">
          <h1 className="grc-title">GRC Wizard</h1>
          <p className="grc-subtitle">
            Choose a category and difficulty, then test your GRC knowledge.
          </p>
        </div>

        <div className="grc-wizard-controls">
          <div className="grc-control">
            <label className="grc-label" htmlFor="category-select">
              Category
            </label>
            <select
              id="category-select"
              className="grc-select"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              aria-label="Select Category"
            >
              {categories.map((cat, idx) => (
                <option key={idx} value={cat}>
                  {cat}
                </option>
              ))}
            </select>
          </div>

          <div className="grc-control">
            <label className="grc-label" htmlFor="difficulty-select">
              Difficulty
            </label>
            <select
              id="difficulty-select"
              className="grc-select"
              value={difficulty}
              onChange={(e) => setDifficulty(e.target.value)}
              aria-label="Select Difficulty"
            >
              {difficulties.map((level, idx) => (
                <option key={idx} value={level}>
                  {level}
                </option>
              ))}
            </select>
          </div>

          <div className="button-and-sphere">
            <button
              className="grc-generate-btn"
              onClick={fetchQuestion}
              disabled={loading}
              aria-label="Generate Question"
            >
              {loading ? (
                <span
                  className="grc-button-loading-version1"
                  aria-label="Loading"
                >
                  Generating_
                </span>
              ) : (
                "Generate Question"
              )}
            </button>
          </div>
        </div>

        {questionData && (
          <div className="grc-question-container">
            <h2 className="grc-question">{questionData.question}</h2>
            <div className="grc-options">
              {questionData.options.map((option, index) => (
                <button
                  key={index}
                  className={`grc-option-btn ${
                    selectedOption === index ? "selected" : ""
                  }`}
                  onClick={() => {
                    setSelectedOption(index);
                    handleAnswer(index);
                  }}
                  disabled={!!feedback}
                  aria-label={`Option ${index + 1}: ${option}`}
                >
                  {option}
                </button>
              ))}
            </div>
          </div>
        )}

        {feedback && (
          <div
            className={`grc-feedback ${
              feedback.includes("Correct") ? "correct" : "incorrect"
            }`}
          >
            {feedback}
            <button
              className="copy-btn"
              onClick={handleCopy}
              aria-label="Copy Feedback"
            >
              Copy
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default GRC;

================
File: frontend/my-react-app/src/components/pages/Info/InfoPage.css
================
/* src/components/pages/InfoPage.css */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

.info-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  min-height: 100vh;
  background: linear-gradient(135deg, #0e0e0e, #1a1a1a);
  color: #e0e0e0;
  padding: 2rem;
  box-sizing: border-box;
  font-family: 'Roboto', sans-serif;
}

.info-header {
  text-align: center;
  margin-bottom: 2rem;
  animation: fadeInDown 1s ease-out;
  width: 100%;
}

.site-title {
  font-size: 3rem;
  color: #ff5555;
  margin: 0;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);
}

.tagline {
  font-size: 1.8rem;
  margin-top: 0.5rem;
  color: #cccccc;
  animation: fadeInDown 1.5s ease-out;
}

.auth-buttons {
  display: flex;
  gap: 1rem;
  justify-content: center;
  margin-top: 1.5rem;
}

.auth-btn {
  padding: 0.75rem 1.5rem;
  border-radius: 5px;
  text-decoration: none;
  font-weight: bold;
  transition: background 0.3s ease, transform 0.2s ease;
}

.login-btn {
  background: linear-gradient(135deg, #ff5555, #ff0000);
  color: #ffffff;
}

.register-btn {
  background: linear-gradient(135deg, #4caf50, #43a047);
  color: #ffffff;
}

.auth-btn:hover {
  transform: scale(1.03);
}

.subscription-info {
  margin-top: 1.5rem;
  font-size: 1.2rem;
  color: #ffffff;
}

.subscription-info .price {
  font-weight: bold;
  color: #ffd700;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

/* Features Section */
.info-features {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
  width: 100%;
  max-width: 1200px;
  margin-bottom: 3rem;
  animation: fadeIn 2s ease-out;
}

.feature {
  background: #1f1f1f;
  border: 1px solid #333;
  padding: 1.5rem;
  border-radius: 10px;
  text-align: center;
  transition: transform 0.3s ease;
}

.feature:hover {
  transform: translateY(-5px);
}

.feature-icon {
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.feature-title {
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
  color: #ff5555;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}

.feature-text {
  font-size: 1rem;
  color: #cccccc;
}

/* Call-to-Action Section */
.info-cta {
  text-align: center;
  margin-bottom: 3rem;
  animation: fadeInUp 1.5s ease-out;
}

.cta-text {
  font-size: 1.4rem;
  margin-bottom: 1.5rem;
  color: #ffffff;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}

.cta-buttons {
  display: flex;
  gap: 1.5rem;
  justify-content: center;
}

.cta-btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  border-radius: 5px;
  font-weight: bold;
  text-decoration: none;
  transition: background 0.3s ease, transform 0.2s ease;
}

.cta-btn:hover {
  transform: scale(1.03);
}

/* Footer */
.info-footer {
  text-align: center;
  font-size: 0.9rem;
  color: #777;
  margin-top: 2rem;
  animation: fadeInUp 1s ease-out;
}

/* Animations */
@keyframes fadeInDown {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .site-title {
    font-size: 2.5rem;
  }
  .tagline {
    font-size: 1.3rem;
  }
  .info-features {
    grid-template-columns: 1fr;
  }
  .auth-buttons {
    flex-direction: column;
  }
}

================
File: frontend/my-react-app/src/components/pages/Info/InfoPage.js
================
// src/components/pages/InfoPage.js
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  FaQuestionCircle, 
  FaRocket, 
  FaTrophy, 
  FaRegNewspaper, 
  FaVideo, 
  FaLaptopCode, 
  FaShieldAlt,
  FaEnvelopeOpenText,
  FaDesktop
} from 'react-icons/fa';
import './InfoPage.css';

const InfoPage = () => {
  return (
    <div className="info-container">
      <header className="info-header">
        <h1 className="site-title"> Cert Games </h1>
        <p className="tagline">
          Your Ultimate Digital Hub for Exam Mastery &amp; Interactive Tools
        </p>
        <div className="auth-buttons">
          <Link to="/register" className="auth-btn register-btn">
            Register Now
          </Link>
          <Link to="/login" className="auth-btn login-btn">
            Login
          </Link>
        </div>
        <p className="subscription-info">
          Unlock unlimited access to <span className="price">8,000+</span> practice questions, interactive labs, leaderboards, achievements and more—for only <span className="price">$10/month</span>.
        </p>
      </header>

      <section className="info-features">
        {/* Feature Box 1 */}
        <div className="feature">
          <FaQuestionCircle className="feature-icon" style={{ color: "#ff5555" }} />
          <h2 className="feature-title">Massive Question Bank</h2>
          <p className="feature-text">
            Access over <span className="price">8,000+</span> practice questions organized into 120 tests covering A+ Core 1 &amp; 2, Security+, Network+, CySa+, Pentest+, CASP+ and more.
            Enhance your learning with detailed explanations for every question.
          </p>
        </div>
        {/* Feature Box 2 */}
        <div className="feature">
          <FaRocket className="feature-icon" style={{ color: "#ffa500" }} />
          <h2 className="feature-title">Gamified Learning</h2>
          <p className="feature-text">
            Earn coins for every correct answer, level up, and unlock awesome badges, avatars, and power‑ups.
            Enjoy a fun, interactive study experience that keeps you engaged.
          </p>
        </div>
        {/* Feature Box 3 */}
        <div className="feature">
          <FaTrophy className="feature-icon" style={{ color: "#ffd700" }} />
          <h2 className="feature-title">Achievements &amp; Leaderboards</h2>
          <p className="feature-text">
            Compete with peers and unlock achievements as you climb the leaderboard.
            Showcase your progress and celebrate every milestone.
          </p>
        </div>
        {/* Feature Box 4 */}
        <div className="feature">
          <FaRegNewspaper className="feature-icon" style={{ color: "#00ced1" }} />
          <h2 className="feature-title">Resource Hub &amp; Newsletter</h2>
          <p className="feature-text">
            Discover curated courses, top YouTube playlists, and the best cybersecurity tools.
            Subscribe to our newsletter for weekly exam tips and study insights.
          </p>
        </div>
        {/* Feature Box 5 */}
        <div className="feature">
          <FaVideo className="feature-icon" style={{ color: "#1e90ff" }} />
          <h2 className="feature-title">Interactive Labs &amp; Tools</h2>
          <p className="feature-text">
            Experiment with hands-on tools like Xploitcraft, Scenario Sphere, Analogy Hub, Log Analysis, and our GRC generator.
            Experience dynamic, real‑time simulations to hone your skills.
          </p>
        </div>
        {/* Feature Box 6 */}
        <div className="feature">
          <FaLaptopCode className="feature-icon" style={{ color: "#32cd32" }} />
          <h2 className="feature-title">One-Stop Study Platform</h2>
          <p className="feature-text">
            No more searching across multiple sites – everything you need for CompTIA exam prep is in one sleek, unified platform.
            Streamline your study process effortlessly.
          </p>
        </div>
        {/* Feature Box 7 */}
        <div className="feature">
          <FaShieldAlt className="feature-icon" style={{ color: "#8a2be2" }} />
          <h2 className="feature-title">Secure &amp; Reliable</h2>
          <p className="feature-text">
            Benefit from a high‑performance, secure platform designed with robust measures.
            Study with confidence knowing your data is protected.
          </p>
        </div>
        {/* Feature Box 8 */}
        <div className="feature">
          <FaEnvelopeOpenText className="feature-icon" style={{ color: "#ff69b4" }} />
          <h2 className="feature-title">24-Hour Support</h2>
          <p className="feature-text">
            Have questions? Email us anytime with your queries regarding the exams, the website, or the practice questions.
            We promise a response within 24 hours.
          </p>
        </div>
        {/* Feature Box 9 */}
        <div className="feature">
          <FaDesktop className="feature-icon" style={{ color: "#00fa9a" }} />
          <h2 className="feature-title">Unified Study Dashboard</h2>
          <p className="feature-text">
            Manage your practice tests, track your progress, and access all tools from one seamless dashboard.
            Everything is integrated to provide you with a hassle-free study experience.
          </p>
        </div>
      </section>

      <section className="info-cta">
        <p className="cta-text">
          Ready to revolutionize your exam prep? Join us for unlimited access to interactive tools, a massive question bank, and more!
        </p>
        <div className="cta-buttons">
          <Link to="/register" className="cta-btn register-btn">Register Now</Link>
          <Link to="/login" className="cta-btn login-btn">Login</Link>
        </div>
      </section>

      <footer className="info-footer">
        <p>&copy; {new Date().getFullYear()} Certgames.com. All rights reserved.</p>
      </footer>
    </div>
  );
};

export default InfoPage;

================
File: frontend/my-react-app/src/components/pages/linuxplus/LinuxPlusTestList.js
================
// src/components/pages/linuxplus/LinuxPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const LinuxPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll use category "linuxplus" to avoid collisions in localStorage
  const category = "linuxplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${progressData.currentQuestionIndex + 1} / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple optional difficulty mapping for each test
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Linux+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/linux-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/linux-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/linux-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/linux-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/linux-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default LinuxPlusTestList;

================
File: frontend/my-react-app/src/components/pages/linuxplus/LinuxPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import LinuxPlusTestList from "./LinuxPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const LinuxPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <LinuxPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="linuxplus"
      backToListPath="/practice-tests/linux-plus"
    />
  );
};

export default LinuxPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/LogPage/log.css
================
:root {
  /* Primary Colors */
  --primary-red: #cc0000;    
  --accent-red: #e60000;     
  
  /* Blue Colors */
  --primary-blue: #0000ff;   
  --accent-blue: #0044cc;    
  
  /* Neutral Colors */
  --white: #ffffff;
  --light-grey: #d3d3d3;
  --dark-grey: #121212;
  
  /* Input Colors */
  --input-border: #cc0000;   
  --input-bg: #8c8c8c;      
  --text-color: #0000ff;    
  
  /* Button Colors */
  --button-bg: #cc0000;          
  --button-hover-bg: #ff3333;    
  --button-active-bg: #990000;   
  
  /* Log Entry Background */
  --log-entry-bg: rgba(18, 18, 18, 0.85); 
}


@keyframes flicker {
  0% {
    opacity: 1;
    text-shadow: 0 0 12px var(--primary-red), 0 0 20px var(--accent-red);
  }
  50% {
    opacity: 0.5;
    text-shadow: 0 0 8px var(--primary-red), 0 0 16px var(--accent-red);
  }
  100% {
    opacity: 1;
    text-shadow: 0 0 12px var(--primary-red), 0 0 20px var(--accent-red);
  }
}

@keyframes flicker-in-1 {
  from {opacity: 0;}
  to {opacity: 1;}
}

@keyframes flicker-in-2 {
  0% {opacity: 0;}
  50% {opacity: 0.5;}
  100% {opacity: 1;}
}


.crt-overlay::before {
  content: "";
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  pointer-events: none;
  background:
    repeating-linear-gradient(
      transparent,
      transparent 2px,
      rgba(0,0,0,0.1) 2px,
      rgba(0,0,0,0.1) 3px
    );
  z-index: 9999;
  opacity: 0.3;
}


html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  box-sizing: border-box;
  overflow-x: hidden; 
}

*, *::before, *::after {
  box-sizing: inherit;
}


.log-page-container.crt-overlay {
  position: relative; 
}


.log-page-container.crt-overlay::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('./logbackground.jpg') center no-repeat;
  background-size: cover;
  opacity: 0.11; 
  border-radius: 15px; 
}


.neon-border {
  border: 1px solid var(--accent-red);
  box-shadow: 0 0 8px var(--accent-red), inset 0 0 8px var(--accent-red);
  border-radius: 12px;
}


.log-page-title {
  text-align: center;
  font-size: 4rem;
  margin-bottom: 30px;
  color: #cc0000; 
  text-shadow: 2px 2px 1px #fff;
  font-family: 'VT323', monospace;
  font-weight: bold; 
}


.hacker-panel {
  position: relative; 
  background: var(--log-entry-bg);
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 15px;
  overflow: hidden;
}


.hacker-panel::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('./logbackground.jpg') center center no-repeat;
  background-size: cover;
  opacity: 0.1;
  z-index: -1;
  border-radius: 10px;
}


.hacker-scroll::-webkit-scrollbar {
  width: 10px;
}
.hacker-scroll::-webkit-scrollbar-track {
  background: var(--light-grey);
  border-radius: 10px;
}
.hacker-scroll::-webkit-scrollbar-thumb {
  background-color: var(--primary-red);
  border-radius: 10px;
}
.hacker-scroll::-webkit-scrollbar-thumb:hover {
  background-color: var(--button-hover-bg);
}


.log-controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 10px; 
}

.control-group {
  display: flex;
  flex-direction: column;
  margin-bottom: 15px;
  flex: 1 1 180px; 
}

.control-group label {
  margin-bottom: 5px;
  font-weight: bold;
  font-size: 1rem;
  color: #cc0000; 
  font-family: 'VT323', monospace;
}


.control-group select,
.control-group input[type="number"] {
  padding: 10px;
  border: 2px solid var(--input-border);
  border-radius: 8px;
  background-color: var(--input-bg);
  color: #0000ff;
  font-size: 1rem;
  outline: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.control-group select:focus,
.control-group input[type="number"]:focus {
  border-color: var(--primary-red);
  box-shadow: 0 0 8px var(--primary-red);
}


.max-count {
  margin-left: 5px;
  font-size: 0.9rem;
  color: var(--text-color);
  align-self: flex-end;
}


.generate-btn,
.reset-btn,
.history-controls button {
  background-color: var(--button-bg);
  border: none;
  border-radius: 8px;
  color: var(--white);
  padding: 12px 24px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.3s ease;
  margin-top: 10px;
  position: relative;
  overflow: hidden;
  font-family: 'Arial', sans-serif;
  font-weight: bold;
  border: 0.2rem solid #fff;
}

.generate-btn:hover,
.reset-btn:hover,
.history-controls button:hover {
  background-color: var(--button-hover-bg);
  border: 0.2rem solid #fff;
}

.generate-btn:active,
.reset-btn:active,
.history-controls button:active {
  background-color: var(--button-active-bg);
  border: 0.2rem solid #fff;
}

.analyze-individual-btn:disabled {
  background-color: #555555;
  cursor: not-allowed;
  opacity: 0.7;
}


.neon-btn::after {
  content: "";
  position: absolute;
  left: -50%;
  top: 0;
  width: 200%;
  height: 100%;
}

.neon-btn:hover::after {
  left: 100%;
}


.progress-bar-container {
  position: relative;
  width: 100%;
  height: 25px;
  background-color: var(--light-grey);
  border-radius: 12.5px;
  margin-bottom: 20px;
  overflow: hidden;
}

.progress-bar {
  height: 100%;
  width: 0%;
  background-color: var(--accent-red);
  transition: width 0.3s ease;
}

.progress-percentage {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  color: var(--text-color);
  font-weight: bold;
  line-height: 25px;
  font-family: 'Arial', sans-serif;
}


.log-list {
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-bottom: 30px;
  height: 600px;
  overflow-x: hidden;
}

.log-entry {
  background-color: var(--log-entry-bg);
  padding: 20px;
  border-radius: 15px;
  position: relative;
  font-family: 'Arial', sans-serif;
}

.log-event {
  margin-top: 0;
  color: var(--primary-red);
  text-shadow: 0 0 5px var(--primary-red);
  font-weight: bold;
  font-family: 'Arial', sans-serif;
}

.log-entry p {
  margin: 5px 0;
  font-size: 0.95rem;
  line-height: 1.4;
  word-wrap: break-word;
}

.log-entry p strong {
  color: var(--primary-red);
}

.log-details {
  margin-top: 10px;
}

.nested-data {
  background-color: var(--light-grey);
  padding: 10px;
  border-radius: 8px;
  margin-top: 10px;
  font-size: 0.9rem;
  max-height: 200px;
  overflow: auto;
  color: var(--text-color);


  white-space: pre;
  overflow-x: hidden;
}


.severity-critical { border-left: 5px solid var(--primary-red); }
.severity-info { border-left: 5px solid var(--accent-red); }


.analysis-result {
  margin-top: 10px;
}

.analysis-box {
  background-color: #000000;
  padding: 15px;
  border-radius: 8px;
  white-space: pre-wrap;
  font-size: 1rem;
  overflow-x: auto;
  border: 1px solid var(--accent-red);
}


.log-history {
  padding: 20px;
  border-radius: 20px;
  margin-bottom: 30px;
  position: relative;
}

.history-controls {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 10px;
}

.history-list {
  max-height: 400px;
  overflow-y: auto;
}

.history-entry {
  background-color: #0f0f0f;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 10px;
  box-shadow: 0 0 5px var(--accent-red);
}

.history-entry h4 {
  margin: 0 0 10px 0;
  color: var(--accent-red);
  text-shadow: 0 0 3px var(--accent-red);
}

.history-entry p {
  margin: 5px 0;
  font-size: 0.9rem;
  word-wrap: break-word;
}


.log-actions {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-bottom: 30px;
  position: relative;
}

.export-dropdown {
  position: relative;
}

.export-options {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  background: var(--input-bg);
  border: 1px solid var(--primary-red);
  z-index: 10;
}

.export-dropdown:hover .export-options {
  display: flex;
  flex-direction: column;
}

.export-options button {
  margin: 0;
  border: none;
  background: transparent;
  text-align: left;
  padding: 8px 10px;
  width: 100%;
  color: var(--text-color);
  font-family: 'Arial', sans-serif;
  font-size: 0.9rem;
}

.export-options button:hover {
  background-color: var(--button-hover-bg);
}


.empty-message {
  color: var(--primary-red);
  text-align: center;
  font-size: 1.2rem;
  margin-top: 50px;
  animation: flicker 2s infinite alternate;
  font-family: 'Arial', sans-serif;
}


.resources-footer {
  text-align: center;
  color: #aaaaaa;
  margin-top: 1.5rem;
  font-size: 0.9rem;
}


@media (max-width: 1024px) {
  .log-page-container {
    padding: 15px;
  }
  .log-page-title {
    font-size: 2rem;
  }
}

@media (max-width: 768px) {
  .log-controls {
    flex-direction: column;
    align-items: flex-start;
  }
  .log-list {
    height: 450px; 
  }
  .control-group {
    margin-right: 0;
  }
}

@media (max-width: 480px) {
  .log-page-title {
    font-size: 1.8rem;
  }
  .control-group label {
    font-size: 0.9rem;
  }
  .control-group select,
  .control-group input[type="number"] {
    font-size: 0.85rem;
    padding: 8px;
  }
  .generate-btn,
  .reset-btn,
  .history-controls button,
  .export-btn,
  .analyze-individual-btn,
  .export-options button {
    font-size: 0.85rem;
    padding: 8px 12px;
  }
  .analysis-box {
    font-size: 0.85rem;
  }
  .log-list {
    height: 400px; 
  }
  .history-entry p {
    font-size: 0.85rem;
  }

  body, html {
    overflow-x: hidden;
  }
}

================
File: frontend/my-react-app/src/components/pages/LogPage/Log.js
================
import React, { useState, useEffect } from "react";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./log.css";

const LOG_CATEGORIES = {
  security: ["All", "Firewall", "Vulnerability Scanner", "IDS", "Access Control"],
  event: ["All", "System Monitor", "AppManager", "AuthService", "Network Manager"],
  error: ["All", "Database", "FileSystem", "Network Interface", "Application Service"],
  debug: ["All", "Query Executor", "API Gateway", "Config Manager", "Process Manager"],
  info: ["All", "System Monitor", "Activity Tracker", "Deployment Manager", "Service Monitor"],
};

const MAX_LOG_COUNT = 20;

const getProgressBarColor = (percentage) => {
  if (percentage > 75) return "#00ffea"; // Neon Cyan
  if (percentage > 50) return "#ff4d4d"; // Neon Red
  if (percentage > 25) return "#ff00ff"; // Neon Pink
  return "#ffffff"; // White
};

const formatFieldName = (fieldName) => {
  return fieldName
    .replace(/_/g, " ")
    .replace(/([A-Z])/g, " $1")
    .replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())
    .trim();
};

const Controls = ({
  category,
  setCategory,
  subcategory,
  setSubcategory,
  count,
  setCount,
  generateLogs,
  loading,
  progress,
}) => {
  return (
    <div className="log-controls hacker-panel neon-border flicker-in-1">
      <div className="control-group">
        <label htmlFor="category-select">Log Category:</label>
        <select
          id="category-select"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          disabled={loading}
        >
          {Object.keys(LOG_CATEGORIES).map((cat) => (
            <option key={cat} value={cat}>
              {cat.charAt(0).toUpperCase() + cat.slice(1)}
            </option>
          ))}
        </select>
      </div>

      <div className="control-group">
        <label htmlFor="subcategory-select">Subcategory:</label>
        <select
          id="subcategory-select"
          value={subcategory}
          onChange={(e) => setSubcategory(e.target.value)}
          disabled={loading}
        >
          {LOG_CATEGORIES[category].map((subcat) => (
            <option key={subcat} value={subcat}>
              {subcat}
            </option>
          ))}
        </select>
      </div>

      <div className="control-group">
        <label htmlFor="count-input">Number of Logs:</label>
        <input
          type="number"
          id="count-input"
          value={count}
          min="1"
          max={MAX_LOG_COUNT}
          onChange={(e) => {
            const value = Number(e.target.value);
            if (value >= 1 && value <= MAX_LOG_COUNT) {
              setCount(value);
            }
          }}
          disabled={loading || subcategory === "All"}
        />
        {subcategory !== "All" && <span className="max-count">Max {MAX_LOG_COUNT}</span>}
      </div>

      <button
        className="generate-btn neon-btn"
        onClick={generateLogs}
        disabled={
          loading ||
          (count < 1 || count > MAX_LOG_COUNT) ||
          (subcategory === "All" && LOG_CATEGORIES[category].length - 1 === 0)
        }
      >
        {loading ? `Generating Logs (${Math.floor(progress)}%)` : "Generate Logs"}
      </button>
    </div>
  );
};

const LogEntry = ({ log, analyzeIndividualLog, loading }) => {
  const renderNestedObject = (obj) => {
    if (obj === null) return <span>Null</span>;
    if (typeof obj !== "object") return <span>{obj.toString()}</span>;
    return (
      <ul>
        {Object.entries(obj).map(([key, value]) => (
          <li key={key}>
            <strong>{formatFieldName(key)}:</strong>{" "}
            {typeof value === "object" && value !== null
              ? renderNestedObject(value)
              : value !== null && value !== undefined
              ? value.toString()
              : "N/A"}
          </li>
        ))}
      </ul>
    );
  };

  return (
    <div className={`log-entry severity-${log.severity ? log.severity.toLowerCase() : "all"} neon-border`}>
      <h3 className="log-event scanline">{log.event || "N/A"}</h3>
      <p><strong>Type:</strong> {log.type || "N/A"}</p>
      <p><strong>Source:</strong> {log.source || "N/A"}</p>
      <p><strong>Severity:</strong> {log.severity || "N/A"}</p>
      <p><strong>Message:</strong> {log.message || "N/A"}</p>
      <p><strong>Timestamp:</strong> {log.timestamp ? new Date(log.timestamp).toLocaleString() : "N/A"}</p>

      <div className="log-details">
        {Object.entries(log).map(([key, value]) => {
          if (["type", "source", "event", "message", "severity", "timestamp", "analysis", "id"].includes(key)) {
            return null;
          }
          if (typeof value === "object" && value !== null) {
            return (
              <div key={key}>
                <strong>{formatFieldName(key)}:</strong>
                <div className="nested-data hacker-scroll">
                  {Array.isArray(value) ? (
                    <ul>
                      {value.map((item, index) => (
                        <li key={index}>
                          {typeof item === "object" && item !== null
                            ? renderNestedObject(item)
                            : item !== null && item !== undefined
                            ? item.toString()
                            : "N/A"}
                        </li>
                      ))}
                    </ul>
                  ) : (
                    renderNestedObject(value)
                  )}
                </div>
              </div>
            );
          }

          return (
            <p key={key}>
              <strong>{formatFieldName(key)}:</strong>{" "}
              {value !== null && value !== undefined ? value.toString() : "N/A"}
            </p>
          );
        })}
      </div>

      {!log.analysis && (
        <button
          className="analyze-individual-btn neon-btn"
          onClick={() => analyzeIndividualLog(log)}
          disabled={loading || log.analysis}
          title="Analyze this log"
        >
          {log.analysis ? "Analyzed" : "Analyze Log"}
        </button>
      )}

      {log.analysis && (
        <div className="analysis-result">
          <h4>Analysis:</h4>
          <pre className="analysis-box neon-border">{log.analysis}</pre>
        </div>
      )}
    </div>
  );
};

const HistoryEntry = ({ entry }) => {
  return (
    <div className="history-entry neon-border">
      <h4>
        {entry.log.event || "N/A"} - {entry.log.source || "N/A"}
      </h4>
      <p>
        <strong>Analysis:</strong> {entry.analysis}
      </p>
      <p>
        <strong>Timestamp:</strong> {entry.timestamp}
      </p>
    </div>
  );
};

const HistorySection = ({ history, showHistory, toggleHistory }) => {
  return (
    history.length > 0 && (
      <div className="log-history hacker-panel neon-border flicker-in-2">
        <h2>Analysis History</h2>
        <div className="history-controls">
          <button className="neon-btn" onClick={toggleHistory}>
            {showHistory ? "Hide History" : "Show History"}
          </button>
        </div>
        {showHistory && (
          <div className="history-list hacker-scroll">
            {history.map((entry, index) => (
              <HistoryEntry key={`${entry.id}-${index}`} entry={entry} />
            ))}
          </div>
        )}
      </div>
    )
  );
};

const App = () => {
  const [logs, setLogs] = useState([]);
  const [category, setCategory] = useState("security");
  const [subcategory, setSubcategory] = useState("All");
  const [count, setCount] = useState(1);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [history, setHistory] = useState([]);
  const [showAnalysisHistory, setShowAnalysisHistory] = useState(false);

  const ENDPOINT = "/api";

  useEffect(() => {
    setSubcategory("All");
    setCount(1);
  }, [category]);

  const generateLogs = async () => {
    setLoading(true);
    setProgress(0);
    setLogs([]);
    try {
      const startTime = Date.now();
      const response = await axios.post(`${ENDPOINT}/logs/generate`, {
        category,
        count,
      });

      const generatedLogs = response.data.logs || [];
      let filteredLogs = [];
      if (subcategory !== "All") {
        filteredLogs = generatedLogs.filter(
          (log) => log.source.toLowerCase() === subcategory.toLowerCase()
        );
      } else {
        filteredLogs = generatedLogs;
      }

      const logsWithId = filteredLogs.map((l) => ({
        ...l,
        id: l.id || `${l.type}-${l.timestamp}-${Math.random()}`
      }));

      setLogs(logsWithId);

      const endTime = Date.now();
      const duration = endTime - startTime;
      const simulateProgress = () => {
        const interval = 100;
        const totalIntervals = Math.max(1, Math.floor(duration / interval));
        let currentInterval = 0;
        const progressInterval = setInterval(() => {
          currentInterval += 1;
          setProgress(Math.min((currentInterval / totalIntervals) * 100, 100));
          if (currentInterval >= totalIntervals) {
            clearInterval(progressInterval);
            setProgress(100);
          }
        }, interval);
      };

      simulateProgress();
      await new Promise((resolve) => setTimeout(resolve, duration));

      toast.success(`${logsWithId.length} log(s) generated successfully!`);
    } catch (error) {
      console.error("Error generating logs:", error);
      if (error.response && error.response.data && error.response.data.error) {
        toast.error(`Generation failed: ${error.response.data.error}`);
      } else {
        toast.error("Failed to generate logs. Please try again.");
      }
    }
    setLoading(false);
    setProgress(0);
  };

  const analyzeIndividualLog = async (log) => {
    setLoading(true);
    setProgress(10); 
    const startTime = Date.now();
    try {
      const response = await axios.post(`${ENDPOINT}/logs/analyze`, {
        log: log,
      });
      const analyzedLog = response.data.analysis ? response.data.analysis : "";

      if (!analyzedLog) {
        toast.warn("Log analysis returned no results.");
        setLoading(false);
        setProgress(0);
        return;
      }

      setLogs((prevLogs) =>
        prevLogs.map((l) => (l.id === log.id ? { ...l, analysis: analyzedLog } : l))
      );

      const newAnalysisEntry = {
        id: log.id,
        log: log,
        analysis: analyzedLog,
        timestamp: new Date().toLocaleString(),
      };

      setHistory((prevHistory) => [newAnalysisEntry, ...prevHistory]);

      const endTime = Date.now();
      const duration = endTime - startTime;
      const simulateProgress = () => {
        const interval = 100;
        let currentInterval = 10;
        const progressInterval = setInterval(() => {
          currentInterval += 10;
          if (currentInterval > 100) currentInterval = 100;
          setProgress(currentInterval);
          if (currentInterval >= 100) {
            clearInterval(progressInterval);
          }
        }, interval);
      };

      simulateProgress();
      await new Promise((resolve) => setTimeout(resolve, duration));

      toast.success("Log analyzed successfully!");
    } catch (error) {
      console.error("Error analyzing log:", error);
      if (error.response && error.response.data && error.response.data.error) {
        toast.error(`Analysis failed: ${error.response.data.error}`);
      } else {
        toast.error("Failed to analyze log. Please try again.");
      }
    }
    setLoading(false);
    setProgress(0);
  };

  const exportLogs = (format) => {
    if (logs.length === 0) {
      toast.warn("No logs to export.");
      return;
    }

    let filename = "logs_export";
    let dataStr = "";
    switch (format) {
      case "json":
        filename += ".json";
        dataStr = JSON.stringify(logs, null, 2);
        dataStr = dataStr.replace(/\\n/g, "\n");
        break;
      case "csv":
        filename += ".csv";
        const keys = Object.keys(logs[0]);
        const csvRows = [
          keys.join(","),
          ...logs.map((l) =>
            keys
              .map((k) => {
                let val = l[k];
                if (typeof val === "object" && val !== null) {
                  val = JSON.stringify(val).replace(/\\n/g, "\n");
                }
                return `"${val || ""}"`;
              })
              .join(",")
          ),
        ];
        dataStr = csvRows.join("\n");
        break;
      case "txt":
        filename += ".txt";
        dataStr = logs
          .map((l) => JSON.stringify(l, null, 2).replace(/\\n/g, "\n"))
          .join("\n\n");
        break;
      case "xml":
        filename += ".xml";
        dataStr = `<logs>\n${logs
          .map((l) => {
            const entries = Object.entries(l)
              .map(([k, v]) => {
                let val = v;
                if (typeof val === "object" && val !== null) {
                  val = JSON.stringify(val).replace(/\\n/g, "\n");
                } else if (typeof val === "string") {
                  val = val.replace(/\\n/g, "\n");
                }
                return `<${k}>${val}</${k}>`;
              })
              .join("\n");
            return `<log>\n${entries}\n</log>`;
          })
          .join("\n")}\n</logs>`;
        break;
      case "pdf":
        filename += ".pdf";
        dataStr = logs
          .map((l) => JSON.stringify(l, null, 2).replace(/\\n/g, "\n"))
          .join("\n\n");
        break;
      default:
        dataStr = JSON.stringify(logs, null, 2).replace(/\\n/g, "\n");
        filename += ".json";
        break;
    }

    const blob = new Blob([dataStr], { type: "text/plain;charset=utf-8" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
    toast.success(`Logs exported as ${filename}!`);
  };

  const resetLogs = () => {
    setLogs([]);
    setHistory([]);
    setCategory("security");
    setSubcategory("All");
    setCount(1);
    toast.info("Dashboard has been reset.");
  };

  return (
    <div className="log-page-container crt-overlay">
      <h1 className="log-page-title"> LOG ANALYSIS TERMINAL </h1>

      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />

      <Controls
        category={category}
        setCategory={setCategory}
        subcategory={subcategory}
        setSubcategory={setSubcategory}
        count={count}
        setCount={setCount}
        generateLogs={generateLogs}
        loading={loading}
        progress={progress}
      />

      {loading && progress > 0 && (
        <div className="progress-bar-container">
          <div
            className="progress-bar"
            style={{
              width: `${progress}%`,
              backgroundColor: getProgressBarColor(progress),
            }}
          ></div>
          <span className="progress-percentage">{Math.floor(progress)}%</span>
        </div>
      )}

      <div className="log-list hacker-scroll">
        {logs.length === 0 ? (
          <p className="empty-message">No logs to display.</p>
        ) : (
          logs.map((log) => (
            <LogEntry
              key={log.id}
              log={log}
              analyzeIndividualLog={analyzeIndividualLog}
              loading={loading}
            />
          ))
        )}
      </div>

      <HistorySection
        history={history}
        showHistory={showAnalysisHistory}
        toggleHistory={() => setShowAnalysisHistory(!showAnalysisHistory)}
      />

      <div className="log-actions">
        <div className="export-dropdown">
          <button className="export-btn neon-btn">Export Logs</button>
          <div className="export-options neon-border">
            <button onClick={() => exportLogs("json")}>JSON</button>
            <button onClick={() => exportLogs("csv")}>CSV</button>
            <button onClick={() => exportLogs("txt")}>TXT</button>
            <button onClick={() => exportLogs("xml")}>XML</button>
            <button onClick={() => exportLogs("pdf")}>PDF</button>
          </div>
        </div>
        <button
          className="reset-btn neon-btn"
          onClick={resetLogs}
          disabled={loading || (logs.length === 0 && history.length === 0)}
        >
          Reset
        </button>
      </div>
    </div>
  );
};

export default App;

================
File: frontend/my-react-app/src/components/pages/nplus/NetworkPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import NPlusTestList from "./NPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const NetworkPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <NPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="nplus"
      backToListPath="/practice-tests/network-plus"
    />
  );
};

export default NetworkPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/nplus/NPlusTestList.js
================
// src/components/pages/testpage/NPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
// Reuse your existing APlusStyles.css if desired:
import "../../test.css";

// Replicated from APlusTestList but adapted for Network+.
const NPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100; // Adjust if your tests differ
  const { userId } = useSelector((state) => state.user);

  // We'll store this category as "nplus" to keep it distinct
  const category = "nplus"; // <--- main difference from APlus

  // Retrieve saved progress from localStorage
  const getProgressData = (id) => {
    if (!userId) return null;
    // CHANGED: Now we do `testProgress_${userId}_${category}_${id}`
    const key = `testProgress_${userId}_${category}_${id}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (id) => {
    const progressData = getProgressData(id);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (you can change names or colors if you wish)
  const getDifficultyData = (id) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[id] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Network+ Practice Tests</h1>
      <div className="tests-list-grid">
        {/* We'll show 10 tests, each with an ID from 1 to 10 */}
        {Array.from({ length: 10 }, (_, i) => {
          const id = i + 1;
          const difficulty = getDifficultyData(id);
          const progressData = getProgressData(id);
          const progressDisplay = getProgressDisplay(id);

          return (
            <div key={id} className="test-card">
              <div className="test-badge">Test {id}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        // CHANGED: navigate to /practice-tests/network-plus/<id>
                        onClick={() =>
                          navigate(`/practice-tests/network-plus/${id}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          // Remove localStorage key for that test
                          const key = `testProgress_${userId}_${category}_${id}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/network-plus/${id}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/network-plus/${id}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${id}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/network-plus/${id}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  // CHANGED: navigate to network-plus route
                  onClick={() => navigate(`/practice-tests/network-plus/${id}`)}
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default NPlusTestList;

================
File: frontend/my-react-app/src/components/pages/PBQpage/PBQWizard.css
================
/* PBQWizard.css */

/* Overall page */
.pbq-wizard-page {
  background-color: #0f0f0f;
  color: #c9d1d9;
  font-family: "Courier New", Courier, monospace;
  min-height: 100vh;
  padding: 2rem;
  box-sizing: border-box;
}

/* Header */
.pbq-header {
  text-align: center;
  margin-bottom: 2rem;
}

.pbq-header h1 {
  font-size: 2rem;
  color: #39ff14;
  margin: 0.5rem 0;
  text-shadow: 1px 1px 2px #003300;
}

.pbq-header p {
  color: #8b949e;
}

/* Controls */
.pbq-controls {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  justify-content: center;
  margin-bottom: 2rem;
  background: #1f1f1f;
  padding: 1rem;
  border: 1px solid #333;
  border-radius: 6px;
}

.control-group {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.control-group label {
  color: #ffd700;
  font-weight: bold;
  margin-bottom: 0.3rem;
}

.control-group input[type="text"],
.control-group select {
  background-color: #101010;
  border: 1px solid #3f3f3f;
  color: #fff;
  padding: 0.4rem 0.6rem;
  border-radius: 4px;
}

.generate-pbq-button {
  background-color: #3399ff;
  color: #fff;
  border: none;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 4px;
  font-weight: bold;
}

.generate-pbq-button:hover {
  background-color: #1e90ff;
}

/* Main content */
.pbq-main-content {
  background-color: #1f1f1f;
  border: 1px solid #3f3f3f;
  border-radius: 6px;
  min-height: 500px;
  padding: 1rem;
}

/* PBQ Container */
.pbq-container {
  margin-top: 1rem;
  overflow-y: auto;
  max-height: 70vh; /* Example to keep scroll manageable */
}

.pbq-title {
  color: #66d9ef;
  font-size: 1.4rem;
  margin-bottom: 0.5rem;
}

.pbq-difficulty {
  color: #999;
  margin-bottom: 1rem;
}

/* Terminal window */
.terminal-window {
  background-color: #161b22;
  border: 1px solid #3f3f3f;
  border-radius: 6px;
  min-height: 200px;
  max-height: 300px;
  padding: 1rem;
  overflow-y: auto;
  white-space: pre-wrap;
  margin-bottom: 1rem;
  color: #c9d1d9;
  font-size: 0.95rem;
  line-height: 1.4;
}

.terminal-line {
  margin: 0.1rem 0;
}

/* Terminal input */
.terminal-input-form {
  display: flex;
  margin-bottom: 1rem;
}
.terminal-input {
  flex: 1;
  background-color: #0f0f0f;
  border: 1px solid #3f3f3f;
  color: #39ff14;
  padding: 0.4rem;
  font-family: "Courier New", Courier, monospace;
  font-size: 0.95rem;
}

/* Sub-task details */
.subtask-details {
  background-color: #262626;
  border: 1px solid #444;
  border-radius: 4px;
  padding: 0.75rem;
  margin-bottom: 1rem;
}

.subtask-title {
  font-size: 1.1rem;
  color: #ffcc66;
  margin-bottom: 0.3rem;
}

.subtask-description {
  color: #c9d1d9;
  margin-bottom: 0.5rem;
}

.followup-question {
  margin-top: 0.5rem;
  color: #ffcc66;
  font-weight: bold;
}

.possible-answers {
  display: flex;
  flex-direction: column;
  margin-top: 0.5rem;
}

.possible-answers label {
  cursor: pointer;
  color: #c9d1d9;
  margin-bottom: 0.25rem;
}

.submit-answer-button {
  background-color: #28a745;
  color: #fff;
  border: none;
  padding: 0.4rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 0.5rem;
  font-weight: bold;
}

/* Explanation block */
.explanation-block {
  margin-top: 0.75rem;
  background-color: #333;
  padding: 0.5rem;
  border-radius: 4px;
  color: #dcdcdc;
}

/* Overall summary */
.pbq-overallSummary {
  margin-top: 1rem;
  background-color: #333;
  padding: 0.75rem;
  border-radius: 4px;
  color: #dcdcdc;
}

.pbq-score {
  margin-top: 0.5rem;
  font-weight: bold;
  color: #ffd700;
}

/* Error message */
.error-msg {
  color: #ff6666;
  font-weight: bold;
  margin-top: 2rem;
}

/* Debug section */
.debug-section {
  margin-top: 1rem;
  background: #222;
  padding: 1rem;
  border-radius: 4px;
  color: #ccc;
  font-size: 0.85rem;
  overflow-x: auto;
}

================
File: frontend/my-react-app/src/components/pages/PBQpage/PBQWizard.js
================
/**
 * PBQWizard.js
 *
 * React component for generating a PBQ from /generate_pbq_stream (SSE)
 * and simulating Nmap commands via /simulate_cmd. 
 * Renders multiple sub-tasks with MC answers, etc.
 */

import React, { useState, useRef, useEffect } from 'react';
import './PBQWizard.css';

const ENDPOINT = "/api"; // Adjust if needed

const PBQWizard = () => {
  // PBQ generation parameters
  const [category, setCategory] = useState("Network Security");
  const [difficulty, setDifficulty] = useState("Intermediate");
  const [performanceLevel, setPerformanceLevel] = useState("average");

  const [pbqData, setPbqData] = useState(null);
  const [loading, setLoading] = useState(false);

  // Debug SSE text
  const [streamedText, setStreamedText] = useState("");

  // Terminal simulation
  const [terminalLines, setTerminalLines] = useState([]);
  const [currentCommand, setCurrentCommand] = useState("");

  // Sub-task state
  const [currentSubTaskIndex, setCurrentSubTaskIndex] = useState(0);
  const [subTaskCompleted, setSubTaskCompleted] = useState({});
  const [userAnswers, setUserAnswers] = useState({});
  const [correctCount, setCorrectCount] = useState(0);

  // Refs for auto-scrolling
  const terminalRef = useRef(null);
  const pbqContainerRef = useRef(null);

  /*********************************
   * PBQ Generation (SSE streaming)
   *********************************/
  const handleGeneratePBQ = async () => {
    setLoading(true);
    resetState();

    const bodyData = {
      category,
      difficulty,
      performance_level: performanceLevel
    };

    try {
      const response = await fetch(`${ENDPOINT}/pbq/generate_pbq_stream`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(bodyData)
      });
      if (!response.ok) {
        throw new Error(`HTTP status ${response.status}`);
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let completeText = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });
        completeText += chunk;
        setStreamedText(prev => prev + chunk);
      }

      // Now parse SSE lines from completeText
      let jsonBuffer = "";
      const lines = completeText.split("\n");
      for (let line of lines) {
        line = line.trim();
        if (line.startsWith("data: ")) {
          const payload = line.slice("data: ".length).trim();
          if (payload && payload !== "[DONE]") {
            jsonBuffer += payload;
          }
        }
      }

      if (!jsonBuffer) {
        setPbqData({ error: "No data received from server." });
      } else {
        try {
          const parsed = JSON.parse(jsonBuffer);
          setPbqData(parsed);
        } catch (parseErr) {
          console.error("Error parsing PBQ JSON:", parseErr, jsonBuffer);
          setPbqData({ error: "Received malformed or partial JSON from server." });
        }
      }

    } catch (err) {
      console.error("Error generating PBQ:", err);
      setPbqData({ error: err.message });
    } finally {
      setLoading(false);
    }
  };

  /*********************************
   * Terminal / Nmap Simulation
   *********************************/
  const handleCommandSubmit = async (e) => {
    e.preventDefault();
    if (!currentCommand.trim()) return;

    setTerminalLines(prev => [...prev, `> ${currentCommand}`]);

    try {
      const res = await fetch(`${ENDPOINT}/pbq/simulate_cmd`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ command: currentCommand })
      });
      if (!res.ok) {
        throw new Error(`simulate_cmd: HTTP status ${res.status}`);
      }

      const data = await res.json();
      if (data.error) {
        setTerminalLines(prev => [...prev, `Error: ${data.error}`]);
      } else {
        setTerminalLines(prev => [...prev, data.output]);
      }
    } catch (err) {
      setTerminalLines(prev => [...prev, `Error calling simulate_cmd: ${err.message}`]);
    } finally {
      setCurrentCommand("");
    }
  };

  /*********************************
   * Sub-task logic
   *********************************/
  const handleMultipleChoiceChange = (subTaskIndex, choiceIndex) => {
    setUserAnswers(prev => ({ ...prev, [subTaskIndex]: choiceIndex }));
  };

  const handleSubmitFollowup = (subTaskIndex) => {
    if (!pbqData || !pbqData.subTasks) return;
    const subTask = pbqData.subTasks[subTaskIndex];
    if (!subTask) return;

    const chosenIndex = userAnswers[subTaskIndex];
    if (chosenIndex === undefined) {
      alert("Please select an answer first.");
      return;
    }

    setSubTaskCompleted(prev => ({ ...prev, [subTaskIndex]: true }));
    if (subTask.correctAnswerIndex === chosenIndex) {
      setCorrectCount(prev => prev + 1);
    }
  };

  useEffect(() => {
    if (subTaskCompleted[currentSubTaskIndex]) {
      const nextIndex = currentSubTaskIndex + 1;
      if (pbqData?.subTasks && nextIndex < pbqData.subTasks.length) {
        setCurrentSubTaskIndex(nextIndex);
      }
    }
  }, [subTaskCompleted, currentSubTaskIndex, pbqData]);

  /*********************************
   * Auto-scrolling
   *********************************/
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
    if (pbqContainerRef.current) {
      pbqContainerRef.current.scrollTop = pbqContainerRef.current.scrollHeight;
    }
  }, [terminalLines, pbqData]);

  /*********************************
   * Helper
   *********************************/
  const resetState = () => {
    setPbqData(null);
    setStreamedText("");
    setTerminalLines([]);
    setCurrentCommand("");
    setCurrentSubTaskIndex(0);
    setSubTaskCompleted({});
    setUserAnswers({});
    setCorrectCount(0);
  };

  /*********************************
   * Render sub-tasks
   *********************************/
  const renderSubTaskDetails = (subTask, index) => {
    if (index > currentSubTaskIndex) return null;

    return (
      <div className="subtask-details" key={index}>
        <h3 className="subtask-title">{subTask.taskTitle}</h3>
        <p className="subtask-description">{subTask.taskDescription}</p>

        {subTask.followUpQuestion && (
          <div className="followup-question">{subTask.followUpQuestion}</div>
        )}

        {subTask.possibleAnswers && subTask.possibleAnswers.length > 0 && (
          <div className="possible-answers">
            {subTask.possibleAnswers.map((ans, ansIdx) => (
              <label key={ansIdx}>
                <input
                  type="radio"
                  name={`subtask-${index}`}
                  value={ansIdx}
                  checked={userAnswers[index] === ansIdx}
                  onChange={() => handleMultipleChoiceChange(index, ansIdx)}
                  disabled={!!subTaskCompleted[index]}
                />
                {ans}
              </label>
            ))}
          </div>
        )}

        {!subTaskCompleted[index] && subTask.possibleAnswers && (
          <button 
            className="submit-answer-button"
            onClick={() => handleSubmitFollowup(index)}
          >
            Submit Answer
          </button>
        )}

        {subTaskCompleted[index] && subTask.explanation && (
          <div className="explanation-block">
            <strong>Explanation:</strong>
            <p>{subTask.explanation}</p>
          </div>
        )}
      </div>
    );
  };

  /*********************************
   * Render PBQ
   *********************************/
  const renderPBQ = () => {
    if (!pbqData) return null;
    if (pbqData.error) {
      return <p className="error-msg">Error: {pbqData.error}</p>;
    }
    if (!pbqData.subTasks) {
      return <p className="error-msg">No subTasks found in PBQ data. Possibly invalid structure.</p>;
    }

    const allDone = pbqData.subTasks.every((_, i) => subTaskCompleted[i]);

    return (
      <div className="pbq-container" ref={pbqContainerRef}>
        <h2 className="pbq-title">{pbqData.pbqTitle}</h2>
        <p className="pbq-difficulty">Difficulty: {pbqData.difficulty}</p>

        {/* Terminal window */}
        <div className="terminal-window" ref={terminalRef}>
          {terminalLines.map((line, i) => (
            <div key={i} className="terminal-line">{line}</div>
          ))}
        </div>

        {/* Terminal input if not all done */}
        {!allDone && (
          <form className="terminal-input-form" onSubmit={handleCommandSubmit}>
            <input
              className="terminal-input"
              type="text"
              placeholder="Type an Nmap command here..."
              value={currentCommand}
              onChange={e => setCurrentCommand(e.target.value)}
            />
          </form>
        )}

        {pbqData.subTasks.map((st, i) => renderSubTaskDetails(st, i))}

        {allDone && pbqData.overallSummary && (
          <div className="pbq-overallSummary">
            <h4>Overall Summary</h4>
            <p>{pbqData.overallSummary}</p>
            <p className="pbq-score">
              Your Score: {correctCount} / {pbqData.subTasks.length}
            </p>
          </div>
        )}
      </div>
    );
  };

  /*********************************
   * Final Return
   *********************************/
  return (
    <div className="pbq-wizard-page">
      <header className="pbq-header">
        <h1>Advanced Nmap PBQ Wizard</h1>
        <p>Practice advanced Nmap flags in a simulated CLI environment.</p>
      </header>

      <section className="pbq-controls">
        <div className="control-group">
          <label htmlFor="category">Category:</label>
          <input
            type="text"
            id="category"
            value={category}
            onChange={e => setCategory(e.target.value)}
            placeholder="e.g. Network Security"
          />
        </div>

        <div className="control-group">
          <label htmlFor="difficulty">Difficulty:</label>
          <select
            id="difficulty"
            value={difficulty}
            onChange={e => setDifficulty(e.target.value)}
          >
            <option value="Beginner">Beginner</option>
            <option value="Intermediate">Intermediate</option>
            <option value="Advanced">Advanced</option>
            <option value="Expert">Expert</option>
          </select>
        </div>

        <div className="control-group">
          <label htmlFor="performanceLevel">Performance Level:</label>
          <select
            id="performanceLevel"
            value={performanceLevel}
            onChange={e => setPerformanceLevel(e.target.value)}
          >
            <option value="low">Low</option>
            <option value="average">Average</option>
            <option value="high">High</option>
          </select>
        </div>

        <button
          className="generate-pbq-button"
          onClick={handleGeneratePBQ}
          disabled={loading}
        >
          {loading ? "Generating..." : "Generate PBQ"}
        </button>
      </section>

      <main className="pbq-main-content">
        {renderPBQ()}

        {/* SSE Debug */}
        {streamedText && (
          <div className="debug-section">
            <h4>Debug: Streamed Raw Text</h4>
            <pre>{streamedText}</pre>
          </div>
        )}
      </main>
    </div>
  );
};

export default PBQWizard;

================
File: frontend/my-react-app/src/components/pages/penplus/PenPlusTestList.js
================
// src/components/pages/penplus/PenPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
// Use your PenPlusTestPage.css or similar styling
import "../../test.css";

const PenPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "penplus"
  const category = "penplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${progressData.currentQuestionIndex + 1} / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA PenTest+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/pen-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/pen-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/pen-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/pen-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/pen-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default PenPlusTestList;

================
File: frontend/my-react-app/src/components/pages/penplus/PenPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import PenPlusTestList from "./PenPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const PenPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <PenPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="penplus"
      backToListPath="/practice-tests/pen-plus"
    />
  );
};

export default PenPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/ResourcesPage/Resources.css
================
/*******************************************/
/* Base Styles (Unchanged)                */
/*******************************************/
body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  height: 100%;
  box-sizing: border-box;
}

.resources-background {
  display: flex;
  justify-content: center; 
  align-items: flex-start;
  min-height: 100vh;
  background: url('./Resourcebackground.jpg') center center no-repeat;
  background-attachment: fixed;
  background-size: cover;
  padding: 20px;
  box-sizing: border-box;
}

.resources-container {
  font-family: "Courier New", monospace;
  background: rgba(18, 18, 18, 0.85);
  color: #ffffff;
  padding: 2rem;
  border-radius: 10px;
  width: 100%;
  max-width: 1000px;
  box-sizing: border-box;
  margin: 40px auto; 
}

.resources-header {
  text-align: center;
  color: #256da7;
  margin-bottom: 2.4rem;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0.125rem 0.125rem #ffffff;
  font-size: 2.7rem;
}

.resources-header h1 {
  margin: 0;
  font-size: 2.5rem;
  text-shadow: 0 0 5px #ff476f;
}

.resources-controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 15px;
  margin-bottom: 2rem;
}

.resources-controls input,
.resources-controls select,
.resources-controls button {
  font-size: 1rem;
  padding: 0.6rem;
  border: 2px solid transparent;
  border-radius: 5px;
  transition: all 0.3s ease;
}

.resources-controls input {
  flex: 2;
  background: #1e1e1e;
  color: #fff;
}

.resources-controls select,
.resources-controls button {
  flex: 1;
  background: #4B6478;
  cursor: pointer;
  text-align: center;
}

.resources-controls select:hover,
.resources-controls button:hover {
  box-shadow: 0 0 8px #ff476f;
}

.resources-random-resource {
  text-align: center;
  margin: 1.5rem 0;
  padding: 1.5rem;
  background: #1e1e1e;
  border-radius: 8px;
  animation: fadeIn 1s ease-in-out;
}

.resources-random-resource h2 {
  color: #ff476f;
  font-size: 1.5rem;
}

.resources-random-resource a {
  color: #48cae4;
  font-size: 1rem;
  text-decoration: none;
  font-weight: bold;
  transition: all 0.3s ease;
  word-wrap: break-word;
}

.resources-random-resource a:hover {
  color: #ff476f;
  text-decoration: underline;
}

.resources-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.resources-list li {
  padding: 0.8rem;
  background: rgba(37, 37, 37, 0.8);
  margin: 0.5rem 0;
  border-radius: 8px;
  transition: all 0.3s ease;
  font-size: 0.9rem;
  word-wrap: break-word;
}

.resources-list li:hover {
  background: rgba(51, 51, 51, 0.9);
}

.resources-list li a {
  color: #48cae4;
  text-decoration: none;
  transition: color 0.3s ease;
}

.resources-list li a:hover {
  color: #ff476f;
  text-decoration: underline;
}

.no-resources-message {
  text-align: center;
  color: #ff476f;
  font-size: 1rem;
}

.resources-footer {
  text-align: center;
  color: #aaaaaa;
  margin-top: 1.5rem;
  font-size: 0.9rem;
}

/*******************************************/
/* 1) Extra-Small Devices: max-width 320px */
/*******************************************/
@media (max-width: 320px) {
  .resources-container {
    padding: 1.5rem;
    margin: 20px auto;
  }

  .resources-header {
    margin-bottom: 1rem;
  }
  .resources-header {
    font-size: 1rem;
  }

  .resources-random-resource {
    font-size: 1.2rem;
  }

  .resources-controls {
    flex-direction: column;
  }
  .resources-controls input,
  .resources-controls select,
  .resources-controls button {
    width: 100%;
    margin-bottom: 0.5rem;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/* (Existing, merged with new tweaks)      */
/*******************************************/
@media (max-width: 480px) {
  /* Container & Header Adjustments */
  .resources-container {
    padding: 1.5rem;
    margin: 20px auto;
  }

  .resources-header {
    font-size: 1.6rem;
  }

  /* Controls in a single column */
  .resources-controls {
    flex-direction: column;
  }
  .resources-controls input,
  .resources-controls select,
  .resources-controls button {
    width: 100%;
  }

  /* Random Resource Title */
  .resources-random-resource h2 {
    font-size: 1.2rem;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  .resources-container {
    padding: 2rem;
    margin: 30px auto;
  }

  .resources-header {
    font-size: 1.7rem;
  }

  /* Possibly keep two columns for controls if desired */
  .resources-controls {
    flex-wrap: wrap;
    gap: 10px;
  }

  .resources-random-resource h2 {
    font-size: 1.3rem;
  }

  .resources-list li {
    font-size: 0.85rem;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/* (Existing rule, slightly expanded)      */
/*******************************************/
@media (max-width: 768px) {
  .resources-controls {
    flex-direction: column;
  }

  .resources-controls input,
  .resources-controls select,
  .resources-controls button {
    width: 100%;
  }

  .resources-header {
    font-size: 1.4rem;
  }

  .resources-random-resource h2 {
    font-size: 1.1rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/ResourcesPage/Resources.js
================
import React, { useState } from 'react';
import './Resources.css'; 


const cyberSecurityTools = [
  { name: 'Nmap', url: 'https://nmap.org/' },
  { name: 'Burp Suite', url: 'https://portswigger.net/burp' },
  { name: 'Wireshark', url: 'https://www.wireshark.org/' },
  { name: 'Nessus', url: 'https://www.tenable.com/products/nessus' },
  { name: 'Nikto', url: 'https://cirt.net/Nikto2' },
  { name: 'OWASP ZAP', url: 'https://www.zaproxy.org/' },
  { name: 'Metasploit', url: 'https://www.metasploit.com/' },
  { name: 'Hydra', url: 'https://github.com/vanhauser-thc/thc-hydra' },
  { name: 'John the Ripper', url: 'https://www.openwall.com/john/' },
  { name: 'Aircrack-ng', url: 'https://www.aircrack-ng.org/' },
  { name: 'SQLmap', url: 'https://sqlmap.org/' },
  { name: 'Mimikatz', url: 'https://github.com/gentilkiwi/mimikatz' },
  { name: 'Gobuster', url: 'https://github.com/OJ/gobuster' },
  { name: 'Hashcat', url: 'https://hashcat.net/hashcat/' },
  { name: 'Impacket', url: 'https://github.com/fortra/impacket' },
  { name: 'BloodHound', url: 'https://github.com/BloodHoundAD/BloodHound' },
  { name: 'Cuckoo Sandbox', url: 'https://cuckoosandbox.org/' },
  { name: 'Suricata', url: 'https://suricata.io/' },
  { name: 'Wfuzz', url: 'https://github.com/xmendez/wfuzz' },
  { name: 'OSSEC', url: 'https://www.ossec.net/' },
  { name: 'Acunetix', url: 'https://www.acunetix.com/' },
  { name: 'WPScan', url: 'https://wpscan.com/' },
  { name: 'SkipFish', url: 'https://github.com/spinkham/skipfish' },
  { name: 'Ncrack', url: 'https://github.com/nmap/ncrack' },
  { name: 'OWASP D4N155', url: 'https://github.com/OWASP/D4N155' },
  { name: 'Kismet', url: 'https://github.com/kismetwireless/kismet' },
  { name: 'Searchsploit', url: 'https://github.com/dev-angelist/Ethical-Hacking-Tools/blob/main/practical-ethical-hacker-notes/tools/searchsploit.md' },
  { name: 'Maltego', url: 'https://www.maltego.com/' },
  { name: 'legion', url: 'https://github.com/Abacus-Group-RTO/legion' },
  { name: 'recon-ng', url: 'https://github.com/lanmaster53/recon-ng' },
  { name: 'evil-winrm', url: 'https://github.com/Hackplayers/evil-winrm' },
  { name: 'Kali Linux tools', url: 'https://www.kali.org/tools/' },
  { name: 'Social-Engineer Toolkit (SET)', url: 'https://github.com/trustedsec/social-engineer-toolkit' },
  { name: 'Ghidra', url: 'https://ghidra-sre.org/' },
  { name: 'Binwalk', url: 'https://github.com/ReFirmLabs/binwalk' },
  { name: 'Volatility', url: 'https://www.volatilityfoundation.org/' },
  { name: 'Radare2', url: 'https://github.com/radareorg/radare2' },
  { name: 'BeEF (Browser Exploitation Framework)', url: 'https://github.com/beefproject/beef' },
  { name: 'Empire', url: 'https://github.com/EmpireProject/Empire' },
  { name: 'Bettercap', url: 'https://github.com/bettercap/bettercap' },
  { name: 'Responder', url: 'https://github.com/SpiderLabs/Responder' },
  { name: 'CrackMapExec', url: 'https://github.com/Porchetta-Industries/CrackMapExec' },
  { name: 'Fierce', url: 'https://github.com/mschwager/fierce' },
  { name: 'SSLstrip', url: 'https://github.com/moxie0/sslstrip' },
  { name: 'Ettercap', url: 'https://github.com/Ettercap/ettercap' },
  { name: 'Fiddler', url: 'https://www.telerik.com/fiddler' },
  { name: 'theHarvester', url: 'https://github.com/laramies/theHarvester' },
  { name: 'Wapiti', url: 'https://github.com/wapiti-scanner/wapiti' },
  { name: 'Arachni', url: 'https://github.com/Arachni/arachni' },
  { name: 'Shellter', url: 'https://www.shellterproject.com/' },
  { name: 'Yersinia', url: 'https://github.com/tomac/yersinia' },
  { name: 'Amass', url: 'https://github.com/owasp-amass/amass' },
  { name: 'mitmproxy', url: 'https://github.com/mitmproxy/mitmproxy' },
  { name: 'Nuclei', url: 'https://github.com/projectdiscovery/nuclei' },
  { name: 'Sublist3r', url: 'https://github.com/aboul3la/Sublist3r' },
  { name: 'EyeWitness', url: 'https://github.com/FortyNorthSecurity/EyeWitness' },
  { name: 'RouterSploit', url: 'https://github.com/threat9/routersploit' },
];


const redditSubreddits = [
  { name: 'r/CompTIA', url: 'https://www.reddit.com/r/CompTIA/' },
  { name: 'r/CyberSecurity', url: 'https://www.reddit.com/r/cybersecurity/' },
  { name: 'r/AskNetsec', url: 'https://www.reddit.com/r/AskNetsec/' },
  { name: 'r/Casp', url: 'https://www.reddit.com/r/casp/' },
  { name: 'r/ITCareerQuestions', url: 'https://www.reddit.com/r/ITCareerQuestions/' },
  { name: 'r/WGU', url: 'https://www.reddit.com/r/WGU/' },
  { name: 'r/CCNA', url: 'https://www.reddit.com/r/ccna/' },
  { name: 'r/sysadmin', url: 'https://www.reddit.com/r/sysadmin/' },
  { name: 'r/linuxquestions/', url: 'https://www.reddit.com/r/linuxquestions/' },
  { name: 'r/netsec', url: 'https://www.reddit.com/r/netsec/' },
  { name: 'r/ReverseEngineering', url: 'https://www.reddit.com/r/ReverseEngineering/' },
  { name: 'r/BlueTeamSec', url: 'https://www.reddit.com/r/BlueTeamSec/' },
  { name: 'r/RedTeam', url: 'https://www.reddit.com/r/RedTeam/' },
  { name: 'r/InformationSecurity', url: 'https://www.reddit.com/r/InformationSecurity/' },
  { name: 'r/ethicalhacking', url: 'https://www.reddit.com/r/ethicalhacking/' },
  { name: 'r/ITsecurity', url: 'https://www.reddit.com/r/ITsecurity/' },
  { name: 'r/netsecstudents', url: 'https://www.reddit.com/r/netsecstudents/' },
];

const redditPosts = [
  { title: 'Master List: I Compiled and Ranked Every Major Studying Resource for A+, Network+, and Security+ Here!', url: 'https://www.reddit.com/r/CompTIA/comments/i7hx4t/master_list_i_compiled_and_ranked_every_major/' },
  { title: 'How a dumdum like me passed sec+', url: 'https://www.reddit.com/r/CompTIA/comments/zkjs1d/how_a_dumdum_like_me_passed_sec/' },
  { title: 'How I passed COMPTIA A+ N+ S+', url: 'https://www.reddit.com/r/CompTIA/comments/1cra3cg/how_i_passed_comptia_a_n_s/' },
  { title: 'ChatGPT explained DHCP to me in gangsta terms', url: 'https://www.reddit.com/r/CompTIA/comments/11ytgbz/chatgpt_explained_dhcp_to_me_in_gangsta_terms/' },
  { title: 'Don’t Pay for Udemy Courses! Access them for Free! Legally & Ethically', url: 'https://www.reddit.com/r/CompTIA/comments/12aug8f/dont_pay_for_udemy_courses_access_them_for_free/' },
  { title: 'For Those Of You Wondering if COMPTIA is Worth it; Just Do it', url: 'https://www.reddit.com/r/CompTIA/comments/1f11fbc/for_those_of_you_wondering_if_comptia_is_worth_it/' },
  { title: '[UPDATE] 34 years old, posted a month ago about passing the A+, no IT experience, no college degree -- just got hired today after 2 weeks of sending out resumes. Wanted to share my experience and tips.', url: 'https://www.reddit.com/r/CompTIA/comments/m38lb8/update_34_years_old_posted_a_month_ago_about/' },
  { title: 'Just passed Network+! How I did it...', url: 'https://www.reddit.com/r/CompTIA/comments/1gfmkqf/just_passed_network_how_i_did_it/' },
  { title: 'Just passed Network+, got the trifecta in about 6 months, study tips I learned that I want to share since everyone was so helpful on this sub.', url: 'https://www.reddit.com/r/CompTIA/comments/1fmjb2p/just_passed_network_got_the_trifecta_in_about_6/' },
  { title: 'I passed CASP+ - This is what I did to prepare', url: 'https://www.reddit.com/r/casp/comments/1ft2qjr/i_passed_casp_this_is_what_i_did_to_prepare/' },
  { title: 'PBQs guidance (comments)', url: 'https://www.reddit.com/r/casp/comments/1cuhbmw/pbqs_guidance/' },
  { title: 'Passed Sec+, Pentest+, CYSA+ in 2 months 22 days without prior experience or any other certs. My detailed study path below.', url: 'https://www.reddit.com/r/CompTIA/comments/1f5cofp/passed_sec_pentest_cysa_in_2_months_22_days/' },
  { title: 'General advice from a hiring manager and 23 year industry veteran to newbies', url: 'https://www.reddit.com/r/ITCareerQuestions/comments/ni4vnm/general_advice_from_a_hiring_manager_and_23_year/' },
];


const youtubeChannels = [
  { name: 'Professor Messer', url: 'https://www.youtube.com/@professormesser' },
  { name: 'NetworkChuck', url: 'https://www.youtube.com/@NetworkChuck' },
  { name: 'PowerCertAnimatedVideos', url: 'https://www.youtube.com/@PowerCertAnimatedVideos' },
  { name: 'HackerSploit', url: 'https://www.youtube.com/@HackerSploit' },
  { name: 'Cyberkraft', url: 'https://www.youtube.com/@cyberkraft' },
  { name: 'howtonetwork', url: 'https://www.youtube.com/@howtonetworkcom' },
  { name: 'MyCS1', url: 'https://www.youtube.com/@MyCS1/videos' },
  { name: 'CBT Nuggets', url: 'https://www.youtube.com/user/cbtnuggets' },
  { name: 'Eli the Computer Guy', url: 'https://www.youtube.com/user/elithecomputerguy' },
  { name: 'The Cyber Mentor', url: 'https://www.youtube.com/channel/UC0ArlFuFYMpEewyRBzdLHiw' },
  { name: 'ITProTV', url: 'https://www.youtube.com/user/ITProTV' },
  { name: 'freeCodeCamp.org', url: 'https://www.youtube.com/freecodecamp' },
  { name: 'With Sandra', url: 'https://www.youtube.com/@WithSandra' },
  { name: 'Andrew Huberman', url: 'https://www.youtube.com/@hubermanlab' },
  { name: 'The Cyberboy', url: 'https://www.youtube.com/@the_cyb3rb0y' },
  { name: 'Tech with Jono', url: 'https://www.youtube.com/@TechwithJono' },
  { name: 'Whitesec cyber security', url: 'https://www.youtube.com/@whiteseccybersecurity' },
  { name: 'Practical Networking', url: 'https://www.youtube.com/@PracticalNetworking' },
  { name: 'IT k Funde', url: 'https://www.youtube.com/@ITkFunde' },
  { name: 'Mad Hat', url: 'https://www.youtube.com/@madhatistaken' },
  { name: 'SomeOrdinaryGamers', url: 'https://www.youtube.com/@SomeOrdinaryGamers' },
  { name: 'TheBeardedITDad', url: 'https://www.youtube.com/@TheBeardedITDad' },
];


const youtubeVideos = [
  { title: 'How to Pass your 220-1101 and 220-1102 A+ Exams - CompTIA A+ 220-1101', url: 'https://www.youtube.com/watch?v=87t6P5ZHTP0&list=PLG49S3nxzAnnOmvg5UGVenB_qQgsh01uC' },
  { title: 'CompTIA A+ Full Course - FREE - [31+ Hours]', url: 'https://www.youtube.com/watch?v=1CZXXNKAY5o&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=5' },
  { title: 'CompTIA A+ Certification Practice Test 2024 (Exam 220-1101) (40 Questions with Explained Answers)', url: 'https://www.youtube.com/watch?v=e16It3eYHgc&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=10' },
  { title: 'How to Pass Your N10-008 Network+ Exam', url: 'https://www.youtube.com/watch?v=As6g6IXcVa4&list=PLG49S3nxzAnlCJiCrOYuRYb6cne864a7G' },
  { title: 'Computer Networking Course - Network Engineering [CompTIA Network+ Exam Prep]', url: 'https://www.youtube.com/watch?v=qiQR5rTSshw&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=6' },
  { title: 'Networking basics (2024) | What is a switch, router, gateway, subnet, gateway, firewall & DMZ', url: 'https://www.youtube.com/watch?v=_IOZ8_cPgu8&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=7' },
  { title: 'How to Pass Your SY0-701 Security+ Exam', url: 'https://www.youtube.com/watch?v=KiEptGbnEBc&list=PLG49S3nxzAnl4QDVqK-hOnoqcSKEIDDuv' },
  { title: 'Security+ Certification SY0-701 50 Practice Questions', url: 'https://www.youtube.com/watch?v=yPqSLJG8Rt0&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=2' },
  { title: 'CompTIA Security+ SY0-701. 50 Exam Practice Question', url: 'https://www.youtube.com/watch?v=2qrPJbL9G6c&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=14' },
  { title: 'CompTIA Security+ SY0-701 - Series Intro & Exam Prep Strategy', url: 'https://www.youtube.com/watch?v=1E7pI7PB4KI&list=PL7XJSuT7Dq_UDJgYoQGIW9viwM5hc4C7n' },
  { title: 'CompTIA CySA+ // 2024 Crash Course // 10+ Hours for FREE', url: 'https://www.youtube.com/watch?v=qP9x0mucwVc&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=9' },
  { title: 'COMPTIA Pentest+ Course Preparation TryHackMe', url: 'https://www.youtube.com/watch?v=cADW_cUJni0&list=PLqM63j87R5p4olmWpzqaXMhEP2zEnQhPD' },
  { title: 'What is Subnetting? - Subnetting Mastery  NOTE: I HIGHLY RECOMMEND!', url: 'https://www.youtube.com/watch?v=BWZ-MHIhqjM&list=PLIFyRwBY_4bQUE4IB5c4VPRyDoLgOdExE' },
  { title: 'IT Security Certifications: CySA+ vs PenTest+ vs CISSP', url: 'https://www.youtube.com/watch?v=YhCvNARSPo4' },
  { title: 'Ethical Hacking in 15 Hours - 2023 Edition - Learn to Hack! (Part 1)', url: 'https://www.youtube.com/watch?v=3FNYvj2U0HM&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=13' },
  { title: 'Paypal - Live bug bounty hunting on Hackerone | Live Recon | part 2', url: 'https://www.youtube.com/watch?v=Dtx4kNXj0OQ&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=11' },
  { title: 'Complete Ethical hacking course 16 hours | ethical hacking full course with practical | Zero to Hero', url: 'https://www.youtube.com/watch?v=w_oxcjPOWos&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=4' },
  { title: 'Full Ethical Hacking Course - Network Penetration Testing for Beginners (2019)', url: 'https://www.youtube.com/watch?v=3Kq1MIfTWCE&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=3' },
  { title: 'How to Get an IT Job Without Experience', url: 'https://www.youtube.com/watch?v=XkTNQCtuRPY&list=PLG49S3nxzAnkUvxTH_ANPYQWGo9wYlz7h' },
  { title: 'Start your IT Career with the CompTIA Trifecta? A+, Net+, Sec+', url: 'https://www.youtube.com/watch?v=IBKW0s20T8o&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=12' },
  { title: 'How I Would Learn Cyber Security if I Could Start Over in 2024 (Beginner Roadmap)', url: 'https://www.youtube.com/watch?v=b12JrM-6DBY&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=15' },
  { title: 'Network Protocols - ARP, FTP, SMTP, HTTP, SSL, TLS, HTTPS, DNS, DHCP - Networking Fundamentals - L6', url: 'https://www.youtube.com/watch?v=E5bSumTAHZE&list=PLejqXniG-4qmFqpxbWd7Oo235uH1ffG2x&index=16' },
  { title: 'Network Devices - Hosts, IP Addresses, Networks - Networking Fundamentals', url: 'https://www.youtube.com/watch?v=bj-Yfakjllc&list=PLIFyRwBY_4bRLmKfP1KnZA6rZbRHtxmXi' },
  { title: 'Python Full Course for free 🐍 (2024)', url: 'https://www.youtube.com/watch?v=ix9cRaBkVe0' },
  { title: 'Optimal Protocols for Studying & Learning', url: 'https://youtu.be/ddq8JIMhz7c?si=qT00KFkFBAwm7LP7' },
  { title: 'How to Study & Learn Using Active Recall | Dr. Cal Newport & Dr. Andrew Huberman', url: 'https://youtu.be/mzexJPoXBCM?si=sv-yeuIoLF9pwDRG' },
  { title: 'How to Learn Faster by Using Failures, Movement & Balance | Huberman Lab Essentials', url: 'https://youtu.be/jwChiek_aRY?si=3kyPbIAVwJWMPfnG' },
  { title: 'Best FREE Beginner Cybersecurity Courses for 2025 | Best Cybersecurity Training for Beginners 2025', url: 'https://youtu.be/SwisCiNA9eI?si=3HlXVljXHWgHhc0F' },
  { title: 'IBM IT Support - Complete Course | IT Support Technician - Full Course', url: 'https://www.youtube.com/watch?v=BNbPsiCGQzw' },
  { title: 'What is the A+ Certification? How You Can Get A+ Certified', url: 'https://www.youtube.com/watch?v=IlKRm_8EmP0' },
  { title: 'CompTIA CASP+ PBQ', url: 'https://www.youtube.com/live/eInvTuYBF3Q?si=Hbe4mWLd3X31AUkA' },
  { title: 'CompTIA Security+ 701 PBQ', url: 'https://youtu.be/zfwxSmL4n6w?si=q5lXlvmViTK6TnSI' },
  { title: 'CompTIA CySa+ PBQ', url: 'https://www.youtube.com/live/0NMffWaxlmA?si=Rm9IBkZ04OAxFJtp' },
  { title: 'CompTIA Network+ PBQ', url: 'https://www.youtube.com/live/9cdL214y-u0?si=lCSxriFy636PbOnR' },
  { title: 'CASP+ course', url: 'https://www.youtube.com/watch?v=vwNjLVpXNzk&list=PLCNmoXT8zexnJtDOdd8Owa8TAdSVVWF-J' },
  { title: 'NMAP Full Guide', url: 'https://www.youtube.com/watch?v=JHAMj2vN2oU&t=33s' },
];

const udemyCourses = [
  { title: 'CompTIA Security+ (SY0-701) Complete Course & Exam', url: 'https://www.udemy.com/course/securityplus' },
  { title: 'CompTIA Security+ (SY0-701) Practice Exams Set 1', url: 'https://www.udemy.com/course/comptia-security-sy0-701-practice-exams/' },
  { title: 'CompTIA Security+ (SY0-701) Practice Exams Set 2', url: 'https://www.udemy.com/course/comptia-security-sy0-701-practice-exams-2nd-edition/' },
  { title: 'TOTAL: CompTIA Security+ Certification Course + Exam SY0-701', url: 'https://www.udemy.com/course/total-comptia-security-plus/' },
  { title: 'CompTIA A+ Core 1 (220-1101) Complete Course & Practice Exam', url: 'https://www.udemy.com/course/comptia-a-core-1/' },
  { title: 'CompTIA A+ Core 2 (220-1102) Complete Course & Practice Exam', url: 'https://www.udemy.com/course/comptia-a-core-2/' },
  { title: 'CompTIA A+ (220-1101) Core 1 Practice Exams *New for 2023*', url: 'https://www.udemy.com/course/comptia-a-220-1101-core-1-practice-exams-new-for-2022/' },
  { title: 'CompTIA A+ (220-1102) Core 2 Practice Exams *New for 2023*', url: 'https://www.udemy.com/course/comptia-a-220-1102-core-2-practice-exams-new-for-2022/' },
  { title: 'CompTIA A+ Core 1 & Core 2 - IT Cert Doctor - 2024', url: 'https://www.udemy.com/course/it-cert-doctor-comptia-a-220-1101-1102/' },
  { title: 'TOTAL: CompTIA A+ Core 2 (220-1102) Course + Exam', url: 'https://www.udemy.com/course/comptia-aplus-core-2/' },
  { title: 'TOTAL: CompTIA A+ Core 1 (220-1101) Course + Exam', url: 'https://www.udemy.com/course/comptia-aplus-core-1/' },
  { title: 'CompTIA Network+ (N10-009) Full Course & Practice Exam', url: 'https://www.udemy.com/course/comptia-network-009/' },
  { title: 'CompTIA Network+ (N10-009) 6 Full Practice Exams Set 1', url: 'https://www.udemy.com/course/comptia-network-n10-009-6-practice-exams-and-pbqs-set-1/' },
  { title: 'CompTIA Network+ (N10-009) 6 Full Practice Exams Set 2', url: 'https://www.udemy.com/course/comptia-network-n10-009-6-practice-exams-and-pbqs-set-2/' },
  { title: 'TOTAL: CompTIA Network+ (N10-008) Course + Exam', url: 'https://www.udemy.com/course/comptia-networkplus-certification/' },
  { title: 'CompTIA CySA+ (CS0-003) Complete Course & Practice Exam', url: 'https://www.udemy.com/course/comptia-cysa-003/' },
  { title: 'CompTIA CySA+ (CS0-003) Practice Exams', url: 'https://www.udemy.com/course/comptia-cysa-cs0-003-practice-exams/' },
  { title: 'CompTIA PenTest+ (PT0-003) Full Course & Practice Exam', url: 'https://www.udemy.com/course/pentestplus/' },
  { title: 'https://www.udemy.com/course/comptia-pentest-pt0-003-6-practice-exams/', url: 'https://www.udemy.com/course/comptia-pentest-pt0-003-6-practice-exams/' },
  { title: 'CompTIA PenTest+ (PT0-002) Practice Certification Exams', url: 'https://www.udemy.com/course/comptia-pentest-exams-002/' },
  { title: 'CompTIA SecurityX (CAS-005) Complete Course & Practice Exam', url: 'https://www.udemy.com/course/casp-plus/' },
  { title: 'CompTIA SecurityX (CAS-005) Practice Exam Prep *NEW', url: 'https://www.udemy.com/course/comptia-securityx-practice-exam-prep-new/' },
  { title: 'CASP+ (CAS-004) Full-length Practice Certification Exams', url: 'https://www.udemy.com/course/casp-exams-004/' },
  { title: 'CompTIA Linux+ (XK0-005) Complete Course & Exam', url: 'https://www.udemy.com/course/comptia-linux/' },
  { title: 'CompTIA Linux+ (XK0-005) Practice Exams & Simulated PBQs', url: 'https://www.udemy.com/course/comptia-linux-exams/' },
  { title: 'TOTAL: Cloud Computing / CompTIA Cloud+ (CV0-003)', url: 'https://www.udemy.com/course/total-cloud-computing-comptia-cloud-cert-cv0-002/' },
  { title: 'TOTAL: CompTIA Cloud+ (CV0-003): 4 Practice Tests', url: 'https://www.udemy.com/course/total-comptia-cloud-cv0-003-4-practice-tests/' },
  { title: 'CompTIA Cloud+ (CV0-004) Practice Exam Prep *NEW*', url: 'https://www.udemy.com/course/comptia-cloud-plus-practice-exam-prep-course/' },
  { title: 'CompTIA Cloud Essentials+ (CL0-002) Complete Course & Exam', url: 'https://www.udemy.com/course/cloud-essentials-course' },
  { title: 'CompTIA Cloud Essentials+ (CL0-002) Practice Exams', url: 'https://www.udemy.com/course/cloud-essentials-exams/' },
  { title: 'CompTIA Project+ (PK0-005) Practice Exams', url: 'https://www.udemy.com/course/comptia-project-pk0-005-complete-course-practice-exam/' },
  { title: 'CompTIA Data+ (DA0-001) Practice Certification Exams', url: 'https://www.udemy.com/course/comptia-data/' },
  { title: 'CompTIA Server+ | CompTIA Server+ SK0-005 Certification Prep', url: 'https://www.udemy.com/course/comptia-server-comptia-server-sk0-005-certification-prep/' },
  { title: 'TOTAL: CompTIA Server+ (SK0-005): 4 Practice Tests 200 Qs', url: 'https://www.udemy.com/course/total-comptia-server-sk0-005-4-practice-tests-200qs/' },
  { title: 'CompTIA IT Fundamentals (FCO-U61) Complete Course & Exam', url: 'https://www.udemy.com/course/comptia-it-fundamentals-fco-u61-complete-course-exam/' },
  { title: 'CompTIA IT Fundamentals (FCO-U61) Six Practice Exams', url: 'https://www.udemy.com/course/comptia-it-fundamentals-fco-u61-six-practice-exams/' },
  { title: 'TOTAL: CompTIA Tech+ (FC0-U71)', url: 'https://www.udemy.com/course/it-fundamentals-fc0-u61-the-total-course/' },
  { title: 'CompTIA Tech+ (FC0-U71) Complete Course & Exam', url: 'https://www.udemy.com/course/comptia-tech-fc0-u71-complete-course-exam/' },
  { title: 'ISC2 CISSP Full Course & Practice Exam', url: 'https://www.udemy.com/course/isc2-cissp-full-course-practice-exam/' },
  { title: 'ISC2 CISSP 6 Practice Exams', url: 'https://www.udemy.com/course/isc2-cissp-6-practice-exams/' },
  { title: 'The Complete Certified in Cybersecurity CC course ISC2 2024', url: 'https://www.udemy.com/course/certifiedincybersecurity/' },
  { title: 'The Complete Cyber Security Course : Hackers Exposed!', url: 'https://www.udemy.com/course/the-complete-internet-security-privacy-course-volume-1/' },
  { title: 'The Complete Cyber Security Course : Network Security!', url: 'https://www.udemy.com/course/network-security-course/' },
  { title: 'The Complete Cyber Security Course : End Point Protection!', url: 'https://www.udemy.com/course/the-complete-cyber-security-course-end-point-protection/' },
  { title: 'Complete Ethical Hacking & Cyber Security Masterclass Course', url: 'https://www.udemy.com/course/ethicalhackingcourse/' },
  { title: 'Implementing the NIST Cybersecurity Framework (CSF)', url: 'https://www.udemy.com/course/nist-cybersecurity-framework/' },
  { title: 'Notes!! - CompTIA A+, Network+ and Security+ (Mike Meyers)', url: 'https://www.udemy.com/course/comptia-a-1001-1002-study-notes/' },
  
];


const linkedInPeople = [
  { name: 'Mike Chapple', url: 'https://www.linkedin.com/in/mikechapple/' },
  { name: 'Brian Krebs', url: 'https://www.linkedin.com/in/bkrebs/' },
  { name: 'Dale Meredith Jr', url: 'https://www.linkedin.com/in/dalemeredith/' },
  { name: 'Troy Hunt', url: 'https://www.linkedin.com/in/troyhunt/' },
  { name: 'Heath Adams', url: 'https://www.linkedin.com/in/heathadams/' },
  { name: 'Jason Dion', url: 'https://www.linkedin.com/in/jasondion/' },
  { name: 'Naomi Buckwalter', url: 'https://www.linkedin.com/in/naomi-buckwalter/' },
  { name: 'Shira Rubinoff', url: 'https://www.linkedin.com/in/shirarubinoff/' },
  { name: 'OWASP', url: 'https://www.linkedin.com/company/owasp/' },
  { name: 'COMPTIA', url: 'https://www.linkedin.com/company/comptia/posts/?feedView=all' },
  { name: 'SANS', url: 'https://www.linkedin.com/company/sans-institute/' },
  { name: 'ISACA', url: 'https://www.linkedin.com/company/isaca/' },
  { name: 'ISC2', url: 'https://www.linkedin.com/company/isc2/' },
  { name: 'SANS', url: 'https://www.linkedin.com/company/sans-institute/' },
  { name: 'Chuck Brooks', url: 'https://www.linkedin.com/in/chuckbrooks/' },
  { name: 'Steve Morgan', url: 'https://www.linkedin.com/in/cybersecuritysf/' },
];


const otherResources = [
  { name: 'CertNova (free practice tests highly recommend)', url: 'https://www.certnova.com/' },
  { name: '*VERY IMPORTANT FOR CASP* -wyzguyscybersecurity blog', url: 'https://wyzguyscybersecurity.com/new-insights-for-the-casp-cas-004-exam/' },
  { name: '50% vouchers for students', url: 'https://academic-store.comptia.org/' },
  { name: 'Official CompTIA Resources', url: 'https://www.comptia.org/resources' },
  { name: 'Cybrary', url: 'https://www.cybrary.it' },
  { name: 'OWASP Official Site', url: 'https://owasp.org' },
  { name: 'Pluralsight', url: 'https://www.pluralsight.com/' },
  { name: 'Krebs on Security', url: 'https://krebsonsecurity.com/' },
  { name: 'Dark Reading', url: 'https://www.darkreading.com/' },
  { name: 'SANS Institute', url: 'https://www.sans.org/' },
  { name: 'InfoSec Institute', url: 'https://www.infosecinstitute.com/' },
  { name: 'Hack The Box', url: 'https://www.hackthebox.com/' },
  { name: 'TryHackMe', url: 'https://tryhackme.com/' },
  { name: 'Infosec Skills', url: 'https://www.infosecinstitute.com/skills/' },
  { name: 'Offensive Security (OffSec)', url: 'https://www.offensive-security.com/' },
  { name: 'Rapid7 Blog', url: 'https://www.rapid7.com/blog/' },
  { name: 'Malwarebytes Labs', url: 'https://blog.malwarebytes.com/' },
  { name: 'nmap.org', url: 'https://nmap.org/' },
  { name: 'Professor Messer Website', url: 'https://www.professormesser.com/' },
  { name: 'linkedin Learning', url: 'https://www.linkedin.com/learning/' },
  { name: 'SYBEX Books', url: 'https://www.amazon.com/s?k=wiley+sybex+comptia' },
  { name: 'Mike Meyers practice tests', url: 'https://www.totalsem.com/total-tester-practice-tests/' },
  { name: 'Quizlet', url: 'https://quizlet.com/' },
  { name: 'CBTnuggets', url: 'https://www.cbtnuggets.com/' },
  { name: 'Free Virtual Machine', url: 'https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html' },
  { name: 'kali Linux', url: 'https://www.kali.org/' },
  { name: 'Ubuntu', url: 'https://ubuntu.com/' },
  { name: 'Red Hat', url: 'https://www.redhat.com/en' },
  { name: 'Github', url: 'https://github.com/' },
  { name: 'comptia.org', url: 'https://www.comptia.org/' },
  { name: 'ITPRO', url: 'https://www.acilearning.com/itpro/' },
  { name: 'Coursera', url: 'https://www.coursera.org/' },
  { name: 'TestOut', url: 'https://testoutce.com/' },
  { name: 'ExamDigest', url: 'https://examsdigest.com/' },
  { name: 'ExamCompass', url: 'https://www.examcompass.com/' },
];


const comptiaObjectives = [
  { cert: 'A+ Core 1', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-a-220-1101-exam-objectives-(3-0)' },
  { cert: 'A+ Core 2', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-a-220-1102-exam-objectives-(3-0)' },
  { cert: 'Network+ (N10-009)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-network-n10-009-exam-objectives-(4-0)' },
  { cert: 'Security+ (701)', url: 'https://certblaster.com/wp-content/uploads/2023/11/CompTIA-Security-SY0-701-Exam-Objectives-1.pdf' },
  { cert: 'CySA+ (003)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-cysa-cs0-003-exam-objectives-2-0.pdf' },
  { cert: 'CASP+ (004)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-casp-cas-004-exam-objectives-(4-0)' },
  { cert: 'PenTest+ (002)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-pentest-pt0-002-exam-objectives-(4-0)' },
  { cert: 'Cloud+ (003)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-cloud-cv0-003-exam-objectives-(1-0)#:~:text=%EE%80%80CompTIA%EE%80%81%20exams%20result%20from%20subject%20matter' },
  { cert: 'Cloud Essentials', url: 'https://partners.comptia.org/docs/default-source/resources/cloud-essentials-certification-guide' },
  { cert: 'Linux+ (005)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-linux-xk0-005-exam-objectives-(1-0)' },
  { cert: 'Data+ (001)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-data-da0-001-exam-objectives-(2-0)' },
  { cert: 'DataSys+', url: 'https://partners.comptia.org/certifications/datasys' },
  { cert: 'DataX+', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-datax-dy0-001-exam-objectives-(5-0)' },
  { cert: 'Server+ (005)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-server-sk0-005-exam-objectives' },
  { cert: 'Project+ (005)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-project-pk0-005-exam-objectives-(2-0)' },
  { cert: 'ITF', url: 'https://www.comptia.jp/pdf/CompTIA%20IT%20Fundamentals%20FC0-U61%20Exam%20Objectives.pdf' },
  { cert: 'Tech+', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-tech-fc0-u71-exam-objectives-(1-2)' },
  { cert: 'SecurityX (CASP 005)', url: 'https://partners.comptia.org/docs/default-source/resources/comptia-securityx-cas-005-exam-objectives-(3-0)' },
];


const securityFrameworks = [
  { name: 'NIST Cybersecurity Framework', url: 'https://www.nist.gov/cyberframework' },
  { name: 'ISO/IEC 27001', url: 'https://www.iso.org/isoiec-27001-information-security.html' },
  { name: 'Lockheed Martin Cyber Kill Chain', url: 'https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html' },
  { name: 'MITRE ATT&CK Framework', url: 'https://attack.mitre.org/' },
  { name: 'OWASP Top 10', url: 'https://owasp.org/www-project-top-ten/' },
  { name: 'COBIT', url: 'https://www.isaca.org/resources/cobit' },
  { name: 'ITIL (Information Technology Infrastructure Library)', url: 'https://www.itlibrary.org/' },
  { name: 'PCI-DSS (Payment Card Industry Data Security Standard)', url: 'https://www.pcisecuritystandards.org/' },
  { name: 'HIPAA Security Rule', url: 'https://www.hhs.gov/hipaa/for-professionals/security/index.html' },
  { name: 'Sarbanes-Oxley (SOX) IT Controls', url: 'https://www.sarbanes-oxley-101.com/sarbanes-oxley-compliance.htm' },
  { name: 'FedRAMP', url: 'https://www.fedramp.gov/' },
  { name: 'CIS Controls', url: 'https://www.cisecurity.org/controls' },
  { name: 'ENISA (European Union Agency for Cybersecurity) Guidelines', url: 'https://www.enisa.europa.eu/' },
  { name: 'SANS Top 20 Critical Controls', url: 'https://www.cm-alliance.com/consultancy/compliance-gap-analysis/sans-top-20-controls/' },
  { name: 'Cybersecurity Maturity Model Certification (CMMC)', url: 'https://www.acq.osd.mil/cmmc/' },
  { name: 'FISMA (Federal Information Security Management Act)', url: 'https://www.cisa.gov/topics/cyber-threats-and-advisories/federal-information-security-modernization-act' },
  { name: 'NERC CIP', url: 'https://www.nerc.com/pa/CI/tpv5impmntnstdy/CIPV5_FAQs_Consolidated_Oct2015_Oct_13_2015.pdf' },
  { name: 'GDPR (General Data Protection Regulation)', url: 'https://gdpr.eu/' },
  { name: 'HITRUST CSF', url: 'https://hitrustalliance.net/' },
  { name: 'ISO/IEC 27002', url: 'https://www.iso.org/standard/73906.html' },
  { name: 'NIST 800-53 Security Controls', url: 'https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final' },
  { name: 'NIST 800-171', url: 'https://csrc.nist.gov/publications/detail/sp/800-171/rev-2/final' },
  { name: 'Unified Kill Chain', url: 'https://www.unifiedkillchain.com/assets/The-Unified-Kill-Chain.pdf' },
  { name: 'VERIS', url: 'http://veriscommunity.net/' },
  { name: 'Diamond Model of Intrusion Analysis', url: 'https://www.threatintel.academy/wp-content/uploads/2020/07/diamond-model.pdf' },
  { name: 'ATT&CK for ICS', url: 'https://collaborate.mitre.org/attackics/index.php/Main_Page' },
  { name: 'SOC2', url: 'https://www.vanta.com/products/soc-2' },
  { name: 'ISO 22301 (Business Continuity)', url: 'https://www.iso.org/iso-22301-business-continuity.html' },
  { name: 'ISO/IEC 27004 (Information Security Management — Monitoring, Measurement, Analysis, and Evaluation)', url: 'https://www.iso.org/standard/42505.html' },
  { name: 'ISO/IEC 27006 (Requirements for Bodies Providing Audit and Certification of Information Security Management Systems)', url: 'https://www.iso.org/standard/43506.html' },
  { name: 'ISO/IEC 27007 (Guidelines for Information Security Management Systems Auditing)', url: 'https://www.iso.org/standard/44375.html' },
  { name: 'ISO/IEC 27008 (Guidance for Auditors on Information Security Controls)', url: 'https://www.iso.org/standard/50518.html' },
  { name: 'ISO/IEC 27011 (Information Security Management Guidelines for Telecommunications Organizations)', url: 'https://www.iso.org/standard/43755.html' },
  { name: 'ISO/IEC 27013 (Guidance on the Integrated Implementation of ISO/IEC 27001 and ISO/IEC 20000-1)', url: 'https://www.iso.org/standard/68427.html' },
  { name: 'ISO/IEC 27014 (Governance of Information Security)', url: 'https://www.iso.org/standard/43756.html' },
  { name: 'ISO/IEC 27031 (Guidelines for Information and Communication Technology Readiness for Business Continuity)', url: 'https://www.iso.org/standard/44374.html' },
  { name: 'ISO/IEC 27032 (Guidelines for Cybersecurity)', url: 'https://www.iso.org/standard/44375.html' },
  { name: 'ISO/IEC 27033 (Network Security)', url: 'https://www.iso.org/standard/63411.html' },
  { name: 'ISO/IEC 27034 (Application Security)', url: 'https://www.iso.org/standard/44379.html' },
  { name: 'ISO/IEC 27041 (Guidelines on Assuring Suitability and Adequacy of Incident Investigative Methods)', url: 'https://www.iso.org/standard/44403.html' },
  { name: 'ISO/IEC 27042 (Guidelines on Digital Evidence Analysis)', url: 'https://www.iso.org/standard/44404.html' },
  { name: 'ISO/IEC 27043 (Incident Investigation Principles and Processes)', url: 'https://www.iso.org/standard/44405.html' },
  { name: 'ISO/IEC 27044 (Guidelines for Security Information and Event Management)', url: 'https://www.iso.org/standard/44406.html' },
  { name: 'ISO/IEC 29100 (Privacy Framework)', url: 'https://www.iso.org/standard/45123.html' },
  { name: 'ISO/IEC 29134 (Guidelines for Privacy Impact Assessment)', url: 'https://www.iso.org/standard/62289.html' },
  { name: 'ISO/IEC 29151 (Code of Practice for Personally Identifiable Information Protection)', url: 'https://www.iso.org/standard/62725.html' },
  { name: 'ISO/IEC 38500 (Governance of IT for the Organization)', url: 'https://www.iso.org/standard/51639.html' },
  { name: 'NIST SP 800-160 (Systems Security Engineering)', url: 'https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final' },
  { name: 'NIST SP 800-190 (Application Container Security Guide)', url: 'https://csrc.nist.gov/publications/detail/sp/800-190/final' },
  { name: 'NIST SP 800-207 (Zero Trust Architecture)', url: 'https://csrc.nist.gov/publications/detail/sp/800-207/final' },
  { name: 'NIST SP 800-218 (Secure Software Development Framework)', url: 'https://csrc.nist.gov/publications/detail/sp/800-218/final' },
  { name: 'NIST SP 800-53A (Assessing Security and Privacy Controls in Federal Information Systems and Organizations)', url: 'https://csrc.nist.gov/publications/detail/sp/800-53a/rev-5/final' },
  { name: 'NIST SP 800-63 (Digital Identity Guidelines)', url: 'https://pages.nist.gov/800-63-3/' },
  { name: 'NIST SP 800-37 (Risk Management Framework for Information Systems and Organizations)', url: 'https://csrc.nist.gov/publications/detail/sp/800-37/rev-2/final' },
  { name: 'NIST SP 800-39 (Managing Information Security Risk)', url: 'https://csrc.nist.gov/publications/detail/sp/800-39/final' },
  { name: 'NIST SP 800-61 (Computer Security Incident Handling Guide)', url: 'https://csrc.nist.gov/publications/detail/sp/800-61/rev-2/final' },
  { name: 'NIST SP 800-88 (Guidelines for Media Sanitization)', url: 'https://csrc.nist.gov/publications/detail/sp/800-88/rev-1/final' },
  { name: 'NIST SP 800-115 (Technical Guide to Information Security Testing and Assessment)', url: 'https://csrc.nist.gov/publications/detail/sp/800-115/final' },
  { name: 'NIST SP 800-184 (Guide for Cybersecurity Event Recovery)', url: 'https://csrc.nist.gov/publications/detail/sp/800-184/final' },
  { name: 'NIST SP 800-30 (Guide for Conducting Risk Assessments)', url: 'https://csrc.nist.gov/publications/detail/sp/800-30/rev-a/final' },
  { name: 'NIST SP 800-64 (Security Considerations in the System Development Life Cycle)', url: 'https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/final' },
  { name: 'NIST SP 800-83 (Guide to Malware Incident Prevention and Handling)', url: 'https://csrc.nist.gov/publications/detail/sp/800-83/rev-1/final' },
  { name: 'NIST SP 800-92 (Guide to Computer Security Log Management)', url: 'https://csrc.nist.gov/publications/detail/sp/800-92/final' },
  { name: 'NIST SP 800-94 (Guide to Intrusion Detection and Prevention Systems)', url: 'https://csrc.nist.gov/publications/detail/sp/800-94/rev-1/draft' },
  { name: 'NIST SP 800-100 (Information Security Handbook: A Guide for Managers)', url: 'https://csrc.nist.gov/publications/detail/sp/800-100/final' },
  { name: 'NIST SP 800-122 (Guide to Protecting the Confidentiality of Personally Identifiable Information)', url: 'https://csrc.nist.gov/publications/detail/sp/800-122/final' },
  { name: 'NIST SP 800-137 (Information Security Continuous Monitoring for Federal Information Systems and Organizations)', url: 'https://csrc.nist.gov/publications/detail/sp/800-137/final' },
  { name: 'NIST SP 800-144 (Guidelines on Security and Privacy in Public Cloud Computing)', url: 'https://csrc.nist.gov/publications/detail/sp/800-144/final' },
  { name: 'NIST SP 800-146 (Cloud Computing Synopsis and Recommendations)', url: 'https://csrc.nist.gov/publications/detail/sp/800-146/final' },
  { name: 'NIST SP 800-150 (Guide to Cyber Threat Information Sharing)', url: 'https://csrc.nist.gov/publications/detail/sp/800-150/final' },
  { name: 'NIST SP 800-160 (Systems Security Engineering: Considerations for a Multidisciplinary Approach in the Engineering of Trustworthy Secure Systems)', url: 'https://csrc.nist.gov/publications/detail/sp/800-160/vol-1/final' },
  { name: 'NIST SP 800-171A (Assessing Security Requirements for Controlled Unclassified Information)', url: 'https://csrc.nist.gov/publications/detail/sp/800-171a/final' },
  { name: 'NIST SP 800-181 (National Initiative for Cybersecurity Education (NICE) Cybersecurity Workforce Framework)', url: 'https://csrc.nist.gov/publications/detail/sp/800-181/rev-1/final' },
  { name: 'Cyber Essentials (UK Cybersecurity Standard)', url: 'https://www.ncsc.gov.uk/cyberessentials/overview' },
  { name: 'Essential Eight (Australian Cybersecurity Framework)', url: 'https://www.cyber.gov.au/acsc/view-all-content/essential-eight' },
  { name: 'Secure Controls Framework (SCF)', url: 'https://www.securecontrolsframework.com/' },
  { name: 'Factor Analysis of Information Risk (FAIR)', url: 'https://www.fairinstitute.org/' },
  { name: 'Cloud Security Alliance (CSA) STAR', url: 'https://cloudsecurityalliance.org/star/' },
  { name: 'NIST Privacy Framework', url: 'https://www.nist.gov/privacy-framework' },
  { name: 'ISF Standard of Good Practice for Information Security', url: 'https://www.securityforum.org/solutions-and-insights/the-standard-of-good-practice-for-information-security/' },
  { name: 'TOGAF (The Open Group Architecture Framework)', url: 'https://www.opengroup.org/togaf' },
  { name: 'IEC 62443 (Industrial Automation and Control Systems Security)', url: 'https://webstore.iec.ch/publication/7028' },
  { name: 'FFIEC Cybersecurity Assessment Tool', url: 'https://www.ffiec.gov/cyberassessmenttool.htm' },
  { name: 'SWIFT Customer Security Programme (CSP)', url: 'https://www.swift.com/myswift/customer-security-programme-csp' },
  { name: 'AI Risk Management Framework (AI RMF)', url: 'https://www.nist.gov/itl/ai-risk-management-framework' },
  { name: 'BSI IT-Grundschutz (German Federal Office for Information Security)', url: 'https://www.bsi.bund.de/EN/Topics/IT-Grundschutz/it-grundschutz_node.html' },
  { name: 'Canadian Centre for Cyber Security’s IT Security Guidance', url: 'https://cyber.gc.ca/en/guidance' },
  { name: 'TISAX (Trusted Information Security Assessment Exchange)', url: 'https://enx.com/tisax/' },
  { name: 'MARISSA (Maritime Cybersecurity Standards)', url: 'https://www.maritimecybersecurity.center/' },
  { name: 'ANSI/ISA-62443 (Cybersecurity Standards for Automation)', url: 'https://www.isa.org/standards-and-publications/isa-standards/isa-62443-series-of-standards' },
  { name: 'UK Government Minimum Cyber Security Standard', url: 'https://www.gov.uk/government/publications/minimum-cyber-security-standard' },
  { name: 'Basel Committee on Banking Supervision (BCBS 239)', url: 'https://www.bis.org/bcbs/publ/d239.htm' },
  { name: 'OECD Guidelines for the Security of Information Systems and Networks', url: 'https://www.oecd.org/sti/ieconomy/15582260.pdf' },
  { name: 'CERT Resilience Management Model (CERT-RMM)', url: 'https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=508099' },
  { name: 'NESA Information Assurance Standards (UAE IAS)', url: 'https://www.nesa.ae/' },
  { name: 'Hong Kong Monetary Authority (HKMA) Cybersecurity Fortification Initiative', url: 'https://www.hkma.gov.hk/eng/key-functions/banking/cybersecurity-fortification-initiative-cfi/' },
  { name: 'K-ISMS (Korean Information Security Management System)', url: 'https://www.kisa.or.kr/eng/main.jsp' },
  { name: 'Japan Cybersecurity Framework (J-CSIP)', url: 'https://www.ipa.go.jp/security/english/jcsip.html' },
  { name: 'NATO Cyber Defence Policy Framework', url: 'https://www.nato.int/cps/en/natohq/topics_78170.htm' },
  { name: 'DHS Continuous Diagnostics and Mitigation (CDM) Program', url: 'https://www.cisa.gov/cdm' },
  { name: 'World Economic Forum (WEF) Cybersecurity Principles', url: 'https://www.weforum.org/reports/principles-for-board-governance-of-cyber-risk' },
  { name: 'HITRUST Threat Catalogue', url: 'https://hitrustalliance.net/hitrust-threat-catalog/' },
  { name: 'Digital Geneva Convention Cyber Norms', url: 'https://digitalpeace.microsoft.com/' },
  { name: 'Smart Grid Interoperability Panel (SGIP) Cybersecurity Guidelines', url: 'https://www.nist.gov/publications/nist-framework-and-roadmap-smart-grid-interoperability-standards-release-30' },
  { name: 'APEC Privacy Framework', url: 'https://www.apec.org/Publications/2017/08/APEC-Privacy-Framework-(2015)' },
  { name: 'NERC PRC Standards', url: 'https://www.nerc.com/pa/Stand/Pages/PRC-Reliability-Standards.aspx' },
  { name: 'Digital Identity Authentication and Fraud Prevention Framework', url: 'https://www.gsma.com/identity/digital-identity-programme/' },
  { name: 'Zero Trust Architecture', url: 'https://csrc.nist.gov/publications/detail/sp/800-207/final' },
  { name: 'MITRE Shield', url: 'https://shield.mitre.org/' },
  { name: 'MITRE Engage', url: 'https://engage.mitre.org/' },
  { name: 'NIST Cybersecurity Workforce Framework', url: 'https://www.nist.gov/cyberframework/workforce' },
];


const capitalizeFirstLetter = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
};


function getMatchingVideos(keyword) {
  return youtubeVideos
    .filter((vid) => vid.title.toLowerCase().includes(keyword.toLowerCase()))
    .map((vid) => ({ name: vid.title, url: vid.url }));
}


const pentestToolNames = [
  'Nmap',
  'Burp Suite',
  'Metasploit',
  'Hydra',
  'John the Ripper',
  'Nikto',
  'SQLmap',
  'Mimikatz',
  'Gobuster',
  'Hashcat',
  'Impacket',
  'Aircrack-ng',
  'OWASP ZAP',
];
const pentestToolsForPenTestPlus = cyberSecurityTools.filter((tool) =>
  pentestToolNames.includes(tool.name)
);


const baseResourcesData = {
  reddit: [
    ...redditSubreddits,
    ...redditPosts.map((post) => ({ name: post.title, url: post.url })),
  ],
  youtube: [
    ...youtubeChannels,
    ...youtubeVideos.map((vid) => ({ name: vid.title, url: vid.url })),
  ],
  udemy: udemyCourses.map((course) => ({ name: course.title, url: course.url })),
  frameworks: securityFrameworks.map((fw) => ({ name: fw.name, url: fw.url })),
  other: [...otherResources],
  linkedin: [...linkedInPeople],
  'CyberSecurity Tools': [...cyberSecurityTools],
  'CompTIA Certification Objectives': comptiaObjectives.map((obj) => ({
    name: obj.cert,
    url: obj.url,
  })),
};


const keywordMap = {
  'A+': {
    include: ['a+', 'a plus', '220-1101', '1101', '220-1102', '1102', 'A+', 'aplus', 'APLUS', 'A PLUS', 'A plus'],
    exclude: [
      'network+',
      'net+',
      'security+',
      'cysa+',
      'casp',
      'pentest+',
      'linux+',
      'server+',
      'project+',
      'data+',
      'cloud+',
      'cloud essentials',
    ],
  },
  'Network+': {
    include: ['network+', 'n10-008', 'n10-009', 'network plus', 'networking', 'Net Plus', 'NetPlus', 'Networkplus', 'Networking', 'Net Plus', 'net plus', 'Net+', 'net+' ],
    exclude: [
      'a+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'data+',
      'server+',
      'project+',
      'cloud+',
    ],
  },
  'Security+': {
    include: ['security+', 'syo-701', '701', 'sec+', 'SY0', 'SY0-701', 'sy0-701', 'sy0'],
    exclude: [
      'network+',
      'n10-009',
      'a+',
      'cysa+',
      'casp',
      'pentest+',
      'linux+',
      'server+',
      'project+',
      'data+',
      'cloud+',
    ],
  },
  'CySA+': {
    include: ['cysa+', 'cs0-003', 'cybersecurity analyst', 'c y s a+', 'CYSA', 'CYSA+'],
    exclude: [
      'network+',
      'security+',
      'a+',
      'casp',
      'pentest+',
      'linux+',
      'data+',
      'server+',
      'cloud+',
      'project+',
    ],
  },
  'SecurityX/CASP': {
    include: ['casp', 'cas-004', 'securityx', 'casp+', 'casp plus', 'SECURITYX', 'SecurityX', 'Cas-005', 'CAS-004', 'CAS-005', 'Cas-004', 'cas-005'],
    exclude: [
      'network+',
      'security+',
      'a+',
      'pentest+',
      'cysa+',
      'linux+',
      'data+',
      'project+',
      'cloud+',
      'server+',
    ],
  },
  'PenTest+': {
    include: ['pentest+', 'pt0-002', 'pt0-003', 'pentest plus'],
    exclude: [
      'network+',
      'security+',
      'a+',
      'cysa+',
      'casp',
      'linux+',
      'data+',
      'project+',
      'cloud+',
      'server+',
    ],
  },
  'Cloud+/Cloud Essentials': {
    include: ['cloud+', 'cloud essentials', 'cv0-003', 'cloud plus', 'cl0-002'],
    exclude: [
      'a+',
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'project+',
      'server+',
      'data+',
    ],
  },
  'Linux+': {
    include: ['linux+', 'xk0-005', 'kali linux', 'ubuntu', 'red hat'],
    exclude: [
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'a+',
      'data+',
      'cloud+',
      'server+',
      'project+',
    ],
  },
  'Data+': {
    include: ['data+', 'da0-001', 'data plus'],
    exclude: [
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'cloud+',
      'server+',
      'project+',
      'a+',
    ],
  },
  'Server+': {
    include: ['server+', 'sk0-005', 'server plus'],
    exclude: [
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'data+',
      'project+',
      'cloud+',
      'a+',
    ],
  },
  'Project+': {
    include: ['project+', 'pk0-005', 'project plus'],
    exclude: [
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'data+',
      'server+',
      'cloud+',
      'a+',
    ],
  },
  'ITF/TECH+': {
    include: ['itf', 'tech+', 'fc0-u61', 'fc0-u71', 'it fundamentals'],
    exclude: [
      'network+',
      'security+',
      'pentest+',
      'cysa+',
      'casp',
      'linux+',
      'data+',
      'server+',
      'cloud+',
      'project+',
      'a+',
    ],
  },
};


function resourceMatchesCategory(resourceName, includeList, excludeList) {
  const lowerName = resourceName.toLowerCase();


  const hasInclude = includeList.some((term) =>
    lowerName.includes(term.toLowerCase())
  );
  if (!hasInclude) return false;

  
  const hasExclude = excludeList.some((term) =>
    lowerName.includes(term.toLowerCase())
  );
  if (hasExclude) return false;

  return true;
}


const allResources = [];


[...cyberSecurityTools].forEach((tool) => {
  allResources.push({ name: tool.name, url: tool.url });
});
redditSubreddits.forEach((sub) => {
  allResources.push({ name: sub.name, url: sub.url });
});
redditPosts.forEach((post) => {
  allResources.push({ name: post.title, url: post.url });
});
youtubeChannels.forEach((chan) => {
  allResources.push({ name: chan.name, url: chan.url });
});
youtubeVideos.forEach((vid) => {
  allResources.push({ name: vid.title, url: vid.url });
});
otherResources.forEach((res) => {
  allResources.push({ name: res.name, url: res.url });
});
udemyCourses.forEach((course) => {
  allResources.push({ name: course.title, url: course.url });
});
linkedInPeople.forEach((person) => {
  allResources.push({ name: person.name, url: person.url });
});
securityFrameworks.forEach((fw) => {
  allResources.push({ name: fw.name, url: fw.url });
});
comptiaObjectives.forEach((obj) => {
  allResources.push({ name: obj.cert, url: obj.url });
});


function getAllMatchesForCategory(categoryName) {
  const { include, exclude } = keywordMap[categoryName] || {
    include: [],
    exclude: [],
  };
  const matched = [];

  allResources.forEach((resource) => {
    if (resourceMatchesCategory(resource.name, include, exclude)) {
      matched.push(resource);
    }
  });

  return matched;
}


const resourcesData = {
  ...baseResourcesData,


  'A+': [
 
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().includes('a+ core'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),


    { name: 'A+ Practice tests', url: 'https://www.examcompass.com/' },


    ...getAllMatchesForCategory('A+'),
  ],

  'Network+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('network+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    { name: 'Network+ Practice Exams', url: 'https://www.examcompass.com/' },

    ...getAllMatchesForCategory('Network+'),
  ],

  'Security+': [
    ...comptiaObjectives
      .filter(
        (obj) =>
          obj.cert.toLowerCase().startsWith('security+') &&
          !obj.cert.toLowerCase().includes('x')
      )
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    { name: 'Security+ Practice Tests', url: 'https://www.examcompass.com/' },

    ...getAllMatchesForCategory('Security+'),
  ],

  'CySA+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('cysa+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    { name: 'Practice Exams', url: 'https://www.101labs.net/free-cysa-practice-exam-cybersecurity/' },

    ...getAllMatchesForCategory('CySA+'),
  ],

  'SecurityX/CASP': [
    ...comptiaObjectives
      .filter(
        (obj) =>
          obj.cert.toLowerCase().includes('casp') ||
          obj.cert.toLowerCase().includes('securityx')
      )
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'CASP+ Practice Exams',
      url: 'https://www.howtonetwork.com/free/casp-practice-exam/',
    },

    ...getAllMatchesForCategory('SecurityX/CASP'),
  ],

  'PenTest+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('pentest+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'PenTest+ Practice Exams',
      url: 'https://www.howtonetwork.com/free/pentest-practice-exam/',
    },



    ...getAllMatchesForCategory('PenTest+'),
  ],

  'Cloud+/Cloud Essentials': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().includes('cloud'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    { name: 'Cloud+ Practice Labs', url: 'https://www.aws.training/' },

    ...getAllMatchesForCategory('Cloud+/Cloud Essentials'),
  ],

  'Linux+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('linux+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'Linux+ Study Guide',
      url: 'https://www.howtonetwork.com/free/linux-practice-exam/',
    },
    { name: 'Linux+ Practice Labs', url: 'https://www.virtualbox.org/' },
    {
      name: 'Linux+ Practice Exams',
      url: 'https://certblaster.com/certification-learning-resources/linux-plus-practice-test-sample-questions/',
    },
    {
      name: 'Linux+ Training by CBT Nuggets',
      url: 'https://www.udemy.com/course/comptia-linux-plus/',
    },

    ...getAllMatchesForCategory('Linux+'),
  ],

  'Data+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('data'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'Data+ Practice Exams',
      url: 'https://careeremployer.com/test-prep/practice-tests/comptia-data-practice-test/',
    },

    ...getAllMatchesForCategory('Data+'),
  ],

  'Server+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('server+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'Server+ Practice Exams',
      url: 'https://www.proprofs.com/quiz-school/story.php?title=comptia-server-practice-questions-125-set-1-4',
    },

    ...getAllMatchesForCategory('Server+'),
  ],

  'Project+': [
    ...comptiaObjectives
      .filter((obj) => obj.cert.toLowerCase().startsWith('project+'))
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'Project+ Practice Exams',
      url: 'https://www.howtonetwork.com/free/comptia-project-practice-exam/',
    },

    ...getAllMatchesForCategory('Project+'),
  ],

  'ITF/TECH+': [
    ...comptiaObjectives
      .filter(
        (obj) =>
          obj.cert.toLowerCase().startsWith('itf') ||
          obj.cert.toLowerCase().includes('tech+')
      )
      .map((obj) => ({ name: obj.cert, url: obj.url })),

    {
      name: 'ITF Practice Exams',
      url: 'https://certblaster.com/it-fundamentals-practice-test/',
    },

    ...getAllMatchesForCategory('ITF/TECH+'),
  ],
};

function Resources() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [sorted, setSorted] = useState(false);
  const [randomResource, setRandomResource] = useState(null);

  const handleSearch = (event) => setSearchTerm(event.target.value.toLowerCase());
  const handleCategoryChange = (event) => setSelectedCategory(event.target.value);

 
  const filteredResources = Object.entries(resourcesData)
    .filter(([category]) => selectedCategory === "all" || category === selectedCategory)
    .flatMap(([, resources]) => resources)
    .filter((resource) => resource.name.toLowerCase().includes(searchTerm))
    .sort((a, b) => (sorted ? a.name.localeCompare(b.name) : 0));

 
  const handleRandomResource = () => {
    const currentCategoryResources =
      selectedCategory === "all"
        ? Object.values(resourcesData).flat()
        : resourcesData[selectedCategory] || [];

    if (currentCategoryResources.length === 0) {
      setRandomResource(null);
      return;
    }

    const random = currentCategoryResources[Math.floor(Math.random() * currentCategoryResources.length)];
    setRandomResource(random);
  };

  return (
    <div className="resources-background">
      <div className="resources-container">
        <h1 className="resources-header">Cybersecurity Resources Hub</h1>

        {/* Controls Section */}
        <div className="resources-controls">
          <input
            type="text"
            placeholder="Search resources..."
            value={searchTerm}
            onChange={handleSearch}
            className="search-input"
          />

          <select
            onChange={handleCategoryChange}
            value={selectedCategory}
            className="category-select"
          >
            <option value="all">All Categories</option>
            {Object.keys(resourcesData).map((category) => (
              <option key={category} value={category}>
                {capitalizeFirstLetter(category)}
              </option>
            ))}
          </select>

          <button
            onClick={() => setSorted(!sorted)}
            className="sort-button"
          >
            {sorted ? "Unsort" : "Sort A-Z"}
          </button>

          <button
            onClick={handleRandomResource}
            className="random-button"
          >
            Random Resource
          </button>
        </div>

        {/* Random Resource Section */}
        {randomResource && (
          <div className="resources-random-resource">
            <h2>Explore This Resource:</h2>
            <a
              href={randomResource.url}
              target="_blank"
              rel="noopener noreferrer"
            >
              {randomResource.name}
            </a>
          </div>
        )}

        {/* Resources List */}
        <ul className="resources-list">
          {filteredResources.length ? (
            filteredResources.map((resource, index) => (
              <li key={index}>
                <a
                  href={resource.url}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {resource.name}
                </a>
              </li>
            ))
          ) : (
            <p>No resources found.</p>
          )}
        </ul>
      </div>
    </div>
  );
}

export default Resources;

================
File: frontend/my-react-app/src/components/pages/ScenarioPage/attacks.js
================
export const ATTACK_TYPES = [
    "AI Activation Exploit",
  "AI Algorithm Manipulation",
  "AI Data Leakage",
  "AI Data Leakage Exploit",
  "AI Decision Exploit",
  "AI Gradient Exploit",
  "AI Hyperparameter Exploit",
  "AI Inference Attack",
  "AI Loss Function Exploit",
  "AI Model Adversarial Example",
  "AI Model Extraction",
  "AI Model Inversion Attack",
  "AI Model Membership Inference",
  "AI Model Membership Inference Attack",
  "AI Model Poisoning",
  "AI Model Reverse Engineering",
  "AI Output Manipulation",
  "AI System Hijacking",
  "AI Training Data Poisoning",
  "AI Weight Manipulation",
  "AI-Controlled Traffic Light Exploit",
  "AI-Driven Spear Phishing",
  "AI-Generated Fake User Exploit",
  "AI-Powered Phishing Attack",
  "AI-Powered Spear Phishing",
  "API Abuse",
  "API Credential Theft",
  "API Injection",
  "ARP Poisoning",
  "ARP Spoofing",
  "Acoustic Side-Channel",
  "Admin Share Access",
  "Advanced Blockchain Exploit",
  "Advanced Persistent Threat (APT)",
  "Advanced Ransomware Variant",
  "Adversarial AI Attack",
  "Adversarial Machine Learning Attack",
  "Adware",
  "Adware Injection",
  "Affiliate Fraud",
  "Air Gap Attack",
  "Amplification Attack",
  "Application Layer DDoS",
  "Astroturfing",
  "Augmented Reality (AR) Device Exploit",
  "Automated Malware Generation",
  "Automated Teller Machine (ATM) Malware",
  "Automotive System Attack",
  "Autonomous Drone Malware",
  "Autonomous Vehicle Malware",
  "BEAST Attack",
  "BGP Hijacking",
  "BREACH Attack",
  "Backdoor",
  "Baiting",
  "Beacon Flooding",
  "Binary Planting",
  "Blockchain 51% Attack",
  "Blockchain Consensus Manipulation",
  "Blockchain Data Corruption",
  "Blockchain Data Poisoning",
  "Blockchain Double Spend",
  "Blockchain Fork Attack",
  "Blockchain Governance Attack",
  "Blockchain Hard Fork Exploit",
  "Blockchain Node Exploit",
  "Blockchain Node Hijacking",
  "Blockchain Privacy Leak",
  "Blockchain Relay Attack",
  "Blockchain Sidechain Exploit",
  "Blockchain Soft Fork Exploit",
  "Blockchain Storage Exploit",
  "Blockchain Timestamp Exploit",
  "Blockchain Transaction Ordering Attack",
  "Blockchain Upgrade Exploit",
  "Bluetooth Exploitation",
  "Bluetooth Jamming",
  "Bootkit Infection",
  "Border Gateway Protocol (BGP) Attack",
  "Border Gateway Protocol (BGP) Hijack",
  "Botnet",
  "Botnet Command and Control",
  "Botnet DDoS",
  "Branch Prediction Attack",
  "Brandjacking",
  "Broken Access Control",
  "Broken Authentication",
  "Brute Force Attack",
  "Buffer Overflow",
  "Buffer Overflow Exploit",
  "Business Email Compromise (BEC)",
  "Business Logic Attack",
  "CLDAP Amplification",
  "CRIME Attack",
  "CRLF Injection",
  "Cache Timing Attack",
  "Chargen Amplification",
  "Click Fraud",
  "Clickjacking",
  "Cloud API Hijacking",
  "Cloud Data Breach",
  "Cloud Infrastructure Exploit",
  "Cloud Instance Metadata Exploit",
  "Cloud Storage Bucket Enumeration",
  "Cloud Storage Bucket Enumeration Attack",
  "Cloud-Based Denial of Service",
  "Code Injection",
  "Code Reuse Attack",
  "Cold Boot Attack",
  "Command Injection",
  "Conference Room System Exploit",
  "Connected Car Exploit",
  "Connected Medical Equipment Malware",
  "Connected Public Transport Exploit",
  "Connection Flood",
  "Container Exploitation",
  "Content Spoofing",
  "Covering Tracks",
  "Credential Dumping",
  "Credential Harvesting",
  "Credential Stuffing",
  "Cross-Blockchain Attack",
  "Cross-Blockchain Sybil Attack",
  "Cross-Origin Resource Sharing (CORS) Misconfiguration",
  "Cross-Platform Credential Theft",
  "Cross-Site Request Forgery (CSRF)",
  "Cross-Site Scripting (XSS)",
  "Crypto Lending Platform Exploit",
  "Crypto Miner",
  "Crypto Staking Exploit",
  "Crypto Wallet Hijacking",
  "Crypto Yield Farming Exploit",
  "Cryptocurrency Exchange Malware",
  "Cryptojacking",
  "DApp Smart Contract Upgrade Exploit",
  "DDoS",
  "DLL Hijacking",
  "DNS Amplification",
  "DNS Amplification Attack",
  "DNS Cache Poisoning",
  "DNS Rebinding",
  "DNS Spoofing",
  "DNS Tunneling",
  "DROWN Attack",
  "Data Accessibility Exploit in Web Applications",
  "Data Annotation Exploit for AI Bias Injection",
  "Data Anonymization Exploit for Re-identification",
  "Data Archiving Exploit for Long-Term Theft",
  "Data Authenticity Exploit in Trust Systems",
  "Data Availability Exploit through DDoS Attacks",
  "Data Backup Exploit through Unauthorized Access",
  "Data Breach",
  "Data Business Continuity Exploit in Critical Systems",
  "Data Classification Exploit for Sensitive Data Access",
  "Data Compliance Exploit via Regulation Ignorance",
  "Data Confidentiality Exploit via Unauthorized Access",
  "Data Consensus Exploit in Blockchain Networks",
  "Data Consistency Exploit in Distributed Databases",
  "Data Context Exploit in Context-Aware Systems",
  "Data Decryption Exploit through Weak Keys",
  "Data Destruction Exploit via Physical Damage",
  "Data Disaster Recovery Exploit in Backup Systems",
  "Data Disposal Exploit through Incomplete Deletion",
  "Data Encryption Exploit in Transport Layer",
  "Data Exfiltration",
  "Data Exfiltration via Covert Channels",
  "Data Fabric Tampering",
  "Data Fault Tolerance Exploit in Resilient Systems",
  "Data Filtering Exploit to Remove Critical Data",
  "Data Freshness Exploit in Real-Time Systems",
  "Data Generation Exploit for AI Model Training",
  "Data Governance Exploit through Policy Bypass",
  "Data Granularity Exploit in Detailed Data Analysis",
  "Data Hashing Exploit for Integrity Bypass",
  "Data High Availability Exploit in Redundant Systems",
  "Data Incident Response Exploit in Security Protocols",
  "Data Indexing Exploit for Quick Access Abuse",
  "Data Injection in User Input Fields",
  "Data Integrity Exploit in Transaction Logs",
  "Data Intent Exploit in User Interaction Systems",
  "Data Interoperability Exploit in Cross-System Integration",
  "Data Knowledge Graph Exploit for Information Theft",
  "Data Labeling Exploit for Data Misclassification",
  "Data Leakage",
  "Data Leakage via Unsecured APIs",
  "Data Load Balancing Exploit in Server Networks",
  "Data Manipulation Attack",
  "Data Manipulation in Supply Chain Data",
  "Data Masking Exploit to Reveal Sensitive Data",
  "Data Meaning Exploit in Semantic Analysis",
  "Data Obfuscation Exploit for Code Analysis",
  "Data Ontology Exploit in Knowledge Graphs",
  "Data Partitioning Exploit for Isolated Access",
  "Data Poisoning in Machine Learning Models",
  "Data Portability Exploit in Data Migration",
  "Data Pragmatics Exploit in Communication Protocols",
  "Data Privacy Exploit through Unauthorized Sharing",
  "Data Pseudonymization Exploit for Data Linkage",
  "Data Recovery Exploit after Deletion",
  "Data Reliability Exploit in Faulty Systems",
  "Data Remanence Attack",
  "Data Replication Exploit in Redundant Systems",
  "Data Retention Exploit through Extended Storage",
  "Data Risk Assessment Exploit in Security Planning",
  "Data Sampling Exploit for Data Set Biasing",
  "Data Schema Exploit for Database Corruption",
  "Data Security Alerting Exploit through False Positives",
  "Data Security Audit Exploit through Incomplete Auditing",
  "Data Security Breach Exploit through Unauthorized Access",
  "Data Security Compliance Exploit through Non-Compliance",
  "Data Security Control Exploit through Control Bypass",
  "Data Security Detection Exploit through Detection Evasion",
  "Data Security Framework Exploit in Implementation Gaps",
  "Data Security Incident Exploit through Rapid Response",
  "Data Security Mitigation Exploit through Ineffective Measures",
  "Data Security Monitoring Exploit through Evasion Techniques",
  "Data Security Policy Exploit through Policy Violation",
  "Data Security Prevention Exploit through Proactive Measures Bypass",
  "Data Security Response Exploit through Response Delay",
  "Data Security Standard Exploit through Compliance Loopholes",
  "Data Segregation Exploit in Multi-Tenant Systems",
  "Data Semantics Exploit in Natural Language Processing",
  "Data Sharding Exploit in Distributed Systems",
  "Data Sorting Exploit in Search Algorithms",
  "Data Structure Exploit for Memory Corruption",
  "Data Synchronization Exploit in Real-Time Applications",
  "Data Syntax Exploit in Code Parsing",
  "Data Synthesis Exploit to Generate Fake Data",
  "Data Tagging Exploit for Data Sorting Bypass",
  "Data Tampering in Financial Transactions",
  "Data Taxonomy Exploit in Content Management",
  "Data Theft through Insider Threats",
  "Data Threat Intelligence Exploit in Information Sharing",
  "Data Tokenization Exploit in Payment Systems",
  "Data Usability Exploit in User Interface Design",
  "Data Validity Exploit in Data Validation Processes",
  "DeFi Automated Market Maker (AMM) Exploit",
  "DeFi Automated Market Maker Exploit",
  "DeFi Borrowing Exploit",
  "DeFi Collateral Liquidation Exploit",
  "DeFi Collateral Management Exploit",
  "DeFi Contract Upgrade Exploit",
  "DeFi Contract Upgrade Malfunction",
  "DeFi Cross-Chain Bridge Exploit",
  "DeFi Cross-Protocol Exploit",
  "DeFi Debt Ceiling Exploit",
  "DeFi Debt Position Exploit",
  "DeFi Decentralized Exchange (DEX) Exploit",
  "DeFi Farming Pool Exploit",
  "DeFi Flash Loan Arbitrage",
  "DeFi Flash Loan Arbitrage Attack",
  "DeFi Flash Loan Exploit",
  "DeFi Flash Loan Governance Attack",
  "DeFi Flash Loan Liquidation Attack",
  "DeFi Flash Loan Reentrancy Attack",
  "DeFi Flash Loan Routing Attack",
  "DeFi Front-Running Attack",
  "DeFi Futures Contract Exploit",
  "DeFi Governance Attack",
  "DeFi Governance Contract Exploit",
  "DeFi Governance Delegation Attack",
  "DeFi Governance Delegation Exploit",
  "DeFi Governance Exploit",
  "DeFi Governance Proposal Exploit",
  "DeFi Governance Token Airdrop Exploit",
  "DeFi Governance Token Allocation Exploit",
  "DeFi Governance Token Balance Manipulation",
  "DeFi Governance Token Bridge Exploit",
  "DeFi Governance Token Burn",
  "DeFi Governance Token Cross-Chain Exploit",
  "DeFi Governance Token Distribution Exploit",
  "DeFi Governance Token Distribution Manipulation",
  "DeFi Governance Token Exploit",
  "DeFi Governance Token Exploitation",
  "DeFi Governance Token Farming Exploit",
  "DeFi Governance Token Front-Running",
  "DeFi Governance Token Harvest Exploit",
  "DeFi Governance Token Lock Exploit",
  "DeFi Governance Token Lockup Exploit",
  "DeFi Governance Token Mining Exploit",
  "DeFi Governance Token Mint",
  "DeFi Governance Token Pool Exploit",
  "DeFi Governance Token Proxy Exploit",
  "DeFi Governance Token Reassignment",
  "DeFi Governance Token Sale Exploit",
  "DeFi Governance Token Swap",
  "DeFi Governance Token Swap Exploit",
  "DeFi Governance Token Theft",
  "DeFi Governance Token Transfer Exploit",
  "DeFi Governance Token Upgrade Exploit",
  "DeFi Governance Voting Exploit",
  "DeFi Insurance Pool Exploit",
  "DeFi Layer 1 Exploit",
  "DeFi Layer 2 Exploit",
  "DeFi Layer 3 Exploit",
  "DeFi Lending Protocol Exploit",
  "DeFi Liquidation Queue Manipulation",
  "DeFi Liquidity Incentive Exploit",
  "DeFi Liquidity Mining Exploit",
  "DeFi Liquidity Mining Pool Exploit",
  "DeFi Liquidity Pool Arbitrage Exploit",
  "DeFi Liquidity Pool Drain",
  "DeFi Liquidity Pool Exploit",
  "DeFi Liquidity Pool Manipulation",
  "DeFi Liquidity Pool Snapshot Attack",
  "DeFi Liquidity Provider Exploit",
  "DeFi Margin Trading Exploit",
  "DeFi Multi-Chain Exploit",
  "DeFi Options Contract Exploit",
  "DeFi Oracle Bypass",
  "DeFi Oracle Exploit",
  "DeFi Oracle Manipulation",
  "DeFi Oracle Price Manipulation",
  "DeFi Order Book Manipulation",
  "DeFi Pair Exploit",
  "DeFi Perpetual Swap Exploit",
  "DeFi Plasma Exploit",
  "DeFi Pool Rebalancing Attack",
  "DeFi Portfolio Manager Exploit",
  "DeFi Prediction Market Manipulation",
  "DeFi Price Feed Exploit",
  "DeFi Protocol Downgrade Exploit",
  "DeFi Protocol Reconfiguration Exploit",
  "DeFi Protocol Upgrade Exploit",
  "DeFi Reentrancy Attack",
  "DeFi Rollup Exploit",
  "DeFi Router Exploit",
  "DeFi Sandwich Attack",
  "DeFi Sidechain Exploit",
  "DeFi Smart Contract Exploit",
  "DeFi Smart Contract Freeze",
  "DeFi Smart Contract Reentrancy Attack",
  "DeFi Staking Contract Exploit",
  "DeFi Staking Pool Exploit",
  "DeFi Staking Pool Manipulation",
  "DeFi State Channel Exploit",
  "DeFi Strategy Exploit",
  "DeFi Synthetic Asset Exploit",
  "DeFi Synthetic Asset Manipulation",
  "DeFi Token Airdrop Exploit",
  "DeFi Token Approval Exploit",
  "DeFi Token Burn Exploit",
  "DeFi Token Burning Exploit",
  "DeFi Token Delegation Exploit",
  "DeFi Token Delisting Exploit",
  "DeFi Token Distribution Exploit",
  "DeFi Token Distribution Manipulation",
  "DeFi Token Economics Exploit",
  "DeFi Token Holder Access Exploit",
  "DeFi Token Holder Credential Exploit",
  "DeFi Token Holder Data Leakage Exploit",
  "DeFi Token Holder Enumeration Exploit",
  "DeFi Token Holder Exploit",
  "DeFi Token Holder Identity Exploit",
  "DeFi Token Holder Listing Exploit",
  "DeFi Token Holder Session Exploit",
  "DeFi Token Holder Session Hijacking",
  "DeFi Token Holder Token Approve Exploit",
  "DeFi Token Holder Token Back-Running Exploit",
  "DeFi Token Holder Token Baiting Exploit",
  "DeFi Token Holder Token Bridging Exploit",
  "DeFi Token Holder Token Burn Exploit",
  "DeFi Token Holder Token Conversion Exploit",
  "DeFi Token Holder Token Credential Dumping Exploit",
  "DeFi Token Holder Token Data Breach Exploit",
  "DeFi Token Holder Token Data Leakage Exploit",
  "DeFi Token Holder Token Decrease Allowance Exploit",
  "DeFi Token Holder Token Dusting Attack Exploit",
  "DeFi Token Holder Token Fabrication",
  "DeFi Token Holder Token Forgery",
  "DeFi Token Holder Token Front-Running Exploit",
  "DeFi Token Holder Token Gasless Transaction Exploit",
  "DeFi Token Holder Token Griefing Attack Exploit",
  "DeFi Token Holder Token Hold Exploit",
  "DeFi Token Holder Token Increase Allowance Exploit",
  "DeFi Token Holder Token Injection",
  "DeFi Token Holder Token Insider Threat Exploit",
  "DeFi Token Holder Token Lock Exploit",
  "DeFi Token Holder Token Manipulation",
  "DeFi Token Holder Token Meta-Transaction Exploit",
  "DeFi Token Holder Token Mint Exploit",
  "DeFi Token Holder Token Permit Exploit",
  "DeFi Token Holder Token Phishing Exploit",
  "DeFi Token Holder Token Prediction",
  "DeFi Token Holder Token Pretexting Exploit",
  "DeFi Token Holder Token Quid Pro Quo Exploit",
  "DeFi Token Holder Token Receive Exploit",
  "DeFi Token Holder Token Relay Exploit",
  "DeFi Token Holder Token Replay",
  "DeFi Token Holder Token Replay Exploit",
  "DeFi Token Holder Token Revoke Exploit",
  "DeFi Token Holder Token Sandwich Attack Exploit",
  "DeFi Token Holder Token Secure Transfer Exploit",
  "DeFi Token Holder Token Send Exploit",
  "DeFi Token Holder Token Smishing Exploit",
  "DeFi Token Holder Token Sniping Exploit",
  "DeFi Token Holder Token Social Engineering Exploit",
  "DeFi Token Holder Token Spear Phishing Exploit",
  "DeFi Token Holder Token Swap Exploit",
  "DeFi Token Holder Token Tailgating Exploit",
  "DeFi Token Holder Token Tampering",
  "DeFi Token Holder Token Theft",
  "DeFi Token Holder Token Transfer Exploit",
  "DeFi Token Holder Token Unlock Exploit",
  "DeFi Token Holder Token Vishing Exploit",
  "DeFi Token Holder Token Whaling Exploit",
  "DeFi Token Listing Exploit",
  "DeFi Token Lock Exploit",
  "DeFi Token Lockup Exploit",
  "DeFi Token Mint Exploit",
  "DeFi Token Minting Exploit",
  "DeFi Token Price Manipulation",
  "DeFi Token Reassignment Exploit",
  "DeFi Token Rebase Exploit",
  "DeFi Token Revoke Exploit",
  "DeFi Token Standard Exploit",
  "DeFi Token Swap Exploit",
  "DeFi Token Swap Front-Running",
  "DeFi Token Transfer Exploit",
  "DeFi Token Unlock Exploit",
  "DeFi Token Vesting Exploit",
  "DeFi Token Voting Exploit",
  "DeFi Underlying Asset Manipulation",
  "DeFi Vault Exploit",
  "DeFi Voting Power Exploit",
  "DeFi Yield Farming Contract Exploit",
  "DeFi Yield Farming Exploit",
  "DeFi Yield Optimizer Exploit",
  "Decentralized Access Control Exploit",
  "Decentralized Application (DApp) Malware",
  "Decentralized Authentication Exploit",
  "Decentralized Authorization Exploit",
  "Decentralized Autonomous Organization (DAO) Exploit",
  "Decentralized Blogging Exploit",
  "Decentralized CDN Exploit",
  "Decentralized Content Platform Exploit",
  "Decentralized Crowdfunding Exploit",
  "Decentralized DNS Exploit",
  "Decentralized Data Sharing Exploit",
  "Decentralized Exchange (DEX) API Exploit",
  "Decentralized Exchange (DEX) Arbitrage Exploit",
  "Decentralized Exchange (DEX) Back-End Exploit",
  "Decentralized Exchange (DEX) Bridge Exploit",
  "Decentralized Exchange (DEX) Cross-Chain Exploit",
  "Decentralized Exchange (DEX) Exploit",
  "Decentralized Exchange (DEX) Fee Exploit",
  "Decentralized Exchange (DEX) Flash Loan Attack",
  "Decentralized Exchange (DEX) Flash Loan Liquidity Exploit",
  "Decentralized Exchange (DEX) Front-End Exploit",
  "Decentralized Exchange (DEX) Front-Running",
  "Decentralized Exchange (DEX) Governance Attack",
  "Decentralized Exchange (DEX) Governance Token Exploit",
  "Decentralized Exchange (DEX) Leverage Exploit",
  "Decentralized Exchange (DEX) Liquidation Exploit",
  "Decentralized Exchange (DEX) Liquidity Drain",
  "Decentralized Exchange (DEX) Liquidity Incentive Exploit",
  "Decentralized Exchange (DEX) Liquidity Pool Exploit",
  "Decentralized Exchange (DEX) Margin Trading Exploit",
  "Decentralized Exchange (DEX) Order Book Exploit",
  "Decentralized Exchange (DEX) Order Matching Exploit",
  "Decentralized Exchange (DEX) Pair Exploit",
  "Decentralized Exchange (DEX) Pool Rebalancing Exploit",
  "Decentralized Exchange (DEX) Price Manipulation",
  "Decentralized Exchange (DEX) Reentrancy Attack",
  "Decentralized Exchange (DEX) Router Exploit",
  "Decentralized Exchange (DEX) Settlement Bridge Exploit",
  "Decentralized Exchange (DEX) Settlement Chain Exploit",
  "Decentralized Exchange (DEX) Settlement Data Tampering",
  "Decentralized Exchange (DEX) Settlement Delay Exploit",
  "Decentralized Exchange (DEX) Settlement Exploit",
  "Decentralized Exchange (DEX) Settlement Governance Exploit",
  "Decentralized Exchange (DEX) Settlement Manipulation",
  "Decentralized Exchange (DEX) Settlement Multi-Sig Exploit",
  "Decentralized Exchange (DEX) Settlement Override Exploit",
  "Decentralized Exchange (DEX) Settlement Protocol Exploit",
  "Decentralized Exchange (DEX) Settlement Replay Attack",
  "Decentralized Exchange (DEX) Settlement Timelock Exploit",
  "Decentralized Exchange (DEX) Settlement Token Access Control Exploit",
  "Decentralized Exchange (DEX) Settlement Token Approve Exploit",
  "Decentralized Exchange (DEX) Settlement Token Arithmetic Exploit",
  "Decentralized Exchange (DEX) Settlement Token Balance Manipulation",
  "Decentralized Exchange (DEX) Settlement Token Borrowing Exploit",
  "Decentralized Exchange (DEX) Settlement Token Burn Exploit",
  "Decentralized Exchange (DEX) Settlement Token Burning Exploit",
  "Decentralized Exchange (DEX) Settlement Token DecreaseAllowance Exploit",
  "Decentralized Exchange (DEX) Settlement Token EIP-20 Exploit",
  "Decentralized Exchange (DEX) Settlement Token EIP-2612 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-1155 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-1400 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit10 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit2 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit3 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit4 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit5 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit6 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit7 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit8 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-20 Permit9 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-223 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-721 Exploit",
  "Decentralized Exchange (DEX) Settlement Token ERC-777 Exploit",
  "Decentralized Exchange (DEX) Settlement Token Exploit",
  "Decentralized Exchange (DEX) Settlement Token Factory Exploit",
  "Decentralized Exchange (DEX) Settlement Token Farming Exploit",
  "Decentralized Exchange (DEX) Settlement Token Flash Loan Exploit",
  "Decentralized Exchange (DEX) Settlement Token Freezing Exploit",
  "Decentralized Exchange (DEX) Settlement Token Governance Exploit",
  "Decentralized Exchange (DEX) Settlement Token IncreaseAllowance Exploit",
  "Decentralized Exchange (DEX) Settlement Token Lending Exploit",
  "Decentralized Exchange (DEX) Settlement Token Lock Exploit",
  "Decentralized Exchange (DEX) Settlement Token Logic Exploit",
  "Decentralized Exchange (DEX) Settlement Token Mint Exploit",
  "Decentralized Exchange (DEX) Settlement Token Minting Exploit",
  "Decentralized Exchange (DEX) Settlement Token Overflows",
  "Decentralized Exchange (DEX) Settlement Token Permission Exploit",
  "Decentralized Exchange (DEX) Settlement Token Permit Exploit",
  "Decentralized Exchange (DEX) Settlement Token Proxy Exploit",
  "Decentralized Exchange (DEX) Settlement Token Reentrancy Exploit",
  "Decentralized Exchange (DEX) Settlement Token Staking Exploit",
  "Decentralized Exchange (DEX) Settlement Token Swap Exploit",
  "Decentralized Exchange (DEX) Settlement Token Transfer Exploit",
  "Decentralized Exchange (DEX) Settlement Token TransferFrom Exploit",
  "Decentralized Exchange (DEX) Settlement Token Underflows",
  "Decentralized Exchange (DEX) Settlement Token Unfreezing Exploit",
  "Decentralized Exchange (DEX) Settlement Token Unlock Exploit",
  "Decentralized Exchange (DEX) Settlement Token Upgrade Exploit",
  "Decentralized Exchange (DEX) Settlement Token Vesting Exploit",
  "Decentralized Exchange (DEX) Settlement Voting Exploit",
  "Decentralized Exchange (DEX) Smart Contract Exploit",
  "Decentralized Exchange (DEX) Smart Order Routing Exploit",
  "Decentralized Exchange (DEX) Token Swap Exploit",
  "Decentralized Finance (DeFi) Exploit",
  "Decentralized Finance (DeFi) Flash Loan Attack",
  "Decentralized Finance (DeFi) Flash Loan Exploit",
  "Decentralized Forum Exploit",
  "Decentralized Gaming Exploit",
  "Decentralized Identity (DID) Exploit",
  "Decentralized Insurance Exploit",
  "Decentralized Marketplace Exploit",
  "Decentralized Messaging Exploit",
  "Decentralized Prediction Market Exploit",
  "Decentralized Social Media Exploit",
  "Decentralized Storage Malware",
  "Decentralized Voting System Exploit",
  "Deep Learning Model Inversion Attack",
  "Deepfake Social Engineering",
  "Denial of Service (DoS)",
  "Deserialization Attack",
  "Dictionary Attack",
  "Differential Power Analysis (DPA)",
  "Digital Signage Hacking",
  "Digital Wallet Exploit",
  "Directory Traversal",
  "Distributed Denial of Service (DDoS)",
  "Domain Generation Algorithm (DGA) Exploit",
  "Domain Spoofing",
  "Drive-By .NET CLR Exploit",
  "Drive-By 5G Exploit",
  "Drive-By AI Exploit",
  "Drive-By API Rate Limiting Bypass",
  "Drive-By API Token Theft",
  "Drive-By ASIC Exploit",
  "Drive-By Accelerometer Exploit",
  "Drive-By Ad Filtering Exploit",
  "Drive-By Ambient Light Sensor Exploit",
  "Drive-By Anomaly Detection Exploit",
  "Drive-By Application Delivery Controller (ADC) Exploit",
  "Drive-By Archive Exploit",
  "Drive-By BIOS Exploit",
  "Drive-By BIOS Firmware Manipulation",
  "Drive-By Behavioral Analytics Exploit",
  "Drive-By Binary Exploit",
  "Drive-By Biometric Exploit",
  "Drive-By Blockchain Sybil Attack",
  "Drive-By Bluetooth Exploit",
  "Drive-By Bluetooth Sniffing",
  "Drive-By Boot Sector Exploit",
  "Drive-By Bootkit Exploit",
  "Drive-By Bootloader Exploit",
  "Drive-By Browser Autofill Exploit",
  "Drive-By Browser Bluetooth Exploit",
  "Drive-By Browser CORS Bypass",
  "Drive-By Browser Cache Exploit",
  "Drive-By Browser Camera Exploit",
  "Drive-By Browser Character Encoding Exploit",
  "Drive-By Browser Clipboard Exploit",
  "Drive-By Browser Content Security Policy (CSP) Bypass",
  "Drive-By Browser Content-Type Sniffing Exploit",
  "Drive-By Browser Cookie Exploit",
  "Drive-By Browser Extension Exploit",
  "Drive-By Browser Geolocation Exploit",
  "Drive-By Browser History Exploit",
  "Drive-By Browser Iframe Exploit",
  "Drive-By Browser IndexedDB Exploit",
  "Drive-By Browser Local Storage Exploit",
  "Drive-By Browser MIME Type Exploit",
  "Drive-By Browser Memory Exploit",
  "Drive-By Browser Microphone Exploit",
  "Drive-By Browser Plugin Exploit",
  "Drive-By Browser Popup Exploit",
  "Drive-By Browser Process Hijacking",
  "Drive-By Browser Push Notification Exploit",
  "Drive-By Browser Redirect Exploit",
  "Drive-By Browser Referrer Policy Exploit",
  "Drive-By Browser Same-Origin Policy (SOP) Bypass",
  "Drive-By Browser Sandbox Escape",
  "Drive-By Browser Screenshot Exploit",
  "Drive-By Browser Service Worker Exploit",
  "Drive-By Browser Session Hijacking",
  "Drive-By Browser Session Storage Exploit",
  "Drive-By Browser Storage Exploit",
  "Drive-By Browser Tab Exploit",
  "Drive-By Browser WebAssembly Exploit",
  "Drive-By Browser WebRTC Exploit",
  "Drive-By Browser WebSocket Exploit",
  "Drive-By Browser Window Exploit",
  "Drive-By Browser XSS Auditor Bypass",
  "Drive-By Bytecode Exploit",
  "Drive-By C++ VTable Poisoning",
  "Drive-By C++ Virtual Table Exploit",
  "Drive-By CSS Exploit",
  "Drive-By Canary Poisoning Attack",
  "Drive-By Certificate Authority Compromise",
  "Drive-By Certificate Pinning Bypass",
  "Drive-By Certificate Revocation List (CRL) Poisoning",
  "Drive-By Certificate Transparency Log Manipulation",
  "Drive-By Chakra Exploit",
  "Drive-By Cloud API Hijacking",
  "Drive-By Cloud Database Exploit",
  "Drive-By Cloud Function Injection",
  "Drive-By Cloud IAM Misconfiguration",
  "Drive-By Cloud Instance Metadata Exploit",
  "Drive-By Cloud Kubernetes Exploit",
  "Drive-By Cloud Metadata API Exploit",
  "Drive-By Cloud Multi-Cloud Exploit",
  "Drive-By Cloud Serverless Function Exploit",
  "Drive-By Cloud Service Mesh Exploit",
  "Drive-By Cloud Storage Bucket Exploit",
  "Drive-By Code Injection via Bytecode",
  "Drive-By Computer Vision Exploit",
  "Drive-By Constructive Jump-Oriented Programming",
  "Drive-By Content Filtering Exploit",
  "Drive-By Cryptography Exploit",
  "Drive-By DANE Exploit",
  "Drive-By DApp Front-End Exploit",
  "Drive-By DNS over HTTPS (DoH) Exploit",
  "Drive-By DNS over TLS (DoT) Exploit",
  "Drive-By DNSSEC Bypass",
  "Drive-By DOM Clobbering Attack",
  "Drive-By DOM Event Injection",
  "Drive-By DOM Mutation Exploit",
  "Drive-By DOM Traversal Exploit",
  "Drive-By DOM-Based Cross-Site Scripting (DOM-XSS)",
  "Drive-By Data AMQP Exploit",
  "Drive-By Data Aggregation Exploit",
  "Drive-By Data Analysis Exploit",
  "Drive-By Data Anonymization Exploit",
  "Drive-By Data Archiving Exploit",
  "Drive-By Data Array Exploit",
  "Drive-By Data Availability Exploit",
  "Drive-By Data Avro Exploit",
  "Drive-By Data BGP Exploit",
  "Drive-By Data BSON Exploit",
  "Drive-By Data Backup Exploit",
  "Drive-By Data Batch Exploit",
  "Drive-By Data Binary Exploit",
  "Drive-By Data Boolean Exploit",
  "Drive-By Data CBOR Exploit",
  "Drive-By Data CDP Exploit",
  "Drive-By Data CSV Exploit",
  "Drive-By Data Cap’n Proto Exploit",
  "Drive-By Data Cleartext Exploit",
  "Drive-By Data CoAP Exploit",
  "Drive-By Data Column-Family Exploit",
  "Drive-By Data Compliance Exploit",
  "Drive-By Data Compressed Exploit",
  "Drive-By Data Confidentiality Exploit",
  "Drive-By Data DHCP Exploit",
  "Drive-By Data DNS Exploit",
  "Drive-By Data DTLS Exploit",
  "Drive-By Data Decryption Exploit",
  "Drive-By Data Delta Exploit",
  "Drive-By Data Denormalization Exploit",
  "Drive-By Data Differential Exploit",
  "Drive-By Data Disposal Exploit",
  "Drive-By Data Document Exploit",
  "Drive-By Data EIGRP Exploit",
  "Drive-By Data Encrypted Exploit",
  "Drive-By Data Encryption Exploit",
  "Drive-By Data EtherChannel Exploit",
  "Drive-By Data FTP Bounce Exploit",
  "Drive-By Data FTP Exploit",
  "Drive-By Data Fabric Exploit",
  "Drive-By Data Flat Exploit",
  "Drive-By Data FlatBuffers Exploit",
  "Drive-By Data Flow Exploit",
  "Drive-By Data Full Exploit",
  "Drive-By Data Governance Exploit",
  "Drive-By Data Graph Exploit",
  "Drive-By Data GraphQL Exploit",
  "Drive-By Data H.323 Exploit",
  "Drive-By Data HTTP ACL Exploit",
  "Drive-By Data HTTP CHECKIN Exploit",
  "Drive-By Data HTTP CHECKOUT Exploit",
  "Drive-By Data HTTP CONNECT Exploit",
  "Drive-By Data HTTP COPY Exploit",
  "Drive-By Data HTTP DELETE Exploit",
  "Drive-By Data HTTP Exploit",
  "Drive-By Data HTTP HEAD Exploit",
  "Drive-By Data HTTP LOCK Exploit",
  "Drive-By Data HTTP MERGE Exploit",
  "Drive-By Data HTTP MERGEBASE Exploit",
  "Drive-By Data HTTP MKACTIVITY Exploit",
  "Drive-By Data HTTP MKAGGREGATE Exploit",
  "Drive-By Data HTTP MKANALYSIS Exploit",
  "Drive-By Data HTTP MKAPPLICATION Exploit",
  "Drive-By Data HTTP MKAPPOINTMENT Exploit",
  "Drive-By Data HTTP MKCALENDAR Exploit",
  "Drive-By Data HTTP MKCELL Exploit",
  "Drive-By Data HTTP MKCHART Exploit",
  "Drive-By Data HTTP MKCOL Exploit",
  "Drive-By Data HTTP MKCOLLECTION Exploit",
  "Drive-By Data HTTP MKCOLUMN Exploit",
  "Drive-By Data HTTP MKCOMPUTE Exploit",
  "Drive-By Data HTTP MKCONFIG Exploit",
  "Drive-By Data HTTP MKCONFIGURATION Exploit",
  "Drive-By Data HTTP MKCONTACTS Exploit",
  "Drive-By Data HTTP MKDASHBOARD Exploit",
  "Drive-By Data HTTP MKDATAADAPTIVE Exploit",
  "Drive-By Data HTTP MKDATAALERTING Exploit",
  "Drive-By Data HTTP MKDATAANALYTICS Exploit",
  "Drive-By Data HTTP MKDATAANDROID Exploit",
  "Drive-By Data HTTP MKDATAASSURANCE Exploit",
  "Drive-By Data HTTP MKDATAAUDITING Exploit",
  "Drive-By Data HTTP MKDATAAUTOMATION Exploit",
  "Drive-By Data HTTP MKDATAAVAILABILITY Exploit",
  "Drive-By Data HTTP MKDATABASE Exploit",
  "Drive-By Data HTTP MKDATABLACKLIST Exploit",
  "Drive-By Data HTTP MKDATABORDER Exploit",
  "Drive-By Data HTTP MKDATABOTTOM Exploit",
  "Drive-By Data HTTP MKDATABOTTOMLEFT Exploit",
  "Drive-By Data HTTP MKDATABOTTOMRIGHT Exploit",
  "Drive-By Data HTTP MKDATACATALOG Exploit",
  "Drive-By Data HTTP MKDATACENTER Exploit",
  "Drive-By Data HTTP MKDATACHART Exploit",
  "Drive-By Data HTTP MKDATACLEANING Exploit",
  "Drive-By Data HTTP MKDATACOLLABORATION Exploit",
  "Drive-By Data HTTP MKDATACOLOR Exploit",
  "Drive-By Data HTTP MKDATACOMPLIANCE Exploit",
  "Drive-By Data HTTP MKDATACONSOLIDATION Exploit",
  "Drive-By Data HTTP MKDATACONTROL Exploit",
  "Drive-By Data HTTP MKDATACUSTOM Exploit",
  "Drive-By Data HTTP MKDATADASHBOARD Exploit",
  "Drive-By Data HTTP MKDATADISTRIBUTION Exploit",
  "Drive-By Data HTTP MKDATAEFFICIENCY Exploit",
  "Drive-By Data HTTP MKDATAENRICHMENT Exploit",
  "Drive-By Data HTTP MKDATAETHERNET Exploit",
  "Drive-By Data HTTP MKDATAEXCHANGE Exploit",
  "Drive-By Data HTTP MKDATAEXPLORE Exploit",
  "Drive-By Data HTTP MKDATAFILTER Exploit",
  "Drive-By Data HTTP MKDATAFILTERING Exploit",
  "Drive-By Data HTTP MKDATAFIXED Exploit",
  "Drive-By Data HTTP MKDATAFLUID Exploit",
  "Drive-By Data HTTP MKDATAFONT Exploit",
  "Drive-By Data HTTP MKDATAFONT SIZE Exploit",
  "Drive-By Data HTTP MKDATAFORMAT Exploit",
  "Drive-By Data HTTP MKDATAFORTIFICATION Exploit",
  "Drive-By Data HTTP MKDATAFULLWIDTH Exploit",
  "Drive-By Data HTTP MKDATAFUSION Exploit",
  "Drive-By Data HTTP MKDATAFUTURE Exploit",
  "Drive-By Data HTTP MKDATAGOVERNANCE Exploit",
  "Drive-By Data HTTP MKDATAGRAPH Exploit",
  "Drive-By Data HTTP MKDATAGROUP Exploit",
  "Drive-By Data HTTP MKDATAHALFHORIZONTAL Exploit",
  "Drive-By Data HTTP MKDATAHALFVERTICAL Exploit",
  "Drive-By Data HTTP MKDATAHALFWIDTH Exploit",
  "Drive-By Data HTTP MKDATAINNOVATION Exploit",
  "Drive-By Data HTTP MKDATAINTEGRATION Exploit",
  "Drive-By Data HTTP MKDATAINTERNET Exploit",
  "Drive-By Data HTTP MKDATAIOS Exploit",
  "Drive-By Data HTTP MKDATAJOIN Exploit",
  "Drive-By Data HTTP MKDATALABEL Exploit",
  "Drive-By Data HTTP MKDATALANDSCAPE Exploit",
  "Drive-By Data HTTP MKDATALEFT Exploit",
  "Drive-By Data HTTP MKDATALEGACY Exploit",
  "Drive-By Data HTTP MKDATALINUX Exploit",
  "Drive-By Data HTTP MKDATALOGGING Exploit",
  "Drive-By Data HTTP MKDATAMAC Exploit",
  "Drive-By Data HTTP MKDATAMANAGEMENT Exploit",
  "Drive-By Data HTTP MKDATAMANIPULATION Exploit",
  "Drive-By Data HTTP MKDATAMAP Exploit",
  "Drive-By Data HTTP MKDATAMAPPING Exploit",
  "Drive-By Data HTTP MKDATAMARGIN Exploit",
  "Drive-By Data HTTP MKDATAMART Exploit",
  "Drive-By Data HTTP MKDATAMIDDLE Exploit",
  "Drive-By Data HTTP MKDATAMIGRATION Exploit",
  "Drive-By Data HTTP MKDATAMINING Exploit",
  "Drive-By Data HTTP MKDATAMOBILE Exploit",
  "Drive-By Data HTTP MKDATAMODEL Exploit",
  "Drive-By Data HTTP MKDATAMODERN Exploit",
  "Drive-By Data HTTP MKDATAMONITORING Exploit",
  "Drive-By Data HTTP MKDATANETWORK Exploit",
  "Drive-By Data HTTP MKDATANEXTGEN Exploit",
  "Drive-By Data HTTP MKDATANOTIFICATION Exploit",
  "Drive-By Data HTTP MKDATAPADDING Exploit",
  "Drive-By Data HTTP MKDATAPANEL Exploit",
  "Drive-By Data HTTP MKDATAPC Exploit",
  "Drive-By Data HTTP MKDATAPERFORMANCE Exploit",
  "Drive-By Data HTTP MKDATAPERSISTENCE Exploit",
  "Drive-By Data HTTP MKDATAPIPING Exploit",
  "Drive-By Data HTTP MKDATAPIVOT Exploit",
  "Drive-By Data HTTP MKDATAPOINT Exploit",
  "Drive-By Data HTTP MKDATAPORTRAIT Exploit",
  "Drive-By Data HTTP MKDATAPRIVACY Exploit",
  "Drive-By Data HTTP MKDATAPRIVATE Exploit",
  "Drive-By Data HTTP MKDATAPROCESSING Exploit",
  "Drive-By Data HTTP MKDATAPRODUCTIVITY Exploit",
  "Drive-By Data HTTP MKDATAPROTECTION Exploit",
  "Drive-By Data HTTP MKDATAPUBLIC Exploit",
  "Drive-By Data HTTP MKDATAQUALITY Exploit",
  "Drive-By Data HTTP MKDATAREAL Exploit",
  "Drive-By Data HTTP MKDATARECEIVER Exploit",
  "Drive-By Data HTTP MKDATARELIABILITY Exploit",
  "Drive-By Data HTTP MKDATARESILIENCY Exploit",
  "Drive-By Data HTTP MKDATARESPONSIVE Exploit",
  "Drive-By Data HTTP MKDATARIGHT Exploit",
  "Drive-By Data HTTP MKDATARISK Exploit",
  "Drive-By Data HTTP MKDATARUNTIME Exploit",
  "Drive-By Data HTTP MKDATASAFE Exploit",
  "Drive-By Data HTTP MKDATASCALABILITY Exploit",
  "Drive-By Data HTTP MKDATASECURITY Exploit",
  "Drive-By Data HTTP MKDATASECURITYALERTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYASSESSMENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYAUDIT Exploit",
  "Drive-By Data HTTP MKDATASECURITYAWARENESS Exploit",
  "Drive-By Data HTTP MKDATASECURITYBEST PRACTICES Exploit",
  "Drive-By Data HTTP MKDATASECURITYBREACH Exploit",
  "Drive-By Data HTTP MKDATASECURITYCERTIFICATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYCOMPLIANCE Exploit",
  "Drive-By Data HTTP MKDATASECURITYCOMPLIANCEAUDIT Exploit",
  "Drive-By Data HTTP MKDATASECURITYCONTINUITY Exploit",
  "Drive-By Data HTTP MKDATASECURITYCONTROLS Exploit",
  "Drive-By Data HTTP MKDATASECURITYEVENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYFORTIFICATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYFRAMEWORK Exploit",
  "Drive-By Data HTTP MKDATASECURITYGUIDELINES Exploit",
  "Drive-By Data HTTP MKDATASECURITYINCIDENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYLOG Exploit",
  "Drive-By Data HTTP MKDATASECURITYMITIGATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYMONITORING Exploit",
  "Drive-By Data HTTP MKDATASECURITYPENETRATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYPOLICY Exploit",
  "Drive-By Data HTTP MKDATASECURITYPROCEDURES Exploit",
  "Drive-By Data HTTP MKDATASECURITYRECOVERY Exploit",
  "Drive-By Data HTTP MKDATASECURITYREGULATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYRESILIENCY Exploit",
  "Drive-By Data HTTP MKDATASECURITYREVIEW Exploit",
  "Drive-By Data HTTP MKDATASECURITYRISK Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYALERTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYASSESSMENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYBEST PRACTICES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYCERTIFICATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYCOMPLIANCEAUDIT Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYCONTINUITY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYCONTROLS Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYGUIDELINES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYMONITORING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYPOLICY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYPROCEDURES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYRECOVERY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYALERTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYASSESSMENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYBEST PRACTICES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYCERTIFICATION Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYCOMPLIANCEAUDIT Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYCONTINUITY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYCONTROLS Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYGUIDELINES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYMONITORING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYPOLICY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYPROCEDURES Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYRECOVERY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYALERTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYASSESSMENT Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYCONTINUITY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYMONITORING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYRECOVERY Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYSECURITYTESTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYSECURITYTESTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSECURITYTESTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYSTANDARD Exploit",
  "Drive-By Data HTTP MKDATASECURITYTESTING Exploit",
  "Drive-By Data HTTP MKDATASECURITYTRAINING Exploit",
  "Drive-By Data HTTP MKDATASECURITYVIOLATION Exploit",
  "Drive-By Data HTTP MKDATASENSITIVITY Exploit",
  "Drive-By Data HTTP MKDATASERIES Exploit",
  "Drive-By Data HTTP MKDATASORT Exploit",
  "Drive-By Data HTTP MKDATASOURCE Exploit",
  "Drive-By Data HTTP MKDATASTREAM Exploit",
  "Drive-By Data HTTP MKDATASTYLE Exploit",
  "Drive-By Data HTTP MKDATASUBTITLE Exploit",
  "Drive-By Data HTTP MKDATATABLATE Exploit",
  "Drive-By Data HTTP MKDATATABLE Exploit",
  "Drive-By Data HTTP MKDATATABLET Exploit",
  "Drive-By Data HTTP MKDATATARGET Exploit",
  "Drive-By Data HTTP MKDATATEXT Exploit",
  "Drive-By Data HTTP MKDATATHREE COLUMN Exploit",
  "Drive-By Data HTTP MKDATATIMESHIFT Exploit",
  "Drive-By Data HTTP MKDATATITLE Exploit",
  "Drive-By Data HTTP MKDATATOP Exploit",
  "Drive-By Data HTTP MKDATATOPLEFT Exploit",
  "Drive-By Data HTTP MKDATATOPRIGHT Exploit",
  "Drive-By Data HTTP MKDATATRANSFORMATION Exploit",
  "Drive-By Data HTTP MKDATATWO COLUMN Exploit",
  "Drive-By Data HTTP MKDATATYPE Exploit",
  "Drive-By Data HTTP MKDATAVALIDATION Exploit",
  "Drive-By Data HTTP MKDATAVIEW Exploit",
  "Drive-By Data HTTP MKDATAVIRTUAL Exploit",
  "Drive-By Data HTTP MKDATAVISUALIZATION Exploit",
  "Drive-By Data HTTP MKDATAVIZ Exploit",
  "Drive-By Data HTTP MKDATAWAREHOUSE Exploit",
  "Drive-By Data HTTP MKDATAWEB Exploit",
  "Drive-By Data HTTP MKDATAWHITELIST Exploit",
  "Drive-By Data HTTP MKDATAWIFI Exploit",
  "Drive-By Data HTTP MKDATAWINDOWS Exploit",
  "Drive-By Data HTTP MKDATAWIRELESS Exploit",
  "Drive-By Data HTTP MKDEVICE Exploit",
  "Drive-By Data HTTP MKDOC Exploit",
  "Drive-By Data HTTP MKDRAFT Exploit",
  "Drive-By Data HTTP MKEVENT Exploit",
  "Drive-By Data HTTP MKEXCEPT Exploit",
  "Drive-By Data HTTP MKGRAPH Exploit",
  "Drive-By Data HTTP MKGROUP Exploit",
  "Drive-By Data HTTP MKINDEX Exploit",
  "Drive-By Data HTTP MKINTERSECT Exploit",
  "Drive-By Data HTTP MKJOIN Exploit",
  "Drive-By Data HTTP MKLICENSE Exploit",
  "Drive-By Data HTTP MKLOM Exploit",
  "Drive-By Data HTTP MKMAP Exploit",
  "Drive-By Data HTTP MKMEMBER Exploit",
  "Drive-By Data HTTP MKMETADATA Exploit",
  "Drive-By Data HTTP MKNETWORK Exploit",
  "Drive-By Data HTTP MKNOTE Exploit",
  "Drive-By Data HTTP MKPERMISSION Exploit",
  "Drive-By Data HTTP MKPOLICY Exploit",
  "Drive-By Data HTTP MKPOWERBI Exploit",
  "Drive-By Data HTTP MKPROFILE Exploit",
  "Drive-By Data HTTP MKQUERY Exploit",
  "Drive-By Data HTTP MKREPORT Exploit",
  "Drive-By Data HTTP MKREQUEST Exploit",
  "Drive-By Data HTTP MKRESOURCE Exploit",
  "Drive-By Data HTTP MKRESOURCEGROUP Exploit",
  "Drive-By Data HTTP MKROLE Exploit",
  "Drive-By Data HTTP MKROW Exploit",
  "Drive-By Data HTTP MKRULE Exploit",
  "Drive-By Data HTTP MKSCHEMA Exploit",
  "Drive-By Data HTTP MKSERVICE Exploit",
  "Drive-By Data HTTP MKSETTINGS Exploit",
  "Drive-By Data HTTP MKSTATE Exploit",
  "Drive-By Data HTTP MKSTATUS Exploit",
  "Drive-By Data HTTP MKTABLE Exploit",
  "Drive-By Data HTTP MKTABLEAU Exploit",
  "Drive-By Data HTTP MKTAGNAME Exploit",
  "Drive-By Data HTTP MKTASK Exploit",
  "Drive-By Data HTTP MKUNION Exploit",
  "Drive-By Data HTTP MKVERSION Exploit",
  "Drive-By Data HTTP MKVIEW Exploit",
  "Drive-By Data HTTP MKWORKSPACE Exploit",
  "Drive-By Data HTTP MOVE Exploit",
  "Drive-By Data HTTP OPTIONS Exploit",
  "Drive-By Data HTTP ORDERPATCH Exploit",
  "Drive-By Data HTTP PATCH Exploit",
  "Drive-By Data HTTP PROPFIND Exploit",
  "Drive-By Data HTTP PROPPATCH Exploit",
  "Drive-By Data HTTP PUT Exploit",
  "Drive-By Data HTTP REPORT Exploit",
  "Drive-By Data HTTP SEARCH Exploit",
  "Drive-By Data HTTP TRACE Exploit",
  "Drive-By Data HTTP TRACK Exploit",
  "Drive-By Data HTTP UNLOCK Exploit",
  "Drive-By Data HTTP UPDATE Exploit",
  "Drive-By Data HTTP VERSION-CONTROL Exploit",
  "Drive-By Data HTTP/2 Exploit",
  "Drive-By Data HTTP/3 Exploit",
  "Drive-By Data HTTPS Exploit",
  "Drive-By Data Hierarchical Exploit",
  "Drive-By Data IAX Exploit",
  "Drive-By Data IMAP Exploit",
  "Drive-By Data IRC Exploit",
  "Drive-By Data Incremental Exploit",
  "Drive-By Data Indexed Exploit",
  "Drive-By Data Integration Exploit",
  "Drive-By Data Integrity Exploit",
  "Drive-By Data JSON Exploit",
  "Drive-By Data Key-Value Exploit",
  "Drive-By Data LACP Exploit",
  "Drive-By Data LLDP Exploit",
  "Drive-By Data Lake Exploit",
  "Drive-By Data Linking Exploit",
  "Drive-By Data Log Exploit",
  "Drive-By Data MEGACO Exploit",
  "Drive-By Data MGCP Exploit",
  "Drive-By Data MPLS Exploit",
  "Drive-By Data MQTT Exploit",
  "Drive-By Data MSTP Exploit",
  "Drive-By Data Masking Exploit",
  "Drive-By Data Mesh Exploit",
  "Drive-By Data Metadata Exploit",
  "Drive-By Data Migration Exploit",
  "Drive-By Data Mining Exploit",
  "Drive-By Data MsgPack Exploit",
  "Drive-By Data Multimedia Exploit",
  "Drive-By Data NTP Exploit",
  "Drive-By Data NoSQL Exploit",
  "Drive-By Data Non-Relational Exploit",
  "Drive-By Data Normalization Exploit",
  "Drive-By Data Numeric Exploit",
  "Drive-By Data ORC Exploit",
  "Drive-By Data OSPF Exploit",
  "Drive-By Data Obfuscated Exploit",
  "Drive-By Data Obfuscation Exploit",
  "Drive-By Data Object Exploit",
  "Drive-By Data On-Demand Exploit",
  "Drive-By Data POP3 Exploit",
  "Drive-By Data Parquet Exploit",
  "Drive-By Data Partitioning Exploit",
  "Drive-By Data Pipeline Exploit",
  "Drive-By Data Privacy Exploit",
  "Drive-By Data Protocol Buffers Exploit",
  "Drive-By Data Pseudonymization Exploit",
  "Drive-By Data QUIC Exploit",
  "Drive-By Data REST API Exploit",
  "Drive-By Data RIP Exploit",
  "Drive-By Data RPC Exploit",
  "Drive-By Data RSTP Exploit",
  "Drive-By Data RTCP Exploit",
  "Drive-By Data RTP Exploit",
  "Drive-By Data Real-Time Exploit",
  "Drive-By Data Recovery Exploit",
  "Drive-By Data Redundancy Exploit",
  "Drive-By Data Referencing Exploit",
  "Drive-By Data Relational Exploit",
  "Drive-By Data Replication Exploit",
  "Drive-By Data Reporting Exploit",
  "Drive-By Data Retention Exploit",
  "Drive-By Data SBE Exploit",
  "Drive-By Data SCP Exploit",
  "Drive-By Data SFTP Exploit",
  "Drive-By Data SHTTP Exploit",
  "Drive-By Data SIP Exploit",
  "Drive-By Data SMTP Exploit",
  "Drive-By Data SNMP Exploit",
  "Drive-By Data SNTP Exploit",
  "Drive-By Data SOAP API Exploit",
  "Drive-By Data SQL Exploit",
  "Drive-By Data SSH Exploit",
  "Drive-By Data SSL Exploit",
  "Drive-By Data SSP Exploit",
  "Drive-By Data SSV Exploit",
  "Drive-By Data STP Exploit",
  "Drive-By Data Scheduled Exploit",
  "Drive-By Data Sensor Exploit",
  "Drive-By Data Sharding Exploit",
  "Drive-By Data Snapshot Exploit",
  "Drive-By Data Spatial Exploit",
  "Drive-By Data Stream Exploit",
  "Drive-By Data Summarization Exploit",
  "Drive-By Data TLS Exploit",
  "Drive-By Data TOML Exploit",
  "Drive-By Data TSV Exploit",
  "Drive-By Data Telnet Exploit",
  "Drive-By Data Temporal Exploit",
  "Drive-By Data Text Exploit",
  "Drive-By Data Thrift Exploit",
  "Drive-By Data Time-Series Exploit",
  "Drive-By Data Transaction Exploit",
  "Drive-By Data Transformation Exploit",
  "Drive-By Data UBJSON Exploit",
  "Drive-By Data Uncompressed Exploit",
  "Drive-By Data Unencrypted Exploit",
  "Drive-By Data Unindexed Exploit",
  "Drive-By Data VLAN Exploit",
  "Drive-By Data VTP Exploit",
  "Drive-By Data Versioning Exploit",
  "Drive-By Data Visualization Exploit",
  "Drive-By Data Warehousing Exploit",
  "Drive-By Data WebSocket Exploit",
  "Drive-By Data XML Exploit",
  "Drive-By Data XMPP Exploit",
  "Drive-By Data YAML Exploit",
  "Drive-By Data gRPC Exploit",
  "Drive-By Decentralized Network Disruption",
  "Drive-By Decryption Exploit",
  "Drive-By Deep Learning Exploit",
  "Drive-By Digital Certificate Manipulation",
  "Drive-By Disk Exploit",
  "Drive-By DoH/DNS Exploit",
  "Drive-By Download",
  "Drive-By Dynamic Link Library (DLL) Injection",
  "Drive-By ELF File Exploit",
  "Drive-By Embedded System Exploit",
  "Drive-By Encrypted DNS Exploit",
  "Drive-By Encryption Exploit",
  "Drive-By Event Exploit",
  "Drive-By Exception Exploit",
  "Drive-By Exploit",
  "Drive-By FPGA Exploit",
  "Drive-By Facial Recognition Exploit",
  "Drive-By File Descriptor Exploit",
  "Drive-By File Handle Exploit",
  "Drive-By File Locking Exploit",
  "Drive-By File System Exploit",
  "Drive-By Filesystem API Abuse",
  "Drive-By Firewall Exploit",
  "Drive-By Firmware Exploit",
  "Drive-By Flash Exploit",
  "Drive-By Fraud Detection Exploit",
  "Drive-By Function Pointer Exploit",
  "Drive-By GPS Exploit",
  "Drive-By GPT Exploit",
  "Drive-By Generative Adversarial Network (GAN) Exploit",
  "Drive-By Gyroscope Exploit",
  "Drive-By HTML Exploit",
  "Drive-By Hardware Security Module (HSM) Exploit",
  "Drive-By Hardware-Based Keylogging",
  "Drive-By Hashing Exploit",
  "Drive-By Humidity Sensor Exploit",
  "Drive-By Hypervisor Level Malware",
  "Drive-By ISO File Exploit",
  "Drive-By Identity Federation Exploit",
  "Drive-By Image Exploit",
  "Drive-By Image Recognition Exploit",
  "Drive-By Indirect Jump Exploit",
  "Drive-By Inter-Process Communication (IPC) Exploit",
  "Drive-By Intrusion Detection Exploit",
  "Drive-By Intrusion Prevention Exploit",
  "Drive-By JIT Spraying Attack",
  "Drive-By JIT-ROP Exploit",
  "Drive-By JSON Exploit",
  "Drive-By JWT Token Tampering",
  "Drive-By Java Virtual Machine (JVM) Exploit",
  "Drive-By JavaScript Engine Exploit",
  "Drive-By JavaScript Exploit",
  "Drive-By JavaScript Garbage Collection Exploit",
  "Drive-By JavaScript Just-In-Time (JIT) Exploit",
  "Drive-By Jump-Following Exploit",
  "Drive-By Jump-Oriented Programming (JOP) Chain",
  "Drive-By Jump-Table Manipulation",
  "Drive-By Just-In-Time (JIT) ROP Attack",
  "Drive-By LTE Exploit",
  "Drive-By LoRaWAN Exploit",
  "Drive-By Load Balancer Exploit",
  "Drive-By MBR Exploit",
  "Drive-By Mach-O File Exploit",
  "Drive-By Machine Learning Exploit",
  "Drive-By Magnetometer Exploit",
  "Drive-By Malware Download",
  "Drive-By Malware Filtering Exploit",
  "Drive-By Memory-Mapped File Exploit",
  "Drive-By Mesh Network Exploit",
  "Drive-By Message Queue Exploit",
  "Drive-By Microservice Exploit",
  "Drive-By Motion Sensor Exploit",
  "Drive-By Multi-Factor Authentication (MFA) Bypass",
  "Drive-By Multi-Tenant Exploit",
  "Drive-By Mutex Exploit",
  "Drive-By NB-IoT Exploit",
  "Drive-By NFC Exploit",
  "Drive-By NFC Relay Attack",
  "Drive-By Named Pipe Exploit",
  "Drive-By Natural Language Processing (NLP) Exploit",
  "Drive-By Network Exploit",
  "Drive-By Network Interface Card (NIC) Exploit",
  "Drive-By Neural Network Exploit",
  "Drive-By OAuth Consent Screen Exploit",
  "Drive-By OAuth Token Hijacking",
  "Drive-By Object Detection Exploit",
  "Drive-By Office Document Exploit",
  "Drive-By Onion Router Exploit",
  "Drive-By Onion Routing Exploit",
  "Drive-By Over-the-Air (OTA) Update Exploit",
  "Drive-By PDF Exploit",
  "Drive-By PE File Exploit",
  "Drive-By PHP Zend Engine Exploit",
  "Drive-By Partition Exploit",
  "Drive-By Pattern Recognition Exploit",
  "Drive-By Phishing",
  "Drive-By Phishing Filtering Exploit",
  "Drive-By Predictive Analytics Exploit",
  "Drive-By Pressure Sensor Exploit",
  "Drive-By Proximity Sensor Exploit",
  "Drive-By Proxy Chain Exploit",
  "Drive-By Proxy Exploit",
  "Drive-By Public Key Infrastructure (PKI) Exploit",
  "Drive-By Python Bytecode Exploit",
  "Drive-By QR Code Injection",
  "Drive-By RAR Exploit",
  "Drive-By RFID Exploit",
  "Drive-By RFID Spoofing",
  "Drive-By Recommendation Engine Exploit",
  "Drive-By Reflection-based Code Injection",
  "Drive-By Reinforcement Learning Exploit",
  "Drive-By Return-to-GOT Attack",
  "Drive-By Return-to-PLT Attack",
  "Drive-By Reverse Engineering Attack",
  "Drive-By Reverse Proxy Exploit",
  "Drive-By Ruby Interpreter Exploit",
  "Drive-By Runtime Code Modification",
  "Drive-By SAML Token Theft",
  "Drive-By SSL Renegotiation Exploit",
  "Drive-By SVG Exploit",
  "Drive-By Script Injection",
  "Drive-By Secure Boot Bypass",
  "Drive-By Secure Boot Exploit",
  "Drive-By Self-Modifying Code Exploit",
  "Drive-By Semaphore Exploit",
  "Drive-By Sentiment Analysis Exploit",
  "Drive-By Session Token Prediction",
  "Drive-By Shared Memory Exploit",
  "Drive-By Sigfox Exploit",
  "Drive-By Signal Exploit",
  "Drive-By Single Sign-On (SSO) Exploit",
  "Drive-By Smart Card Exploit",
  "Drive-By Smart Contract Fuzzing",
  "Drive-By Software Update Exploit",
  "Drive-By Spam Filtering Exploit",
  "Drive-By Speech Recognition Exploit",
  "Drive-By SpiderMonkey Exploit",
  "Drive-By Stack Canaries Exploit",
  "Drive-By Stack Canary Bypass",
  "Drive-By Stack Canary Exploit",
  "Drive-By Stack Frame Manipulation",
  "Drive-By Stack Overflow Exploit",
  "Drive-By Stack Probing Attack",
  "Drive-By Stack ROP Exploit",
  "Drive-By Stack Smashing Bypass",
  "Drive-By Stack Tracing Exploit",
  "Drive-By Stack Unwinding Attack",
  "Drive-By Steganography Exploit",
  "Drive-By System Firmware Rootkit",
  "Drive-By TLS Fingerprinting Exploit",
  "Drive-By TPM Exploit",
  "Drive-By Temperature Sensor Exploit",
  "Drive-By Text Recognition Exploit",
  "Drive-By Token Replay Attack",
  "Drive-By Tokenization Exploit",
  "Drive-By Tor Exit Node Exploit",
  "Drive-By Tor Exploit",
  "Drive-By Transformer Model Exploit",
  "Drive-By Trusted Platform Module (TPM) Exploit",
  "Drive-By UEFI Exploit",
  "Drive-By UEFI Firmware Exploit",
  "Drive-By UNIX Domain Socket Exploit",
  "Drive-By V8 Engine Exploit",
  "Drive-By VPN Encryption Exploit",
  "Drive-By VPN Exploit",
  "Drive-By VTable Hijacking",
  "Drive-By Video Exploit",
  "Drive-By Virtual Desktop Infrastructure (VDI) Exploit",
  "Drive-By Virtual File System Exploit",
  "Drive-By Virtual Function Exploit",
  "Drive-By Virtual Machine Escape",
  "Drive-By Voice Recognition Exploit",
  "Drive-By Volume Exploit",
  "Drive-By WAF Rule Exploit",
  "Drive-By Web Application Firewall (WAF) Bypass",
  "Drive-By Web of Trust Exploit",
  "Drive-By Wi-Fi 6 Exploit",
  "Drive-By Wi-Fi 7 Exploit",
  "Drive-By Wireless Exploit",
  "Drive-By XML Exploit",
  "Drive-By Z-Wave Exploit",
  "Drive-By ZIP Exploit",
  "Drive-By Zigbee Exploit",
  "Dumpster Diving",
  "E-Ink Device Malware",
  "EDNS0 Client Subnet Attack",
  "Eavesdropping Attack",
  "Edge Computing Attack",
  "Electric Vehicle Charging Station Exploit",
  "Electromagnetic Analysis (EMA)",
  "Electronic Paper Display Exploit",
  "Enumeration",
  "Evil Routing Advertisement",
  "Evil Twin Attack",
  "Exploit Kit Deployment",
  "Exploitation",
  "FREAK Attack",
  "Fake News Propagation",
  "Fake Profiles Creation",
  "Fake Software Update",
  "File Inclusion",
  "Filecoin Exploit",
  "Fileless Malware",
  "Fileless Malware Execution",
  "Firmware Downgrade Attack",
  "Firmware Malware Injection",
  "Firmware Overwrite",
  "Firmware Reverse Engineering",
  "Firmware Signature Bypass",
  "Firmware Tampering",
  "Fitness Tracker Malware",
  "Footprinting",
  "Foreshadow Attack",
  "Foreshadow Variant 1",
  "Foreshadow-NG Attack",
  "Foreshadow-NG Variant A",
  "Foreshadow-NG Variant B",
  "Foreshadow-ST Attack",
  "Foreshadow-ST Variant A",
  "Foreshadow-ST Variant B",
  "Format String Attack",
  "Format String Vulnerability",
  "Formjacking",
  "Fraggle Attack",
  "GPU Mining Malware",
  "GRE Tunnel Exploitation",
  "Gadgets in Memory",
  "Ghost Load",
  "Golden Ticket Attack",
  "Golden Ticket Forgery",
  "HTTP Flood",
  "HTTP Parameter Pollution (HPP)",
  "HTTP Request Smuggling",
  "HTTP Response Splitting",
  "HTTP/2 Flood",
  "Hardware Backdoor",
  "Hardware Keylogger",
  "Hardware Rootkit",
  "Hardware Supply Chain Attack",
  "Hardware Trojans",
  "Hardware-Based Malware",
  "Health Monitoring Device Exploit",
  "Heap Overflow",
  "Heap Spraying",
  "Heartbleed Attack",
  "Hijacked Wi-Fi Networks",
  "Holographic Display Exploit",
  "Home Automation System Exploit",
  "ICMP Address Mask Reply Flood",
  "ICMP Address Mask Request Flood",
  "ICMP Datagram Too Big Flood",
  "ICMP Datagram Too Big Reply Flood",
  "ICMP Destination Unreachable Flood",
  "ICMP Echo Reply Flood",
  "ICMP Echo Request Flood",
  "ICMP Flood",
  "ICMP Flood Attack",
  "ICMP Netmask Reply Flood",
  "ICMP Netmask Request Flood",
  "ICMP Redirect Flood",
  "ICMP Redirect Reply Flood",
  "ICMP Router Advertisement Flood",
  "ICMP Router Advertisement Reply Flood",
  "ICMP Router Discovery Flood",
  "ICMP Router Discovery Reply Flood",
  "ICMP Router Solicitation Flood",
  "ICMP Router Solicitation Reply Flood",
  "ICMP Source Quench Flood",
  "ICMP Source Quench Reply Flood",
  "ICMP Timestamp Reply Flood",
  "ICMP Timestamp Request Flood",
  "IKE Exploitation",
  "IP Fragmentation Attack",
  "IP Header Manipulation",
  "IP Spoofing",
  "IPFS Node Exploit",
  "IPsec Authentication Downgrade",
  "IPsec Cipher Downgrade",
  "IPsec DoS Attack",
  "IPsec Encryption Downgrade",
  "IPsec Exploitation",
  "IPsec Key Exchange Manipulation",
  "IPsec NAT Traversal Exploitation",
  "IPsec Protocol Downgrade",
  "IPsec Reassembly Attack",
  "IPsec Replay Attack",
  "IPsec Security Association Hijacking",
  "IPsec Spoofing",
  "IPsec Tunnel Interface Exploitation",
  "Immersive Technology Malware",
  "Impersonation Attack",
  "Industrial Control System (ICS) Attack",
  "Industrial IoT Exploit",
  "Influence Campaign",
  "Information Gathering",
  "Initial Coin Offering (ICO) Fraud",
  "Insecure Direct Object References (IDOR)",
  "Insider Privilege Escalation",
  "Insider Threat",
  "Insider Threat in DeFi Platform",
  "Insufficient Logging & Monitoring",
  "Integer Overflow",
  "Interactive Kiosk Malware",
  "IoT Botnet Recruitment",
  "IoT DDoS",
  "IoT Device 5G Exploit",
  "IoT Device Actuator Exploit",
  "IoT Device Automotive System Exploit",
  "IoT Device Autonomous System Exploit",
  "IoT Device Blockchain Integration Exploit",
  "IoT Device Bluetooth Exploit",
  "IoT Device Building Management System Exploit",
  "IoT Device Cloud Integration Exploit",
  "IoT Device Control System Exploit",
  "IoT Device Data Analytics Exploit",
  "IoT Device Data Availability Exploit",
  "IoT Device Data Integrity Exploit",
  "IoT Device Data Privacy Exploit",
  "IoT Device Decentralized Network Exploit",
  "IoT Device Default Password Exploit",
  "IoT Device Edge Computing Exploit",
  "IoT Device Electric Vehicle Charging Station Exploit",
  "IoT Device Energy Management System Exploit",
  "IoT Device Exploitation",
  "IoT Device Firmware Exploit",
  "IoT Device Firmware Update Bypass",
  "IoT Device Hardcoded Credentials Exploit",
  "IoT Device Healthcare Device Exploit",
  "IoT Device Industrial Control System Exploit",
  "IoT Device LTE Exploit",
  "IoT Device LoRaWAN Exploit",
  "IoT Device Machine Learning Exploit",
  "IoT Device Medical Device Exploit",
  "IoT Device Mesh Network Exploit",
  "IoT Device NB-IoT Exploit",
  "IoT Device Network Exploit",
  "IoT Device Over-the-Air (OTA) Update Exploit",
  "IoT Device Physical Tampering",
  "IoT Device Renewable Energy System Exploit",
  "IoT Device SCADA System Exploit",
  "IoT Device Sensor Manipulation",
  "IoT Device Sigfox Exploit",
  "IoT Device Smart Air Conditioner Exploit",
  "IoT Device Smart City Infrastructure Exploit",
  "IoT Device Smart Coffee Maker Exploit",
  "IoT Device Smart Dishwasher Exploit",
  "IoT Device Smart Door Lock Exploit",
  "IoT Device Smart Garden Exploit",
  "IoT Device Smart Grid Exploit",
  "IoT Device Smart Heater Exploit",
  "IoT Device Smart Home Exploit",
  "IoT Device Smart Light Bulb Exploit",
  "IoT Device Smart Lighting System Exploit",
  "IoT Device Smart Meter Exploit",
  "IoT Device Smart Mirror Exploit",
  "IoT Device Smart Oven Exploit",
  "IoT Device Smart Pet Activity Analytics Exploit",
  "IoT Device Smart Pet Activity Monitoring Plan Exploit",
  "IoT Device Smart Pet Activity Reporting Exploit",
  "IoT Device Smart Pet Activity Tracking Exploit",
  "IoT Device Smart Pet Adoption Exploit",
  "IoT Device Smart Pet Behavior Analysis Exploit",
  "IoT Device Smart Pet Behavior Analytics Exploit",
  "IoT Device Smart Pet Behavior Monitoring Plan Exploit",
  "IoT Device Smart Pet Behavior Plan Exploit",
  "IoT Device Smart Pet Behavior Reporting Exploit",
  "IoT Device Smart Pet Breeding Exploit",
  "IoT Device Smart Pet Camera Exploit",
  "IoT Device Smart Pet Collar Exploit",
  "IoT Device Smart Pet Emergency Alert Exploit",
  "IoT Device Smart Pet Emergency Plan Exploit",
  "IoT Device Smart Pet Entertainment Exploit",
  "IoT Device Smart Pet Exercise Analytics Exploit",
  "IoT Device Smart Pet Exercise Monitoring Plan Exploit",
  "IoT Device Smart Pet Exercise Plan Exploit",
  "IoT Device Smart Pet Exercise Reporting Exploit",
  "IoT Device Smart Pet Feeder Exploit",
  "IoT Device Smart Pet Genetic Exploit",
  "IoT Device Smart Pet Groomer Exploit",
  "IoT Device Smart Pet Health Analytics Exploit",
  "IoT Device Smart Pet Health Insurance Exploit",
  "IoT Device Smart Pet Health Monitor Exploit",
  "IoT Device Smart Pet Health Monitoring Plan Exploit",
  "IoT Device Smart Pet Health Plan Exploit",
  "IoT Device Smart Pet Health Reporting Exploit",
  "IoT Device Smart Pet Insurance Exploit",
  "IoT Device Smart Pet Liability Insurance Exploit",
  "IoT Device Smart Pet Life Insurance Exploit",
  "IoT Device Smart Pet Lost Tracking Exploit",
  "IoT Device Smart Pet Medical Alert Exploit",
  "IoT Device Smart Pet Medical Plan Exploit",
  "IoT Device Smart Pet Nutrition Analytics Exploit",
  "IoT Device Smart Pet Nutrition Exploit",
  "IoT Device Smart Pet Nutrition Monitoring Plan Exploit",
  "IoT Device Smart Pet Nutrition Plan Exploit",
  "IoT Device Smart Pet Nutrition Reporting Exploit",
  "IoT Device Smart Pet Owner Exploit",
  "IoT Device Smart Pet Property Insurance Exploit",
  "IoT Device Smart Pet Sitter Exploit",
  "IoT Device Smart Pet Stress Analytics Exploit",
  "IoT Device Smart Pet Stress Detection Exploit",
  "IoT Device Smart Pet Stress Monitoring Plan Exploit",
  "IoT Device Smart Pet Stress Reporting Exploit",
  "IoT Device Smart Pet Supply Store Exploit",
  "IoT Device Smart Pet Tracker Exploit",
  "IoT Device Smart Pet Trainer Exploit",
  "IoT Device Smart Pet Training Exploit",
  "IoT Device Smart Pet Travel Insurance Exploit",
  "IoT Device Smart Pet Vaccination Plan Exploit",
  "IoT Device Smart Pet Vaccination Tracking Exploit",
  "IoT Device Smart Pet Veterinarian Exploit",
  "IoT Device Smart Pet Wellness Analytics Exploit",
  "IoT Device Smart Pet Wellness Monitoring Exploit",
  "IoT Device Smart Pet Wellness Monitoring Plan Exploit",
  "IoT Device Smart Pet Wellness Plan Exploit",
  "IoT Device Smart Pet Wellness Reporting Exploit",
  "IoT Device Smart Plug Exploit",
  "IoT Device Smart Refrigerator Exploit",
  "IoT Device Smart Robot Exploit",
  "IoT Device Smart Security System Exploit",
  "IoT Device Smart Speaker Exploit",
  "IoT Device Smart Surveillance Camera Exploit",
  "IoT Device Smart TV Exploit",
  "IoT Device Smart Thermostat Exploit",
  "IoT Device Smart Traffic System Exploit",
  "IoT Device Smart Vacuum Cleaner Exploit",
  "IoT Device Smart Washing Machine Exploit",
  "IoT Device Smart Water Heater Exploit",
  "IoT Device Supply Chain Exploit",
  "IoT Device Transportation System Exploit",
  "IoT Device Unauthorized Access Exploit",
  "IoT Device Wi-Fi Exploit",
  "IoT Device Wireless Protocol Exploit",
  "IoT Device Z-Wave Exploit",
  "IoT Device Zigbee Exploit",
  "IoT Firmware Exploit",
  "IoT Mesh Network Exploit",
  "JOP Chain Construction",
  "JSON Hijacking",
  "JSON Injection",
  "JWT Exploitation",
  "Jump-Oriented Programming (JOP)",
  "Kerberoasting",
  "Keylogger Deployment",
  "Keylogging",
  "Known Vulnerability Exploitation",
  "Kubernetes Cluster Exploit",
  "LDAP Injection",
  "LSASS Memory Extraction",
  "Land Attack",
  "Lateral Movement",
  "Local File Inclusion (LFI)",
  "Logic Bomb",
  "Logic Bomb Deployment",
  "Logjam Attack",
  "Loopback Attack",
  "Lucky Thirteen Attack",
  "MAC Spoofing",
  "Machine Learning Model Poisoning",
  "Malicious Browser Extensions",
  "Malicious Mobile Apps",
  "Malicious USB Devices",
  "Malvertising",
  "Malware",
  "Malware Encryption",
  "Man-in-the-Browser (MitB)",
  "Man-in-the-Middle (MITM) Attack",
  "Man-in-the-Middle (MitM)",
  "Man-in-the-Mobile (MitMo)",
  "Medical Device Exploit",
  "Meltdown Attack",
  "Meltdown Variant",
  "Meltdown-BR Attack",
  "Meltdown-BR Variant A",
  "Meltdown-BR Variant B",
  "Meltdown-PK Attack",
  "Meltdown-PK Variant A",
  "Meltdown-PK Variant B",
  "Meltdown-PR Attack",
  "Meltdown-PR Variant A",
  "Meltdown-PR Variant B",
  "Meltdown-UG Attack",
  "Meltdown-UG Variant A",
  "Meltdown-UG Variant B",
  "Memcached Amplification",
  "Microcontroller Exploitation",
  "Microphone Hijacking",
  "Mimikatz Attack",
  "Mixed Reality (MR) Device Exploit",
  "Multi-Cloud Resource Exploitation",
  "Multi-Factor Authentication Bypass",
  "NFC Exploitation",
  "NFT Marketplace Exploit",
  "NTDS.dit Extraction",
  "NTP Amplification",
  "NXDOMAIN Attack",
  "Network Spoofing",
  "Network Time Protocol (NTP) Amplification",
  "NoSQL Injection",
  "OAuth Misuse",
  "Open Redirect Attack",
  "Optical Side-Channel",
  "PLC Hacking",
  "POODLE Attack",
  "Pass-the-Hash",
  "Pass-the-Ticket",
  "Password Spraying",
  "Path Traversal",
  "Persistence",
  "Phantom Load",
  "Pharming",
  "Phishing",
  "Ping Flood Attack",
  "Ping of Death",
  "Pivoting",
  "Point of Sale (POS) Malware",
  "Post-Exploitation",
  "Post-Quantum Cryptography Attack",
  "Power Analysis Attack",
  "Pretexting",
  "Privilege Escalation",
  "Programmable Logic Controller (PLC) Exploit",
  "Protocol Attack",
  "Psychological Manipulation",
  "QR Code Phishing",
  "Quantum Algorithm Exploit",
  "Quantum Bit Flip Attack",
  "Quantum Channel Exploit",
  "Quantum Coherence Attack",
  "Quantum Computing Side-Channel Attack",
  "Quantum Cryptanalysis Attack",
  "Quantum Entanglement Exploit",
  "Quantum Entanglement Swapping Attack",
  "Quantum Error Correction Exploit",
  "Quantum Key Distribution (QKD) Exploit",
  "Quantum Key Escrow Exploit",
  "Quantum Key Refresh Attack",
  "Quantum Key Reuse Attack",
  "Quantum Measurement Exploit",
  "Quantum Memory Exploit",
  "Quantum Network Exploit",
  "Quantum No-Cloning Attack",
  "Quantum Noise Exploit",
  "Quantum Phase Flip Attack",
  "Quantum Random Number Generator Exploit",
  "Quantum Repeater Exploit",
  "Quantum Secure Direct Communication Attack",
  "Quantum Superposition Attack",
  "Quantum Supremacy Attack",
  "Quantum Teleportation Attack",
  "Quantum Teleportation Exploit",
  "Quantum-based Authentication Exploit",
  "Quantum-based Authorization Exploit",
  "Quantum-based Data Accessibility Exploit",
  "Quantum-based Data Aggregation Exploit",
  "Quantum-based Data Analysis Exploit",
  "Quantum-based Data Annotation Exploit",
  "Quantum-based Data Anonymization Exploit",
  "Quantum-based Data Archiving Exploit",
  "Quantum-based Data Authenticity Exploit",
  "Quantum-based Data Availability Exploit",
  "Quantum-based Data Backup Exploit",
  "Quantum-based Data Business Continuity Exploit",
  "Quantum-based Data Classification Exploit",
  "Quantum-based Data Compliance Exploit",
  "Quantum-based Data Confidentiality Exploit",
  "Quantum-based Data Consensus Exploit",
  "Quantum-based Data Consistency Exploit",
  "Quantum-based Data Context Exploit",
  "Quantum-based Data Dashboards Exploit",
  "Quantum-based Data Destruction Exploit",
  "Quantum-based Data Disaster Recovery Exploit",
  "Quantum-based Data Disposal Exploit",
  "Quantum-based Data Ecosystem Exploit",
  "Quantum-based Data Fabric Exploit",
  "Quantum-based Data Fault Tolerance Exploit",
  "Quantum-based Data Filtering Exploit",
  "Quantum-based Data Freshness Exploit",
  "Quantum-based Data Generation Exploit",
  "Quantum-based Data Governance Exploit",
  "Quantum-based Data Granularity Exploit",
  "Quantum-based Data Hiding Exploit",
  "Quantum-based Data High Availability Exploit",
  "Quantum-based Data Incident Response Exploit",
  "Quantum-based Data Indexing Exploit",
  "Quantum-based Data Integration Exploit",
  "Quantum-based Data Integrity Exploit",
  "Quantum-based Data Intent Exploit",
  "Quantum-based Data Interoperability Exploit",
  "Quantum-based Data Knowledge Graph Exploit",
  "Quantum-based Data Labeling Exploit",
  "Quantum-based Data Lakes Exploit",
  "Quantum-based Data Load Balancing Exploit",
  "Quantum-based Data Manipulation Exploit",
  "Quantum-based Data Meaning Exploit",
  "Quantum-based Data Mesh Exploit",
  "Quantum-based Data Migration Exploit",
  "Quantum-based Data Mining Exploit",
  "Quantum-based Data Models Exploit",
  "Quantum-based Data Ontology Exploit",
  "Quantum-based Data Partitioning Exploit",
  "Quantum-based Data Pipelines Exploit",
  "Quantum-based Data Portability Exploit",
  "Quantum-based Data Pragmatics Exploit",
  "Quantum-based Data Privacy Exploit",
  "Quantum-based Data Processing Exploit",
  "Quantum-based Data Pseudonymization Exploit",
  "Quantum-based Data Purging Exploit",
  "Quantum-based Data Recovery Exploit",
  "Quantum-based Data Redundancy Exploit",
  "Quantum-based Data Reliability Exploit",
  "Quantum-based Data Replication Exploit",
  "Quantum-based Data Reporting Exploit",
  "Quantum-based Data Retention Exploit",
  "Quantum-based Data Risk Assessment Exploit",
  "Quantum-based Data Sampling Exploit",
  "Quantum-based Data Schema Exploit",
  "Quantum-based Data Security Alerting Exploit",
  "Quantum-based Data Security Attack Vector",
  "Quantum-based Data Security Audit Exploit",
  "Quantum-based Data Security Breach Exploit",
  "Quantum-based Data Security Compliance Exploit",
  "Quantum-based Data Security Control Exploit",
  "Quantum-based Data Security Detection Exploit",
  "Quantum-based Data Security Exploit Adware",
  "Quantum-based Data Security Exploit Backdoor",
  "Quantum-based Data Security Exploit Botnet",
  "Quantum-based Data Security Exploit Chain",
  "Quantum-based Data Security Exploit Cryptominer",
  "Quantum-based Data Security Exploit Data Stealer",
  "Quantum-based Data Security Exploit Deliverable",
  "Quantum-based Data Security Exploit Downloader",
  "Quantum-based Data Security Exploit Dropper",
  "Quantum-based Data Security Exploit Exploit Anti-Analysis Exploit",
  "Quantum-based Data Security Exploit Exploit Chain Loader",
  "Quantum-based Data Security Exploit Exploit Command and Control",
  "Quantum-based Data Security Exploit Exploit Covering Tracks",
  "Quantum-based Data Security Exploit Exploit Data Exfiltration",
  "Quantum-based Data Security Exploit Exploit Delivery Exploit",
  "Quantum-based Data Security Exploit Exploit Detection Bypass",
  "Quantum-based Data Security Exploit Exploit Encryption Exploit",
  "Quantum-based Data Security Exploit Exploit Evasion Exploit",
  "Quantum-based Data Security Exploit Exploit Kit Loader",
  "Quantum-based Data Security Exploit Exploit Lateral Movement",
  "Quantum-based Data Security Exploit Exploit Log Manipulation",
  "Quantum-based Data Security Exploit Exploit Metamorphism Exploit",
  "Quantum-based Data Security Exploit Exploit Obfuscation Exploit",
  "Quantum-based Data Security Exploit Exploit Packing Exploit",
  "Quantum-based Data Security Exploit Exploit Payload Delivery",
  "Quantum-based Data Security Exploit Exploit Persistence",
  "Quantum-based Data Security Exploit Exploit Polymorphism Exploit",
  "Quantum-based Data Security Exploit Exploit Privilege Escalation",
  "Quantum-based Data Security Exploit Exploit Signature",
  "Quantum-based Data Security Exploit Exploit Stealth Exploit",
  "Quantum-based Data Security Exploit Exploit Technique",
  "Quantum-based Data Security Exploit Exploit Variant",
  "Quantum-based Data Security Exploit Framework",
  "Quantum-based Data Security Exploit Keylogger",
  "Quantum-based Data Security Exploit Kit",
  "Quantum-based Data Security Exploit Malware",
  "Quantum-based Data Security Exploit Payload",
  "Quantum-based Data Security Exploit Ransomware",
  "Quantum-based Data Security Exploit Rootkit",
  "Quantum-based Data Security Exploit Script",
  "Quantum-based Data Security Exploit Spyware",
  "Quantum-based Data Security Exploit Tool",
  "Quantum-based Data Security Exploit Trojan",
  "Quantum-based Data Security Exploit Virus",
  "Quantum-based Data Security Exploit Worm",
  "Quantum-based Data Security Framework Exploit",
  "Quantum-based Data Security Incident Exploit",
  "Quantum-based Data Security Mitigation Exploit",
  "Quantum-based Data Security Monitoring Exploit",
  "Quantum-based Data Security Policy Exploit",
  "Quantum-based Data Security Prevention Exploit",
  "Quantum-based Data Security Response Exploit",
  "Quantum-based Data Security Standard Exploit",
  "Quantum-based Data Segregation Exploit",
  "Quantum-based Data Semantics Exploit",
  "Quantum-based Data Sharding Exploit",
  "Quantum-based Data Sorting Exploit",
  "Quantum-based Data Streams Exploit",
  "Quantum-based Data Structure Exploit",
  "Quantum-based Data Summarization Exploit",
  "Quantum-based Data Synchronization Exploit",
  "Quantum-based Data Syntax Exploit",
  "Quantum-based Data Synthesis Exploit",
  "Quantum-based Data Tagging Exploit",
  "Quantum-based Data Taxonomy Exploit",
  "Quantum-based Data Threat Intelligence Exploit",
  "Quantum-based Data Transformation Exploit",
  "Quantum-based Data Usability Exploit",
  "Quantum-based Data Validity Exploit",
  "Quantum-based Data Visualization Exploit",
  "Quantum-based Data Warehouses Exploit",
  "Quantum-based Decryption Exploit",
  "Quantum-based Encryption Exploit",
  "Quantum-based Signature Exploit",
  "Quantum-based Steganography Exploit",
  "Quantum-resistant Algorithm Exploit",
  "Quid Pro Quo",
  "RFID Skimming",
  "ROBOT Attack",
  "ROP Chain Construction",
  "Race Condition",
  "Race Condition Exploit",
  "Radio Frequency Jamming",
  "Rainbow Table Attack",
  "Ransomware",
  "Ransomware Deployment",
  "Reconnaissance",
  "Reflection Attack",
  "Remote Code Execution",
  "Remote Desktop Protocol (RDP) Exploit",
  "Remote File Inclusion (RFI)",
  "Renewable Energy System Exploit",
  "Replay Attack",
  "Resource Exhaustion",
  "Return-Oriented Programming (ROP)",
  "Return-to-libc Attack",
  "Reverse Shell Deployment",
  "Rogue Access Points",
  "Rootkit",
  "Rootkit Installation",
  "Route Flapping",
  "Routing Protocol Exploit",
  "Routing Table Poisoning",
  "Rowhammer Attack",
  "SAM Database Extraction",
  "SCADA System Exploitation",
  "SDN Controller Exploit",
  "SMB Relay Attack",
  "SQL Injection",
  "SSDP Amplification",
  "SSL Certificate Chain Manipulation",
  "SSL Certificate Forgery",
  "SSL Certificate Pinning Bypass",
  "SSL Certificate Revocation Bypass",
  "SSL Cipher Suite Downgrade",
  "SSL Renegotiation Attack",
  "SSL Renegotiation DoS",
  "SSL Session Hijacking",
  "SSL Session Resumption Attack",
  "SSL Stripping",
  "SSL Version Downgrade",
  "SSL/TLS Exploitation",
  "SSL/TLS Padding Oracle Attack",
  "SSL/TLS RC4 Bias Attack",
  "SSL/TLS RC4 Bias Vulnerability",
  "SSL/TLS RC4 Cipher Attack",
  "SSL/TLS RC4 Cipher Vulnerability",
  "SSL/TLS RC4 Collision Attack",
  "SSL/TLS RC4 Collision Vulnerability",
  "SSL/TLS RC4 Exploitation",
  "SSL/TLS RC4 Key Attack",
  "SSL/TLS RC4 Key Vulnerability",
  "SSL/TLS RC4 MAC Attack",
  "SSL/TLS RC4 MAC Vulnerability",
  "SSL/TLS RC4 RC4 Bias",
  "SSL/TLS RC4 RC4 Cipher",
  "SSL/TLS RC4 RC4 Cipher Suite",
  "SSL/TLS RC4 RC4 Cipher Suite Attack",
  "SSL/TLS RC4 RC4 Cipher Suite Breach",
  "SSL/TLS RC4 RC4 Cipher Suite Break",
  "SSL/TLS RC4 RC4 Cipher Suite DoS",
  "SSL/TLS RC4 RC4 Cipher Suite Downgrade",
  "SSL/TLS RC4 RC4 Cipher Suite Exploit",
  "SSL/TLS RC4 RC4 Cipher Suite Exploitation",
  "SSL/TLS RC4 RC4 Cipher Suite Hack",
  "SSL/TLS RC4 RC4 Cipher Suite Penetration",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerability",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerability Exploit",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Attack",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Breach",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Break",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable DoS",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Exploit",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Exploitation",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Hack",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Penetration",
  "SSL/TLS RC4 RC4 Cipher Suite Vulnerable Vulnerability",
  "SSL/TLS RC4 RC4 Collision",
  "SSL/TLS RC4 RC4 Exploitation",
  "SSL/TLS RC4 RC4 Key",
  "SSL/TLS RC4 RC4 MAC",
  "SSL/TLS RC4 RC4 Replay",
  "SSL/TLS RC4 RC4 Session",
  "SSL/TLS RC4 RC4 Stream",
  "SSL/TLS RC4 RC4 Vulnerability",
  "SSL/TLS RC4 Replay Attack",
  "SSL/TLS RC4 Replay Vulnerability",
  "SSL/TLS RC4 Session Vulnerability",
  "SSL/TLS RC4 Stream Attack",
  "SSL/TLS RC4 Stream Vulnerability",
  "SSL/TLS RC4 Vulnerability Exploitation",
  "SYN Flood",
  "Scanning",
  "Security Misconfiguration",
  "Self-Service Kiosk Exploit",
  "Sensitive Data Exposure",
  "Sensor Tampering",
  "Server-Side Request Forgery (SSRF)",
  "Serverless Function Code Injection",
  "Serverless Function Exploitation",
  "Service Account Abuse",
  "Service Mesh Data Interception",
  "Session Fixation",
  "Session Hijacking",
  "Shoulder Surfing",
  "Sia Storage Exploit",
  "Side-Channel Attack",
  "Side-Channel Timing",
  "Sidejacking",
  "Silver Ticket Attack",
  "Silver Ticket Forgery",
  "Simple Power Analysis (SPA)",
  "Skimming Attack",
  "Slowloris",
  "Smart Air Conditioner Exploit",
  "Smart Air Purifier Exploit",
  "Smart Alarm System Exploit",
  "Smart Appliance Malware",
  "Smart Aquarium Controller Exploit",
  "Smart Beehive Exploit",
  "Smart Bird Cage Exploit",
  "Smart Ceiling Fan Exploit",
  "Smart Chicken Coop Exploit",
  "Smart City Infrastructure Exploit",
  "Smart Clothing Malware",
  "Smart Coffee Maker Exploit",
  "Smart Contract Dependency Attack",
  "Smart Contract Exploit",
  "Smart Contract Logic Exploit",
  "Smart Contract Overflow",
  "Smart Contract Proxy Exploit",
  "Smart Contract Reentrancy Attack",
  "Smart Contract Replay Attack",
  "Smart Contract Underflow",
  "Smart Contract Upgradability Exploit",
  "Smart Device Hijacking",
  "Smart Dishwasher Exploit",
  "Smart Door Lock Exploit",
  "Smart Doorbell Exploit",
  "Smart Dryer Exploit",
  "Smart Fence Exploit",
  "Smart Fish Tank Exploit",
  "Smart Garage Door Exploit",
  "Smart Garden System Exploit",
  "Smart Gate Exploit",
  "Smart Glasses Exploit",
  "Smart Grid Attack",
  "Smart Grid Data Tampering",
  "Smart HVAC System Exploit",
  "Smart Hammam Exploit",
  "Smart Heater Exploit",
  "Smart Helmets Malware",
  "Smart Home Device Attack",
  "Smart Home Hub Exploit",
  "Smart Hot Tub Exploit",
  "Smart Irrigation System Exploit",
  "Smart Jewelry Exploit",
  "Smart Lawn Sprinkler Exploit",
  "Smart Light Bulb Exploit",
  "Smart Light Switch Exploit",
  "Smart Lighting System Exploit",
  "Smart Lock Exploit",
  "Smart Meter Firmware Exploit",
  "Smart Meter Tampering",
  "Smart Mirror Exploit",
  "Smart Office Device Exploit",
  "Smart Oven Exploit",
  "Smart Pet Activity Analytics Exploit",
  "Smart Pet Activity Dashboard Exploit",
  "Smart Pet Activity Monitoring Plan Exploit",
  "Smart Pet Activity Reporting Exploit",
  "Smart Pet Activity Tracking Exploit",
  "Smart Pet Activity Visualization Exploit",
  "Smart Pet Adoption Exploit",
  "Smart Pet Air Quality Exploit",
  "Smart Pet Behavior Analytics Exploit",
  "Smart Pet Behavior Dashboard Exploit",
  "Smart Pet Behavior Modification Exploit",
  "Smart Pet Behavior Monitoring Plan Exploit",
  "Smart Pet Behavior Plan Exploit",
  "Smart Pet Behavior Reporting Exploit",
  "Smart Pet Behavior Visualization Exploit",
  "Smart Pet Behavioral Analysis Exploit",
  "Smart Pet Breed Exploit",
  "Smart Pet Breeding Exploit",
  "Smart Pet Camera Exploit",
  "Smart Pet Cleaning System Exploit",
  "Smart Pet Collar Exploit",
  "Smart Pet Comfort System Exploit",
  "Smart Pet Communication Exploit",
  "Smart Pet Diet Control Exploit",
  "Smart Pet Disability Insurance Exploit",
  "Smart Pet Drinking System Exploit",
  "Smart Pet Emergency Alert Exploit",
  "Smart Pet Emergency Plan Exploit",
  "Smart Pet Emotion Recognition Exploit",
  "Smart Pet Enclosure Exploit",
  "Smart Pet Entertainment System Exploit",
  "Smart Pet Exercise Analytics Exploit",
  "Smart Pet Exercise Dashboard Exploit",
  "Smart Pet Exercise Monitoring Plan Exploit",
  "Smart Pet Exercise Plan Exploit",
  "Smart Pet Exercise Reporting Exploit",
  "Smart Pet Exercise Scheduling Exploit",
  "Smart Pet Exercise System Exploit",
  "Smart Pet Exercise Visualization Exploit",
  "Smart Pet Feed Monitoring Exploit",
  "Smart Pet Feeder Exploit",
  "Smart Pet Feeding System Exploit",
  "Smart Pet Genetic Exploit",
  "Smart Pet Groomer Exploit",
  "Smart Pet Grooming System Exploit",
  "Smart Pet Habitat Exploit",
  "Smart Pet Health Analytics Exploit",
  "Smart Pet Health Dashboard Exploit",
  "Smart Pet Health Diagnosis Exploit",
  "Smart Pet Health Insurance Exploit",
  "Smart Pet Health Monitor Exploit",
  "Smart Pet Health Monitoring Plan Exploit",
  "Smart Pet Health Plan Exploit",
  "Smart Pet Health Reporting Exploit",
  "Smart Pet Health Tracking Exploit",
  "Smart Pet Health Visualization Exploit",
  "Smart Pet Humidity Control Exploit",
  "Smart Pet Insurance Exploit",
  "Smart Pet Interaction System Exploit",
  "Smart Pet Liability Insurance Exploit",
  "Smart Pet Life Insurance Exploit",
  "Smart Pet Light Control Exploit",
  "Smart Pet Litter Box Exploit",
  "Smart Pet Lost Pet Tracking Exploit",
  "Smart Pet Medical Alert Exploit",
  "Smart Pet Medical Plan Exploit",
  "Smart Pet Noise Control Exploit",
  "Smart Pet Nutrition Analytics Exploit",
  "Smart Pet Nutrition Dashboard Exploit",
  "Smart Pet Nutrition Exploit",
  "Smart Pet Nutrition Monitoring Plan Exploit",
  "Smart Pet Nutrition Plan Exploit",
  "Smart Pet Nutrition Planning Exploit",
  "Smart Pet Nutrition Reporting Exploit",
  "Smart Pet Nutrition Visualization Exploit",
  "Smart Pet Owner Exploit",
  "Smart Pet Playtime Exploit",
  "Smart Pet Property Insurance Exploit",
  "Smart Pet Punishment System Exploit",
  "Smart Pet Reward System Exploit",
  "Smart Pet Shop Exploit",
  "Smart Pet Sitter Exploit",
  "Smart Pet Socialization Exploit",
  "Smart Pet Species Exploit",
  "Smart Pet Storage System Exploit",
  "Smart Pet Stress Analytics Exploit",
  "Smart Pet Stress Dashboard Exploit",
  "Smart Pet Stress Detection Exploit",
  "Smart Pet Stress Monitoring Plan Exploit",
  "Smart Pet Stress Reporting Exploit",
  "Smart Pet Stress Visualization Exploit",
  "Smart Pet Supply Store Exploit",
  "Smart Pet Temperature Control Exploit",
  "Smart Pet Tracker Exploit",
  "Smart Pet Trainer Exploit",
  "Smart Pet Training Scheduling Exploit",
  "Smart Pet Training System Exploit",
  "Smart Pet Travel Insurance Exploit",
  "Smart Pet Treatment Recommendation Exploit",
  "Smart Pet Vaccination Plan Exploit",
  "Smart Pet Vaccination Tracking Exploit",
  "Smart Pet Veterinarian Exploit",
  "Smart Pet Waste Management Exploit",
  "Smart Pet Water Quality Exploit",
  "Smart Pet Wellness Analytics Exploit",
  "Smart Pet Wellness Dashboard Exploit",
  "Smart Pet Wellness Monitoring Exploit",
  "Smart Pet Wellness Monitoring Plan Exploit",
  "Smart Pet Wellness Plan Exploit",
  "Smart Pet Wellness Reporting Exploit",
  "Smart Pet Wellness Visualization Exploit",
  "Smart Plug Exploit",
  "Smart Pool Controller Exploit",
  "Smart Refrigerator Exploit",
  "Smart Rings Malware",
  "Smart Robot Exploit",
  "Smart Sauna Exploit",
  "Smart Security Camera Exploit",
  "Smart Smoke Alarm Exploit",
  "Smart Smoke Detector Exploit",
  "Smart Spa Controller Exploit",
  "Smart Speaker Exploit",
  "Smart TV Exploit",
  "Smart Terrarium Controller Exploit",
  "Smart Textiles Exploit",
  "Smart Thermostat Exploit",
  "Smart Toaster Exploit",
  "Smart Traffic System Exploit",
  "Smart Vacuum Cleaner Exploit",
  "Smart Vehicle Hacking",
  "Smart Washer/Dryer Exploit",
  "Smart Washing Machine Exploit",
  "Smart Watches Exploit",
  "Smart Water Heater Exploit",
  "Smart Water Valve Exploit",
  "Smishing",
  "Smurf Attack",
  "Social Engineering",
  "Social Media Takeover",
  "Software-Defined Networking (SDN) Exploit",
  "Spear Phishing",
  "Spectre Attack",
  "Spectre Variant 1",
  "Spectre Variant 2",
  "Spectre-BTB Attack",
  "Spectre-BTB-V1",
  "Spectre-BTB-V1 Variant A",
  "Spectre-BTB-V1 Variant B",
  "Spectre-BTB-V2",
  "Spectre-BTB-V2 Variant A",
  "Spectre-BTB-V2 Variant B",
  "Spectre-BTB-V3",
  "Spectre-BTB-V3 Variant A",
  "Spectre-BTB-V3 Variant B",
  "Spectre-STL Attack",
  "Spectre-STL-V1",
  "Spectre-STL-V1 Variant A",
  "Spectre-STL-V1 Variant B",
  "Spectre-STL-V2",
  "Spectre-STL-V2 Variant A",
  "Spectre-STL-V2 Variant B",
  "Spectre-STL-V3",
  "Spectre-STL-V3 Variant A",
  "Spectre-STL-V3 Variant B",
  "Spectre-V1",
  "Spectre-V1 Variant A",
  "Spectre-V1 Variant B",
  "Spectre-V2",
  "Spectre-V2 Variant A",
  "Spectre-V2 Variant B",
  "SpectreRSB Attack",
  "SpectreRSB-V1",
  "SpectreRSB-V1 Variant A",
  "SpectreRSB-V1 Variant B",
  "SpectreRSB-V2",
  "SpectreRSB-V2 Variant A",
  "SpectreRSB-V2 Variant B",
  "SpectreRSB-V3",
  "SpectreRSB-V3 Variant A",
  "SpectreRSB-V3 Variant B",
  "Speculative Execution Attack",
  "Spyware",
  "Spyware Installation",
  "Stablecoin Attack",
  "Stack Overflow",
  "Storj Storage Exploit",
  "Supply Chain Attack",
  "Supply Chain Compromise",
  "Swarm Storage Exploit",
  "Synthetic Asset Exploit",
  "TCP Hijacking",
  "TCP Reset Attack",
  "TCP Sequence Prediction",
  "TLS Certificate Chain Manipulation",
  "TLS Certificate Forgery",
  "TLS Certificate Pinning Bypass",
  "TLS Certificate Revocation Bypass",
  "TLS Cipher Suite Downgrade",
  "TLS Renegotiation Attack",
  "TLS Renegotiation DoS",
  "TLS Session Hijacking",
  "TLS Session Resumption Attack",
  "TLS Version Downgrade",
  "Tailgating",
  "Teardrop Attack",
  "Telehealth Platform Exploit",
  "Telehealth System Attack",
  "Telematics Gateway Exploit",
  "Telematics System Exploit",
  "Template Injection",
  "Ticket Granting Ticket (TGT) Attack",
  "Time Bomb",
  "Timing Attack",
  "Token Sale Exploit",
  "Trojan Horse",
  "UDP Flood",
  "UDP Flood Attack",
  "URL Spoofing",
  "Unified Communications Exploit",
  "Unvalidated Redirects and Forwards",
  "Urban IoT Device Exploit",
  "Vehicular Ad-hoc Network (VANET) Attack",
  "Video Conferencing Malware",
  "Virtual Reality (VR) Device Exploit",
  "Virtualization Escape",
  "Virus",
  "Vishing",
  "Voice Assistant Malware",
  "Volume-Based Attack",
  "Vulnerability Exploitation",
  "Watering Hole Attack",
  "Wearable Device Exploitation",
  "Wearable Device Malware",
  "Webcam Hijacking",
  "Whaling",
  "Wi-Fi Eavesdropping",
  "Wi-Fi Jamming",
  "Wireless Sniffing",
  "Worm",
  "XML External Entity (XXE) Attack",
  "XML Injection",
  "Zero-Day Cloud Function Exploit",
  "Zero-Day Exploit",
  "Zero-Day Exploit in DeFi Protocol",
  "Zero-Day Vulnerability",
  "Zero-Day Vulnerability Exploit",
  "ZombieLoad Attack",
  "ZombieLoad Variant",
  "ZombieLoad-V1 Attack",
  "ZombieLoad-V1 Variant A",
  "ZombieLoad-V1 Variant B",
  "ZombieLoad-V2 Attack",
  "ZombieLoad-V2 Variant A",
  "ZombieLoad-V2 Variant B",
  "ZombieLoad-V3 Attack",
  "ZombieLoad-V3 Variant A",
  "ZombieLoad-V3 Variant B"
];

================
File: frontend/my-react-app/src/components/pages/ScenarioPage/ScenarioSphere.css
================
/*******************************************/
/* Imports & Base Styles                   */
/*******************************************/
@import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap');

body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

/* Global styling for the scenario body */
.scenario-body {
  position: relative;
  background: #000; /* fallback black */
  background-image: url('backround5.jpg');
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  background-attachment: fixed;
  font-family: 'VT323', monospace;
  color: #FFF;
  width: 100%;
  min-height: 100vh;
  box-sizing: border-box;
}

/*******************************************/
/* (Optional) Animated Binary Overlay      */
/* (You can uncomment or add styles if used)*/
/*******************************************/
@keyframes binaryScroll {
  from { transform: translate(-10%, -10%) rotate(-15deg); }
  to { transform: translate(-20%, -20%) rotate(-15deg); }
}

/*******************************************/
/* Main Container                          */
/*******************************************/
.scenario-container {
  position: relative;
  z-index: 1;
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  max-width: 1200px;
  margin: 40px auto;
  padding: 20px;
}

/* Input & Output sections */
.scenario-input-section,
.scenario-output-container {
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid #FF0000;
  border-radius: 12px;
  padding: 20px;
  flex: 1 1 100%;
  box-sizing: border-box;
}

/*******************************************/
/* Titles & Taglines                       */
/*******************************************/
.scenario-title {
  font-size: 3.5em;
  text-align: center;
  margin-bottom: 10px;
  color: #FF0000;
  text-shadow: 0.125rem 0.125rem #ffffff;
}

.scenario-tagline {
  font-size: 1.2em;
  text-align: center;
  margin-bottom: 30px;
  color: #FFF;
}

/*******************************************/
/* Input Wrapper, Fields, Selects, Sliders */
/*******************************************/
.scenario-input-wrapper {
  position: relative;
  display: flex;
  flex-direction: column;
  margin-bottom: 20px;
}

.scenario-input-wrapper label {
  font-size: 1.3rem;
  color: #FFF;
  margin-bottom: 5px;
}

.scenario-input-field {
  padding: 12px;
  border: 2px solid #FF0000;
  border-radius: 8px;
  background: #111;
  color: #FFF;
  font-size: 1rem;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.scenario-input-field:focus {
  outline: none;
  border-color: #FF5555;
  box-shadow: 0 0 8px #FF5555;
}

/*******************************************/
/* Slider                                  */
/*******************************************/
.scenario-input-slider {
  -webkit-appearance: none;
  width: 100%;
  height: 8px;
  background: #222;
  border-radius: 4px;
  outline: none;
  margin-top: 10px;
}
.scenario-input-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: #FF0000;
  border: 2px solid #FFF;
  cursor: pointer;
  transition: transform 0.3s ease, background 0.3s ease;
}
.scenario-input-slider::-webkit-slider-thumb:hover {
  transform: scale(1.1);
  background: #FF5555;
}
.scenario-input-slider::-moz-range-thumb {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: #FF0000;
  border: 2px solid #FFF;
  cursor: pointer;
  transition: transform 0.3s ease, background 0.3s ease;
}
.scenario-input-slider::-moz-range-thumb:hover {
  transform: scale(1.1);
  background: #FF5555;
}

/*******************************************/
/* Threat Intensity Value                  */
/*******************************************/
.threat-intensity-value {
  margin-top: 5px;
  font-size: 1.3rem;
  color: #FFF;
  text-align: right;
}

/*******************************************/
/* Suggestions List                        */
/*******************************************/
.suggestions-list {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: #222;
  border: 1px solid #FF0000;
  max-height: 200px;
  overflow-y: auto;
  z-index: 1000;
  list-style: none;
  padding: 0;
  margin: 5px 0 0 0;
  border-radius: 0 0 8px 8px;
}

.suggestions-list li {
  padding: 10px;
  cursor: pointer;
  color: #FFF;
  transition: background 0.2s ease;
}
.suggestions-list li:hover,
.suggestion-active {
  background: rgba(255, 0, 0, 0.2);
}

.show-all-suggestions {
  padding: 10px;
  cursor: pointer;
  color: #FF5555;
  border-top: 1px solid #FF0000;
  font-weight: bold;
}
.show-all-suggestions:hover {
  background: rgba(255, 0, 0, 0.2);
}

/*******************************************/
/* Button & Loading Sphere Row             */
/*******************************************/
.button-and-sphere {
  display: flex;
  align-items: center;
  gap: 20px;
  flex-wrap: wrap;
  margin-top: 30px;
  justify-content: flex-start;
}

.scenario-generate-button {
  background: #FF0000;
  color: #FFF;
  padding: 10px 20px;
  border: none;
  border-radius: 12px;
  font-size: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.3s ease, color 0.3s ease;
}
.scenario-generate-button:hover {
  background: #FF5555;
  color: #000;
}

/* Loading Sphere */
.loading-sphere {
  position: relative;
  width: 60px;
  height: 60px;
  background: #000;
  border: 2px solid #FF0000;
  border-radius: 50%;
  overflow: hidden;
  box-shadow: 0 0 15px #FF0000;
}
.loading-sphere::before,
.loading-sphere::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: repeating-linear-gradient(
    to right,
    rgba(255,0,0,0.2) 0,
    rgba(255,0,0,0.2) 2px,
    transparent 2px,
    transparent 4px
  );
  animation: rotateGrid 1.5s linear infinite;
}
.loading-sphere::after {
  background: repeating-linear-gradient(
    to bottom,
    rgba(255,0,0,0.4) 0,
    rgba(255,0,0,0.4) 2px,
    transparent 2px,
    transparent 4px
  );
  animation-delay: 0.75s;
  opacity: 0.7;
}

@keyframes rotateGrid {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/*******************************************/
/* Scenario Output                         */
/*******************************************/
.scenario-output-box {
  padding: 20px;
  background: #111;
  border: 2px solid #FF0000;
  border-radius: 8px;
  color: #FFF;
  line-height: 1.6;
  margin-top: 20px;
  font-size: 1rem;
  white-space: pre-wrap;
  overflow-y: auto;
  max-height: 400px;
  font-family: "Courier New", monospace;
}

.scenario-output-title {
  font-size: 1.5em;
  text-align: left;
  margin-top: 5px;
  font-weight: bold;
  color: #FF0000;
}

/*******************************************/
/* Interactive Questions                   */
/*******************************************/
.interactive-questions {
  margin-top: 20px;
}
.interactive-questions h3 {
  font-size: 1.3em;
  margin-bottom: 15px;
  color: #FF0000;
}

.question-container {
  margin-bottom: 20px;
  padding: 10px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid #FF0000;
  border-radius: 8px;
}

.question-text {
  font-size: 1.1rem;
  margin-bottom: 10px;
  color: #FFF;
  font-family: 'Orbitron', sans-serif;
}

.options-container {
  display: flex;
  flex-direction: column;
}

.option-label {
  margin-bottom: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 8px;
  border: 1px solid transparent;
  border-radius: 6px;
  transition: background 0.2s ease, border-color 0.2s ease;
}
.option-label:hover,
.option-label:focus-within {
  background: rgba(255, 0, 0, 0.2);
  border-color: #FF0000;
}

.option-text {
  margin-left: 8px;
  color: #FFF;
  font-family: 'Orbitron', sans-serif;
}

.option-label input[type="radio"] {
  accent-color: #FF0000;
  transform: scale(1.2);
}

/*******************************************/
/* Feedback                                */
/*******************************************/
.feedback {
  margin-top: 10px;
  padding: 10px;
  border-radius: 6px;
  font-weight: bold;
  font-size: 1rem;
}
.feedback.correct {
  background: #000;
  color: #00FF00;
  border: 1px solid #00FF00;
  font-family: 'Orbitron', sans-serif;
}
.feedback.incorrect {
  background: #000;
  color: #FF0000;
  border: 1px solid #FF0000;
  font-family: 'Orbitron', sans-serif;
}
.explanation {
  margin-top: 5px;
  font-weight: normal;
  font-size: 0.95rem;
  color: #FFF;
  font-family: 'Orbitron', sans-serif;
}

/*******************************************/
/* RESPONSIVE MEDIA QUERIES               */
/*******************************************/

/* 1) Extra-Small Devices: max-width 320px */
@media (max-width: 320px) {
  .scenario-container {
    margin: 20px 10px;
    padding: 15px;
    flex-direction: column;
  }

  .scenario-title {
    font-size: 1.8em;
  }
  .scenario-tagline {
    font-size: 1em;
    margin-bottom: 20px;
  }

  .scenario-input-section,
  .scenario-output-container {
    padding: 15px;
  }

  /* Reduce size of input fields, sliders, etc. */
  .scenario-input-field {
    font-size: 0.9rem;
    padding: 10px;
  }
  .scenario-input-slider {
    margin-top: 5px;
  }

  /* Buttons and Loading Sphere */
  .scenario-generate-button {
    font-size: 0.9rem;
    padding: 8px 16px;
  }
  .loading-sphere {
    width: 50px;
    height: 50px;
  }

  /* Output box font & height */
  .scenario-output-box {
    font-size: 0.9rem;
    max-height: 300px;
  }

  .question-text {
    font-size: 1rem;
  }
  .explanation {
    font-size: 0.85rem;
  }
}

/* 2) Small Devices: max-width 480px */
@media (max-width: 480px) {
  .scenario-container {
    margin: 10px;
    padding: 10px;
    flex-direction: column;
  }

  .scenario-title {
    font-size: 2em;
    margin-bottom: 20px;
  }
  .scenario-tagline {
    font-size: 1em;
    margin-bottom: 20px;
  }

  .scenario-input-section,
  .scenario-output-container {
    padding: 15px;
  }

  .scenario-input-field {
    font-size: 0.95rem;
    padding: 10px;
  }
  .scenario-input-slider {
    margin-top: 6px;
  }

  .scenario-generate-button {
    font-size: 0.95rem;
    padding: 8px 18px;
  }
  .loading-sphere {
    width: 55px;
    height: 55px;
  }

  .scenario-output-box {
    font-size: 0.95rem;
    max-height: 350px;
  }

  .question-text {
    font-size: 1.05rem;
  }
  .explanation {
    font-size: 0.9rem;
  }
}

/* 3) Medium-Small Devices: max-width 600px */
@media (max-width: 600px) {
  .scenario-container {
    margin: 20px;
    padding: 15px;
    flex-direction: column;
    gap: 15px;
  }

  .scenario-title {
    font-size: 2.2em;
  }
  .scenario-tagline {
    font-size: 1.1em;
    margin-bottom: 25px;
  }

  .scenario-input-section,
  .scenario-output-container {
    padding: 15px;
  }

  .scenario-input-field {
    font-size: 1rem;
  }
  .scenario-input-slider {
    margin-top: 8px;
  }

  .scenario-generate-button {
    font-size: 1rem;
    padding: 10px 20px;
  }
  .loading-sphere {
    width: 58px;
    height: 58px;
  }

  .scenario-output-box {
    font-size: 1rem;
    max-height: 380px;
  }

  .question-text {
    font-size: 1.1rem;
  }
  .explanation {
    font-size: 0.95rem;
  }
}

/* 4) Tablets / Larger Mobiles: max-width 768px */
/* (Original rules expanded) */
@media (max-width: 768px) {
  .scenario-container {
    flex-direction: column;
    margin: 20px;
    padding: 10px;
  }

  .scenario-title {
    font-size: 1.8em; /* Adjust if you want bigger */
  }

  .scenario-input-section,
  .scenario-output-container {
    padding: 15px;
  }

  .question-container {
    padding: 10px;
  }

  .option-label {
    padding: 8px;
  }

  .explanation {
    font-size: 0.9rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/ScenarioPage/ScenarioSphere.js
================
// ScenarioSphere.js
import React, { useState, useRef, useEffect } from 'react';
import './ScenarioSphere.css';
import { ATTACK_TYPES } from './attacks';

const ENDPOINT = "/api";

const ScenarioSphere = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [industry, setIndustry] = useState("Finance");
  const [attackType, setAttackType] = useState("");
  const [skillLevel, setSkillLevel] = useState("Script Kiddie");
  const [threatIntensity, setThreatIntensity] = useState(50);

  const [scenarioText, setScenarioText] = useState("");
  const [interactiveQuestions, setInteractiveQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState({});
  const [feedback, setFeedback] = useState({});

  const [suggestions, setSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(-1);
  const [showAllSuggestions, setShowAllSuggestions] = useState(false);
  const suggestionsRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (suggestionsRef.current && !suggestionsRef.current.contains(event.target)) {
        setShowSuggestions(false);
        setActiveSuggestionIndex(-1);
        setShowAllSuggestions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleAttackTypeChange = (e) => {
    const userInput = e.target.value;
    setAttackType(userInput);
    setShowAllSuggestions(false);

    if (userInput.length > 0) {
      const filteredSuggestions = ATTACK_TYPES.filter(
        (attack) =>
          attack.toLowerCase().includes(userInput.toLowerCase())
      );
      setSuggestions(filteredSuggestions);
      setShowSuggestions(true);
    } else {
      setSuggestions([]);
      setShowSuggestions(false);
    }
    setActiveSuggestionIndex(-1);
  };

  const handleShowAllSuggestionsClick = () => {
    setShowAllSuggestions(true);
  };

  const handleKeyDown = (e) => {
    if (showSuggestions) {
      if (e.key === 'ArrowDown') {
        if (
          activeSuggestionIndex <
          (showAllSuggestions
            ? suggestions.length - 1
            : Math.min(suggestions.length, 10) - 1)
        ) {
          setActiveSuggestionIndex(activeSuggestionIndex + 1);
        }
      } else if (e.key === 'ArrowUp') {
        if (activeSuggestionIndex > 0) {
          setActiveSuggestionIndex(activeSuggestionIndex - 1);
        }
      } else if (e.key === 'Enter') {
        if (
          activeSuggestionIndex >= 0 &&
          activeSuggestionIndex <
            (showAllSuggestions
              ? suggestions.length
              : Math.min(suggestions.length, 10))
        ) {
          setAttackType(suggestions[activeSuggestionIndex]);
          setSuggestions([]);
          setShowSuggestions(false);
          setActiveSuggestionIndex(-1);
          setShowAllSuggestions(false);
          e.preventDefault();
        }
      } else if (e.key === 'Escape') {
        setShowSuggestions(false);
        setActiveSuggestionIndex(-1);
        setShowAllSuggestions(false);
      }
    }
  };

  const handleGenerateScenario = () => {
    if (!attackType.trim()) {
      alert("Please enter the Type of Attack.");
      return;
    }
    setIsGenerating(true);
    setScenarioText("");
    setInteractiveQuestions([]);
    setUserAnswers({});
    setFeedback({});

    const data = {
      industry,
      attack_type: attackType,
      skill_level: skillLevel,
      threat_intensity: threatIntensity,
    };

    fetch(`${ENDPOINT}/scenario/stream_scenario`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
      .then((response) => {
        if (!response.ok) {
          setIsGenerating(false);
          return response.text().then((text) => {
            alert(`Error: ${text}`);
          });
        }
        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        let scenarioAccumulator = "";

        function readChunk() {
          reader.read().then(({ done, value }) => {
            if (done) {
              setIsGenerating(false);
              setScenarioText(scenarioAccumulator.trim());
              fetchQuestions(scenarioAccumulator.trim());
              return;
            }
            const chunk = decoder.decode(value, { stream: true });
            scenarioAccumulator += chunk;
            setScenarioText(scenarioAccumulator);
            readChunk();
          });
        }

        readChunk();
      })
      .catch((err) => {
        console.error(err);
        alert("An error occurred while streaming scenario.");
        setIsGenerating(false);
      });
  };

  const fetchQuestions = (finalScenarioText) => {
    if (!finalScenarioText) return;

    const data = { scenario_text: finalScenarioText };

    fetch(`${ENDPOINT}/scenario/stream_questions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
      .then((response) => {
        if (!response.ok) {
          console.error("Error fetching questions.");
          return response.text().then((t) => console.error(t));
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let jsonAccumulator = "";

        function readChunk() {
          reader.read().then(({ done, value }) => {
            if (done) {
              try {
                const parsed = JSON.parse(jsonAccumulator);
                if (Array.isArray(parsed)) {
                  const errorObj = parsed.find(q => q.error);
                  if (errorObj) {
                    console.error("Error in questions generation:", errorObj.error);
                    alert(`Error generating questions: ${errorObj.error}`);
                  } else if (parsed.length === 3) {
                    setInteractiveQuestions(parsed);
                  } else {
                    console.error("Expected exactly 3 questions, but received:", parsed);
                    alert("Unexpected number of questions received.");
                  }
                } else {
                  console.error("Parsed questions are not in an array format.");
                  alert("Invalid format for interactive questions.");
                }
              } catch (e) {
                console.error("Failed to parse question JSON:", e);
                console.error("Received text:", jsonAccumulator);
                alert("An error occurred while parsing interactive questions.");
              }
              return;
            }
            const chunk = decoder.decode(value, { stream: true });
            jsonAccumulator += chunk;
            readChunk();
          });
        }
        readChunk();
      })
      .catch((error) => {
        console.error("Error streaming questions:", error);
      });
  };

  const handleAnswerSelect = (questionIndex, selectedOption) => {
    const question = interactiveQuestions[questionIndex];
    const isCorrect = selectedOption === question.correct_answer;

    setUserAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionIndex]: selectedOption,
    }));

    setFeedback((prevFeedback) => ({
      ...prevFeedback,
      [questionIndex]: {
        isCorrect,
        explanation: question.explanation,
      },
    }));
  };

  const renderQuestions = () => {
    return interactiveQuestions.map((question, index) => (
      <div key={index} className="question-container">
        <p className="question-text">
          {index + 1}. {question.question}
        </p>
        <div className="options-container">
          {Object.entries(question.options).map(([optionLetter, optionText]) => (
            <label key={optionLetter} className="option-label">
              <input
                type="radio"
                name={`question-${index}`}
                value={optionLetter}
                checked={userAnswers[index] === optionLetter}
                onChange={() => handleAnswerSelect(index, optionLetter)}
                disabled={userAnswers.hasOwnProperty(index)}
              />
              <span className="option-text">
                {optionLetter}) {optionText}
              </span>
            </label>
          ))}
        </div>
        {feedback.hasOwnProperty(index) && (
          <div className={`feedback ${feedback[index].isCorrect ? 'correct' : 'incorrect'}`}>
            {feedback[index].isCorrect ? "✅ Correct!" : "❌ Incorrect."}
            <p className="explanation">
              Explanation: {feedback[index].explanation}
            </p>
          </div>
        )}
      </div>
    ));
  };

  return (
    <div className="scenario-body">
      <div className="scenario-container">
        <div className="scenario-input-section">
          <h1 className="scenario-title">Scenario Sphere</h1>
          <p className="scenario-tagline">Step into the real world of cyber defense...</p>

          <div className="scenario-input-wrapper">
            <label htmlFor="industry-select">Industry</label>
            <select
              id="industry-select"
              className="scenario-input-field scenario-industry"
              value={industry}
              onChange={(e) => setIndustry(e.target.value)}
            >
              <option value="Finance">Finance</option>
              <option value="Healthcare">Healthcare</option>
              <option value="Retail">Retail</option>
              <option value="Technology">Technology</option>
              <option value="Energy">Energy</option>
              <option value="Education">Education</option>
              <option value="Supply Chain">Supply Chain</option>
              <option value="Telecommunications">Telecommunications</option>
              <option value="Pharmaceutical">Pharmaceutical</option>
              <option value="Transportation">Transportation</option>
              <option value="Cybersecurity Company">Cybersecurity Company</option>
              <option value="Manufacturing">Manufacturing</option>
              <option value="CYBERPUNK2077">CYBERPUNK2077</option>
            </select>
          </div>

          <div className="scenario-input-wrapper" ref={suggestionsRef}>
            <label htmlFor="attack-type-input">Type of Attack</label>
            <input
              id="attack-type-input"
              type="text"
              className="scenario-input-field scenario-attack-type"
              placeholder="Enter Attack Type"
              value={attackType}
              onChange={handleAttackTypeChange}
              onKeyDown={handleKeyDown}
              onFocus={() => {
                if (attackType.length > 0 && suggestions.length > 0) {
                  setShowSuggestions(true);
                }
              }}
            />
            {showSuggestions && suggestions.length > 0 && (
              <ul className="suggestions-list">
                {(showAllSuggestions ? suggestions : suggestions.slice(0, 10)).map(
                  (suggestion, index) => (
                    <li
                      key={suggestion}
                      className={index === activeSuggestionIndex ? 'suggestion-active' : ''}
                      onClick={() => {
                        setAttackType(suggestion);
                        setSuggestions([]);
                        setShowSuggestions(false);
                        setActiveSuggestionIndex(-1);
                        setShowAllSuggestions(false);
                      }}
                    >
                      {suggestion}
                    </li>
                  )
                )}
                {!showAllSuggestions && suggestions.length > 10 && (
                  <li className="show-all-suggestions" onClick={handleShowAllSuggestionsClick}>
                    Show all options
                  </li>
                )}
              </ul>
            )}
          </div>

          <div className="scenario-input-wrapper">
            <label htmlFor="skill-level-select">Skill Level</label>
            <select
              id="skill-level-select"
              className="scenario-input-field scenario-skill-level"
              value={skillLevel}
              onChange={(e) => setSkillLevel(e.target.value)}
            >
              <option value="Script Kiddie">Script Kiddie</option>
              <option value="Intermediate">Intermediate</option>
              <option value="Advanced">Advanced</option>
              <option value="APT">APT</option>
            </select>
          </div>

          <div className="scenario-input-wrapper">
            <label htmlFor="threat-intensity-slider">Threat Intensity</label>
            <input
              id="threat-intensity-slider"
              type="range"
              min="1"
              max="100"
              className="scenario-input-slider"
              value={threatIntensity}
              onChange={(e) => setThreatIntensity(e.target.value)}
            />
            <span className="threat-intensity-value">{threatIntensity}</span>
          </div>

          <div className="button-and-sphere">
            <button
              className="scenario-generate-button"
              onClick={handleGenerateScenario}
              disabled={isGenerating}
            >
              {isGenerating ? "Generating..." : "Generate Scenario"}
            </button>
            {isGenerating && <div className="loading-sphere"></div>}
          </div>
        </div>

        <div className="scenario-output-container">
          {scenarioText && (
            <>
              <h2 className="scenario-output-title">Generated Scenario</h2>
              <div className="scenario-output-box" style={{ whiteSpace: 'pre-wrap' }}>
                {scenarioText}
              </div>
            </>
          )}
          {!scenarioText && (
            <div className="scenario-output-box">hidden-pr0cess.axx</div>
          )}

          {interactiveQuestions && interactiveQuestions.length > 0 && (
            <div className="interactive-questions">
              <h3>Interactive Questions</h3>
              {renderQuestions()}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ScenarioSphere;

================
File: frontend/my-react-app/src/components/pages/secplus/SecurityPlusTestList.js
================
// src/components/pages/testpage/SecurityPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
// Reuse your existing APlusStyles.css if you want
import "../../test.css";

const SecurityPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100; 
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "secplus"
  const category = "secplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (id) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${id}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (id) => {
    const progressData = getProgressData(id);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple difficulty mapping (optional)
  const getDifficultyData = (id) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[id] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Security+ Practice Tests</h1>
      <div className="tests-list-grid">
        {/* Show 10 tests, each with id from 1..10 */}
        {Array.from({ length: 10 }, (_, i) => {
          const id = i + 1;
          const difficulty = getDifficultyData(id);
          const progressData = getProgressData(id);
          const progressDisplay = getProgressDisplay(id);

          return (
            <div key={id} className="test-card">
              <div className="test-badge">Test {id}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() => navigate(`/practice-tests/security-plus/${id}`)}
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${id}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/security-plus/${id}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() => navigate(`/practice-tests/security-plus/${id}`)}
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${id}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/security-plus/${id}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() => navigate(`/practice-tests/security-plus/${id}`)}
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default SecurityPlusTestList;

================
File: frontend/my-react-app/src/components/pages/secplus/SecurityPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import SecurityPlusTestList from "./SecurityPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const SecurityPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <SecurityPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="secplus"
      backToListPath="/practice-tests/security-plus"
    />
  );
};

export default SecurityPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/serverplus/ServerPlusTestList.js
================
// src/components/pages/serverplus/ServerPlusTestList.js
import React from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "../../test.css";

const ServerPlusTestList = () => {
  const navigate = useNavigate();
  const totalQuestions = 100;
  const { userId } = useSelector((state) => state.user);

  // We'll call this category "serverplus"
  const category = "serverplus";

  // Retrieve saved progress from localStorage
  const getProgressData = (testNumber) => {
    if (!userId) return null;
    const key = `testProgress_${userId}_${category}_${testNumber}`;
    const saved = localStorage.getItem(key);
    if (!saved) return null;
    try {
      return JSON.parse(saved);
    } catch (e) {
      console.error("Error parsing progress", e);
      return null;
    }
  };

  const getProgressDisplay = (testNumber) => {
    const progressData = getProgressData(testNumber);
    if (progressData) {
      if (progressData.finished) {
        const percentage = Math.round(
          (progressData.score / totalQuestions) * 100
        );
        return `Final Score: ${percentage}% (${progressData.score}/${totalQuestions})`;
      } else if (typeof progressData.currentQuestionIndex === "number") {
        return `Progress: ${
          progressData.currentQuestionIndex + 1
        } / ${totalQuestions}`;
      }
    }
    return "No progress yet";
  };

  // Simple optional difficulty mapping
  const getDifficultyData = (testNumber) => {
    const data = {
      1: { label: "Normal", color: "hsl(0, 0%, 100%)" },
      2: { label: "Very Easy", color: "hsl(120, 100%, 80%)" },
      3: { label: "Easy", color: "hsl(120, 100%, 70%)" },
      4: { label: "Moderate", color: "hsl(120, 100%, 60%)" },
      5: { label: "Intermediate", color: "hsl(120, 100%, 50%)" },
      6: { label: "Formidable", color: "hsl(120, 100%, 40%)" },
      7: { label: "Challenging", color: "hsl(120, 100%, 30%)" },
      8: { label: "Very Challenging", color: "hsl(120, 100%, 20%)" },
      9: { label: "Ruthless", color: "hsl(120, 100%, 10%)" },
      10: { label: "Ultra Level", color: "#000" }
    };
    return data[testNumber] || { label: "", color: "#fff" };
  };

  return (
    <div className="tests-list-container">
      <h1 className="tests-list-title">CompTIA Server+ Practice Tests</h1>
      <div className="tests-list-grid">
        {Array.from({ length: 10 }, (_, i) => {
          const testNumber = i + 1;
          const difficulty = getDifficultyData(testNumber);
          const progressData = getProgressData(testNumber);
          const progressDisplay = getProgressDisplay(testNumber);

          return (
            <div key={testNumber} className="test-card">
              <div className="test-badge">Test {testNumber}</div>
              <div
                className="difficulty-label"
                style={{ color: difficulty.color }}
              >
                {difficulty.label}
              </div>
              <p className="test-progress">{progressDisplay}</p>

              {progressData ? (
                <div className="test-card-buttons">
                  {progressData.finished ? (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/server-plus/${testNumber}`)
                        }
                      >
                        View Review
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/server-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="resume-button"
                        onClick={() =>
                          navigate(`/practice-tests/server-plus/${testNumber}`)
                        }
                      >
                        Resume Test
                      </button>
                      <button
                        className="restart-button-testlist"
                        onClick={() => {
                          const key = `testProgress_${userId}_${category}_${testNumber}`;
                          localStorage.removeItem(key);
                          navigate(`/practice-tests/server-plus/${testNumber}`);
                        }}
                      >
                        Restart Test
                      </button>
                    </>
                  )}
                </div>
              ) : (
                <button
                  className="start-button"
                  onClick={() =>
                    navigate(`/practice-tests/server-plus/${testNumber}`)
                  }
                >
                  Click to Start
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default ServerPlusTestList;

================
File: frontend/my-react-app/src/components/pages/serverplus/ServerPlusTestPage.js
================
import React from "react";
import { useParams } from "react-router-dom";
import ServerPlusTestList from "./ServerPlusTestList";
import GlobalTestPage from "../../GlobalTestPage";
import "../../test.css";

const ServerPlusTestPage = () => {
  const { testId } = useParams();

  if (!testId) {
    return <ServerPlusTestList />;
  }

  return (
    <GlobalTestPage
      testId={testId}
      category="serverplus"
      backToListPath="/practice-tests/server-plus"
    />
  );
};

export default ServerPlusTestPage;

================
File: frontend/my-react-app/src/components/pages/store/AchievementPage.css
================
/* AchievementPage.css */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

.achievement-page {
  /* Existing styles */
  padding: 2rem;
  min-height: 100vh;
  color: #fff;
  position: relative;

  /* The faded background image */
  background: linear-gradient(
      rgba(0, 0, 0, 0.2), /* top overlay transparency */
      rgba(0, 0, 0, 0.2)  /* bottom overlay transparency */
    ),
    url('./achbgs1.jpg') /* path in public folder */
      no-repeat
      center
      center
      fixed;
  background-size: cover;
  background-attachment: fixed;  /* keeps it fixed on scroll */
  background-position: center;
  }

.achievement-header {
  text-align: center;
  margin-bottom: 2rem;
  font-weight: bold;
  animation: fadeInDown 1s ease-out;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 1px 1px 0 #000, 1px 1px 0 #808080;
  color: #fff;
}

.achievement-header h1 {
  font-size: 3rem;
  color: #fff;
  margin: 0;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #808080;
  font-family: 'Orbitron', sans-serif;
}

.achievement-header p {
  font-size: 1.2rem;
  color: #fff;
  margin-top: 0.5rem;
}

.achievement-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  margin: 0 auto;
  animation: fadeIn 3s ease-out;
}

.achievement-card {
  position: relative;
  background: #1f1f1f;
  border: 2px solid #333;
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.achievement-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.6);
}

.achievement-icon {
  font-size: 3.5rem;
  margin-bottom: 1rem;
}

.achievement-title {
  font-size: 1.3rem;
  margin-bottom: 0.5rem;
  color: #fff;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
  font-family: 'Press Start 2P', cursive, sans-serif;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #a93226;
}

.achievement-description {
  font-size: .8rem;
  color: #cccccc;
  margin-bottom: 1rem;
  font-family: 'Press Start 2P', cursive, sans-serif;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #a93226;
}

/* Unlocked achievement appearance */
.achievement-card.unlocked {
  opacity: 1;
  filter: none;
}

/* -------------------------------------------------------------------- */
/* TWO OPTIONS FOR LOCKED ACHIEVEMENTS – choose ONE and comment out the other */
/* -------------------------------------------------------------------- */

/* ------------------------- Option 1 ------------------------- */
/* Partially gray out but still show some color. */
.achievement-card.locked {
  opacity: 0.9;            /* slightly faded */
  filter: grayscale(50%);  /* partially grayscale so color is still visible */
}

/* ------------------------- Option 2 ------------------------- */
/*
.achievement-card.locked {
  position: relative;
  opacity: 1;      
  filter: none;    
}
.achievement-card.locked::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.35);  
  border-radius: 12px;
  pointer-events: none;
}
*/

/* -------------------------------------------------------------------- */

/* The “Not Yet Earned” overlay text */



@keyframes fadeInDown {
  from { opacity: 0; transform: translateY(-20px); }
  to   { opacity: 1; transform: translateY(0); }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to   { opacity: 1; }
}

/*******************************************/
/* 1) Extra-Small Devices: max-width 320px */
/*******************************************/
@media (max-width: 320px) {
  /* Page & text scaling */
  .achievement-page {
    padding: 1rem !important;
    font-size: 0.85rem !important;
    overflow-x: hidden !important; 
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .achievement-header h1 {
    font-size: 1rem !important;
    line-height: 1.2 !important;
    margin-bottom: 0.75rem !important;
    white-space: normal !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  .achievement-header p {
    font-size: 0.9rem !important;
    line-height: 1.2 !important;
    margin-bottom: 1rem !important;
  }

  /* Single-column grid to avoid overlap/cutoff */
  .achievement-grid {
    grid-template-columns: 1fr !important;
    gap: 1rem !important;
    max-width: 100% !important;
    margin: 0 auto !important;
  }

  /* Card & content scaling */
  .achievement-card {
    width: 100% !important;
    max-width: none !important;
    margin: 0 auto 1rem auto !important;
    padding: 1rem !important;
  }
  .achievement-icon {
    font-size: 2.5rem !important;
    margin-bottom: 0.5rem !important;
  }
  .achievement-title {
    font-size: 1rem !important;
    margin-bottom: 0.5rem !important;
  }
  .achievement-description {
    font-size: 0.7rem !important;
    line-height: 1rem !important;
    margin-bottom: 0.75rem !important;
  }

  /* Lock overlay scaled to fit smaller screens */
  .lock-overlay {
    font-size: 1rem !important;
    line-height: 1.2 !important;
    padding: 0.5rem !important;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/*******************************************/
@media (max-width: 480px) {
  /* Page & header */
  .achievement-page {
    padding: 1.2rem !important;
    font-size: 0.9rem !important;
    overflow-x: hidden !important;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .achievement-header h1 {
    font-size: 2.2rem !important;
    margin-bottom: 0.75rem !important;
    white-space: normal !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  .achievement-header p {
    font-size: 1rem !important;
    line-height: 1.2 !important;
    margin-bottom: 1rem !important;
  }

  /* Often still single-column for best readability */
  .achievement-grid {
    grid-template-columns: 1fr !important;
    gap: 1rem !important;
    max-width: 100% !important;
    margin: 0 auto !important;
  }

  .achievement-card {
    width: 100% !important;
    max-width: none !important;
    margin: 0 auto 1rem !important;
    padding: 1.2rem !important;
  }
  .achievement-icon {
    font-size: 2.8rem !important;
    margin-bottom: 0.5rem !important;
  }
  .achievement-title {
    font-size: 0.7rem !important;
  }
  .achievement-description {
    font-size: 0.5rem !important;
    line-height: 1.1rem !important;
  }

  .lock-overlay {
    font-size: 1rem !important;
    padding: 0.5rem !important;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  .achievement-page {
    padding: 1.5rem !important;
    font-size: 0.95rem !important;
    overflow-x: hidden !important;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .achievement-header h1 {
    font-size: 2.4rem !important;
    margin-bottom: 1rem !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  .achievement-header p {
    font-size: 1rem !important;
    line-height: 1.3 !important;
    margin-bottom: 1rem !important;
  }

  /* Possibly 1 or 2 columns if there's enough space */
  .achievement-grid {
    grid-template-columns: 1fr !important; /* Or repeat(2, 1fr) if you prefer 2 columns */
    gap: 1.2rem !important;
    max-width: 100% !important;
    margin: 0 auto !important;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .achievement-card {
    width: 100% !important;
    max-width: none !important;
    margin: 0 auto 1rem !important;
    padding: 1.3rem !important;
  }
  .achievement-icon {
    font-size: 3rem !important;
    margin-bottom: 0.8rem !important;
  }
  .achievement-title {
    font-size: 0.7rem !important;
    margin-bottom: 0.5rem !important;
  }
  .achievement-description {
    font-size: 0.6rem !important;
    line-height: 1.2rem !important;
  }

  .lock-overlay {
    font-size: 1rem !important;
    padding: 0.5rem !important;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/*******************************************/
@media (max-width: 768px) {
  .achievement-page {
    padding: 1.8rem !important;
    font-size: 1rem !important;
    overflow-x: hidden !important;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .achievement-header h1 {
    font-size: 2.5rem !important;
    margin-bottom: 1rem !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }
  .achievement-header p {
    font-size: 1.1rem !important;
    margin-bottom: 1rem !important;
  }

  /* Usually 2 columns by 768px, but you can keep 1 if you prefer */
  .achievement-grid {
    grid-template-columns: 1fr !important;
    gap: 1.5rem !important;
    max-width: 200px !important;
    margin: 0 auto !important;
  }

  .achievement-card {
    width: 100% !important;
    max-width: 200px !important;
    margin: 0 auto 1.5rem !important;
    padding: 1.5rem !important;
    white-space: normal !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important
  }
  .achievement-icon {
    font-size: 3.2rem !important;
    margin-bottom: 0.8rem !important;
  }
  .achievement-title {
    font-size: 0.7rem !important;
  }
  .achievement-description {
    font-size: 0.6rem !important;
    line-height: 1.3rem !important;
  }

  .lock-overlay {
    font-size: 1.1rem !important;
    padding: 0.75rem !important;
  }
}

================
File: frontend/my-react-app/src/components/pages/store/AchievementPage.js
================
// src/components/pages/store/AchievementPage.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchAchievements } from '../store/achievementsSlice';
import { 
  FaTrophy, 
  FaMedal, 
  FaStar, 
  FaCrown, 
  FaBolt, 
  FaBook, 
  FaBrain, 
  FaCheckCircle, 
  FaRegSmile,
  FaMagic
} from 'react-icons/fa';
import { showAchievementToast } from './AchievementToast';
import './AchievementPage.css';

// Mapping achievement IDs to icon components.
const iconMapping = {
  "test_rookie": FaTrophy,
  "accuracy_king": FaMedal,
  "bronze_grinder": FaBook,
  "silver_scholar": FaStar,
  "gold_god": FaCrown,
  "platinum_pro": FaMagic,
  "walking_encyclopedia": FaBrain,
  "redemption_arc": FaBolt,
  "memory_master": FaRegSmile,
  "coin_collector_5000": FaBook,
  "coin_hoarder_10000": FaBook,
  "coin_tycoon_50000": FaBook,
  "perfectionist_1": FaCheckCircle,
  "double_trouble_2": FaCheckCircle,
  "error404_failure_not_found": FaCheckCircle,
  "level_up_5": FaTrophy,
  "mid_tier_grinder_25": FaMedal,
  "elite_scholar_50": FaStar,
  "ultimate_master_100": FaCrown,
  "category_perfectionist": FaBolt,
  "absolute_perfectionist": FaBolt,
  "exam_conqueror": FaMedal,
  "subject_specialist": FaMedal,
  "answer_machine_1000": FaBook,
  "knowledge_beast_5000": FaBrain,
  "question_terminator": FaBrain,
  "test_finisher": FaCheckCircle,
  "subject_finisher": FaCheckCircle
};

// Mapping achievement IDs to colors.
const colorMapping = {
  "test_rookie": "#ff5555",
  "accuracy_king": "#ffa500",
  "bronze_grinder": "#cd7f32",
  "silver_scholar": "#c0c0c0",
  "gold_god": "#ffd700",
  "platinum_pro": "#e5e4e2",
  "walking_encyclopedia": "#00fa9a",
  "redemption_arc": "#ff4500",
  "memory_master": "#8a2be2",
  "coin_collector_5000": "#ff69b4",
  "coin_hoarder_10000": "#ff1493",
  "coin_tycoon_50000": "#ff0000",
  "perfectionist_1": "#adff2f",
  "double_trouble_2": "#7fff00",
  "error404_failure_not_found": "#00ffff",
  "level_up_5": "#f08080",
  "mid_tier_grinder_25": "#ff8c00",
  "elite_scholar_50": "#ffd700",
  "ultimate_master_100": "#ff4500",
  "category_perfectionist": "#00ced1",
  "absolute_perfectionist": "#32cd32",
  "exam_conqueror": "#1e90ff",
  "subject_specialist": "#8a2be2",
  "answer_machine_1000": "#ff69b4",
  "knowledge_beast_5000": "#00fa9a",
  "question_terminator": "#ff1493",
  "test_finisher": "#adff2f",
  "subject_finisher": "#7fff00"
};

const AchievementPage = () => {
  const dispatch = useDispatch();
  const achievements = useSelector((state) => state.achievements.all);
  const userAchievements = useSelector((state) => state.user.achievements) || [];

  useEffect(() => {
    if (!achievements || achievements.length === 0) {
      dispatch(fetchAchievements());
    }
  }, [dispatch, achievements]);

  // This function remains if you ever want to trigger a test popup programmatically
  const testPopup = (achievementId) => {
    const achievement = achievements.find((ach) => ach.achievementId === achievementId);
    if (achievement) {
      const IconComponent = iconMapping[achievement.achievementId] || null;
      const color = colorMapping[achievement.achievementId] || "#fff";
      showAchievementToast({
        title: achievement.title,
        description: achievement.description,
        icon: IconComponent ? <IconComponent /> : null,
        color: color
      });
    }
  };

  return (
    <div className="achievement-page">
      <header className="achievement-header">
        <h1>Achievements</h1>
        <p>Discover your milestones and track your progress on our gamified platform! 🏆</p>
      </header>

      <div className="achievement-grid">
        {achievements.map((ach) => {
          const isUnlocked = userAchievements.includes(ach.achievementId);
          const IconComponent = iconMapping[ach.achievementId] || FaTrophy;
          const iconColor = colorMapping[ach.achievementId] || "#ffffff";
          return (
            <div
              key={ach.achievementId}
              className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}
            >
              <div className="achievement-icon" style={{ color: iconColor }}>
                <IconComponent />
              </div>
              <h2 className="achievement-title">{ach.title}</h2>
              <p className="achievement-description">{ach.description}</p>
              {!isUnlocked && <div className="lock-overlay">Incomplete</div>}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default AchievementPage;

================
File: frontend/my-react-app/src/components/pages/store/achievementsSlice.js
================
// src/store/achievementsSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { registerUser, loginUser, dailyLoginBonus, addXP, addCoins, fetchUserData, logout, setCurrentUserId } from '../store/userSlice';


export const fetchAchievements = createAsyncThunk(
  'achievements/fetchAchievements',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('/api/test/achievements');
      if (!response.ok) throw new Error('Failed to fetch achievements');
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const achievementsSlice = createSlice({
  name: 'achievements',
  initialState: {
    all: [],
    status: 'idle',
    error: null,
    popups: []  // This can be used for temporary popup notifications
  },
  reducers: {
    // If you want to push a new achievement popup (for example, after unlocking an achievement)
    addPopup: (state, action) => {
      state.popups.push(action.payload);
    },
    removePopup: (state) => {
      state.popups.shift();
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchAchievements.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAchievements.fulfilled, (state, action) => {
        state.all = action.payload;
        state.status = 'succeeded';
      })
      .addCase(fetchAchievements.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  }
});

export const { addPopup, removePopup } = achievementsSlice.actions;
export default achievementsSlice.reducer;

================
File: frontend/my-react-app/src/components/pages/store/AchievementToast.css
================
/* src/components/pages/store/AchievementToast.css */
.Toastify__toast--info {
  background: #222 !important;
  border: 2px solid #ff476f;
  font-family: 'Orbitron', sans-serif;
  border-radius: 8px;
}

================
File: frontend/my-react-app/src/components/pages/store/AchievementToast.js
================
// src/components/pages/store/AchievementToast.js
import React from 'react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './AchievementToast.css';

export const showAchievementToast = (achievement) => {
  toast.info(
    <div style={{ display: 'flex', alignItems: 'center' }}>
      {achievement.icon && (
        <span style={{ marginRight: '0.5rem', fontSize: '1.5rem', color: achievement.color }}>
          {achievement.icon}
        </span>
      )}
      <div>
        <div style={{ fontWeight: 'bold', fontSize: '1.1rem' }}>{achievement.title}</div>
        <div style={{ fontSize: '0.9rem' }}>{achievement.description}</div>
      </div>
    </div>,
    {
      position: "top-right",
      autoClose: 4000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      style: { background: '#333', color: '#fff', borderRadius: '8px' },
    }
  );
};

================
File: frontend/my-react-app/src/components/pages/store/LeaderboardPage.css
================
/* NEW: Full-screen background that applies only if .leaderboard-container exists */
body:has(.leaderboard-container) {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  
  background:
    linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0.3),
      rgba(0, 0, 0, 0.7)
    ),
    url('./leader.jpg') no-repeat center center fixed;
  background-size: cover;
  background-attachment: fixed; /* might not work on some mobile browsers */
  background-position: center;
}

/* src/components/pages/leaderboard/LeaderboardPage.css */

.leaderboard-container {
  padding: 20px;
  color: #fff;
  max-width: 800px;
  margin: 0 auto;
  text-align: center;
}

.leaderboard-title {
  font-size: 2rem;
  margin-bottom: 1rem;
  color: #cc0000;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 1px 1px 0px #fff;
}

.leaderboard-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.leaderboard-item {
  background-color: #1e1e1e;
  border: 2px solid #b30000;
  border-radius: 8px;
  padding: 10px;
  display: flex;
  align-items: center;
  justify-content: start;
  gap: 10px;
  font-family: 'Roboto', sans-serif;
  transition: transform 0.2s;
}

.leaderboard-item:hover {
  transform: scale(1.02);
}

.rank-label {
  font-size: 1.5rem;
  font-weight: bold;
  margin-right: 10px;
  width: 40px;
}

.gold-rank .rank-label {
  color: #ffd700;
}
.silver-rank .rank-label {
  color: #c0c0c0;
}
.bronze-rank .rank-label {
  color: #cd7f32;
}

.avatar-wrapper {
  width: 60px;
  height: 60px;
}

.leaderboard-avatar {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
  border: 2px solid #cc0000;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-left: 10px;
}

.username {
  font-weight: bold;
  font-size: 1.2rem;
  color: #b30000;
}

.user-level,
.user-xp {
  margin-top: 2px;
  font-size: 0.95rem;
  color: #ccc;
}

/* Basic responsiveness */
@media (max-width: 320px) {
  body:has(.leaderboard-container) {
    background-attachment: scroll !important; 
    background-position: center top !important; /* if you want to shift the focal point */
  }

  .leaderboard-container {
    padding: 15px;
    font-size: 0.9rem; 
  }

  .leaderboard-title {
    font-size: 1.6rem; /* Scale down the title */
    margin-bottom: 0.75rem;
  }

  .leaderboard-item {
    flex-direction: column;
    align-items: center;
    padding: 8px;
  }

  .rank-label {
    font-size: 1.3rem;
    margin-right: 0;
    width: auto; /* Let it shrink naturally */
  }

  .avatar-wrapper {
    width: 50px;
    height: 50px;
  }

  .user-info {
    margin-left: 0;
    align-items: center;
  }

  .username {
    font-size: 1rem;
  }

  .user-level,
  .user-xp {
    font-size: 0.85rem;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/*******************************************/
@media (max-width: 480px) {
  body:has(.leaderboard-container) {
    background-attachment: scroll !important; 
    background-position: center top !important; /* if you want to shift the focal point */
  }
  
  .leaderboard-container {
    padding: 15px;
    font-size: 0.95rem; /* Base font can be slightly smaller */
  }

  .leaderboard-title {
    font-size: 1.8rem;
    margin-bottom: 0.8rem;
  }

  .leaderboard-item {
    flex-direction: column;
    align-items: center;
    padding: 10px;
  }

  .rank-label {
    font-size: 1.4rem;
    margin-right: 0;
    width: auto;
  }

  .avatar-wrapper {
    width: 55px;
    height: 55px;
  }

  .user-info {
    margin-left: 0;
    align-items: center;
    margin-top: 5px;
  }

  .username {
    font-size: 1.1rem;
  }

  .user-level,
  .user-xp {
    font-size: 0.9rem;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  body:has(.leaderboard-container) {
    background-attachment: scroll !important; 
    background-position: center top !important; /* if you want to shift the focal point */
  }
  
  .leaderboard-container {
    padding: 20px;
    font-size: 1rem;
  }

  .leaderboard-title {
    font-size: 1.9rem;
  }

  /* Possibly still vertical stacking if you prefer */
  .leaderboard-item {
    flex-direction: column;
    align-items: center;
  }

  .rank-label {
    font-size: 1.4rem;
    width: auto;
    margin-right: 0;
  }

  .avatar-wrapper {
    width: 60px;
    height: 60px;
  }

  .user-info {
    margin-left: 0;
    align-items: center;
    margin-top: 5px;
  }

  .username {
    font-size: 1.1rem;
  }

  .user-level,
  .user-xp {
    font-size: 0.9rem;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/*******************************************/
@media (max-width: 768px) {
  body:has(.leaderboard-container) {
    background-attachment: scroll !important; 
    background-position: center top !important; /* if you want to shift the focal point */
  }
  
  .leaderboard-container {
    padding: 20px;
    font-size: 1rem;
    max-width: 90%;
  }

  .leaderboard-title {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  /* If there's enough horizontal space, you can keep items in a row; 
     otherwise, keep them stacked. Adjust as desired. */
  .leaderboard-item {
    padding: 10px;
    gap: 8px;
  }

  .rank-label {
    font-size: 1.5rem;
    width: 40px; /* Or auto if you want more flexible spacing */
  }

  .avatar-wrapper {
    width: 60px;
    height: 60px;
  }

  .user-info {
    margin-left: 10px;
    align-items: flex-start;
  }

  .username {
    font-size: 1.15rem;
  }

  .user-level,
  .user-xp {
    font-size: 0.95rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/store/LeaderboardPage.js
================
// src/components/pages/leaderboard/LeaderboardPage.js
import React, { useEffect, useState } from 'react';
import './LeaderboardPage.css'; // We'll define this shortly

const LeaderboardPage = () => {
  const [leaders, setLeaders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchLeaders = async () => {
      try {
        const response = await fetch('/api/test/leaderboard');
        if (!response.ok) {
          throw new Error('Failed to load leaderboard');
        }
        const data = await response.json();
        setLeaders(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchLeaders();
  }, []);

  if (loading) {
    return <div className="leaderboard-loading">Loading Leaderboard...</div>;
  }
  if (error) {
    return <div className="leaderboard-error">Error: {error}</div>;
  }

  return (
    <div className="leaderboard-container">
      <h1 className="leaderboard-title">Top 100 Leader Board</h1>
      <div className="leaderboard-list">
        {leaders.map((user) => {
          // Special styling for top 3
          let rankClass = '';
          if (user.rank === 1) rankClass = 'gold-rank';
          else if (user.rank === 2) rankClass = 'silver-rank';
          else if (user.rank === 3) rankClass = 'bronze-rank';

          return (
            <div key={user.rank} className={`leaderboard-item ${rankClass}`}>
              <span className="rank-label">{user.rank}</span>
              <div className="avatar-wrapper">
                {user.avatarUrl ? (
                  <img
                    src={user.avatarUrl}
                    alt="avatar"
                    className="leaderboard-avatar"
                  />
                ) : (
                  <img
                    src="/avatars/default.png"
                    alt="default avatar"
                    className="leaderboard-avatar"
                  />
                )}
              </div>
              <div className="user-info">
                <span className="username">{user.username}</span>
                <span className="user-level">Level: {user.level}</span>
                <span className="user-xp">XP: {user.xp}</span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default LeaderboardPage;

================
File: frontend/my-react-app/src/components/pages/store/ShopPage.css
================
/*******************************************/
/* Base Imports & Fonts                   */
/*******************************************/
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

/*******************************************/
/* Base Styles for ShopPage               */
/*******************************************/

/* Root container for the page */
.shop-page.mario-kart-theme {
  font-family: 'Press Start 2P', cursive, sans-serif;
  /* Faded overlay + background image */
  background:
    linear-gradient(to bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.7)),
    url('./shopbg1.jpg') no-repeat center fixed;
  background-size: cover;
  background-attachment: fixed;  /* keeps it fixed on scroll */
  background-position: center;
  
  min-height: 100vh;
  color: #fff;
  padding: 20px;
}

/* A fun, bold header */
.shop-header {
  text-align: center;
  margin-bottom: 30px;
  position: relative;
}

/* Title styling reminiscent of video-game titles */
.shop-header .main-title {
  font-size: 3rem;
  color: #c0392b;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #a93226;
  margin-bottom: 10px;
}

/* Container with user info (coins, level) */
.shop-user-info {
  display: flex;
  justify-content: center;
  gap: 20px;
  font-size: 0.8rem;
}

/* Each user stat text */
.shop-user-info .user-stat {
  background: #444;
  padding: 5px 10px;
  border-radius: 8px;
  border: 2px solid #c0392b;
}

/* Purchase status feedback */
.purchase-status {
  background: #c0392b;
  color: #000;
  text-align: center;
  font-size: 0.9rem;
  padding: 10px;
  margin: 0 auto 20px auto;
  width: 70%;
  border: 2px solid #222;
  border-radius: 10px;
}

/* Loading and error text */
.loading-text,
.error-text {
  text-align: center;
  margin: 20px 0;
}

/* Section containers for XP Boosts and Avatars 
   with a transparent background that lets the background show through. */
.shop-section {
  margin-bottom: 40px;
  border: 2px dashed #c0392b;
  border-radius: 10px;
  padding: 20px;
}

/* Titles for each section */
.section-title {
  font-size: 1.2rem;
  margin-bottom: 20px;
  color: #c0392b;
  text-transform: uppercase;
  text-shadow: 1px 1px 0 #000;
  text-align: center;
}

/* Grid container for items */
.shop-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 20px;
  justify-items: center;
}

/* Individual item containers (shared by XP boosts and avatars) */
.shop-item {
  background: #333;
  border: 2px solid #c0392b;
  border-radius: 12px;
  width: 200px;
  text-align: center;
  padding: 10px;
  position: relative;
  transition: transform 0.2s ease-in-out;
}

.shop-item:hover {
  transform: translateY(-4px);
}

/* Common styling for all item images */
.shop-item-image {
  width: 100%;
  max-width: 120px;
  object-fit: contain;
  margin-bottom: 10px;
  border: 2px solid #c0392b;
  border-radius: 8px;
  background: #222;
}

/* Shared item info area */
.shop-item-info h3 {
  font-size: 1rem;
  margin-bottom: 10px;
  color: #c0392b;
  text-shadow: 1px 1px 0 #000;
}

/* Minor texts inside item info (descriptions, cost, etc.) */
.shop-item-info p {
  margin: 5px 0;
  font-size: 0.8rem;
  line-height: 1.2rem;
}

/* Cost, unlock level, etc. */
.cost, .unlock-level, .default-tag {
  color: #fff;
  background: #444;
  display: inline-block;
  padding: 3px 6px;
  border-radius: 6px;
  margin-bottom: 5px;
  border: 1px solid #c0392b;
}

/* The "Buy"/"Equip" buttons */
.purchase-button {
  cursor: pointer;
  font-family: 'Press Start 2P', sans-serif;
  font-size: 0.7rem;
  color: #000;
  background: #c0392b;
  border: 2px solid #222;
  border-radius: 6px;
  padding: 8px 12px;
  margin-top: 10px;
  text-transform: uppercase;
  transition: background 0.2s;
}

.purchase-button:hover:not(:disabled) {
  background: #e74c3c;
}

.purchase-button:disabled {
  background: #bbb;
  color: #777;
  cursor: not-allowed;
}

/*******************************************/
/* Optional: Avatar-Specific Classes       */
/*******************************************/

/* If you want a distinct container look for avatars */
.avatar-section {
  /* Currently inherits .shop-section styles. 
     Add any unique styling if desired. */
}

/* If you want a distinct look for avatar items. 
   They already inherit from .shop-item. */
.avatar-item {
  /* Additional/override styles for Avatars go here if needed. */
}

/*******************************************/
/* Media Queries                           */
/*******************************************/

/*******************************************/
/* 1) Extra-Small Devices: max-width 320px */
/*******************************************/
@media (max-width: 320px) {
  .shop-page.mario-kart-theme {
    padding: 10px;
    font-size: 0.8rem; 
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .shop-header .main-title {
    font-size: 2rem;
    margin-bottom: 5px;
  }

  .shop-user-info {
    flex-direction: column;
    align-items: center;
    gap: 10px;
    font-size: 0.7rem;
  }

  .purchase-status {
    width: 90%;
    font-size: 0.8rem;
    padding: 8px;
    margin-bottom: 15px;
  }

  .section-title {
    font-size: 1rem;
    margin-bottom: 15px;
  }

  /* XP/Avatar grid: single column for tiny screens */
  .shop-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }

  .shop-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .shop-item-image {
    max-width: 80px;
    margin-bottom: 5px;
  }
  .shop-item-info h3 {
    font-size: 0.9rem;
    margin-bottom: 5px;
  }
  .shop-item-info p {
    font-size: 0.7rem;
    line-height: 1rem;
  }

  .purchase-button {
    font-size: 0.6rem;
    padding: 6px 8px;
    margin-top: 5px;
  }
  
  /* Avatars (if you want them separate, same fix) */
  .avatar-section .shop-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }
  .avatar-section .shop-item.avatar-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .avatar-section .shop-item.avatar-item .shop-item-image {
    max-width: 80px;
    margin-bottom: 5px;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/*******************************************/
@media (max-width: 480px) {
  .shop-page.mario-kart-theme {
    padding: 15px;
    font-size: 0.85rem;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .shop-header .main-title {
    font-size: 2.5rem;
    margin-bottom: 8px;
  }

  .shop-user-info {
    flex-direction: column;
    align-items: center;
    gap: 10px;
    font-size: 0.75rem;
  }

  .purchase-status {
    width: 80%;
    font-size: 0.85rem;
    margin-bottom: 20px;
  }

  .section-title {
    font-size: 1.1rem;
  }

  /* Keep it single column or minimal columns at 480px */
  .shop-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .shop-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .shop-item-image {
    max-width: 100px;
    margin-bottom: 8px;
  }
  .shop-item-info h3 {
    font-size: 0.7rem;
  }
  .shop-item-info p {
    font-size: 0.75rem;
    line-height: 1.1rem;
  }

  .purchase-button {
    font-size: 0.65rem;
    padding: 6px 10px;
  }
  
  /* Avatars */
  .avatar-section .shop-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  .avatar-section .shop-item.avatar-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .avatar-section .shop-item.avatar-item .shop-item-image {
    max-width: 100px;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  .shop-page.mario-kart-theme {
    padding: 20px;
    font-size: 0.9rem;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .shop-header .main-title {
    font-size: 2.7rem;
  }

  .shop-user-info {
    justify-content: center;
    gap: 15px;
    font-size: 0.8rem;
  }

  .purchase-status {
    width: 75%;
    font-size: 0.9rem;
  }

  .section-title {
    font-size: 1.15rem;
  }

  /* Potentially 1 column for safety, or 2 columns if you prefer */
  .shop-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }

  .shop-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .shop-item-image {
    max-width: 110px;
    margin-bottom: 10px;
  }
  .shop-item-info h3 {
    font-size: 0.7rem;
  }
  .shop-item-info p {
    font-size: 0.7rem;
    line-height: 1.2rem;
  }

  .purchase-button {
    font-size: 0.7rem;
    padding: 8px 12px;
  }
  
  /* Avatars */
  .avatar-section .shop-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  .avatar-section .shop-item.avatar-item {
    width: 100%;
    max-width: none;
    margin: 0 auto;
  }
  .avatar-section .shop-item.avatar-item .shop-item-image {
    max-width: 110px;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/*******************************************/
@media (max-width: 768px) {
  .shop-page.mario-kart-theme {
    padding: 25px;
    font-size: 1rem;
    background-attachment: scroll !important;
    background-position: center top !important; 
  }

  .shop-header .main-title {
    font-size: 3rem;
  }

  .shop-user-info {
    font-size: 0.85rem;
  }

  .purchase-status {
    width: 70%;
    font-size: 0.95rem;
  }

  .section-title {
    font-size: 1.2rem;
  }

  /* Keep it simple: single column or up to 2 columns if you prefer */
  .shop-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }

  .shop-item {
    max-width: 260px;
    padding: 14px;
  }
  .shop-item-image {
    max-width: 120px;
    margin-bottom: 10px;
  }
  .shop-item-info h3 {
    font-size: 0.7rem;
  }
  .shop-item-info p {
    font-size: 0.6rem;
    line-height: 1rem;
  }
  .purchase-button {
    font-size: 0.75rem;
    padding: 8px 14px;
  }
  
  /* Avatars */
  .avatar-section .shop-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  .avatar-section .shop-item.avatar-item {
    max-width: 150px;
    margin: 0 auto;
  }
  .avatar-section .shop-item.avatar-item .shop-item-image {
    max-width: 120px;
  }
}

================
File: frontend/my-react-app/src/components/pages/store/ShopPage.js
================
// src/components/pages/store/ShopPage.js
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchShopItems } from '../store/shopSlice';
import { fetchUserData } from '../store/userSlice';
import './ShopPage.css';

const ShopPage = () => {
  const dispatch = useDispatch();

  // Grab shop data from Redux
  const { items, status, error } = useSelector((state) => state.shop);

  // Grab user data from Redux
  const {
    userId,
    coins,
    level,
    xpBoost,
    currentAvatar,
    purchasedItems = []
  } = useSelector((state) => state.user);

  // Local state for purchase/equip messages
  const [purchaseStatus, setPurchaseStatus] = useState(null);

  // On mount or if status is idle, fetch items
  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchShopItems());
    }
  }, [status, dispatch]);

  // Filter + Sort items by cost ASC (cost null => 0)
  const xpBoostItems = items
    .filter((item) => item.type === 'xpBoost')
    .sort((a, b) => ((a.cost ?? 0) - (b.cost ?? 0)));
  const avatarItems = items
    .filter((item) => item.type === 'avatar')
    .sort((a, b) => ((a.cost ?? 0) - (b.cost ?? 0)));

  // Check if user owns an item
  const isPurchased = (itemId) => purchasedItems.includes(itemId);

  // Purchase handler
  const handlePurchase = async (itemId) => {
    if (!userId) {
      setPurchaseStatus('Please log in to make a purchase.');
      return;
    }
    setPurchaseStatus('Purchasing...');
    try {
      const response = await fetch(`/api/test/shop/purchase/${itemId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId })
      });
      const data = await response.json();
      if (response.ok) {
        // Refresh user data
        dispatch(fetchUserData(userId));
        setPurchaseStatus(data.message || 'Purchase successful!');
      } else {
        setPurchaseStatus(data.message || 'Purchase failed.');
      }
    } catch (err) {
      setPurchaseStatus('Error: ' + err.message);
    }
  };

  // Equip handler
  const handleEquip = async (itemId) => {
    if (!userId) {
      setPurchaseStatus('Please log in to equip an avatar.');
      return;
    }
    setPurchaseStatus('Equipping avatar...');
    try {
      const response = await fetch('/api/test/shop/equip', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, itemId })
      });
      const data = await response.json();
      if (response.ok) {
        dispatch(fetchUserData(userId));
        setPurchaseStatus(data.message || 'Avatar equipped!');
      } else {
        setPurchaseStatus(data.message || 'Equip failed.');
      }
    } catch (err) {
      setPurchaseStatus('Error: ' + err.message);
    }
  };

  // Render XP Boosts
  const renderXpBoosts = () => {
    if (!xpBoostItems.length) return null;
    return (
      <div className="shop-section xpboost-section">
        <h2 className="section-title">XP Boosts</h2>
        <div className="shop-grid">
          {xpBoostItems.map((boost) => {
            const costVal = boost.cost ?? 0;
            const canAfford = coins >= costVal;
            const isActiveBoost = xpBoost === boost.effectValue;
            const buttonText = isActiveBoost ? 'Active' : 'Buy';
            const buttonDisabled = isActiveBoost || !canAfford;

            const handleClick = () => {
              if (!canAfford || isActiveBoost) return;
              handlePurchase(boost._id);
            };

            return (
              <div className="shop-item boost-item" key={boost._id}>
                <img
                  src={boost.imageUrl}
                  alt={boost.title}
                  className="shop-item-image"
                />
                <div className="shop-item-info">
                  <h3>{boost.title}</h3>
                  <p>{boost.description}</p>
                  <p className="cost">Cost: {costVal} coins</p>
                  <button
                    disabled={buttonDisabled}
                    onClick={handleClick}
                    className="purchase-button"
                  >
                    {buttonText}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // Render Avatars
  const renderAvatars = () => {
    if (!avatarItems.length) return null;
    return (
      <div className="shop-section avatar-section">
        <h2 className="section-title">Avatars</h2>
        {/* 
          Here's the only structural change:
          we add "avatar-grid" alongside "shop-grid" 
          so you can target it in your CSS. 
        */}
        <div className="shop-grid avatar-grid">
          {avatarItems.map((avatar) => {
            const costVal = avatar.cost ?? 0;
            const autoUnlocked = (avatar.cost === null);
            const levelUnlocked = level >= avatar.unlockLevel;
            const purchased = isPurchased(avatar._id);

            const unlocked = autoUnlocked || levelUnlocked || purchased;
            const isEquipped = currentAvatar === avatar._id;

            let buttonText = '';
            let buttonDisabled = false;
            let onClickAction = null;

            if (!unlocked) {
              // Must buy
              buttonText = 'Buy';
              buttonDisabled = coins < costVal;
              onClickAction = () => handlePurchase(avatar._id);
            } else {
              // Already unlocked (cost=0/null) or purchased
              if (isEquipped) {
                buttonText = 'Equipped';
                buttonDisabled = true;
              } else {
                buttonText = 'Equip';
                onClickAction = () => handleEquip(avatar._id);
              }
            }

            return (
              <div className="shop-item avatar-item" key={avatar._id}>
                <img
                  src={avatar.imageUrl}
                  alt={avatar.title}
                  className="shop-item-image"
                />
                <div className="shop-item-info">
                  <h3>{avatar.title}</h3>
                  <p>{avatar.description}</p>
                  <p className="unlock-level">Unlock Level: {avatar.unlockLevel}</p>
                  {(!autoUnlocked && !unlocked) && (
                    <p className="cost">Cost: {costVal} coins</p>
                  )}
                  {autoUnlocked && (
                    <p className="default-tag">(Default Avatar)</p>
                  )}
                  <button
                    disabled={buttonDisabled}
                    onClick={onClickAction}
                    className="purchase-button"
                  >
                    {buttonText}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // Determine content based on status
  let content;
  if (status === 'loading') {
    content = <p className="loading-text">Loading shop items...</p>;
  } else if (status === 'failed') {
    content = <p className="error-text">Error loading shop items: {error}</p>;
  } else {
    content = (
      <>
        {renderXpBoosts()}
        {renderAvatars()}
      </>
    );
  }

  return (
    <div className="shop-page mario-kart-theme">
      <header className="shop-header">
        <h1 className="main-title">Shop</h1>
        <div className="shop-user-info">
          <p className="user-stat">Coins: {coins}</p>
          <p className="user-stat">Level: {level}</p>
        </div>
      </header>

      {purchaseStatus && (
        <div className="purchase-status">{purchaseStatus}</div>
      )}

      {content}
    </div>
  );
};

export default ShopPage;

================
File: frontend/my-react-app/src/components/pages/store/shopSlice.js
================
// src/store/shopSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async thunk to fetch shop items from the backend
export const fetchShopItems = createAsyncThunk(
  'shop/fetchShopItems',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('/api/test/shop');
      if (!response.ok) {
        throw new Error('Failed to fetch shop items');
      }
      const data = await response.json();
      return data; // Expected to be an array of shop item objects
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const initialState = {
  items: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

const shopSlice = createSlice({
  name: 'shop',
  initialState,
  reducers: {
    // Optionally add reducers for filtering items or updating local shop state
    // e.g., setFilter(state, action) { state.filter = action.payload; }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchShopItems.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchShopItems.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchShopItems.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  },
});

export default shopSlice.reducer;

================
File: frontend/my-react-app/src/components/pages/store/store.js
================
// store.js
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';
import shopReducer from './shopSlice';
import achievementsReducer from './achievementsSlice';

export const store = configureStore({
  reducer: {
    user: userReducer,
    shop: shopReducer,
    achievements: achievementsReducer
  }
});

================
File: frontend/my-react-app/src/components/pages/store/StreakCalendar.js
================
// components/StreakCalendar.js
import React from 'react';
import { useSelector } from 'react-redux';

function StreakCalendar() {
  const loginHistory = useSelector((state) => state.user.loginHistory);

  // We'll do a simple approach: show current month days in a grid, 
  // and highlight any date in loginHistory.
  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth(); // 0-based, e.g. 0=Jan
  const startOfMonth = new Date(year, month, 1);
  const endOfMonth = new Date(year, month + 1, 0);
  const daysInMonth = endOfMonth.getDate();

  // Convert loginHistory strings to a set for quick membership check
  const loginDatesSet = new Set(loginHistory);

  // We'll store the date strings in the same format we used above, e.g. new Date().toDateString()
  // But let's just do a quick approach:
  const dayArray = [];
  for (let d = 1; d <= daysInMonth; d++) {
    const dateObj = new Date(year, month, d);
    const dateStr = dateObj.toDateString();
    const loggedIn = loginDatesSet.has(dateStr);
    dayArray.push({ day: d, loggedIn });
  }

  return (
    <div>
      <h3>Streak Calendar ({now.toLocaleString('default', { month: 'long' })} {year})</h3>
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(7, 40px)', 
        gap: '10px'
      }}>
        {dayArray.map(({ day, loggedIn }) => (
          <div 
            key={day}
            style={{
              width: '40px',
              height: '40px',
              background: loggedIn ? '#4CAF50' : '#555',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              borderRadius: '4px',
              color: '#fff'
            }}
          >
            {day}
          </div>
        ))}
      </div>
    </div>
  );
}

export default StreakCalendar;

================
File: frontend/my-react-app/src/components/pages/store/UserProfile.css
================
/* src/components/pages/store/UserProfile.css */

/* FULL-SCREEN BACKGROUND (only if .profile-container is in DOM) */
body:has(.profile-container) {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;

  background:
    linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0.3),
      rgba(0, 0, 0, 0.7)
    ),
    url('./user.jpg') no-repeat center center fixed;
  background-size: cover;
  background-attachment: fixed; /* might not work on some mobile browsers */
  background-position: center;
}

/*******************************************/
/* Base styles                             */
/*******************************************/

.profile-container {
  color: #fff;
  padding: 20px;
  max-width: 900px;
  margin: 0 auto;
}

.profile-header {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 20px;
}

.profile-picture img {
  width: 80px;
  height: 80px;
  border: 3px solid #cc0000;
  border-radius: 50%;
  object-fit: cover;
}

.profile-title {
  font-size: 2rem;
  font-family: 'Orbitron', sans-serif;
  color: #b30000;
  text-shadow: 1px 1px 0px #fff;
  margin: 0;
}

.logout-button {
  margin-left: auto;
  background: none;
  border: 1px solid #ff0000;
  color: #ff0000;
  font-weight: bold;
  padding: 8px 16px;
  border-radius: 8px;
  cursor: pointer;
}
.logout-button:hover {
  background: #ff0000;
  color: #fff;
}

.profile-overview,
.profile-actions,
.profile-extra {
  margin-bottom: 20px;
}

.profile-card,
.action-card,
.extra-card {
  background: #1e1e1e;
  border: 2px solid #333;
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 20px;
}

.profile-card h2,
.action-card h2,
.extra-card h2 {
  margin-top: 0;
  font-family: 'Orbitron', sans-serif;
  color: #b30000;
}

.profile-details p {
  margin: 6px 0;
}
.profile-details .detail-label {
  font-weight: bold;
  color: #b30000;
}

.action-buttons {
  display: flex;
  flex-direction: column;
  gap: 10px;
}
.profile-btn {
  background: #cc0000;
  border: solid 1px #000;
  color: #fff;
  padding: 8px 12px;
  border-radius: 5px;
  cursor: pointer;
}
.profile-btn:hover {
  background: #ff0000;
}

.extra-card h2 {
  margin-bottom: 10px;
}

.achievements-list,
.purchased-items-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.achievement-display {
  display: flex;
  align-items: center;
  gap: 8px;
  background-color: #292929;
  padding: 8px;
  border-radius: 8px;
}

.achievement-icon {
  font-size: 3rem;
  color: #ffd700;
}

.achievement-id {
  font-weight: bold;
  color: #fff;
}

.purchased-item-display {
  background-color: #292929;
  padding: 8px;
  border-radius: 8px;
}
.purchased-item-title {
  font-weight: bold;
  color: #ffcccc;
}

/*******************************************/
/* Additional styling for the change fields */
/*******************************************/

.change-section {
  position: relative;
  margin-top: 1rem;
}

.change-section input {
  width: 100%;
  padding-right: 40px; /* Make room for an icon if needed */
  box-sizing: border-box;
}

.change-section-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 0.5rem;
}

.change-section-buttons button {
  background: linear-gradient(45deg, #6a11cb, #2575fc);
  color: #fff;
  font-size: 1.1rem;
  padding: 0.8rem 1.2rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.change-section-buttons button:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.change-section-buttons button:active {
  transform: scale(0.98);
}

/* status message styling */
.status-message {
  background: #d8ffd8;
  padding: 0.75rem 1rem;
  margin: 1rem 0;
  border: 1px solid #8f8;
  border-radius: 6px;
  color: #333;
}

/*******************************************/
/* Inputs and unique eye icon classes      */
/*******************************************/

input[type="text"],
input[type="password"],
input[type="email"] {
  width: 100%;
  max-width: 300px;
  padding: 10px;
  margin-bottom: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1rem;
}

/* Overview password row */
.password-display-row {
  display: flex;
  align-items: center;
  gap: 10px;
  margin: 10px 0;
}

.password-value-container {
  display: inline-flex;
  align-items: center;
  position: relative;
  background: #fff;
  color: #000;
  border-radius: 4px;
  padding-right: 35px; /* space for the eye icon */
}

.password-value-container span {
  padding: 8px;
  font-size: 0.95rem;
}

/*******************************************/
/* Change Password Section                 */
/*******************************************/

.change-password-section {
  width: 100%;
  max-width: 400px;
  margin: 20px 0;
}

.password-row {
  margin-bottom: 15px;
  width: 100%;
}

.password-input-container {
  position: relative;
  width: 100%;
}

.password-input-container input {
  width: 100%;
  padding: 8px 35px 8px 12px; /* room for eye icon on right */
  border: 1px solid #ccc;
  border-radius: 4px;
  height: 40px;
  box-sizing: border-box;
}

/*******************************************/
/* The unique "profile-eye-icon" class     */
/*******************************************/

.profile-eye-icon {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
  z-index: 2;
}

.profile-eye-icon:hover {
  color: #333;
}

.profile-eye-icon svg {
  width: 16px;
  height: 16px;
}

/*******************************************/
/* Responsive breakpoints                  */
/*******************************************/

/* 1) Extra-Small: max-width 320px */
@media (max-width: 320px) {
  .profile-container {
    padding: 10px;
    max-width: 100%;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  .profile-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .profile-picture img {
    width: 50px;
    height: 50px;
    border-width: 2px;
  }

  .profile-title {
    font-size: 1.4rem;
  }

  .logout-button {
    margin-left: 0;
    margin-top: 10px;
    padding: 6px 10px;
    font-size: 0.9rem;
  }

  .profile-card,
  .action-card,
  .extra-card {
    padding: 10px;
  }

  .profile-card h2,
  .action-card h2,
  .extra-card h2 {
    font-size: 1rem;
  }

  .profile-details p {
    font-size: 0.9rem; 
  }

  .profile-btn {
    padding: 6px 8px;
    font-size: 0.9rem;
  }

  .achievement-icon {
    font-size: 1rem;
  }

  .achievement-id,
  .purchased-item-title {
    font-size: 0.9rem;
  }
}

/* 2) Small Devices: max-width 480px */
@media (max-width: 480px) {
  .profile-container {
    padding: 15px;
    max-width: 100%;
  }
  
  .profile-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }

  .profile-picture img {
    width: 60px;
    height: 60px;
    border-width: 2px;
  }

  .profile-title {
    font-size: 1.5rem;
  }
  .logout-button {
    margin-left: 0;
    margin-top: 10px;
    padding: 6px 12px;
    font-size: 1rem;
  }

  .profile-card,
  .action-card,
  .extra-card {
    padding: 12px;
  }

  .profile-card h2,
  .action-card h2,
  .extra-card h2 {
    font-size: 1.1rem;
  }

  .profile-details p {
    font-size: 1rem;
  }

  .profile-btn {
    font-size: 1rem;
    padding: 6px 10px;
  }

  .achievement-icon {
    font-size: 1.1rem;
  }

  .achievement-id,
  .purchased-item-title {
    font-size: 1rem;
  }
}

/* 3) Medium-Small Devices: max-width 600px*/
@media (max-width: 600px) {
  .profile-container {
    padding: 15px;
    max-width: 95%;
  }
  
  .profile-header {
    gap: 20px;
  }

  .profile-picture img {
    width: 70px;
    height: 70px;
  }

  .profile-title {
    font-size: 1.6rem;
  }

  .logout-button {
    padding: 7px 14px;
    font-size: 1rem;
  }

  .profile-card,
  .action-card,
  .extra-card {
    padding: 14px;
  }
  .profile-card h2,
  .action-card h2,
  .extra-card h2 {
    font-size: 1.2rem;
  }

  .profile-details p {
    font-size: 1rem;
  }
  .profile-btn {
    padding: 7px 12px;
    font-size: 1rem;
  }

  .achievement-icon {
    font-size: 1.2rem;
  }
  .achievement-id,
  .purchased-item-title {
    font-size: 1rem;
  }
}

/* 4) Tablets / Larger Mobiles: max-width 768px */
@media (max-width: 768px) {
  .profile-container {
    padding: 20px;
    max-width: 90%;
  }

  .profile-header {
    gap: 25px;
  }
  
  .profile-title {
    font-size: 1.7rem;
  }

  .logout-button {
    padding: 8px 16px;
    font-size: 1rem;
  }

  .profile-card,
  .action-card,
  .extra-card {
    padding: 16px;
  }
  .profile-card h2,
  .action-card h2,
  .extra-card h2 {
    font-size: 1.3rem;
  }

  .profile-details p {
    font-size: 1rem;
  }

  .profile-btn {
    font-size: 1rem;
    padding: 8px 12px;
  }

  .achievement-icon {
    font-size: 1.3rem;
  }
  .achievement-id,
  .purchased-item-title {
    font-size: 1rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/store/UserProfile.js
================
// src/components/pages/store/UserProfile.js
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { logout, fetchUserData } from '../store/userSlice';
import { useNavigate } from 'react-router-dom';
import './UserProfile.css'; // Our updated CSS with the unique eye icon

import '../auth/auth.css';
import '../auth/AuthToast.css'; 
import PasswordRequirements from '../auth/PasswordRequirements';

import {
  FaTrophy,
  FaMedal,
  FaStar,
  FaCrown,
  FaBolt,
  FaBook,
  FaBrain,
  FaCheckCircle,
  FaRegSmile,
  FaMagic,
  FaEye,
  FaEyeSlash
} from 'react-icons/fa';

// ====================================
// FRONTEND VALIDATION HELPERS
// (Approximating your Python rules)
// ====================================

// Example small dictionary of very common passwords
const COMMON_PASSWORDS = new Set([
  "password", "123456", "12345678", "qwerty", "letmein", "welcome"
]);

// Private Use / Surrogates ranges (approx in JS)
const PRIVATE_USE_RANGES = [
  [0xE000, 0xF8FF],
  [0xF0000, 0xFFFFD],
  [0x100000, 0x10FFFD]
];
const SURROGATES_RANGE = [0xD800, 0xDFFF];

// Basic check for private use / surrogate codepoints
function hasForbiddenUnicodeScripts(str) {
  for (let i = 0; i < str.length; i++) {
    const cp = str.codePointAt(i);
    // Surrogates
    if (cp >= SURROGATES_RANGE[0] && cp <= SURROGATES_RANGE[1]) {
      return true;
    }
    // Private use
    for (const [start, end] of PRIVATE_USE_RANGES) {
      if (cp >= start && cp <= end) {
        return true;
      }
    }
  }
  return false;
}

// Disallow mixing major scripts (Latin, Greek, Cyrillic) -- simplistic approach
function disallowMixedScripts(str) {
  const scriptSets = new Set();
  for (let i = 0; i < str.length; i++) {
    const cp = str.codePointAt(i);
    // Basic Latin & extended
    if (cp >= 0x0041 && cp <= 0x024F) {
      scriptSets.add("Latin");
    }
    // Greek
    else if (cp >= 0x0370 && cp <= 0x03FF) {
      scriptSets.add("Greek");
    }
    // Cyrillic
    else if (cp >= 0x0400 && cp <= 0x04FF) {
      scriptSets.add("Cyrillic");
    }
    if (scriptSets.size > 1) {
      return true;
    }
  }
  return false;
}

// ========================
// FRONTEND: Validate Username
// ========================
function frontValidateUsername(username) {
  const errors = [];
  const name = username.normalize("NFC");

  // 1) Length
  if (name.length < 3 || name.length > 30) {
    errors.push("Username must be between 3 and 30 characters long.");
  }

  // 2) Forbidden Unicode script checks
  if (hasForbiddenUnicodeScripts(name)) {
    errors.push("Username contains forbidden Unicode blocks (private use or surrogates).");
  }

  // 3) Disallow mixing multiple major scripts
  if (disallowMixedScripts(name)) {
    errors.push("Username cannot mix multiple Unicode scripts (e.g., Latin & Cyrillic).");
  }

  // 4) Forbid control chars [0..31, 127] + suspicious punctuation
  const forbiddenRanges = [[0, 31], [127, 127]];
  const forbiddenChars = new Set(['<', '>', '\\', '/', '"', "'", ';', '`',' ', '\t', '\r', '\n']);
  for (let i = 0; i < name.length; i++) {
    const cp = name.charCodeAt(i);
    // Check ranges
    if (forbiddenRanges.some(([start, end]) => cp >= start && cp <= end)) {
      errors.push("Username contains forbidden control characters (ASCII 0-31 or 127).");
      break;
    }
    if (forbiddenChars.has(name[i])) {
      errors.push("Username contains forbidden characters like <, >, or whitespace.");
      break;
    }
  }

  // 5) Strict allowlist pattern
  const pattern = /^[A-Za-z0-9._-]+$/;
  if (!pattern.test(name)) {
    errors.push("Username can only contain letters, digits, underscores, dashes, or dots.");
  }

  // 6) Disallow triple identical consecutive characters
  if (/(.)\1{2,}/.test(name)) {
    errors.push("Username cannot contain three identical consecutive characters.");
  }

  // 7) Disallow leading or trailing punctuation
  if (/^[._-]|[._-]$/.test(name)) {
    errors.push("Username cannot start or end with . - or _.");
  }

  return errors;
}

// ========================
// FRONTEND: Validate Email
// ========================
function frontValidateEmail(email) {
  const errors = [];
  const e = email.normalize("NFC").trim();

  // 1) Length
  if (e.length < 5 || e.length > 128) {
    errors.push("Email length must be between 5 and 128 characters.");
  }

  // 3) Forbid suspicious ASCII
  const forbiddenAscii = new Set(['<','>','`',';',' ', '\t','\r','\n','"',"'", '\\']);
  for (let i = 0; i < e.length; i++) {
    if (forbiddenAscii.has(e[i])) {
      errors.push("Email contains forbidden characters like <, >, or whitespace.");
      break;
    }
  }

  // 4) Must have exactly one @
  const atCount = (e.match(/@/g) || []).length;
  if (atCount !== 1) {
    errors.push("Email must contain exactly one '@' symbol.");
  }

  return errors;
}

// ========================
// FRONTEND: Validate Password
// ========================
function frontValidatePassword(password, username, email) {
  const errors = [];
  const pwd = password;

  // 1) Length
  if (pwd.length < 6 || pwd.length > 64) {
    errors.push("Password must be between 6 and 64 characters long.");
  }

  // 2) Disallow whitespace or < >
  if (/[ \t\r\n<>]/.test(pwd)) {
    errors.push("Password cannot contain whitespace or < or > characters.");
  }

  // 3) Complexity
  if (!/[A-Z]/.test(pwd)) {
    errors.push("Password must contain at least one uppercase letter.");
  }
  if (!/[a-z]/.test(pwd)) {
    errors.push("Password must contain at least one lowercase letter.");
  }
  if (!/\d/.test(pwd)) {
    errors.push("Password must contain at least one digit.");
  }
  const specialPattern = /[!@#$%^&*()\-_=+\[\]{}|;:'",<.>\/?`~\\]/;
  if (!specialPattern.test(pwd)) {
    errors.push("Password must contain at least one special character.");
  }

  // 4) Disallow triple identical consecutive characters
  if (/(.)\1{2,}/.test(pwd)) {
    errors.push("Password must not contain three identical consecutive characters.");
  }

  // 5) Check common password list
  const lowerPwd = pwd.toLowerCase();
  if (COMMON_PASSWORDS.has(lowerPwd)) {
    errors.push("Password is too common. Please choose a stronger password.");
  }

  // 6) Disallow certain dictionary words
  const dictionaryPatterns = ['password', 'qwerty', 'abcdef', 'letmein', 'welcome', 'admin'];
  for (const pat of dictionaryPatterns) {
    if (lowerPwd.includes(pat)) {
      errors.push(`Password must not contain the word '${pat}'.`);
    }
  }

  // 7) Disallow if password contains username or local part of email
  if (username && lowerPwd.includes(username.toLowerCase())) {
    errors.push("Password must not contain your username.");
  }
  if (email) {
    const emailLocalPart = email.split('@')[0].toLowerCase();
    if (lowerPwd.includes(emailLocalPart)) {
      errors.push("Password must not contain the local part of your email address.");
    }
  }

  return errors;
}

// ====================================
// (Optional) Achievement Icons
// ====================================
const iconMapping = {
  test_rookie: FaTrophy,
  accuracy_king: FaMedal,
  bronze_grinder: FaBook,
  silver_scholar: FaStar,
  gold_god: FaCrown,
  platinum_pro: FaMagic,
  walking_encyclopedia: FaBrain,
  redemption_arc: FaBolt,
  memory_master: FaRegSmile,
  coin_collector_5000: FaBook,
  coin_hoarder_10000: FaBook,
  coin_tycoon_50000: FaBook,
  perfectionist_1: FaCheckCircle,
  double_trouble_2: FaCheckCircle,
  error404_failure_not_found: FaCheckCircle,
  level_up_5: FaTrophy,
  mid_tier_grinder_25: FaMedal,
  elite_scholar_50: FaStar,
  ultimate_master_100: FaCrown,
  category_perfectionist: FaBolt,
  absolute_perfectionist: FaBolt,
  exam_conqueror: FaMedal,
  subject_specialist: FaMedal,
  answer_machine_1000: FaBook,
  knowledge_beast_5000: FaBrain,
  question_terminator: FaBrain,
  test_finisher: FaCheckCircle,
  subject_finisher: FaCheckCircle
};

const UserProfile = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const {
    userId,
    username,
    email,
    xp,
    level,
    coins,
    achievements = [],
    currentAvatar,
    purchasedItems,
    subscriptionActive,
    password
  } = useSelector((state) => state.user);

  // Toggles for showing/hiding different forms
  const [showChangeUsername, setShowChangeUsername] = useState(false);
  const [newUsername, setNewUsername] = useState('');

  const [showChangeEmail, setShowChangeEmail] = useState(false);
  const [newEmail, setNewEmail] = useState('');

  const [showChangePassword, setShowChangePassword] = useState(false);

  // Toggles for showing/hiding password text
  const [showOldPassword, setShowOldPassword] = useState(false);
  const [oldPassword, setOldPassword] = useState('');

  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const [showRequirements, setShowRequirements] = useState(false);

  // The "current password" in the overview
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);

  // For success/error messages
  const [statusMessage, setStatusMessage] = useState('');

  let profilePicUrl = '/avatars/avatar1.png'; 
  // or logic if you have stored 'currentAvatar'

  const handleLogout = () => {
    dispatch(logout());
    localStorage.removeItem('userId');
    navigate('/login');
  };

  const refetchUser = () => {
    if (userId) {
      dispatch(fetchUserData(userId));
    }
  };

  // =======================
  // CHANGE USERNAME
  // =======================
  const handleChangeUsername = async () => {
    setStatusMessage('');
    const errors = frontValidateUsername(newUsername);
    if (errors.length > 0) {
      setStatusMessage(errors.join(' '));
      return;
    }

    try {
      const res = await fetch('/api/test/user/change-username', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, newUsername })
      });
      const data = await res.json();

      if (!res.ok) {
        let errorMsg = data.error || 'Failed to change username';
        if (data.details && data.details.length > 0) {
          errorMsg += ': ' + data.details.join(', ');
        }
        throw new Error(errorMsg);
      }
      setStatusMessage('Username updated successfully!');
      setShowChangeUsername(false);
      setNewUsername('');
      refetchUser();
    } catch (err) {
      setStatusMessage('Error changing username: ' + err.message);
    }
  };

  // =======================
  // CHANGE EMAIL
  // =======================
  const handleChangeEmail = async () => {
    setStatusMessage('');
    const errors = frontValidateEmail(newEmail);
    if (errors.length > 0) {
      setStatusMessage(errors.join(' '));
      return;
    }

    try {
      const res = await fetch('/api/test/user/change-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, newEmail })
      });
      const data = await res.json();

      if (!res.ok) {
        let errorMsg = data.error || 'Failed to change email';
        if (data.details && data.details.length > 0) {
          errorMsg += ': ' + data.details.join(', ');
        }
        throw new Error(errorMsg);
      }
      setStatusMessage('Email updated successfully!');
      setShowChangeEmail(false);
      setNewEmail('');
      refetchUser();
    } catch (err) {
      setStatusMessage('Error changing email: ' + err.message);
    }
  };

  // =======================
  // CHANGE PASSWORD
  // =======================
  const handleChangePassword = async () => {
    setStatusMessage('');

    if (!oldPassword || !newPassword || !confirmPassword) {
      setStatusMessage('All password fields are required');
      return;
    }
    if (newPassword !== confirmPassword) {
      setStatusMessage('New passwords do not match');
      return;
    }

    const errors = frontValidatePassword(newPassword, username, email);
    if (errors.length > 0) {
      setStatusMessage(errors.join(' '));
      return;
    }

    try {
      const res = await fetch('/api/test/user/change-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          oldPassword,
          newPassword,
          confirmPassword
        })
      });
      const data = await res.json();

      if (!res.ok) {
        let errorMsg = data.error || 'Failed to change password';
        if (data.details && data.details.length > 0) {
          errorMsg += ': ' + data.details.join(', ');
        }
        throw new Error(errorMsg);
      }

      setStatusMessage('Password changed successfully!');
      setShowChangePassword(false);
      setOldPassword('');
      setNewPassword('');
      setConfirmPassword('');
      setShowRequirements(false);
    } catch (err) {
      setStatusMessage('Error changing password: ' + err.message);
    }
  };

  // CANCEL SUBSCRIPTION (placeholder)
  const handleCancelSubscription = async () => {
    try {
      const res = await fetch('/api/test/subscription/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await res.json();
      if (!res.ok) {
        throw new Error(data.error || 'Failed to cancel subscription');
      }
      setStatusMessage('Subscription cancelled (placeholder)');
      refetchUser();
    } catch (err) {
      setStatusMessage('Error cancelling subscription: ' + err.message);
    }
  };

  return (
    <div className="profile-container">
      <div className="profile-header">
        <div className="profile-picture">
          <img src={profilePicUrl} alt="Profile Avatar" />
        </div>
        <h1 className="profile-title">{username}'s Profile</h1>
        <button className="logout-button" onClick={handleLogout}>
          Logout
        </button>
      </div>

      <div className="profile-overview">
        <div className="profile-card">
          <h2>Overview</h2>
          <div className="profile-details">
            <p><span className="detail-label">User ID:</span> {userId}</p>
            <p><span className="detail-label">Level:</span> {level}</p>
            <p><span className="detail-label">XP:</span> {xp}</p>
            <p><span className="detail-label">Coins:</span> {coins}</p>
            <p><span className="detail-label">Email:</span> {email}</p>
            <p><span className="detail-label">Subscription Active:</span> {subscriptionActive ? 'Yes' : 'No'}</p>

            <div className="password-display-row">
              <span className="detail-label">Password:</span>
              <div className="password-value-container">
                <span>{showCurrentPassword ? password : '••••••••'}</span>
                <button 
                  className="profile-eye-icon"
                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                >
                  {showCurrentPassword ? <FaEyeSlash /> : <FaEye />}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="profile-actions">
        <div className="action-card">
          <h2>Account Settings</h2>
          <div className="action-buttons">
            {/* Change username */}
            {!showChangeUsername ? (
              <button className="profile-btn" onClick={() => setShowChangeUsername(true)}>
                Change Username
              </button>
            ) : (
              <div className="change-section">
                <input 
                  type="text"
                  placeholder="New username"
                  value={newUsername}
                  onChange={(e) => setNewUsername(e.target.value)}
                />
                <div className="change-section-buttons">
                  <button onClick={handleChangeUsername}>Submit</button>
                  <button onClick={() => {
                    setShowChangeUsername(false);
                    setNewUsername('');
                  }}>Cancel</button>
                </div>
              </div>
            )}

            {/* Change email */}
            {!showChangeEmail ? (
              <button className="profile-btn" onClick={() => setShowChangeEmail(true)}>
                Change Email
              </button>
            ) : (
              <div className="change-section">
                <input 
                  type="email"
                  placeholder="New email"
                  value={newEmail}
                  onChange={(e) => setNewEmail(e.target.value)}
                />
                <div className="change-section-buttons">
                  <button onClick={handleChangeEmail}>Submit</button>
                  <button onClick={() => {
                    setShowChangeEmail(false);
                    setNewEmail('');
                  }}>Cancel</button>
                </div>
              </div>
            )}

            {/* Change password */}
            {!showChangePassword ? (
              <button className="profile-btn" onClick={() => setShowChangePassword(true)}>
                Change Password
              </button>
            ) : (
              <div className="change-section change-password-section">
                <h3>Change Password</h3>
                <div className="password-row">
                  <div className="password-input-container">
                    <input 
                      type={showOldPassword ? 'text' : 'password'}
                      placeholder="Old password"
                      value={oldPassword}
                      onChange={(e) => setOldPassword(e.target.value)}
                    />
                    <button
                      type="button"
                      className="profile-eye-icon"
                      onClick={() => setShowOldPassword(!showOldPassword)}
                    >
                      {showOldPassword ? <FaEyeSlash /> : <FaEye />}
                    </button>
                  </div>
                </div>
                
                <div className="password-row">
                  <div className="password-input-container">
                    <input 
                      type={showNewPassword ? 'text' : 'password'}
                      placeholder="New password"
                      value={newPassword}
                      onFocus={() => setShowRequirements(true)} 
                      onChange={(e) => setNewPassword(e.target.value)}
                      onBlur={() => {
                        if (!newPassword) {
                          setShowRequirements(false);
                        }
                      }}
                    />
                    <button
                      type="button"
                      className="profile-eye-icon"
                      onClick={() => setShowNewPassword(!showNewPassword)}
                    >
                      {showNewPassword ? <FaEyeSlash /> : <FaEye />}
                    </button>
                  </div>
                </div>

                {showRequirements && (
                  <PasswordRequirements password={newPassword} />
                )}

                <div className="password-row">
                  <div className="password-input-container">
                    <input 
                      type={showConfirmPassword ? 'text' : 'password'}
                      placeholder="Confirm new password"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                    />
                    <button
                      type="button"
                      className="profile-eye-icon"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                    </button>
                  </div>
                </div>

                <div className="change-section-buttons">
                  <button onClick={handleChangePassword}>Submit</button>
                  <button onClick={() => {
                    setShowChangePassword(false);
                    setOldPassword('');
                    setNewPassword('');
                    setConfirmPassword('');
                    setShowRequirements(false);
                  }}>Cancel</button>
                </div>
              </div>
            )}

            {/* Cancel Subscription Placeholder */}
            <button className="profile-btn" onClick={handleCancelSubscription}>
              Cancel Subscription (placeholder)
            </button>
          </div>
        </div>
      </div>

      <div className="profile-extra">
        <div className="extra-card">
          <h2>Your Achievements</h2>
          <div className="achievements-list">
            {achievements.length > 0 ? (
              achievements.map((achId) => (
                <div key={achId} className="achievement-display">
                  {achId}
                </div>
              ))
            ) : (
              <p>You haven't unlocked any achievements yet.</p>
            )}
          </div>
        </div>
        <div className="extra-card">
          <h2>Purchased Items</h2>
          <div className="purchased-items-list">
            {purchasedItems && purchasedItems.length > 0 ? (
              purchasedItems.map((itemId) => (
                <div key={itemId} className="purchased-item-display">
                  <div>Item ID: {itemId}</div>
                </div>
              ))
            ) : (
              <p>No purchased items yet (besides avatars).</p>
            )}
          </div>
        </div>
      </div>

      {statusMessage && (
        <div className="status-message">
          {statusMessage}
        </div>
      )}
    </div>
  );
};

export default UserProfile;

================
File: frontend/my-react-app/src/components/pages/store/userSlice.js
================
// src/store/userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

const initialUserId = localStorage.getItem('userId');

const initialState = {
  userId: initialUserId ? initialUserId : null,
  username: '',
  email: '',
  xp: 0,
  level: 1,
  coins: 0,
  achievements: [],
  xpBoost: 1.0,
  currentAvatar: null,
  nameColor: null,
  purchasedItems: [],
  subscriptionActive: false,

  status: 'idle',
  loading: false,
  error: null,
};

// REGISTER
export const registerUser = createAsyncThunk(
  'user/registerUser',
  async (formData, { rejectWithValue }) => {
    try {
      const response = await fetch('/api/test/user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || 'Registration failed');
      }
      return data;
    } catch (err) {
      return rejectWithValue(err.message);
    }
  }
);

// LOGIN
export const loginUser = createAsyncThunk(
  'user/loginUser',
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await fetch('/api/test/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || 'Login failed');
      }
      return data;
    } catch (err) {
      return rejectWithValue(err.message);
    }
  }
);

// FETCH USER DATA
export const fetchUserData = createAsyncThunk(
  'user/fetchUserData',
  async (userId, { rejectWithValue }) => {
    try {
      const response = await fetch(`/api/test/user/${userId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch user data');
      }
      const data = await response.json();
      return data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setCurrentUserId(state, action) {
      state.userId = action.payload;
    },
    logout(state) {
      state.userId = null;
      state.username = '';
      state.email = '';
      state.xp = 0;
      state.level = 1;
      state.coins = 0;
      state.achievements = [];
      state.xpBoost = 1.0;
      state.currentAvatar = null;
      state.nameColor = null;
      state.purchasedItems = [];
      state.subscriptionActive = false;
      state.status = 'idle';
      localStorage.removeItem('userId');
    },
    setXPAndCoins(state, action) {
      const { xp, coins } = action.payload;
      state.xp = xp;
      state.coins = coins;
    }
  },
  extraReducers: (builder) => {
    builder
      // REGISTER
      .addCase(registerUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(registerUser.fulfilled, (state) => {
        state.loading = false;
        state.error = null;
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // LOGIN
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.error = null;

        const {
          user_id,
          username,
          email,
          coins,
          xp,
          level,
          achievements,
          xpBoost,
          currentAvatar,
          nameColor,
          purchasedItems,
          subscriptionActive
        } = action.payload;

        state.userId = user_id;
        state.username = username;
        state.email = email || '';
        state.coins = coins || 0;
        state.xp = xp || 0;
        state.level = level || 1;
        state.achievements = achievements || [];
        state.xpBoost = xpBoost !== undefined ? xpBoost : 1.0;
        state.currentAvatar = currentAvatar || null;
        state.nameColor = nameColor || null;
        state.purchasedItems = purchasedItems || [];
        state.subscriptionActive = subscriptionActive || false;

        localStorage.setItem('userId', user_id);
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // FETCH USER DATA
      .addCase(fetchUserData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUserData.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.error = null;
        const userDoc = action.payload;

        state.userId = userDoc._id;
        state.username = userDoc.username;
        state.email = userDoc.email || '';
        state.xp = userDoc.xp || 0;
        state.level = userDoc.level || 1;
        state.coins = userDoc.coins || 0;
        state.achievements = userDoc.achievements || [];
        state.xpBoost = userDoc.xpBoost !== undefined ? userDoc.xpBoost : 1.0;
        state.currentAvatar = userDoc.currentAvatar || null;
        state.nameColor = userDoc.nameColor || null;
        state.purchasedItems = userDoc.purchasedItems || [];
        state.subscriptionActive = userDoc.subscriptionActive || false;
      })
      .addCase(fetchUserData.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  },
});

export const { setCurrentUserId, logout, setXPAndCoins } = userSlice.actions;
export default userSlice.reducer;

================
File: frontend/my-react-app/src/components/pages/XploitcraftPage/App.css
================
.App-header {
  background-image: url('./backround2.jpg');
  background-size: cover;
  background-position: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start; 
  padding-top: 0; 
  text-align: center;
  color: #00ff00;
  position: relative;
}

.loading-icon {
  width: 2.5rem;    
  height: 2.5rem;   
  margin-top: -1rem;
  object-fit: contain;        
  color: #660000;
}

.header-title {
  color: #FFFFFF;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0.15rem 0.15rem 0.3rem #660000;
  font-size: 2.5rem;
  margin-top: 1rem;
}

.input-container-horizontal {
  display: flex;
  gap: 1rem;
  justify-content: center;
  align-items: flex-start;
  margin-bottom: 1.25rem;
  font-family: 'Roboto', sans-serif;
  flex-wrap: wrap; 
}

.input-field {
  width: 90vw; 
  max-width: 25rem; 
  height: 2.5rem;
  padding: 0.5rem;
  font-size: 1rem;
  color: #ffffff;
  background-color: #333;
  border: 0.125rem solid #660000;
  border-radius: 0.5rem;
  outline: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.input-field:focus {
  border-color: #fff;
}

.button-container {
  display: flex;            
  align-items: center;      
  margin-left: 0.5rem;
  margin-bottom: 1rem;
  flex-wrap: wrap; 
  justify-content: center;
}

.generate-button {
  background-color: #660000;
  color: #ffffff;
  padding: 0.75rem 1.875rem;
  border-radius: 0.5rem;
  border: 0.1875rem solid #000000;
  cursor: pointer;
  font-weight: bold;
  font-family: 'Orbitron', sans-serif;
  transition: background-color 0.3s ease, transform 0.2s ease;
  margin-bottom: 1rem;
  font-size: 1rem;
}

.generate-button:hover {
  background-color: #8b0000;
  transform: scale(1.02);
}

.generated-payload-title {
  color: #660000;  
  font-family: 'Orbitron', sans-serif;  
  text-shadow: 0.125rem 0.125rem 0.25rem #000000;  
  margin-bottom: 0.625rem;  
  font-weight: bold;
  border-bottom: 0.125rem solid #ffffff;
  font-size: 1.5rem;
}

.payload-wrapper {
  position: relative;
  max-width: 72rem;
  width: 90vw;
  margin: 1.25rem auto;  
  text-align: left;  
  background: linear-gradient(145deg, #282c34, #1e1e1e);  
  padding: 1.25rem;
  border-radius: 0.5rem;
  border: 0.1875rem solid #660000;  
  opacity: 0.97;
}

.payload-content {
  border-radius: 0.5rem;
  max-height: 37.5rem;
  font-size: 1rem;
  overflow-x: hidden;
  overflow-y: auto;
  word-wrap: break-word;
  overflow-wrap: anywhere;
  line-height: 1.3;
  padding: 1rem;
  box-sizing: border-box;
  max-width: 100%;
}

.App-logo {
  max-width: 15.625rem;      
  max-height: 15.625rem;
  pointer-events: none;
  animation: App-logo-spin infinite 20s linear;
  margin-bottom: -1.875rem;
}

@keyframes App-logo-spin {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(2880deg);
  }
  100% {
    transform: rotate(0deg);
  }
}


::-webkit-calendar-picker-indicator {
  display: none;
}

.copy-button-payload {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background-color: #660000;
  color: #000;
  border: 1px solid #000;
  border-radius: 0.5rem;
  padding: 0.3rem 0.7rem;
  font-size: 0.8rem;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;
}

.copy-button-payload:active {
  transform: scale(0.95);
  opacity: 0.8;
}

.copy-button-payload:hover {
  background-color: #00CED1;
  color: #000;
}


/*******************************************/
/* 1) Extra-Small Devices: max-width 320px */
/*******************************************/
@media (max-width: 320px) {
  /* Header, text, and overall layout */
  .App-header {
    padding: 1rem 0.5rem;
    font-size: 0.9rem; 
  }

  .header-title {
    font-size: 1.8rem;
    margin-top: 0.5rem;
    line-height: 1.2;
    white-space: normal; 
    overflow-wrap: break-word; 
  }

  /* Input field & container adjustments */
  .input-container-horizontal {
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }
  .input-field {
    width: 95vw;
    max-width: none; 
    font-size: 0.9rem;
  }

  /* Button container & generate button */
  .button-container {
    margin-left: 0;
  }
  .generate-button {
    font-size: 0.85rem;
    padding: 0.5rem 1.2rem;
  }

  /* Payload wrapper scaling */
  .payload-wrapper {
    width: 95vw;
    margin: 1rem auto;
    padding: 1rem;
  }
  .payload-content {
    max-height: 20rem;
    font-size: 0.9rem;
    line-height: 1.2;
  }

  /* Copy button scaled down */
  .copy-button-payload {
    font-size: 0.7rem;
    padding: 0.25rem 0.5rem;
  }

  /* Logo and loading icon adjustments */
  .App-logo {
    max-width: 10rem;
    max-height: 10rem;
  }
  .loading-icon {
    width: 2rem;
    height: 2rem;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/*******************************************/
@media (max-width: 480px) {
  .App-header {
    padding: 1rem;
    font-size: 0.95rem;
  }

  .header-title {
    font-size: 2rem;
    margin-top: 0.75rem;
    line-height: 1.2;
    white-space: normal;
    overflow-wrap: break-word;
  }

  /* Input & button containers */
  .input-container-horizontal {
    gap: 0.75rem;
  }
  .input-field {
    width: 90vw;
    max-width: none;
    font-size: 1rem;
  }
  .generate-button {
    font-size: 0.9rem;
    padding: 0.6rem 1.5rem;
  }

  /* Payload area */
  .payload-wrapper {
    width: 90vw;
    margin: 1rem auto;
  }
  .payload-content {
    max-height: 24rem; /* Slightly taller if needed */
    font-size: 0.95rem;
    line-height: 1.25;
  }

  .copy-button-payload {
    font-size: 0.75rem;
    padding: 0.3rem 0.6rem;
  }

  /* Logo size */
  .App-logo {
    max-width: 12rem;
    max-height: 12rem;
  }
  .loading-icon {
    width: 2.2rem;
    height: 2.2rem;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  .App-header {
    padding: 1.2rem;
    font-size: 1rem;
  }

  .header-title {
    font-size: 2.2rem;
    margin-top: 1rem;
  }

  /* Possibly keep input side-by-side if there's room */
  .input-container-horizontal {
    flex-wrap: wrap;
    gap: 1rem;
  }
  .input-field {
    font-size: 1rem;
    width: 80vw;
    max-width: 20rem;
  }
  .generate-button {
    font-size: 0.95rem;
    padding: 0.6rem 1.6rem;
  }

  /* Payload area */
  .payload-wrapper {
    width: 80vw;
    max-width: 36rem;
    margin: 1.2rem auto;
  }
  .payload-content {
    max-height: 26rem;
    font-size: 1rem;
    line-height: 1.3;
  }

  .copy-button-payload {
    font-size: 0.8rem;
    padding: 0.3rem 0.7rem;
  }

  .App-logo {
    max-width: 13rem;
    max-height: 13rem;
  }
  .loading-icon {
    width: 2.3rem;
    height: 2.3rem;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/*******************************************/
@media (max-width: 768px) {
  .App-header {
    padding: 1.5rem;
    font-size: 1rem;
  }

  .header-title {
    font-size: 2.3rem;
    margin-top: 1rem;
  }

  .input-container-horizontal {
    gap: 1rem;
  }
  .input-field {
    width: 70vw;
    max-width: 25rem;
  }
  .generate-button {
    font-size: 1rem;
    padding: 0.7rem 1.7rem;
  }

  .payload-wrapper {
    width: 70vw;
    max-width: 42rem;
    margin: 1.5rem auto;
  }
  .payload-content {
    max-height: 28rem;
    font-size: 1rem;
    line-height: 1.3;
  }

  .copy-button-payload {
    font-size: 0.85rem;
    padding: 0.35rem 0.75rem;
  }

  .App-logo {
    max-width: 14rem;
    max-height: 14rem;
  }
  .loading-icon {
    width: 2.4rem;
    height: 2.4rem;
  }
}

================
File: frontend/my-react-app/src/components/pages/XploitcraftPage/global.css
================
/* global.css */
.main-content.with-sidebar {
  margin-left: 220px;
  transition: margin-left 0.3s ease;
}

.main-content.no-sidebar {
  margin-left: 0;
  transition: margin-left 0.3s ease;
}

/* (Optional) General resets or global typography styles could also be added here */

================
File: frontend/my-react-app/src/components/pages/XploitcraftPage/Xploitcraft.js
================
// components/xploitcraft.js
import React, { useState, useEffect } from 'react';
import socketIOClient from 'socket.io-client';
import logo from './logo5.png';
import loadingIcon from './loading3.png';
import './App.css';


import { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter';

import { pojoaque } from 'react-syntax-highlighter/dist/esm/styles/hljs';


import python from 'react-syntax-highlighter/dist/esm/languages/hljs/python';
SyntaxHighlighter.registerLanguage('python', python);

const ENDPOINT = "/api";

const vulnerabilitiesList = [
  "SQL Injection example",
  "Blind SQL Injection example",
  "Union-based SQL Injection example",
  "Error-based SQL Injection example",
  "Time-based SQL Injection example",
  "Stored XSS example",
  "Reflected XSS example",
  "DOM-based XSS example",
  "CSRF (Cross-Site Request Forgery) example",
  "LFI (Local File Inclusion) example",
  "RFI (Remote File Inclusion) example",
  "Command Injection example",
  "LDAP Injection example",
  "XML External Entity (XXE) example",
  "Server-Side Request Forgery (SSRF) example",
  "Open Redirect example",
  "Directory Traversal example",
  "Buffer Overflow example",
  "Format String Vulnerability example",
  "Insecure Deserialization example",
  "Clickjacking example",
  "Cross-Site Scripting via JSONP example",
  "Header Injection example",
  "HTTP Response Splitting example",
  "Path Traversal example",
  "Host Header Injection example",
  "SMTP Injection example",
  "XPath Injection example",
  "FTP Bounce Vulnerability example",
  "PHP Object Injection example",
  "Race Conditions example",
  "Session Fixation example",
  "HTTP Parameter Pollution example",
  "Subdomain Takeover example",
  "XXE with DTD example",
  "Template Injection example",
  "CRLF Injection example",
  "Unvalidated Redirects and Forwards example",
  "Padding Oracle Vulnerability example",
  "Insecure Cryptographic Storage example",
  "Information Disclosure example",
  "Broken Access Control example",
  "Insecure Direct Object References example",
  "Cross-Site Script Inclusion example",
  "Memory Corruption example",
  "Integer Overflow example",
  "Heap Overflow example",
  "Stack Overflow example",
  "Use-After-Free example",
  "Privilege Escalation example",
  "XML Injection example",
  "SSJS Injection example",
  "Command Injection via RCE example",
  "Server-Side Template Injection example",
  "Prototype Pollution example",
  "Cross-Origin Resource Sharing Misconfigurations example",
  "Clickjacking via Frame Injection example",
  "Cache Poisoning example",
  "HTTP Request Smuggling example",
  "DNS Rebinding example",
  "Man-in-the-Middle Vulnerability example",
  "JQuery Prototype Pollution example",
  "Remote Code Execution via Deserialization example",
  "HTTP Host Header Vulnerability example",
  "Broken Session Management example",
  "Weak Password Recovery Mechanisms example",
  "Insufficient SSL/TLS Validation example",
  "Misconfigured S3 Buckets example",
  "Misconfigured CORS leading to data exfiltration example",
  "Stored CSRF example",
  "Cross-Site Flashing example",
  "Authentication Bypass via SQLi example",
  "Race Condition in File Upload example",
  "Object Injection in PHP apps example",
  "Deserialization in Java apps example",
  "Log4Shell (CVE-2021-44228) example",
  "Shellshock (CVE-2014-6271) example",
  "Heartbleed (CVE-2014-0160) example",
  "SambaCry example",
  "BlueKeep (CVE-2019-0708) example",
  "EternalBlue (MS17-010) example",
  "Spectre example",
  "Meltdown example",
  "ZombieLoad example",
  "L1 Terminal Fault example",
  "Foreshadow example",
  "Rowhammer example",
  "Cache Side-Channel Vulnerabilities example",
  "Timing Vulnerabilities on Crypto example",
  "BREACH Vulnerability example",
  "CRIME Vulnerability example",
  "POODLE Vulnerability example",
  "DROWN Vulnerability example",
  "FREAK Vulnerability example",
  "Reflection Vulnerability on Cryptosystems example",
  "DES Weak Key Vulnerability example",
  "Insecure YAML Deserialization example",
  "Cross-Site WebSocket Hijacking example",
  "Shattered Vulnerability on SHA-1 example",
  "MD5 Collision Adversarial Tests example",
  "MD5 Collision Vulnerabilities example",
  "Resource Exhaustion (DoS Vulnerabilities) example",
  "Zip Slip Vulnerability example",
  "HQL Injection example",
  "CSV Injection example",
  "SSRF via DNS Pinning example",
  "SSTI in Django Templates example",
  "Injection via .htaccess Misconfigurations example",
  "Insecure File Permissions example",
  "Unencrypted Sensitive Data at Rest example",
  "Exposed AWS Keys in Code example",
  "Exposed GCP Credentials in Git Repos example",
  "Privilege Escalation via SUID Binaries example",
  "Kernel Demonstrations (DirtyCow) example",
  "Symbolic Link (Symlink) Vulnerabilities example",
  "DNS Cache Poisoning example",
  "DNS Amplification Vulnerabilities example",
  "Rogue Access Point Vulnerabilities example",
  "ARP Spoofing Vulnerability example",
  "SMB Relay Vulnerabilities example",
  "NTLM Relay Vulnerabilities example",
  "Kerberoasting (Windows Kerberos Vulnerability) example",
  "ASREP Roasting example",
  "Pass-the-Hash Vulnerabilities example",
  "Pass-the-Ticket Vulnerabilities example",
  "Golden Ticket Vulnerabilities example",
  "Silver Ticket Vulnerabilities example",
  "Skeleton Key Vulnerabilities example",
  "Insecure JWT Implementations example",
  "Signature Stripping Vulnerability on JWT example",
  "Cross-Tenant Data Leakage in SaaS example",
  "Pivoting via Compromised Hosts example",
  "ICMP Tunneling example",
  "SSH Tunneling for Data Exfiltration example",
  "SSL Stripping Vulnerability example",
  "SSL Renegotiation Vulnerability example",
  "Insecure FTP Configurations example",
  "Telnet-based Vulnerabilities example",
  "RDP Demonstration Scenario (CVE-based RCEs) example",
  "Insecure SNMP Configurations example",
  "Deserialization in .NET example",
  "XXE with Parameter Entities example",
  "Broken Authentication in SAML example",
  "OpenSAMLSIG Vulnerability example",
  "Key-Reinstallation Vulnerabilities (KRACK) on WPA2 example",
  "Evil Twin AP Vulnerabilities example",
  "Watering Hole Vulnerabilities example",
  "Supply Chain Vulnerabilities example",
  "Malicious Dependency Injection (e.g. npm packages) example",
  "Exposed Docker Daemon example",
  "Insecure Kubernetes Configurations example",
  "Kubernetes API Server Demonstration example",
  "Etcd Database Exposure example",
  "Container Breakout Demonstrations example",
  "Runtime Injection in Serverless Environments example",
  "Insecure Serverless Functions Permissions example",
  "SSRF via Cloud Metadata example",
  "Poison Null Byte in File Paths example",
  "Insecure Handling of `/proc` filesystem example",
  "Directory Indexing Vulnerability example",
  "Hidden Form Field Tampering example",
  "Session Puzzling Vulnerabilities example",
  "Reflected File Download Vulnerability example",
  "Backdoor in Web Application example",
  "MITM via WPAD example",
  "Exposed Redis Instances example",
  "MongoDB No-Auth Access example",
  "Insecure Elasticsearch Cluster example",
  "Insecure Memcached Servers example",
  "Clickjacking via Flash Embeds example",
  "Insecure Deserialization in Ruby YAML example",
  "Insecure Deserialization in Python pickle example",
  "Insecure Deserialization in Java Hessian example",
  "Billion Laughs Vulnerability (XXE expansion) example",
  "Parameter Pollution in SOAP example",
  "Malicious SVG Injection example",
  "XSLT Injection example",
  "Insecure WSDL Exposure example",
  "CSRF with JSON-based Requests example",
  "Deserialization in AMF example",
  "Deserialization in PHP unserialize() example",
  "Covert Timing Channels example",
  "Chained Demonstrations (Multi-step Vulnerabilities) example",
  "Shiro Authentication Bypass example",
  "Apache Struts RCE (CVE-2017-5638) example",
  "PhpMyAdmin RCE example",
  "MySQL UDF Demonstration example",
  "MSSQL xp_cmdshell Demonstrations example",
  "Oracle TNS Poisoning example",
  "Postgres Copy Demonstrations example",
  "Misconfigured WP REST APIs example",
  "Exposed Jenkins Consoles example",
  "Exposed JMX Interfaces example",
  "JNDI Injection (Log4Shell Type) example",
  "PHP ZipArchive Deserialization example",
  "Spring4Shell (CVE-2022-22965) example",
  "Expression Language Injection example",
  "SSRF via PDF Generation Tools example",
  "SSRF via Image Libraries example",
  "Blind SSRF via DNS Timing example",
  "Email Header Injection example",
  "LDAP Injection via Search Filters example",
  "Serialization Vulnerabilities on IoT Devices example",
  "Buffer Overflows in Firmware example",
  "Hardcoded Credentials in IoT example",
  "Command Injection in Router Web Interfaces example",
  "UPnP Demonstration Scenario on Home Routers example",
  "ICS/SCADA Modbus Vulnerabilities example",
  "DNP3 Protocol Vulnerabilities example",
  "OPC UA Demonstrations example",
  "BACnet Vulnerabilities example",
  "VxWorks OS Vulnerabilities example",
  "Wind River TCP/IP Stack Flaws example",
  "Ripple20 (Treck TCP/IP Stack) Vulnerabilities example",
  "Uncontrolled Format String in C Applications example",
  "Stack Canary Bypass example",
  "SafeSEH Bypass example",
  "ASLR Bypass example",
  "DEP Bypass with ROP Chains example",
  "Web Cache Poisoning example",
  "CRLF Injection in Redis example",
  "CRLF Injection in InfluxDB example",
  "Insecure Cross-Domain JSONP endpoints example",
  "DNS TXT Record Injection example",
  "Exposed Management Interfaces example",
  "SMTP Open Relay example",
  "MTA Command Injection example",
  "IMAP/POP3 Injection example",
  "XSRF in SOAP Services example",
  "Insecure CSR Generation example",
  "Insecure Key Storage in Source Control example",
  "Side-Channel via CPU Cache example",
  "Rowhammer-induced Bitflips to Escalate Privileges example",
  "Thunderbolt DMA Vulnerabilities example",
  "Firewire DMA Vulnerabilities example",
  "PCI-based Vulnerabilities example",
  "Bluetooth Replay Vulnerabilities example",
  "Wi-Fi Deauthentication Vulnerability example",
  "LTE Network Vulnerabilities example",
  "5G Core Network Misconfigurations example",
  "VoIP SIP Injection example",
  "H.323 Injection example",
  "SS7 Vulnerabilities on Telecom Networks example",
  "Insecure Industrial Protocol Gateways example",
  "Spear Phishing Code Injection example",
  "Social Engineering-based Credential Harvesting example",
  "Rogue DHCP Server Vulnerabilities example",
  "Network Time Protocol Manipulation example",
  "GSM Base Station Spoofing example",
  "Rogue DNS Server Vulnerabilities example",
  "WLAN Krack Vulnerabilities example",
  "Supply Chain Vulnerabilities via Dependencies example",
  "Resource Injection in Web Framework example",
  "Abusing JWT Algorithms (e.g. 'none') example",
  "Re-submission of Nonces example",
  "Signature Forging in OAuth example",
  "Cookie Forcing Vulnerability example",
  "Marlinspike Vulnerability example",
  "Traffic Injection in TOR example",
  "RepoJacking on GitHub example",
  "Typosquatting Package Demonstrations example",
  "Malicious Browser Extensions example",
  "Demonstration Scenario of Data URI example",
  "Exploitation of \"javascript:\" URLs example",
  "Demonstration Scenario of \"javascript:\" URLs example",
  "Path-based SSRF example",
  "Insecure Handling of 3XX Redirects example",
  "Fragment Identifier Injection example",
  "IDOR via Secondary Keys example",
  "IDOR in GraphQL Queries example",
  "GraphQL Query Injection example",
  "GraphQL Introspection Abuse example",
  "Binary Planting example",
  "DLL Hijacking example",
  "Abusing PATH Environment Variable example",
  "Insecure Shell Escape in Scripts example",
  "CSV Formula Injection example",
  "Insecure Rancher Configurations example",
  "Command Injection in Helm Charts example",
  "Insecure Istio Config example",
  "HTTP/2 Demonstrations (HPACK Bomb) example",
  "ACME Protocol Demonstration example",
  "SAML Response Tampering example",
  "SPNEGO/Kerberos Downgrade Vulnerabilities example",
  "OAuth Implicit Flow Vulnerabilities example",
  "Confused Deputy Problem example",
  "SSRF via SSRF Blacklist Bypass example",
  "BGP Route Injection example",
  "Locating Hidden Admin Panels example",
  "Demonstration Scenario Unquoted Service Paths on Windows example",
  "Malicious Link in Intranet example",
  "Cookie Tossing Vulnerability example",
  "Abusing WebDAV Methods example",
  "Abusing OPTIONS Method example",
  "Cross-Site Script Inclusion with JSONP example",
  "File Upload Bypass via Content-Type example",
  "Filename Obfuscation in Upload example",
  "Storing Code in EXIF Data example",
  "RCE via ImageMagick (ImageTragick) example",
  "SSRF via Redis/HTTP example",
  "Misinformed JSON Parsing Demonstration example",
  "Insecure Handling of Null Characters example",
  "Abusing ASCII Control Characters example",
  "Stenographic Channels in Images example",
  "Exfiltration via DNS Tunneling example",
  "Exfiltration via ICMP Tunneling example",
  "Exfiltration via Covert TCP Channels example",
  "Insecure Handling of Signals in UNIX example",
  "Renegotiation Vulnerability in TLS example",
  "SNI Injection Vulnerability example",
  "X.509 Parsing Vulnerabilities example",
  "Compromising Weak Ciphersuites example",
  "Cross-Host Vulnerabilities via Shared Hosting example",
  "Misuse of .git/.svn/.hg Folders on Web Servers example",
  "Reverse Proxy Misdirection example",
  "WAF Bypass Vulnerabilities example",
  "Forced Browsing Vulnerabilities example",
  "JSON Injection via callback parameters example",
  "Insecure Handling of JWT Kid Parameter example",
  "HTTP Desync Vulnerabilities example",
  "Abusing Vary Headers in HTTP example",
  "WebSocket Injection example",
  "Exposed DEBUG endpoints example",
  "API Key Leakage via Referer Headers example",
  "SSRF via File:// Protocol example",
  "Insecure Access to .env Files example",
  "Insecure Access to Backup Files (.bak) example",
  "Insecure Handling of .DS_Store Files example",
  "DNS Reverse Lookup Vulnerability example",
  "Abusing HEAD Method example",
  "Cross-Site Request Forgery with Flash example",
  "POC to Vulnerabilty JSON Hijacking example",
  "POC to Vulnerabilty JSON Hijacking example",
  "Reverse Tabnabbing example",
  "Mousejacking Vulnerabilities example",
  "Physical Vulnerabilities: USB Drops example",
  "Rogue Charging Stations Vulnerabilities example",
  "Browser Extension CSRF example",
  "DOM Clobbering Vulnerabilities example",
  "Mutation XSS example",
  "Insecure Filter Regex example",
  "Script Gadget Injection in Templates example",
  "Insecure Handling of Window.opener example",
  "Reflected File Download example",
  "Pharming Vulnerability example",
  "Man-in-the-Browser Vulnerability example",
  "Drive-by Download Demonstrations example",
  "Insecure Content Security Policy example",
  "Insecure CORS Configuration example",
  "Unrestricted File Upload example",
  "Malicious Zip Bomb example",
  "Abusing Flaws in PDF Renderers example",
  "Abusing Flaws in OCR Tools example",
  "SVG Files as Test Vectors example",
  "XSLT Server-Side Injection example",
  "SSRF via Headless Browser example",
  "Abusing Serverless Billing with Demonstration example",
  "Insecure SSRF via Cloud Functions example",
  "Lateral Movement via Compromised Instances example",
  "Abusing Code Comments for Injection example",
  "CSS Injection (exfiltrating data through CSS) example",
  "Data Exfiltration via Email Protocols example",
  "Insecure TLS Certificate Validation example",
  "Insecure Cipher Negotiation example",
  "Click Event Hijacking on Mobile example",
  "Compromising IoT Medical Devices example",
  "Vulnerabilities on Automotive CAN Bus example",
  "SCADA PLC Command Injection example",
  "Insecure BACnet Config example",
  "Fake Mobile App Updates example",
  "Demonstrations in Industrial Protocol Converters example",
  "Drone/Robot Telemetry Injection example",
  "Rogue Firmware Updates example",
  "BleedingTooth Bluetooth Demonstration example",
  "WPS PIN Brute Force example",
  "Vulnerabilities on WPA3 (Dragonblood) example"
];



const evasionTechniquesList = [
  "URL Encoding example",
  "Double URL Encoding example",
  "Base64 Encoding example",
  "Hex Encoding example",
  "HTML Entity Encoding example",
  "Case Variation example",
  "Mixed Case Evasion example",
  "UTF-8 Encoding example",
  "URL Parameter Pollution example",
  "Obfuscated JavaScript example",
  "Reverse String Encoding example",
  "Polyglot Codes example",
  "Whitespace Obfuscation example",
  "Comment Insertion example",
  "String Concatenation example",
  "Character Padding example",
  "Null Byte Injection example",
  "Mixed Protocol Injection example",
  "Fake Parameter Injection example",
  "Redundant Path Segments example",
  "IP Address Obfuscation example",
  "Octal/Decimal IP Encoding example",
  "Reverse DNS Lookup example",
  "DNS CNAME Chaining example",
  "Long URL Obfuscation example",
  "Fragmentation of Code example",
  "Excessive URL Length example",
  "Confusing Similar Characters example",
  "Homoglyph Vulnerabilities example",
  "Unicode Normalization Forms example",
  "Double Decoding example",
  "ROT13 Encoding example",
  "Quoted Printable Encoding example",
  "Ambiguous Grammar Injection example",
  "Fake Content-Type Headers example",
  "Fake Content-Length Headers example",
  "HTTP Verb Tunneling example",
  "Parameter Hiding in JSON example",
  "Parameter Hiding in XML example",
  "Base36/Base32 Encoding example",
  "Hexify ASCII Characters example",
  "Using Non-Standard Ports example",
  "Chunked Transfer Evasion example",
  "Multiple Encodings Combined example",
  "Command Spacing Evasion example",
  "Command Comments Evasion example",
  "Split Vulnerabilities into Two Requests example",
  "URLEncode + Double Decode example",
  "Nested Encoded Codes example",
  "Invisible Character Injection example",
  "Zero-Width Spaces Injection example",
  "Encoded Slashes in URL example",
  "Path Normalization Tricks example",
  "Double Compression Encoding example",
  "Demonstrating Browser Parsing Differences example",
  "Demonstration Scenario of Browser Parsing Differences example",
  "Case Randomization in Keywords example",
  "Macro-based Encoding example",
  "Hash-based Obfuscation example",
  "Leetspeak Substitution example",
  "Non-ASCII Homoglyph Replacement example",
  "Base85 Encoding example",
  "UTF-7 Encoding example",
  "Multibyte Character Confusion example",
  "Misleading File Extensions example",
  "JavaScript Unicode Escapes example",
  "IP Fragmentation Evasion example",
  "TLS Fingerprint Spoofing example",
  "HTTP Header Randomization example",
  "Duck Typing Codes example",
  "Non-Printable Character Injection example",
  "Base91 Encoding example",
  "Base92 Encoding example",
  "Base122 Encoding example",
  "Emoji-based Encoding example",
  "Custom Hash-based Encoding example",
  "Compression + Encryption Hybrid example",
  "Encrypted Code Delivery via HTTPS example",
  "CDN-based Delivery Evasion example",
  "DOM Property Overwriting example",
  "Steganographic Codes in Images example",
  "Steganographic Codes in Audio example",
  "Steganographic Codes in Video example",
  "Chunked Encoding Mixup example",
  "Misleading Parameter Names example",
  "Relying on Browser Quirks example",
  "Escaping Through Double Quotes example",
  "Escaping Through Backticks example",
  "Triple Encoding example",
  "Recursive Encoding Loops example",
  "URL Path Confusion example",
  "Hiding Code in CSS Content example",
  "Data URI Schemes example",
  "RFC-Compliant but Unexpected Headers example",
  "Exotic Unicode Normalization example",
  "IDN Homograph Vulnerabilities example",
  "Injecting Zero-Width Joiners example",
  "Zero-Width Non-Joiner Injection example",
  "Obfuscation via CSS Selectors example",
  "Malicious DOM Events example",
  "Shifting Code between GET and POST example",
  "Polyglot PDFs example",
  "Polyglot Images (JPEG + HTML) example",
  "Header Confusion with MIME Boundaries example",
  "Breaking Signatures with Extra Whitespace example",
  "Hiding Code in PDF Comments example",
  "Invisible iframes for Code Delivery example",
  "Hiding Code in DNS Queries example",
  "Hiding Code in NTP Traffic example",
  "Obfuscation via Morse Code example",
  "Obfuscation via Bacon's Cipher example",
  "Obfuscation with Braille Patterns example",
  "Confusing Whitespaces (Tabs vs Spaces) example",
  "Replacing Characters with Similar Unicode example",
  "Base58 Encoding example",
  "Base32hex Encoding example",
  "UUEncoding Codes example",
  "xxencoding Codes example",
  "yEncoding Codes example",
  "Quoted-Printable + Double URL Encoding example",
  "Invisible Div Layers example",
  "Multi-stage Code Delivery example",
  "Code in HTTP Trailer Fields example",
  "Confusing Content-Length with Transfer-Encoding example",
  "Malicious SVG Filters example",
  "Abusing XML Namespaces example",
  "Nested Iframes from Multiple Domains example",
  "Code Delivery via Flash Variables example",
  "Obfuscation via Redundant DNS lookups example",
  "Code in TLS Extensions example",
  "Abusing SSL Session Resumption example",
  "TLS Record Layer Obfuscation example",
  "Fragmenting JSON Codes example",
  "Obfuscation via HTML5 Polyfills example",
  "Data Smuggling in WebSockets example",
  "Binary-to-Text Shuffling example",
  "Obfuscation via RLE Encoding example",
  "Inserting Fake Unicode BOM example",
  "Escaping through Double Encoded Slashes example",
  "Redirection through multiple Shortened URLs example",
  "Abusing LFI for Evading Signatures example",
  "Using Alternate Data Streams (ADS) on Windows example",
  "Storing Code in Windows Registry example",
  "Command Obfuscation via PowerShell Aliases example",
  "Command Obfuscation in Bash using eval example",
  "Abusing WAF Whitelists example",
  "Modifying Case in Shell Commands example",
  "Inserting Line Feeds in Keywords example",
  "Combining CRLF with URL Encoding example",
  "Obfuscating SQL Code with Comments example",
  "Using Stored Procedures Instead of Raw SQL example",
  "Reordering SQL Keywords example",
  "Command Obfuscation via Environmental Variables example",
  "Encoding code in base64 multiple times example",
  "Chunked XSS Codes example",
  "Obfuscation via Excessive URL Parameters example",
  "Utilizing Browser Autocomplete example",
  "Utilizing Browser Bugs for Code Execution example",
  "Abusing Tab Characters in JSON example",
  "HTML Polyglot (HTML + JS) example",
  "XSS Code in SVG OnLoad example",
  "Open Redirect Chains example",
  "Stealth Code in DNS TXT Records example",
  "Header Injection via Non-ASCII separators example",
  "Padding Code with Zero-Length Chars example",
  "Abusing Proxy Configurations example",
  "Obfuscation with External Entity Injections example",
  "Hiding Code in Image EXIF example",
  "Hiding Code in PDF Metadata example",
  "Hiding Code in ZIP Comment example",
  "Inserting Code into ICC Profiles example",
  "Base104 Encoding (emoji, special chars) example",
  "Abusing Quoted Strings in HTTP example",
  "Misusing Cache-Control Headers example",
  "Encoding with punycode example",
  "Using Rare Encodings like EBCDIC example",
  "Inserting Code in Hostname parts example",
  "Using IPv6 short notation example",
  "Hex-encoded slashes for path evasion example",
  "UTF-16 Encoding example",
  "UTF-32 Encoding example",
  "Double Rotations (ROT13+ROT47) example",
  "Deflate then Base64 example",
  "Gzip then Hex example",
  "Chaining Multiple Compressors (Zlib, LZMA...) example",
  "Spacing Out Code with Non-breaking spaces example",
  "Zero-Breadth Joiners between Characters example",
  "Overlong UTF-8 sequences example",
  "Non-UTF encodings (Shift-JIS, Big5) example",
  "Inserting Code inside a harmless GIF example",
  "Hiding Code in WOFF font files example",
  "Renaming Parameters to look safe example",
  "Spelling Keywords Backwards example",
  "Splitting Vulnerability across multiple requests example",
  "Using PATH_INFO in URLs example",
  "Appending random query strings ignored by server example",
  "Hiding code in rarely used HTML tags example",
  "Obfuscating JavaScript code with arrays example",
  "Encoding JavaScript strings char by char example",
  "Mixing character sets example",
  "Reordering JSON keys to bypass signatures example",
  "Combining multiple small codes client-side example",
  "Inserting Code in CSS pseudo-selectors example",
  "Abusing CSS escapes for ASCII chars example",
  "Inserting Code in an XPI or CRX file example",
  "Using multipart/form-data cleverly example",
  "Abusing boundary strings in multipart requests example",
  "Code in Protocol Downgrade Demonstration example",
  "Code in Protocol Downgrade Vulnerability example",
  "Code in WebDAV PROPFIND request example",
  "Abusing Range headers to evade scanning example",
  "Inserting Code in the ETag header example",
  "Misleading via overly long TTL in DNS example",
  "Injecting Code in OData queries example",
  "Smuggling Code in GraphQL Query Variables example",
  "Chained Encodings (Base64+URL+Hex) example",
  "Using obscure cipher methods example",
  "Encrypting code with a known key example",
  "Stenographically hiding code in whitespace patterns example",
  "Base32768 Encoding example",
  "Faux Cyrillic Substitution example",
  "Reordering code points in Unicode example",
  "Using confusable Unicode characters for keywords example",
  "Injecting Code in CSS calc() example",
  "Using CSS url() imports example",
  "Dynamic imports in JavaScript example",
  "Obfuscation via WebAssembly Encoded Code example",
  "Hosting Code on a Trusted CDN example",
  "Abusing Document.write() in HTML example",
  "Injecting code in Data Binding Expressions example",
  "Abusing user agent-based code paths example",
  "Obfuscation via delayed execution example",
  "Splitting strings into multiple variables and recombining example",
  "Requiring multiple conditions to trigger code example",
  "Breaking signatures by inserting random tokens example",
  "Inserting Null bytes in keywords example",
  "Encoding code in base45 example",
  "Encoding code in base62 example",
  "Abusing JSONP call to fetch code example",
  "Timing-based delivery (only after delay) example",
  "Fragmenting Code across DNS queries example",
  "Inserting Non-Latin alphabets that look similar example",
  "Switching between GET and POST randomly example",
  "Faking known safe parameters to distract WAF example",
  "Using a known good domain as decoy example",
  "Abusing template engines for code injection example",
  "Inserting code in JWT kid field and forging signature example",
  "Chaining multiple WAF bypass techniques example",
  "Misreporting Content-Length to confuse parsers example",
  "Sending partial code in HEAD then finishing in GET example",
  "Combining upper/lower case at random example",
  "Abusing chunk extensions in HTTP/1.1 example",
  "Encoding commands inside environment variables example",
  "Using a proxy hop to re-encode code example",
  "Inserting code in XLSX metadata example",
  "Inserting code in docx metadata example",
  "Inserting code in rar comments example",
  "Encoding code as Morse code then decoding client-side example",
  "Utilizing EICAR test string as a decoy example",
  "Inlining JavaScript in unusual HTML attributes example",
  "UTF-7 encoded XSS code example",
  "Custom Base conversion (Base100 ASCII codes) example",
  "Inserting code in CSS keyframes example",
  "Padding code with random unicode emoticons example",
  "Decomposing words into char codes and reassembling example",
  "Aliasing dangerous functions to safe names example",
  "Redefining built-in functions at runtime example",
  "Hiding code in user-supplied language translations example",
  "Abusing password fields to store code example",
  "Injecting code into logs and re-reading them example",
  "HTTP Method Override (X-HTTP-Method-Override) example",
  "Inserting commands in SSH banners example",
  "LZMA compression then hex encoding example",
  "Zstandard compression + base64 example",
  "Inserting code in a TLS SNI field example",
  "Confusing analyzers with overly long domain names example",
  "Using parent directory references to appear harmless example",
  "Storing code in DNS CAA records example",
  "Encoding code in IPv6 literal example",
  "Hiding code in data:application/octet-stream URL example",
  "Demonstration scenario of differences in URL parsing client/server example",
  "Inserting code in a JSON array expecting object example",
  "Misleading WAF by using multiple Host headers example",
  "Inserting Code in Accept-Language header example",
  "Leveraging incomplete UTF-8 sequences example",
  "Breaking code into multiple code points that combine example",
  "Base122 encoding with obscure alphabets example",
  "Inserting code in a CSS animation name example",
  "Double Gzip encoding example",
  "Using HTML entities for all characters example",
  "Substitute chars with fullwidth forms example",
  "Inserting control characters like BEL or BS example",
  "Pausing code execution until certain time example"
];


function Home() {
  const [vulnerability, setVulnerability] = useState("");
  const [evasionTechnique, setEvasionTechnique] = useState("");
  const [payload, setPayload] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const socket = socketIOClient(ENDPOINT);

    socket.on('payload_response', (data) => {
      setPayload(data.payload);
      setLoading(false);
    });

    socket.on('error', (data) => {
      alert(`Error: ${data.error}`);
      setLoading(false);
    });

    return () => {
      socket.disconnect();
    };
  }, []);

  const sanitizeInput = (input) => {
    const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;',
      '`': '&#x60;',
      '=': '&#x3D;',
    };
    const reg = /[&<>"'`=/]/g;
    return input.replace(reg, (match) => map[match]);
  };

  const handleGeneratePayload = () => {
    if (vulnerability || evasionTechnique) {
      setLoading(true);

      setPayload("");

      const sanitizedVulnerability = vulnerability ? sanitizeInput(vulnerability) : "";
      const sanitizedEvasionTechnique = evasionTechnique ? sanitizeInput(evasionTechnique) : "";

      const requestData = { stream: true };
      if (sanitizedVulnerability) requestData.vulnerability = sanitizedVulnerability;
      if (sanitizedEvasionTechnique) requestData.evasion_technique = sanitizedEvasionTechnique;

      fetch(`${ENDPOINT}/payload/generate_payload`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      })
        .then((response) => {
          if (!response.ok) {
            setLoading(false);
            return response.text().then((text) => {
              alert(`Error: ${text}`);
            });
          }


          const reader = response.body.getReader();
          const decoder = new TextDecoder();

          function readChunk() {
            reader.read().then(({ done, value }) => {
              if (done) {
                setLoading(false);
                return;
              }
              let chunk = decoder.decode(value, { stream: true });

              chunk = chunk.replace(/undefined/g, "");

              setPayload((prev) => prev + chunk);

              readChunk();
            });
          }
          readChunk();
        })
        .catch((error) => {
          console.error('Error:', error);
          alert('Failed to connect to the backend server. Please check the server connection.');
          setLoading(false);
        });
    } else {
      alert("Please enter at least one of vulnerability or evasion technique");
    }
  };

  const handleCopyClick = () => {
    if (payload) {
      navigator.clipboard.writeText(payload)
        .then(() => {
          console.log('Payload copied to clipboard.');
        })
        .catch(err => console.error('Could not copy payload:', err));
    }
  };

  const handleVulnerabilityChange = (e) => {
    const chosenValue = e.target.value;
    const found = vulnerabilitiesList.find((v) => v === chosenValue);
    if (found) {
      setVulnerability(found);
    } else {
      setVulnerability(chosenValue);
    }
  };

  const handleEvasionTechniqueChange = (e) => {
    const chosenValue = e.target.value;
    const found = evasionTechniquesList.find((t) => t === chosenValue);
    if (found) {
      setEvasionTechnique(found);
    } else {
      setEvasionTechnique(chosenValue);
    }
  };

  return (
    <header className="App-header">
      <img src={logo} className="App-logo" alt="logo" />
      <h1 className="header-title">XploitCraft</h1>

      <div className="input-container-horizontal">
        <input
          type="text"
          placeholder="Enter Vulnerability or Xploit"
          value={vulnerability.replace(/ example$/, '')}
          onChange={handleVulnerabilityChange}
          className="input-field"
          list="vulnerability-list"
        />
        <datalist id="vulnerability-list">
          {vulnerabilitiesList.map((vuln, index) => (
            <option
              key={index}
              label={vuln.replace(/ example$/, '')}
              value={vuln}
            />
          ))}
        </datalist>

        <input
          type="text"
          placeholder="Enter Evasion Technique or Delivery Method"
          value={evasionTechnique.replace(/ example$/, '')}
          onChange={handleEvasionTechniqueChange}
          className="input-field"
          list="evasion-list"
        />
        <datalist id="evasion-list">
          {evasionTechniquesList.map((tech, index) => (
            <option
              key={index}
              label={tech.replace(/ example$/, '')}
              value={tech}
            />
          ))}
        </datalist>
      </div>

      <div className="button-container">
        <button onClick={handleGeneratePayload} className="generate-button">
          Generate Payload
        </button>
        {loading && (
          <img src={loadingIcon} alt="Loading..." className="loading-icon" />
        )}
      </div>

      {payload && (
        <div className="payload-wrapper">
          <button className="copy-button-payload" onClick={handleCopyClick}>Copy</button>
          <h2 className="generated-payload-title">Generated Payload</h2>

          <div className="payload-content">
            {/* Using highlight.js flavor, language = "python", with pojoaque theme and line wrap */}
            <SyntaxHighlighter
              language="python"
              style={pojoaque}
              wrapLongLines={true}
            >
              {payload}
            </SyntaxHighlighter>
          </div>
        </div>
      )}
    </header>
  );
}

export default Home;

================
File: frontend/my-react-app/src/components/Sidebar/Sidebar.css
================
/* Sidebar.css */

body, html {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  font-family: 'Orbitron', sans-serif;
}

/* Sidebar Container */
.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  width: 220px;
  height: 100vh;
  background-color: #121212;
  color: #ffffff;
  padding: 10px;
  border: 2px solid #ffffff;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  transform: translateX(-220px);
  transition: transform 0.2s ease, width 0.2s ease;
  z-index: 1500;
  overflow-y: auto;
}

.sidebar:not(.collapsed) {
  transform: translateX(0);
}

.sidebar.collapsed {
  transform: translateX(-220px);
}

/* Hide scrollbar */
.sidebar::-webkit-scrollbar {
  display: none;
}

/* Sidebar Title */
.sidebar-title {
  font-family: 'Orbitron', sans-serif;
  font-size: 1.9em;
  margin-bottom: 28px;
  color: #cc0000;
  text-align: center;
  text-shadow: 1px 1px 0px #fff;
}

/* Sidebar List */
.sidebar-list {
  list-style-type: none;
  padding: 0;
  flex-grow: 1;
  font-family: 'Orbitron', sans-serif;
}

.sidebar-list li {
  margin-bottom: 35px;
}

/* Standard Link */
.sidebar-list li a {
  color: #E2DFD2;
  text-decoration: none;
  font-weight: bold;
  transition: color 0.3s ease, transform 0.1s ease;
  word-wrap: break-word;
  font-family: 'Orbitron', sans-serif;
}

.sidebar-list li a:hover {
  color: #cc0000;
  transform: scale(1.03);
}

.sidebar-list li a::before {
  content: "~";
  margin-right: 5px;
  color: #cc0000;
}

.sidebar-list li a:hover::before {
  content: ">>";
  color: #ffffff;
}

/* Group Header (for Tools, Practice Tests) */
.sidebar-group .group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #ffffff;
  font-weight: bold;
  cursor: pointer;
  padding: 15px 0;
  transition: color 0.2s ease, transform 0.1s ease;
  border-bottom: 1px solid #333;
}

.sidebar-group .group-header:hover {
  color: #cc0000;
  transform: scale(1.03);
}

.sidebar-group .group-header::before {
  content: "~";
  margin-right: 5px;
  color: #cc0000;
}

.sidebar-group .group-header:hover::before {
  content: ">>";
  color: #ffffff;
}

/* Group Sublist */
.group-sublist {
  list-style-type: none;
  padding-left: 20px;
  margin-top: 10px;
  transition: max-height 0.3s ease;
  font-family: 'Orbitron', sans-serif;
}

.group-sublist li {
  margin-bottom: 20px;
  font-family: 'Orbitron', sans-serif;
}

.group-sublist li a {
  color: #ffffff;
  text-decoration: none;
  transition: color 0.3s ease, transform 0.1s ease;
  font-family: 'Orbitron', sans-serif;
}

.group-sublist li a:hover {
  color: #cc0000;
  transform: scale(1.03);
}

.group-sublist li a::before {
  content: "-";
  margin-right: 5px;
  color: #cc0000;
}

.group-sublist li a:hover::before {
  content: "→";
  color: #ffffff;
}

/* Sidebar Logo  */
.sidebar-logo-container {
  text-align: center;
  margin-top: 10px;
  padding-bottom: 20px;
}

.sidebar-logo {
  width: 80%;
  max-width: 200px;
  border-radius: 5px;
  filter: brightness(2.2);
}

/* Toggle Button */
.sidebar-toggle {
  position: fixed;
  top: 10px;
  left: 10px;
  z-index: 2001;
  background-color: #121212;
  border: 1px solid #ffffff;
  border-radius: 5px;
  color: #cc0000;
  padding: 10px;
  font-size: 2.2rem;
  cursor: pointer;
  transition: left 0.3s ease, background-color 0.3s ease, padding 0.3s ease, font-size 0.3s ease;
  width: 50px;
  height: 50px;
  text-align: center;
  line-height: 25px;
}

.sidebar-toggle:hover {
  background-color: #cc0000;
  color: #ffffff;
}

/* When collapsed, adjust toggle button position */
.sidebar.collapsed ~ .sidebar-toggle {
  left: 10px;
}

/* Responsive Adjustments */

/* Tablets */
@media (max-width: 768px) {
  .sidebar {
    width: 180px;
    transform: translateX(-180px);
    font-size: 0.8rem
  }
  .sidebar:not(.collapsed) {
    transform: translateX(0);
  }
  .sidebar.collapsed {
    transform: translateX(-180px);
  }
  .sidebar-title {
    font-size: 1.7em;
    margin-bottom: 24px;
  }
  .sidebar-toggle {
    padding: 14px;
    font-size: 1.6rem;
    width: 55px;
    height: 55px;
    line-height: 28px;
  }
  .sidebar-logo-container {
    padding-bottom: 70px;
  }
  .sidebar-logo {
    max-width: 160px;
  }
  .group-sublist {
    padding-left: 18px;
  }
}

/* Mobile Phones */
@media (max-width: 480px) {
  .sidebar {
    width: 145px;
    transform: translateX(-150px);
    border-radius: 0;
  }
  .sidebar:not(.collapsed) {
    transform: translateX(0);
  }
  .sidebar.collapsed {
    transform: translateX(-145px);
  }
  .sidebar-title {
    font-size: 1.5em;
    margin-bottom: 20px;
    margin-left: 40px;
  }
  .sidebar-toggle {
    padding: 5px;
    font-size: 1.8rem;
    width: 40px;
    height: 40px;
    line-height: 20px;
  }
  .sidebar-logo-container {
    padding-bottom: 60px;
  }
  .sidebar-logo {
    max-width: 140px;
  }
  .group-sublist {
    padding-left: 15px;
  }
}

/@media (max-width: 320px) {
  .sidebar {
    width: 120px;
    transform: translateX(-120px);
    border-radius: 0;
  }
  .sidebar:not(.collapsed) {
    transform: translateX(0);
  }
  .sidebar.collapsed {
    transform: translateX(-120px);
  }

  .sidebar-title {
    font-size: 1.3em;
    margin-bottom: 16px;
    margin-left: 20px; /* Adjust if needed so title is visible */
  }

  .sidebar-toggle {
    padding: 4px;
    font-size: 1.4rem;
    width: 35px;
    height: 35px;
    line-height: 18px;
  }

  .sidebar-logo {
    max-width: 110px;
  }
  .sidebar-logo-container {
    padding-bottom: 40px;
  }

  .group-sublist {
    padding-left: 10px;
  }
}

================
File: frontend/my-react-app/src/components/Sidebar/Sidebar.js
================
import React, { useState, useRef, useEffect } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import './Sidebar.css';
import sidebarLogo from './sidebarlogo.png'; 
import { FaChevronDown, FaChevronUp } from 'react-icons/fa';

const Sidebar = () => {
  const [collapsed, setCollapsed] = useState(true);
  const [toolsOpen, setToolsOpen] = useState(false);
  const [practiceTestsOpen, setPracticeTestsOpen] = useState(false);

  const navigate = useNavigate();
  const sidebarRef = useRef(null);
  const toggleButtonRef = useRef(null);

  const toggleSidebar = () => {
    setCollapsed(!collapsed);
  };

  const toggleTools = () => {
    setToolsOpen(!toolsOpen);
  };

  const togglePracticeTests = () => {
    setPracticeTestsOpen(!practiceTestsOpen);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      // if sidebar is open
      if (!collapsed) {
        // check if clicked inside sidebar
        const clickedInsideSidebar = sidebarRef.current?.contains(event.target);
        // check if clicked on the toggle button
        const clickedToggleButton = toggleButtonRef.current?.contains(event.target);

        // if the click is outside sidebar AND not on the toggle button, collapse
        if (!clickedInsideSidebar && !clickedToggleButton) {
          setCollapsed(true);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [collapsed]);

  return (
    <>
      {/* Sidebar Toggle Button */}
      <button
        ref={toggleButtonRef}
        className="sidebar-toggle"
        onClick={toggleSidebar}
      >
        {collapsed ? '≣' : '⛌ '}
      </button>

      <div ref={sidebarRef} className={`sidebar ${collapsed ? 'collapsed' : ''}`}>
        <h2 className="sidebar-title">root@</h2>
        <ul className="sidebar-list">
          <li>
            <NavLink to="/profile" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Profile
            </NavLink>
          </li>
          <li>
            <NavLink to="/achievements" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Achievements
            </NavLink>
          </li>
          <li>
            <NavLink to="/shop" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Shop
            </NavLink>
          </li>
          <li>
            <NavLink to="/leaderboard" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Leaderboard
            </NavLink>
          </li>

          {/* Tools group */}
          <li className="sidebar-group">
            <div
              className="group-header"
              onClick={toggleTools}
              role="button"
              tabIndex={0}
              onKeyPress={(e) => {
                if (e.key === 'Enter') toggleTools();
              }}
            >
              <span>/Tools</span>
              {toolsOpen ? <FaChevronUp /> : <FaChevronDown />}
            </div>
            {toolsOpen && (
              <ul className="group-sublist">
                <li>
                  <NavLink to="/xploitcraft" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Xploitcraft
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/scenariosphere" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Scenario Sphere
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/analogyhub" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Analogy Hub
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/log" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Log Analysis
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/grc" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    GRC Wizard
                  </NavLink>
                </li>
              </ul>
            )}
          </li>

          {/* Daily CyberBrief */}
          <li>
            <NavLink to="/dailycyberbrief" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Daily CyberBrief
            </NavLink>
          </li>

          {/* Study Resources */}
          <li>
            <NavLink to="/resources" className={({ isActive }) => isActive ? 'active-link' : ''}>
              /Study Resources
            </NavLink>
          </li>

          {/* Practice Tests group */}
          <li className="sidebar-group">
            <div
              className="group-header"
              onClick={togglePracticeTests}
              role="button"
              tabIndex={0}
              onKeyPress={(e) => {
                if (e.key === 'Enter') togglePracticeTests();
              }}
            >
              <span>/Practice Tests</span>
              {practiceTestsOpen ? <FaChevronUp /> : <FaChevronDown />}
            </div>
            {practiceTestsOpen && (
              <ul className="group-sublist">
                <li>
                  <NavLink to="/practice-tests/a-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    A+ Core 1
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/aplus-core2" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    A+ Core 2
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/network-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Network+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/security-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Security+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/cysa-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    CySa+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/pen-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Pentest+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/casp-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    CASP+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/linux-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Linux+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/cloud-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Cloud+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/data-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Data+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/server-plus" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    Server+
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/cissp" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    CISSP
                  </NavLink>
                </li>
                <li>
                  <NavLink to="/practice-tests/aws-cloud" className={({ isActive }) => isActive ? 'active-subtab' : ''}>
                    AWS Cloud Practitioner
                  </NavLink>
                </li>
              </ul>
            )}
          </li>
        </ul>

        <div className="sidebar-logo-container">
          <img src={sidebarLogo} alt="Sidebar Logo" className="sidebar-logo" />
        </div>
      </div>
    </>
  );
};

export default Sidebar;

================
File: frontend/my-react-app/src/components/ConfettiAnimation.js
================
// SimpleLevelUpAnimation.js (Simplified)
import React from "react";
import "./test.css";

const ConfettiAnimation = ({ trigger, level }) => {
  if (!trigger) return null;
  return (
    <div className="simple-level-up-overlay">
      <div className="simple-level-up-content">
        LEVEL UP! <br /> You are now Level {level}
      </div>
    </div>
  );
};

export default ConfettiAnimation;

================
File: frontend/my-react-app/src/components/gloabl_test.js
================
// GlobalTestPage.js
import React, {
  useState,
  useEffect,
  useCallback,
  useMemo
} from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { setXPAndCoins } from "./pages/store/userSlice";
import { fetchShopItems } from "./pages/store/shopSlice";
import ConfettiAnimation from "./ConfettiAnimation";
import { showAchievementToast } from "./pages/store/AchievementToast";
import "./test.css";

// Icon imports for achievements
import {
  FaTrophy,
  FaMedal,
  FaStar,
  FaCrown,
  FaBolt,
  FaBook,
  FaBrain,
  FaCheckCircle,
  FaRegSmile,
  FaMagic
} from "react-icons/fa";

/* ------------------------------------------------------------------
   1) Helper: Shuffle an array of question indices
      We won't store the entire question text in localStorage anymore.
------------------------------------------------------------------ */
function shuffleIndices(length) {
  const indices = Array.from({ length }, (_, i) => i);
  for (let i = indices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [indices[i], indices[j]] = [indices[j], indices[i]];
  }
  return indices;
}

/* ------------------------------------------------------------------
   2) Icon & Color Mappings for Achievements
------------------------------------------------------------------ */
const iconMapping = {
  test_rookie: FaTrophy,
  accuracy_king: FaMedal,
  bronze_grinder: FaBook,
  silver_scholar: FaStar,
  gold_god: FaCrown,
  platinum_pro: FaMagic,
  walking_encyclopedia: FaBrain,
  redemption_arc: FaBolt,
  memory_master: FaRegSmile,
  coin_collector_5000: FaBook,
  coin_hoarder_10000: FaBook,
  coin_tycoon_50000: FaBook,
  perfectionist_1: FaCheckCircle,
  double_trouble_2: FaCheckCircle,
  error404_failure_not_found: FaCheckCircle,
  level_up_5: FaTrophy,
  mid_tier_grinder_25: FaMedal,
  elite_scholar_50: FaStar,
  ultimate_master_100: FaCrown,
  category_perfectionist: FaBolt,
  absolute_perfectionist: FaBolt,
  exam_conqueror: FaMedal,
  subject_specialist: FaMedal,
  answer_machine_1000: FaBook,
  knowledge_beast_5000: FaBrain,
  question_terminator: FaBrain,
  test_finisher: FaCheckCircle,
  subject_finisher: FaCheckCircle
};

const colorMapping = {
  test_rookie: "#ff5555",
  accuracy_king: "#ffa500",
  bronze_grinder: "#cd7f32",
  silver_scholar: "#c0c0c0",
  gold_god: "#ffd700",
  platinum_pro: "#e5e4e2",
  walking_encyclopedia: "#00fa9a",
  redemption_arc: "#ff4500",
  memory_master: "#8a2be2",
  coin_collector_5000: "#ff69b4",
  coin_hoarder_10000: "#ff1493",
  coin_tycoon_50000: "#ff0000",
  perfectionist_1: "#adff2f",
  double_trouble_2: "#7fff00",
  error404_failure_not_found: "#00ffff",
  level_up_5: "#f08080",
  mid_tier_grinder_25: "#ff8c00",
  elite_scholar_50: "#ffd700",
  ultimate_master_100: "#ff4500",
  category_perfectionist: "#00ced1",
  absolute_perfectionist: "#32cd32",
  exam_conqueror: "#1e90ff",
  subject_specialist: "#8a2be2",
  answer_machine_1000: "#ff69b4",
  knowledge_beast_5000: "#00fa9a",
  question_terminator: "#ff1493",
  test_finisher: "#adff2f",
  subject_finisher: "#7fff00"
};

/* ------------------------------------------------------------------
   3) The Global Test Page (Server-Side Progress Storage)
------------------------------------------------------------------ */
const QuestionDropdown = ({ 
  totalQuestions, 
  currentQuestionIndex, 
  onQuestionSelect, 
  answers, 
  flaggedQuestions, 
  testData, 
  shuffleOrder 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);





   useEffect(() => {
     const handleClickOutside = (event) => {
       if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
         setIsOpen(false);
       }
     };


     document.addEventListener('mousedown', handleClickOutside);
     return () => document.removeEventListener('mousedown', handleClickOutside);
   }, [])

   


     
      
    
     
     
  

  const getQuestionStatus = (index) => {
    const realIndex = shuffleOrder[index];
    const question = testData.questions[realIndex];
    const answer = answers.find(a => a.questionId === question.id);
    const isFlagged = flaggedQuestions.includes(question.id);
    
    return {
      isAnswered: answer?.userAnswerIndex !== undefined,
      isSkipped: answer?.userAnswerIndex === null,
      isCorrect: answer?.userAnswerIndex === question.correctAnswerIndex,
      isFlagged
    };
  };

  return (
    <div className="question-dropdown">
      <button onClick={() => setIsOpen(!isOpen)} className="dropdown-button">
        Question {currentQuestionIndex + 1}
      </button>

      {isOpen && (
        <div className="dropdown-content">
          {Array.from({ length: totalQuestions }, (_, i) => {
            const status = getQuestionStatus(i);
            return (
              <button
                key={i}
                onClick={() => {
                  onQuestionSelect(i);
                  setIsOpen(false);
                }}
                className={`dropdown-item ${i === currentQuestionIndex ? 'active' : ''}`}
              >
                <span>Question {i + 1}</span>
                <div className="status-indicators">
                  {status.isSkipped && <span className="skip-indicator">⏭️</span>}
                  {status.isFlagged && <span className="flag-indicator">🚩</span>}
                  {status.isAnswered && !status.isSkipped && (
                    <span className={`answer-indicator ${status.isCorrect ? 'correct' : 'incorrect'}`}>
                      {status.isCorrect ? '✓' : '✗'}
                    </span>
                  )}
                </div>
              </button>
            );
          })}
        </div>
      )}
    </div>
  );
};


const GlobalTestPage = ({
  testId,           // e.g. "1"
  category,         // e.g. "secplus"
  backToListPath    // e.g. "/practice-tests/security-plus"
}) => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // Redux user data
  const {
    xp,
    level,
    coins,
    userId,
    xpBoost,
    currentAvatar
  } = useSelector((state) => state.user);

  const achievements = useSelector((state) => state.achievements.all);
  const { items: shopItems, status: shopStatus } = useSelector((state) => state.shop);

  // State for question data & progress
  const [testData, setTestData] = useState(null);          // Full question text
  const [shuffleOrder, setShuffleOrder] = useState([]);    // Array of indices
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState([]);              // e.g. [{ questionId, userAnswerIndex, correctAnswerIndex }, ...]
  const [score, setScore] = useState(0);

  // Flags
  const [loadingTest, setLoadingTest] = useState(true);
  const [error, setError] = useState(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);
  const [isFinished, setIsFinished] = useState(false);

  // Overlays
  const [showScoreOverlay, setShowScoreOverlay] = useState(false);
  const [showReviewMode, setShowReviewMode] = useState(false);
  const [reviewFilter, setReviewFilter] = useState("all");

  // Confetti
  const [localLevel, setLocalLevel] = useState(level);
  const [showLevelUpOverlay, setShowLevelUpOverlay] = useState(false);

  // Flag questions
  const [flaggedQuestions, setFlaggedQuestions] = useState([]);

  // Confirmation popups
  const [showRestartPopup, setShowRestartPopup] = useState(false);
  const [showFinishPopup, setShowFinishPopup] = useState(false);
  const [showNextPopup, setShowNextPopup] = useState(false);

  /* -----------------------------------------------------
     A) On mount: fetch partial attempt, then fetch test
  ----------------------------------------------------- */
  

  useEffect(() => {
    // fetch shop items if needed
    if (shopStatus === "idle") {
      dispatch(fetchShopItems());
    }
  }, [shopStatus, dispatch]);

  // 1) fetch partial attempt from /attempts/<userId>/<testId>
  // 2) fetch test from /api/test/tests/<testId>
  // 3) apply shuffle order to test
  const fetchTestAndAttempt = async () => {
    setLoadingTest(true);
    try {
      // Step 1) Partial attempt:
      let attemptDoc = null;
      if (userId) {
        const attemptRes = await fetch(`/api/test/attempts/${userId}/${testId}`);
        const attemptData = await attemptRes.json();
        attemptDoc = attemptData.attempt; // might be null
      }

      // Step 2) Full test doc
      const testRes = await fetch(`/api/test/tests/${category}/${testId}`);
      if (!testRes.ok) {
        const errData = await testRes.json().catch(() => ({}));
        throw new Error(errData.error || "Failed to fetch test data");
      }
      const testDoc = await testRes.json();

      // We'll keep testDoc.questions as "testData"
      setTestData(testDoc); // question text + answers

      if (attemptDoc) {
        // We have partial data from the server
        setAnswers(attemptDoc.answers || []);
        setScore(attemptDoc.score || 0);
        setIsFinished(attemptDoc.finished === true);

        if (attemptDoc.shuffleOrder && attemptDoc.shuffleOrder.length > 0) {
          setShuffleOrder(attemptDoc.shuffleOrder);
        } else {
          // If no shuffle saved, generate one
          const newOrder = shuffleIndices(testDoc.questions.length);
          setShuffleOrder(newOrder);
        }
        setCurrentQuestionIndex(attemptDoc.currentQuestionIndex || 0);
      } else {
        // No partial attempt => brand new
        const newOrder = shuffleIndices(testDoc.questions.length);
        setShuffleOrder(newOrder);
        setScore(0);
        setAnswers([]);
        setIsFinished(false);
        setCurrentQuestionIndex(0);

        // Create an attempt doc in DB with an upsert call:
        if (userId) {
          await fetch(`/api/test/attempts/${userId}/${testId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              answers: [],
              score: 0,
              totalQuestions: testDoc.questions.length,
              category: testDoc.category || category,
              currentQuestionIndex: 0,
              shuffleOrder: newOrder,
              finished: false
            })
          });
        }
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoadingTest(false);
    }
  };

  useEffect(() => {
    fetchTestAndAttempt();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [testId, userId]);

  /* -----------------------------------------------------
     B) Confetti if user levels up
  ----------------------------------------------------- */
  useEffect(() => {
    if (level > localLevel) {
      setLocalLevel(level);
      setShowLevelUpOverlay(true);
      const t = setTimeout(() => setShowLevelUpOverlay(false), 3000);
      return () => clearTimeout(t);
    }
  }, [level, localLevel]);

  /* -----------------------------------------------------
     C) Helper: Get the "real" question index from shuffle
  ----------------------------------------------------- */
  const getShuffledIndex = useCallback((i) => {
    if (!shuffleOrder || shuffleOrder.length === 0) {
      return i;
    }
    return shuffleOrder[i];
  }, [shuffleOrder]);

  /* -----------------------------------------------------
     D) If we have question data + shuffle, figure out Q
  ----------------------------------------------------- */
  const totalQuestions = testData?.questions?.length || 0;
  const realIndex = getShuffledIndex(currentQuestionIndex);
  const questionObject = totalQuestions > 0
    ? testData.questions[realIndex]
    : null;

  // Determine if we have an existing answer for the current question
  useEffect(() => {
    if (!questionObject) return;
    const existing = answers.find((a) => a.questionId === questionObject.id);
    if (existing) {
      setSelectedOptionIndex(existing.userAnswerIndex);
      setIsAnswered(existing.userAnswerIndex !== null && existing.userAnswerIndex !== undefined);
    } else {
      setSelectedOptionIndex(null);
      setIsAnswered(false);
    }
  }, [questionObject, answers]);

  /* -----------------------------------------------------
     E) Send partial updates to server after each action
  ----------------------------------------------------- */
  const updateServerProgress = useCallback(async (updatedAnswers, updatedScore, finished = false) => {
    if (!userId) return;
    try {
      await fetch(`/api/test/attempts/${userId}/${testId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          answers: updatedAnswers,
          score: updatedScore,
          totalQuestions,
          category: testData?.category || category,
          currentQuestionIndex,
          shuffleOrder,
          finished
        })
      });
    } catch (err) {
      console.error("Failed to update test attempt on backend", err);
    }
  }, [testId, userId, totalQuestions, testData, category, currentQuestionIndex, shuffleOrder]);

  /* -----------------------------------------------------
     F) Handle Option Click
  ----------------------------------------------------- */
  const handleOptionClick = useCallback(
    async (optionIndex) => {
      if (isAnswered || !questionObject) return;
      setSelectedOptionIndex(optionIndex);

      try {
        const baseXP = testData?.xpPerCorrect || 10;
        const effectiveXP = baseXP * xpBoost;
        const response = await fetch(`/api/test/user/${userId}/submit-answer`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            testId,
            questionId: questionObject.id,
            correctAnswerIndex: questionObject.correctAnswerIndex,
            selectedIndex: optionIndex,
            xpPerCorrect: effectiveXP,
            coinsPerCorrect: 5
          })
        });
        const result = await response.json();
        if (response.ok) {
          const { isCorrect, alreadyCorrect, awardedXP, newXP, newCoins } = result;
          if (isCorrect && !alreadyCorrect && awardedXP > 0) {
            dispatch(setXPAndCoins({ xp: newXP, coins: newCoins }));
          }
          if (isCorrect) {
            const newScore = score + 1;
            setScore(newScore);

            // Update server partial progress
            const updatedAnswers = [...answers];
            const idx = updatedAnswers.findIndex(a => a.questionId === questionObject.id);
            const newAnswerObj = {
              questionId: questionObject.id,
              userAnswerIndex: optionIndex,
              correctAnswerIndex: questionObject.correctAnswerIndex
            };
            if (idx >= 0) updatedAnswers[idx] = newAnswerObj;
            else updatedAnswers.push(newAnswerObj);
            setAnswers(updatedAnswers);

            // if correct, increment local score
            updateServerProgress(updatedAnswers, newScore, false);
          } else {
            // incorrect or no new xp
            const updatedAnswers = [...answers];
            const idx = updatedAnswers.findIndex(a => a.questionId === questionObject.id);
            const newAnswerObj = {
              questionId: questionObject.id,
              userAnswerIndex: optionIndex,
              correctAnswerIndex: questionObject.correctAnswerIndex
            };
            if (idx >= 0) updatedAnswers[idx] = newAnswerObj;
            else updatedAnswers.push(newAnswerObj);
            setAnswers(updatedAnswers);

            updateServerProgress(updatedAnswers, score, false);
          }
        } else {
          console.error("submit-answer error:", result);
        }
      } catch (err) {
        console.error("Failed to submit answer to backend", err);
      }

      setIsAnswered(true);
    },
    [
      isAnswered,
      questionObject,
      testData,
      xpBoost,
      userId,
      testId,
      dispatch,
      score,
      answers,
      updateServerProgress
    ]
  );

  /* -----------------------------------------------------
     G) Next / Previous
  ----------------------------------------------------- */
  const finishTestProcess = useCallback(async () => {
    // finalize local score
    let finalScore = 0;
    answers.forEach((ans) => {
      if (ans.userAnswerIndex === ans.correctAnswerIndex) {
        finalScore++;
      }
    });
    setScore(finalScore);

    // call /attempts/.../finish
    try {
      const res = await fetch(`/api/test/attempts/${userId}/${testId}/finish`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          score: finalScore,
          totalQuestions
        })
      });
      const finishData = await res.json();
      if (finishData.newlyUnlocked && finishData.newlyUnlocked.length > 0) {
        finishData.newlyUnlocked.forEach((achievementId) => {
          const achievement = achievements.find((a) => a.achievementId === achievementId);
          if (achievement) {
            const IconComp = iconMapping[achievement.achievementId] || null;
            const color = colorMapping[achievement.achievementId] || "#fff";
            showAchievementToast({
              title: achievement.title,
              description: achievement.description,
              icon: IconComp ? <IconComp /> : null,
              color
            });
          }
        });
      }
    } catch (err) {
      console.error("Failed to finish test attempt:", err);
    }

    // Mark local states
    setIsFinished(true);
    setShowScoreOverlay(true);
    setShowReviewMode(true);
  }, [
    answers,
    userId,
    testId,
    totalQuestions,
    achievements
  ]);

  const handleNextQuestion = useCallback(() => {
    if (currentQuestionIndex === totalQuestions - 1) {
      finishTestProcess();
      return;
    }
    // Move to next
    const nextIndex = currentQuestionIndex + 1;
    setCurrentQuestionIndex(nextIndex);
    // Also update server partial progress
    updateServerProgress(answers, score, false);
  }, [
    currentQuestionIndex,
    totalQuestions,
    finishTestProcess,
    updateServerProgress,
    answers,
    score
  ]);

  const handlePreviousQuestion = useCallback(() => {
    if (currentQuestionIndex > 0) {
      const prevIndex = currentQuestionIndex - 1;
      setCurrentQuestionIndex(prevIndex);
      updateServerProgress(answers, score, false);
    }
  }, [currentQuestionIndex, updateServerProgress, answers, score]);

  /* -----------------------------------------------------
     H) Skip / Flag
  ----------------------------------------------------- */
  const handleSkipQuestion = () => {
    if (!questionObject) return;
    // Insert or update an answer with userAnswerIndex = null
    const updatedAnswers = [...answers];
    const idx = updatedAnswers.findIndex((a) => a.questionId === questionObject.id);
    const skipObj = {
      questionId: questionObject.id,
      userAnswerIndex: null,
      correctAnswerIndex: questionObject.correctAnswerIndex
    };
    if (idx >= 0) {
      updatedAnswers[idx] = skipObj;
    } else {
      updatedAnswers.push(skipObj);
    }
    setAnswers(updatedAnswers);
    setIsAnswered(true);
    updateServerProgress(updatedAnswers, score, false);
    handleNextQuestion();
  };

  const handleFlagQuestion = () => {
    if (!questionObject) return;
    const qId = questionObject.id;
    if (flaggedQuestions.includes(qId)) {
      setFlaggedQuestions(flaggedQuestions.filter((x) => x !== qId));
    } else {
      setFlaggedQuestions([...flaggedQuestions, qId]);
    }
  };

  /* -----------------------------------------------------
     I) Restart
  ----------------------------------------------------- */
  const handleRestartTest = useCallback(async () => {
    // remove the attempt doc or mark it as finished so we can start fresh
    // We'll just do the same approach as "new attempt"
    setCurrentQuestionIndex(0);
    setSelectedOptionIndex(null);
    setIsAnswered(false);
    setScore(0);
    setAnswers([]);
    setFlaggedQuestions([]);
    setIsFinished(false);
    setShowReviewMode(false);
    setShowScoreOverlay(false);

    // generate a new shuffle
    if (testData?.questions?.length) {
      const newOrder = shuffleIndices(testData.questions.length);
      setShuffleOrder(newOrder);

      // upsert attempt doc from scratch
      if (userId && testId) {
        await fetch(`/api/test/attempts/${userId}/${testId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            answers: [],
            score: 0,
            totalQuestions: testData.questions.length,
            category: testData.category || category,
            currentQuestionIndex: 0,
            shuffleOrder: newOrder,
            finished: false
          })
        });
      }
    }
  }, [testData, userId, testId, category]);

  const handleFinishTest = () => {
    finishTestProcess();
  };

  /* -----------------------------------------------------
     J) Review
  ----------------------------------------------------- */
  const handleReviewAnswers = () => {
    setShowReviewMode(true);
    setReviewFilter("all");
  };

  const handleCloseReview = () => {
    if (!isFinished) setShowReviewMode(false);
  };

  const onNextClick = useCallback(() => {
    // if user hasn't answered => show confirm
    if (!isAnswered) {
      setShowNextPopup(true);
    } else {
      handleNextQuestion();
    }
  }, [isAnswered, handleNextQuestion]);

  /* -----------------------------------------------------
     K) Filter for Review Mode
  ----------------------------------------------------- */
  const filteredQuestions = useMemo(() => {
    if (!testData || !testData.questions) return [];
    return testData.questions.filter((q, realIdx) => {
      const userAns = answers.find((a) => a.questionId === q.id);
      const isFlagged = flaggedQuestions.includes(q.id);
      if (!userAns) {
        // user never answered => skip or "no answer"
        return reviewFilter === "skipped" || reviewFilter === "all";
      }
      const isSkipped = userAns.userAnswerIndex === null;
      const isCorrect = userAns.userAnswerIndex === q.correctAnswerIndex;
      if (reviewFilter === "all") return true;
      if (reviewFilter === "skipped" && isSkipped) return true;
      if (reviewFilter === "flagged" && isFlagged) return true;
      if (reviewFilter === "incorrect" && !isCorrect && !isSkipped) return true;
      if (reviewFilter === "correct" && isCorrect && !isSkipped) return true;
      return false;
    });
  }, [testData, answers, flaggedQuestions, reviewFilter]);

  /* -----------------------------------------------------
     Overlays & Confirm Popups
  ----------------------------------------------------- */
  // Confirmation Popup
  const ConfirmPopup = ({ message, onConfirm, onCancel }) => (
    <div className="confirm-popup-overlay">
      <div className="confirm-popup-content">
        <p>{message}</p>
        <div className="confirm-popup-buttons">
          <button className="confirm-popup-yes" onClick={onConfirm}>
            Yes
          </button>
          <button className="confirm-popup-no" onClick={onCancel}>
            No
          </button>
        </div>
      </div>
    </div>
  );

  const renderRestartPopup = () => {
    if (!showRestartPopup) return null;
    return (
      <ConfirmPopup
        message="Are you sure you want to restart the test? All progress will be lost."
        onConfirm={() => {
          handleRestartTest();
          setShowRestartPopup(false);
        }}
        onCancel={() => setShowRestartPopup(false)}
      />
    );
  };

  const renderFinishPopup = () => {
    if (!showFinishPopup) return null;
    return (
      <ConfirmPopup
        message="Are you sure you want to finish the test now?"
        onConfirm={() => {
          handleFinishTest();
          setShowFinishPopup(false);
        }}
        onCancel={() => setShowFinishPopup(false)}
      />
    );
  };

  const renderNextPopup = () => {
    if (!showNextPopup) return null;
    return (
      <ConfirmPopup
        message="You haven't answered this question. Continue without answering?"
        onConfirm={() => {
          handleNextQuestion();
          setShowNextPopup(false);
        }}
        onCancel={() => setShowNextPopup(false)}
      />
    );
  };

  const renderScoreOverlay = () => {
    if (!showScoreOverlay) return null;
    const percentage = totalQuestions
      ? Math.round((score / totalQuestions) * 100)
      : 0;

    return (
      <div className="score-overlay">
        <div className="score-content">
          <h2 className="score-title">Test Complete!</h2>
          <p className="score-details">
            Your score: <strong>{percentage}%</strong> ({score}/{totalQuestions})
          </p>
          <div className="overlay-buttons">
            <button className="restart-button" onClick={() => setShowRestartPopup(true)}>
              Restart Test
            </button>
            <button className="review-button" onClick={handleReviewAnswers}>
              View Review
            </button>
            <button
              className="back-btn"
              onClick={() => navigate(backToListPath)}
            >
              Back to Test List
            </button>
            {Number(testId) < 9999 && (
              <button
                className="next-test-button"
                onClick={() =>
                  navigate(`${backToListPath}/${Number(testId) + 1}`)
                }
              >
                Next Test
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderReviewMode = () => {
    if (!showReviewMode) return null;

    return (
      <div className="score-overlay review-overlay">
        <div className="score-content review-content">
          {isFinished ? (
            <button
              className="back-to-list-btn"
              onClick={() => navigate(backToListPath)}
            >
              Go Back to Test List
            </button>
          ) : (
            <button className="close-review-x" onClick={handleCloseReview}>
              X
            </button>
          )}
          <h2 className="score-title">Review Mode</h2>
          {isFinished && (
            <p className="review-score-line">
              Your final score: {score}/{totalQuestions} (
              {totalQuestions
                ? Math.round((score / totalQuestions) * 100)
                : 0
              }%)
            </p>
          )}
          <div className="review-filter-buttons">
            <button
              className={reviewFilter === "all" ? "active-filter" : ""}
              onClick={() => setReviewFilter("all")}
            >
              All
            </button>
            <button
              className={reviewFilter === "skipped" ? "active-filter" : ""}
              onClick={() => setReviewFilter("skipped")}
            >
              Skipped
            </button>
            <button
              className={reviewFilter === "flagged" ? "active-filter" : ""}
              onClick={() => setReviewFilter("flagged")}
            >
              Flagged
            </button>
            <button
              className={reviewFilter === "incorrect" ? "active-filter" : ""}
              onClick={() => setReviewFilter("incorrect")}
            >
              Incorrect
            </button>
            <button
              className={reviewFilter === "correct" ? "active-filter" : ""}
              onClick={() => setReviewFilter("correct")}
            >
              Correct
            </button>
          </div>
          <p className="score-details">
            Questions shown: {filteredQuestions.length}
          </p>

          <div className="review-mode-container">
            {filteredQuestions.map((q) => {
              const userAns = answers.find((a) => a.questionId === q.id);
              const isFlagged = flaggedQuestions.includes(q.id);

              if (!userAns) {
                // no answer
                return (
                  <div key={q.id} className="review-question-card">
                    <h3>
                      Q{q.id}: {q.question}{" "}
                      {isFlagged && <span className="flagged-icon">🚩</span>}
                    </h3>
                    <p>
                      <strong>Your Answer:</strong> Unanswered
                    </p>
                    <p>
                      <strong>Correct Answer:</strong>{" "}
                      {q.options[q.correctAnswerIndex]}
                    </p>
                    <p style={{ color: "#F44336" }}>No Answer</p>
                    <p>{q.explanation}</p>
                  </div>
                );
              }
              const isSkipped = userAns.userAnswerIndex === null;
              const isCorrect = userAns.userAnswerIndex === q.correctAnswerIndex;

              return (
                <div key={q.id} className="review-question-card">
                  <h3>
                    Q{q.id}: {q.question}{" "}
                    {isFlagged && <span className="flagged-icon">🚩</span>}
                  </h3>
                  <p>
                    <strong>Your Answer:</strong>{" "}
                    {isSkipped
                      ? "Skipped"
                      : q.options[userAns.userAnswerIndex]}
                  </p>
                  <p>
                    <strong>Correct Answer:</strong>{" "}
                    {q.options[q.correctAnswerIndex]}
                  </p>
                  {!isSkipped && (
                    <p
                      style={{
                        color: isCorrect ? "#8BC34A" : "#F44336"
                      }}
                    >
                      {isCorrect ? "Correct!" : "Incorrect!"}
                    </p>
                  )}
                  <p>{q.explanation}</p>
                </div>
              );
            })}
          </div>
          {!isFinished && (
            <button
              className="review-button close-review-btn"
              onClick={handleCloseReview}
            >
              Close Review
            </button>
          )}
        </div>
      </div>
    );
  };

  /* -----------------------------------------------------
     L) Final Return
  ----------------------------------------------------- */
  if (error) {
    return <div style={{ color: "#fff" }}>Error: {error}</div>;
  }
  if (loadingTest) {
    return <div style={{ color: "#fff" }}>Loading test...</div>;
  }
  if (!testData || !testData.questions || testData.questions.length === 0) {
    return <div style={{ color: "#fff" }}>No questions found.</div>;
  }

  // Determine avatar URL
  let avatarUrl = "https://via.placeholder.com/60";
  if (currentAvatar && shopItems && shopItems.length > 0) {
    const avatarItem = shopItems.find((item) => item._id === currentAvatar);
    if (avatarItem && avatarItem.imageUrl) {
      avatarUrl = avatarItem.imageUrl;
    }
  }

  const progressPercentage = totalQuestions > 0
    ? Math.round(((currentQuestionIndex + 1) / totalQuestions) * 100)
    : 0;

  const progressColorHue = (progressPercentage * 120) / 100;
  const progressColor = `hsl(${progressColorHue}, 100%, 50%)`;

  return (
    <div className="aplus-test-container">
      <ConfettiAnimation trigger={showLevelUpOverlay} level={level} />

      {renderRestartPopup()}
      {renderFinishPopup()}
      {renderNextPopup()}
      {renderScoreOverlay()}
      {renderReviewMode()}




      <div className="top-control-bar">
        <button className="flag-btn" onClick={handleFlagQuestion}>
          {questionObject && flaggedQuestions.includes(questionObject.id)
            ? "Unflag"
            : "Flag"}
        </button>
        <QuestionDropdown
          totalQuestions={totalQuestions}
          currentQuestionIndex={currentQuestionIndex}
          onQuestionSelect={(index) => {
            setCurrentQuestionIndex(index);
            updateServerProgress(answers, score, false);
          }}
          answers={answers}
          flaggedQuestions={flaggedQuestions}
          testData={testData}
          shuffleOrder={shuffleOrder}
        />
        <button
          className="finish-test-btn"
          onClick={() => setShowFinishPopup(true)}
        >
          Finish Test
        </button>
      </div>
      <div className="upper-control-bar">
        <button
          className="restart-test-btn"
          onClick={() => setShowRestartPopup(true)}
        >
          Restart Test
        </button>
        <button
          className="back-btn"
          onClick={() => navigate(backToListPath)}
        >
          Back to Test List
        </button>
      </div>

      <h1 className="aplus-title">{testData.testName}</h1>

      {/* Avatar + XP + Coins */}
      <div className="top-bar">
        <div className="avatar-section">
          <div
            className="avatar-image"
            style={{ backgroundImage: `url(${avatarUrl})` }}
          />
          <div className="avatar-level">Lvl {level}</div>
        </div>
        <div className="xp-level-display">XP: {xp}</div>
        <div className="coins-display">Coins: {coins}</div>
      </div>

      {/* Progress Bar */}
      <div className="progress-container">
        <div
          className="progress-fill"
          style={{ width: `${progressPercentage}%`, background: progressColor }}
        >
          {currentQuestionIndex + 1} / {totalQuestions} ({progressPercentage}%)
        </div>
      </div>

      {/* Main question UI (if not finished/score overlay/review) */}
      {!showScoreOverlay && !showReviewMode && !isFinished && (
        <div className="question-card">
          <div className="question-text">
            {questionObject && questionObject.question}
          </div>
          <ul className="options-list">
            {questionObject.options.map((option, idx) => {
              let optionClass = "option-button";
              const correctIndex = questionObject.correctAnswerIndex;
              if (isAnswered && idx === correctIndex) {
                optionClass += " correct-option";
              } else if (
                isAnswered &&
                idx === selectedOptionIndex &&
                idx !== correctIndex
              ) {
                optionClass += " incorrect-option";
              }
              return (
                <li className="option-item" key={idx}>
                  <button
                    className={optionClass}
                    onClick={() => handleOptionClick(idx)}
                    disabled={isAnswered}
                  >
                    {option}
                  </button>
                </li>
              );
            })}
          </ul>

          {isAnswered && questionObject && (
            <div className="explanation">
              <strong>
                {selectedOptionIndex === questionObject.correctAnswerIndex
                  ? "Correct!"
                  : "Incorrect!"}
              </strong>
              <p>{questionObject.explanation}</p>
            </div>
          )}

          <div className="bottom-control-bar">
            <div className="bottom-control-row">
              <button
                className="prev-question-btn"
                onClick={handlePreviousQuestion}
                disabled={currentQuestionIndex === 0}
              >
                Previous Question
              </button>
              {currentQuestionIndex === totalQuestions - 1 ? (
                <button className="next-question-btn" onClick={onNextClick}>
                  Finish Test
                </button>
              ) : (
                <button className="next-question-btn" onClick={onNextClick}>
                  Next Question
                </button>
              )}
            </div>
            <div className="bottom-control-row skip-row">
              <button className="skip-question-btn" onClick={handleSkipQuestion}>
                Skip Question
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GlobalTestPage;

================
File: frontend/my-react-app/src/components/GlobalTestPage.js
================
// GlobalTestPage.js
import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef
} from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { setXPAndCoins } from "./pages/store/userSlice";
import { fetchShopItems } from "./pages/store/shopSlice";
import ConfettiAnimation from "./ConfettiAnimation";
import { showAchievementToast } from "./pages/store/AchievementToast";
import "./test.css";

// Icon imports for achievements
import {
  FaTrophy,
  FaMedal,
  FaStar,
  FaCrown,
  FaBolt,
  FaBook,
  FaBrain,
  FaCheckCircle,
  FaRegSmile,
  FaMagic
} from "react-icons/fa";

/* ------------------------------------------------------------------
   1) Helper: Shuffle an array of question indices
      We won't store the entire question text in localStorage anymore.
------------------------------------------------------------------ */
function shuffleIndices(length) {
  const indices = Array.from({ length }, (_, i) => i);
  for (let i = indices.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [indices[i], indices[j]] = [indices[j], indices[i]];
  }
  return indices;
}

/* ------------------------------------------------------------------
   2) Icon & Color Mappings for Achievements
------------------------------------------------------------------ */
const iconMapping = {
  test_rookie: FaTrophy,
  accuracy_king: FaMedal,
  bronze_grinder: FaBook,
  silver_scholar: FaStar,
  gold_god: FaCrown,
  platinum_pro: FaMagic,
  walking_encyclopedia: FaBrain,
  redemption_arc: FaBolt,
  memory_master: FaRegSmile,
  coin_collector_5000: FaBook,
  coin_hoarder_10000: FaBook,
  coin_tycoon_50000: FaBook,
  perfectionist_1: FaCheckCircle,
  double_trouble_2: FaCheckCircle,
  error404_failure_not_found: FaCheckCircle,
  level_up_5: FaTrophy,
  mid_tier_grinder_25: FaMedal,
  elite_scholar_50: FaStar,
  ultimate_master_100: FaCrown,
  category_perfectionist: FaBolt,
  absolute_perfectionist: FaBolt,
  exam_conqueror: FaMedal,
  subject_specialist: FaMedal,
  answer_machine_1000: FaBook,
  knowledge_beast_5000: FaBrain,
  question_terminator: FaBrain,
  test_finisher: FaCheckCircle,
  subject_finisher: FaCheckCircle
};

const colorMapping = {
  test_rookie: "#ff5555",
  accuracy_king: "#ffa500",
  bronze_grinder: "#cd7f32",
  silver_scholar: "#c0c0c0",
  gold_god: "#ffd700",
  platinum_pro: "#e5e4e2",
  walking_encyclopedia: "#00fa9a",
  redemption_arc: "#ff4500",
  memory_master: "#8a2be2",
  coin_collector_5000: "#ff69b4",
  coin_hoarder_10000: "#ff1493",
  coin_tycoon_50000: "#ff0000",
  perfectionist_1: "#adff2f",
  double_trouble_2: "#7fff00",
  error404_failure_not_found: "#00ffff",
  level_up_5: "#f08080",
  mid_tier_grinder_25: "#ff8c00",
  elite_scholar_50: "#ffd700",
  ultimate_master_100: "#ff4500",
  category_perfectionist: "#00ced1",
  absolute_perfectionist: "#32cd32",
  exam_conqueror: "#1e90ff",
  subject_specialist: "#8a2be2",
  answer_machine_1000: "#ff69b4",
  knowledge_beast_5000: "#00fa9a",
  question_terminator: "#ff1493",
  test_finisher: "#adff2f",
  subject_finisher: "#7fff00"
};

/* ------------------------------------------------------------------
   3) The Global Test Page (Server-Side Progress Storage)
------------------------------------------------------------------ */
const QuestionDropdown = ({ 
  totalQuestions, 
  currentQuestionIndex, 
  onQuestionSelect, 
  answers, 
  flaggedQuestions, 
  testData, 
  shuffleOrder 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const getQuestionStatus = (index) => {
    const realIndex = shuffleOrder[index];
    const question = testData.questions[realIndex];
    const answer = answers.find(a => a.questionId === question.id);
    const isFlagged = flaggedQuestions.includes(question.id);
    
    return {
      isAnswered: answer?.userAnswerIndex !== undefined,
      isSkipped: answer?.userAnswerIndex === null,
      isCorrect: answer?.userAnswerIndex === question.correctAnswerIndex,
      isFlagged
    };
  };

  return (
    <div className="question-dropdown" ref={dropdownRef}>
      <button onClick={() => setIsOpen(!isOpen)} className="dropdown-button">
        Question {currentQuestionIndex + 1}
      </button>

      {isOpen && (
        <div className="dropdown-content">
          {Array.from({ length: totalQuestions }, (_, i) => {
            const status = getQuestionStatus(i);
            return (
              <button
                key={i}
                onClick={() => {
                  onQuestionSelect(i);
                  setIsOpen(false);
                }}
                className={`dropdown-item ${i === currentQuestionIndex ? 'active' : ''}`}
              >
                <span>Question {i + 1}</span>
                <div className="status-indicators">
                  {status.isSkipped && <span className="skip-indicator">⏭️</span>}
                  {status.isFlagged && <span className="flag-indicator">🚩</span>}
                  {status.isAnswered && !status.isSkipped && (
                    <span className={`answer-indicator ${status.isCorrect ? 'correct' : 'incorrect'}`}>
                      {status.isCorrect ? '✓' : '✗'}
                    </span>
                  )}
                </div>
              </button>
            );
          })}
        </div>
      )}
    </div>
  );
};


const GlobalTestPage = ({
  testId,           // e.g. "1"
  category,         // e.g. "secplus"
  backToListPath    // e.g. "/practice-tests/security-plus"
}) => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // Redux user data
  const {
    xp,
    level,
    coins,
    userId,
    xpBoost,
    currentAvatar
  } = useSelector((state) => state.user);

  const achievements = useSelector((state) => state.achievements.all);
  const { items: shopItems, status: shopStatus } = useSelector((state) => state.shop);

  // State for question data & progress
  const [testData, setTestData] = useState(null);          // Full question text
  const [shuffleOrder, setShuffleOrder] = useState([]);    // Array of indices
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState([]);              // e.g. [{ questionId, userAnswerIndex, correctAnswerIndex }, ...]
  const [score, setScore] = useState(0);

  // Flags
  const [loadingTest, setLoadingTest] = useState(true);
  const [error, setError] = useState(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);
  const [isFinished, setIsFinished] = useState(false);

  // Overlays
  const [showScoreOverlay, setShowScoreOverlay] = useState(false);
  const [showReviewMode, setShowReviewMode] = useState(false);
  const [reviewFilter, setReviewFilter] = useState("all");

  // Confetti
  const [localLevel, setLocalLevel] = useState(level);
  const [showLevelUpOverlay, setShowLevelUpOverlay] = useState(false);

  // Flag questions
  const [flaggedQuestions, setFlaggedQuestions] = useState([]);

  // Confirmation popups
  const [showRestartPopup, setShowRestartPopup] = useState(false);
  const [showFinishPopup, setShowFinishPopup] = useState(false);
  const [showNextPopup, setShowNextPopup] = useState(false);

  /* -----------------------------------------------------
     A) On mount: fetch partial attempt, then fetch test
  ----------------------------------------------------- */
  

  useEffect(() => {
    // fetch shop items if needed
    if (shopStatus === "idle") {
      dispatch(fetchShopItems());
    }
  }, [shopStatus, dispatch]);

  // 1) fetch partial attempt from /attempts/<userId>/<testId>
  // 2) fetch test from /api/test/tests/<testId>
  // 3) apply shuffle order to test
  const fetchTestAndAttempt = async () => {
    setLoadingTest(true);
    try {
      // Step 1) Partial attempt:
      let attemptDoc = null;
      if (userId) {
        const attemptRes = await fetch(`/api/test/attempts/${userId}/${testId}`);
        const attemptData = await attemptRes.json();
        attemptDoc = attemptData.attempt; // might be null
      }

      // Step 2) Full test doc
      const testRes = await fetch(`/api/test/tests/${category}/${testId}`);
      if (!testRes.ok) {
        const errData = await testRes.json().catch(() => ({}));
        throw new Error(errData.error || "Failed to fetch test data");
      }
      const testDoc = await testRes.json();

      // We'll keep testDoc.questions as "testData"
      setTestData(testDoc); // question text + answers

      if (attemptDoc) {
        // We have partial data from the server
        setAnswers(attemptDoc.answers || []);
        setScore(attemptDoc.score || 0);
        setIsFinished(attemptDoc.finished === true);

        if (attemptDoc.shuffleOrder && attemptDoc.shuffleOrder.length > 0) {
          setShuffleOrder(attemptDoc.shuffleOrder);
        } else {
          // If no shuffle saved, generate one
          const newOrder = shuffleIndices(testDoc.questions.length);
          setShuffleOrder(newOrder);
        }
        setCurrentQuestionIndex(attemptDoc.currentQuestionIndex || 0);
      } else {
        // No partial attempt => brand new
        const newOrder = shuffleIndices(testDoc.questions.length);
        setShuffleOrder(newOrder);
        setScore(0);
        setAnswers([]);
        setIsFinished(false);
        setCurrentQuestionIndex(0);

        // Create an attempt doc in DB with an upsert call:
        if (userId) {
          await fetch(`/api/test/attempts/${userId}/${testId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              answers: [],
              score: 0,
              totalQuestions: testDoc.questions.length,
              category: testDoc.category || category,
              currentQuestionIndex: 0,
              shuffleOrder: newOrder,
              finished: false
            })
          });
        }
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoadingTest(false);
    }
  };

  useEffect(() => {
    fetchTestAndAttempt();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [testId, userId]);

  /* -----------------------------------------------------
     B) Confetti if user levels up
  ----------------------------------------------------- */
  useEffect(() => {
    if (level > localLevel) {
      setLocalLevel(level);
      setShowLevelUpOverlay(true);
      const t = setTimeout(() => setShowLevelUpOverlay(false), 3000);
      return () => clearTimeout(t);
    }
  }, [level, localLevel]);

  /* -----------------------------------------------------
     C) Helper: Get the "real" question index from shuffle
  ----------------------------------------------------- */
  const getShuffledIndex = useCallback((i) => {
    if (!shuffleOrder || shuffleOrder.length === 0) {
      return i;
    }
    return shuffleOrder[i];
  }, [shuffleOrder]);

  /* -----------------------------------------------------
     D) If we have question data + shuffle, figure out Q
  ----------------------------------------------------- */
  const totalQuestions = testData?.questions?.length || 0;
  const realIndex = getShuffledIndex(currentQuestionIndex);
  const questionObject = totalQuestions > 0
    ? testData.questions[realIndex]
    : null;

  // Determine if we have an existing answer for the current question
  useEffect(() => {
    if (!questionObject) return;
    const existing = answers.find((a) => a.questionId === questionObject.id);
    if (existing) {
      setSelectedOptionIndex(existing.userAnswerIndex);
      setIsAnswered(existing.userAnswerIndex !== null && existing.userAnswerIndex !== undefined);
    } else {
      setSelectedOptionIndex(null);
      setIsAnswered(false);
    }
  }, [questionObject, answers]);

  /* -----------------------------------------------------
     E) Send partial updates to server after each action
  ----------------------------------------------------- */
  const updateServerProgress = useCallback(async (updatedAnswers, updatedScore, finished = false) => {
    if (!userId) return;
    try {
      await fetch(`/api/test/attempts/${userId}/${testId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          answers: updatedAnswers,
          score: updatedScore,
          totalQuestions,
          category: testData?.category || category,
          currentQuestionIndex,
          shuffleOrder,
          finished
        })
      });
    } catch (err) {
      console.error("Failed to update test attempt on backend", err);
    }
  }, [testId, userId, totalQuestions, testData, category, currentQuestionIndex, shuffleOrder]);

  /* -----------------------------------------------------
     F) Handle Option Click
  ----------------------------------------------------- */
  const handleOptionClick = useCallback(
    async (optionIndex) => {
      if (isAnswered || !questionObject) return;
      setSelectedOptionIndex(optionIndex);

      try {
        const baseXP = testData?.xpPerCorrect || 10;
        const effectiveXP = baseXP * xpBoost;
        const response = await fetch(`/api/test/user/${userId}/submit-answer`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            testId,
            questionId: questionObject.id,
            correctAnswerIndex: questionObject.correctAnswerIndex,
            selectedIndex: optionIndex,
            xpPerCorrect: effectiveXP,
            coinsPerCorrect: 5
          })
        });
        const result = await response.json();
        if (response.ok) {
          const { isCorrect, alreadyCorrect, awardedXP, newXP, newCoins } = result;
          if (isCorrect && !alreadyCorrect && awardedXP > 0) {
            dispatch(setXPAndCoins({ xp: newXP, coins: newCoins }));
          }
          if (isCorrect) {
            const newScore = score + 1;
            setScore(newScore);

            // Update server partial progress
            const updatedAnswers = [...answers];
            const idx = updatedAnswers.findIndex(a => a.questionId === questionObject.id);
            const newAnswerObj = {
              questionId: questionObject.id,
              userAnswerIndex: optionIndex,
              correctAnswerIndex: questionObject.correctAnswerIndex
            };
            if (idx >= 0) updatedAnswers[idx] = newAnswerObj;
            else updatedAnswers.push(newAnswerObj);
            setAnswers(updatedAnswers);

            // if correct, increment local score
            updateServerProgress(updatedAnswers, newScore, false);
          } else {
            // incorrect or no new xp
            const updatedAnswers = [...answers];
            const idx = updatedAnswers.findIndex(a => a.questionId === questionObject.id);
            const newAnswerObj = {
              questionId: questionObject.id,
              userAnswerIndex: optionIndex,
              correctAnswerIndex: questionObject.correctAnswerIndex
            };
            if (idx >= 0) updatedAnswers[idx] = newAnswerObj;
            else updatedAnswers.push(newAnswerObj);
            setAnswers(updatedAnswers);

            updateServerProgress(updatedAnswers, score, false);
          }
        } else {
          console.error("submit-answer error:", result);
        }
      } catch (err) {
        console.error("Failed to submit answer to backend", err);
      }

      setIsAnswered(true);
    },
    [
      isAnswered,
      questionObject,
      testData,
      xpBoost,
      userId,
      testId,
      dispatch,
      score,
      answers,
      updateServerProgress
    ]
  );

  /* -----------------------------------------------------
     G) Next / Previous
  ----------------------------------------------------- */
  const finishTestProcess = useCallback(async () => {
    // finalize local score
    let finalScore = 0;
    answers.forEach((ans) => {
      if (ans.userAnswerIndex === ans.correctAnswerIndex) {
        finalScore++;
      }
    });
    setScore(finalScore);

    // call /attempts/.../finish
    try {
      const res = await fetch(`/api/test/attempts/${userId}/${testId}/finish`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          score: finalScore,
          totalQuestions
        })
      });
      const finishData = await res.json();
      if (finishData.newlyUnlocked && finishData.newlyUnlocked.length > 0) {
        finishData.newlyUnlocked.forEach((achievementId) => {
          const achievement = achievements.find((a) => a.achievementId === achievementId);
          if (achievement) {
            const IconComp = iconMapping[achievement.achievementId] || null;
            const color = colorMapping[achievement.achievementId] || "#fff";
            showAchievementToast({
              title: achievement.title,
              description: achievement.description,
              icon: IconComp ? <IconComp /> : null,
              color
            });
          }
        });
      }
    } catch (err) {
      console.error("Failed to finish test attempt:", err);
    }

    // Mark local states
    setIsFinished(true);
    setShowScoreOverlay(true);
    setShowReviewMode(true);
  }, [
    answers,
    userId,
    testId,
    totalQuestions,
    achievements
  ]);

  const handleNextQuestion = useCallback(() => {
    if (currentQuestionIndex === totalQuestions - 1) {
      finishTestProcess();
      return;
    }
    // Move to next
    const nextIndex = currentQuestionIndex + 1;
    setCurrentQuestionIndex(nextIndex);
    // Also update server partial progress
    updateServerProgress(answers, score, false);
  }, [
    currentQuestionIndex,
    totalQuestions,
    finishTestProcess,
    updateServerProgress,
    answers,
    score
  ]);

  const handlePreviousQuestion = useCallback(() => {
    if (currentQuestionIndex > 0) {
      const prevIndex = currentQuestionIndex - 1;
      setCurrentQuestionIndex(prevIndex);
      updateServerProgress(answers, score, false);
    }
  }, [currentQuestionIndex, updateServerProgress, answers, score]);

  /* -----------------------------------------------------
     H) Skip / Flag
  ----------------------------------------------------- */
  const handleSkipQuestion = () => {
    if (!questionObject) return;
    // Insert or update an answer with userAnswerIndex = null
    const updatedAnswers = [...answers];
    const idx = updatedAnswers.findIndex((a) => a.questionId === questionObject.id);
    const skipObj = {
      questionId: questionObject.id,
      userAnswerIndex: null,
      correctAnswerIndex: questionObject.correctAnswerIndex
    };
    if (idx >= 0) {
      updatedAnswers[idx] = skipObj;
    } else {
      updatedAnswers.push(skipObj);
    }
    setAnswers(updatedAnswers);
    setIsAnswered(true);
    updateServerProgress(updatedAnswers, score, false);
    handleNextQuestion();
  };

  const handleFlagQuestion = () => {
    if (!questionObject) return;
    const qId = questionObject.id;
    if (flaggedQuestions.includes(qId)) {
      setFlaggedQuestions(flaggedQuestions.filter((x) => x !== qId));
    } else {
      setFlaggedQuestions([...flaggedQuestions, qId]);
    }
  };

  /* -----------------------------------------------------
     I) Restart
  ----------------------------------------------------- */
  const handleRestartTest = useCallback(async () => {
    // remove the attempt doc or mark it as finished so we can start fresh
    // We'll just do the same approach as "new attempt"
    setCurrentQuestionIndex(0);
    setSelectedOptionIndex(null);
    setIsAnswered(false);
    setScore(0);
    setAnswers([]);
    setFlaggedQuestions([]);
    setIsFinished(false);
    setShowReviewMode(false);
    setShowScoreOverlay(false);

    // generate a new shuffle
    if (testData?.questions?.length) {
      const newOrder = shuffleIndices(testData.questions.length);
      setShuffleOrder(newOrder);

      // upsert attempt doc from scratch
      if (userId && testId) {
        await fetch(`/api/test/attempts/${userId}/${testId}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            answers: [],
            score: 0,
            totalQuestions: testData.questions.length,
            category: testData.category || category,
            currentQuestionIndex: 0,
            shuffleOrder: newOrder,
            finished: false
          })
        });
      }
    }
  }, [testData, userId, testId, category]);

  const handleFinishTest = () => {
    finishTestProcess();
  };

  /* -----------------------------------------------------
     J) Review
  ----------------------------------------------------- */
  const handleReviewAnswers = () => {
    setShowReviewMode(true);
    setReviewFilter("all");
  };

  const handleCloseReview = () => {
    if (!isFinished) setShowReviewMode(false);
  };

  const onNextClick = useCallback(() => {
    // if user hasn't answered => show confirm
    if (!isAnswered) {
      setShowNextPopup(true);
    } else {
      handleNextQuestion();
    }
  }, [isAnswered, handleNextQuestion]);

  /* -----------------------------------------------------
     K) Filter for Review Mode
  ----------------------------------------------------- */
  const filteredQuestions = useMemo(() => {
    if (!testData || !testData.questions) return [];
    return testData.questions.filter((q, realIdx) => {
      const userAns = answers.find((a) => a.questionId === q.id);
      const isFlagged = flaggedQuestions.includes(q.id);
      if (!userAns) {
        // user never answered => skip or "no answer"
        return reviewFilter === "skipped" || reviewFilter === "all";
      }
      const isSkipped = userAns.userAnswerIndex === null;
      const isCorrect = userAns.userAnswerIndex === q.correctAnswerIndex;
      if (reviewFilter === "all") return true;
      if (reviewFilter === "skipped" && isSkipped) return true;
      if (reviewFilter === "flagged" && isFlagged) return true;
      if (reviewFilter === "incorrect" && !isCorrect && !isSkipped) return true;
      if (reviewFilter === "correct" && isCorrect && !isSkipped) return true;
      return false;
    });
  }, [testData, answers, flaggedQuestions, reviewFilter]);

  /* -----------------------------------------------------
     Overlays & Confirm Popups
  ----------------------------------------------------- */
  // Confirmation Popup
  const ConfirmPopup = ({ message, onConfirm, onCancel }) => (
    <div className="confirm-popup-overlay">
      <div className="confirm-popup-content">
        <p>{message}</p>
        <div className="confirm-popup-buttons">
          <button className="confirm-popup-yes" onClick={onConfirm}>
            Yes
          </button>
          <button className="confirm-popup-no" onClick={onCancel}>
            No
          </button>
        </div>
      </div>
    </div>
  );

  const renderRestartPopup = () => {
    if (!showRestartPopup) return null;
    return (
      <ConfirmPopup
        message="Are you sure you want to restart the test? All progress will be lost."
        onConfirm={() => {
          handleRestartTest();
          setShowRestartPopup(false);
        }}
        onCancel={() => setShowRestartPopup(false)}
      />
    );
  };

  const renderFinishPopup = () => {
    if (!showFinishPopup) return null;
    return (
      <ConfirmPopup
        message="Are you sure you want to finish the test now?"
        onConfirm={() => {
          handleFinishTest();
          setShowFinishPopup(false);
        }}
        onCancel={() => setShowFinishPopup(false)}
      />
    );
  };

  const renderNextPopup = () => {
    if (!showNextPopup) return null;
    return (
      <ConfirmPopup
        message="You haven't answered this question. Continue without answering?"
        onConfirm={() => {
          handleNextQuestion();
          setShowNextPopup(false);
        }}
        onCancel={() => setShowNextPopup(false)}
      />
    );
  };

  const renderScoreOverlay = () => {
    if (!showScoreOverlay) return null;
    const percentage = totalQuestions
      ? Math.round((score / totalQuestions) * 100)
      : 0;

    return (
      <div className="score-overlay">
        <div className="score-content">
          <h2 className="score-title">Test Complete!</h2>
          <p className="score-details">
            Your score: <strong>{percentage}%</strong> ({score}/{totalQuestions})
          </p>
          <div className="overlay-buttons">
            <button className="restart-button" onClick={() => setShowRestartPopup(true)}>
              Restart Test
            </button>
            <button className="review-button" onClick={handleReviewAnswers}>
              View Review
            </button>
            <button
              className="back-btn"
              onClick={() => navigate(backToListPath)}
            >
              Back to Test List
            </button>
            {Number(testId) < 9999 && (
              <button
                className="next-test-button"
                onClick={() =>
                  navigate(`${backToListPath}/${Number(testId) + 1}`)
                }
              >
                Next Test
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderReviewMode = () => {
    if (!showReviewMode) return null;

    return (
      <div className="score-overlay review-overlay">
        <div className="score-content review-content">
          {isFinished ? (
            <button
              className="back-to-list-btn"
              onClick={() => navigate(backToListPath)}
            >
              Go Back to Test List
            </button>
          ) : (
            <button className="close-review-x" onClick={handleCloseReview}>
              X
            </button>
          )}
          <h2 className="score-title">Review Mode</h2>
          {isFinished && (
            <p className="review-score-line">
              Your final score: {score}/{totalQuestions} (
              {totalQuestions
                ? Math.round((score / totalQuestions) * 100)
                : 0
              }%)
            </p>
          )}
          <div className="review-filter-buttons">
            <button
              className={reviewFilter === "all" ? "active-filter" : ""}
              onClick={() => setReviewFilter("all")}
            >
              All
            </button>
            <button
              className={reviewFilter === "skipped" ? "active-filter" : ""}
              onClick={() => setReviewFilter("skipped")}
            >
              Skipped
            </button>
            <button
              className={reviewFilter === "flagged" ? "active-filter" : ""}
              onClick={() => setReviewFilter("flagged")}
            >
              Flagged
            </button>
            <button
              className={reviewFilter === "incorrect" ? "active-filter" : ""}
              onClick={() => setReviewFilter("incorrect")}
            >
              Incorrect
            </button>
            <button
              className={reviewFilter === "correct" ? "active-filter" : ""}
              onClick={() => setReviewFilter("correct")}
            >
              Correct
            </button>
          </div>
          <p className="score-details">
            Questions shown: {filteredQuestions.length}
          </p>

          <div className="review-mode-container">
            {filteredQuestions.map((q) => {
              const userAns = answers.find((a) => a.questionId === q.id);
              const isFlagged = flaggedQuestions.includes(q.id);

              if (!userAns) {
                // no answer
                return (
                  <div key={q.id} className="review-question-card">
                    <h3>
                      Q{q.id}: {q.question}{" "}
                      {isFlagged && <span className="flagged-icon">🚩</span>}
                    </h3>
                    <p>
                      <strong>Your Answer:</strong> Unanswered
                    </p>
                    <p>
                      <strong>Correct Answer:</strong>{" "}
                      {q.options[q.correctAnswerIndex]}
                    </p>
                    <p style={{ color: "#F44336" }}>No Answer</p>
                    <p>{q.explanation}</p>
                  </div>
                );
              }
              const isSkipped = userAns.userAnswerIndex === null;
              const isCorrect = userAns.userAnswerIndex === q.correctAnswerIndex;

              return (
                <div key={q.id} className="review-question-card">
                  <h3>
                    Q{q.id}: {q.question}{" "}
                    {isFlagged && <span className="flagged-icon">🚩</span>}
                  </h3>
                  <p>
                    <strong>Your Answer:</strong>{" "}
                    {isSkipped
                      ? "Skipped"
                      : q.options[userAns.userAnswerIndex]}
                  </p>
                  <p>
                    <strong>Correct Answer:</strong>{" "}
                    {q.options[q.correctAnswerIndex]}
                  </p>
                  {!isSkipped && (
                    <p
                      style={{
                        color: isCorrect ? "#8BC34A" : "#F44336"
                      }}
                    >
                      {isCorrect ? "Correct!" : "Incorrect!"}
                    </p>
                  )}
                  <p>{q.explanation}</p>
                </div>
              );
            })}
          </div>
          {!isFinished && (
            <button
              className="review-button close-review-btn"
              onClick={handleCloseReview}
            >
              Close Review
            </button>
          )}
        </div>
      </div>
    );
  };

  /* -----------------------------------------------------
     L) Final Return
  ----------------------------------------------------- */
  if (error) {
    return <div style={{ color: "#fff" }}>Error: {error}</div>;
  }
  if (loadingTest) {
    return <div style={{ color: "#fff" }}>Loading test...</div>;
  }
  if (!testData || !testData.questions || testData.questions.length === 0) {
    return <div style={{ color: "#fff" }}>No questions found.</div>;
  }

  // Determine avatar URL
  let avatarUrl = "https://via.placeholder.com/60";
  if (currentAvatar && shopItems && shopItems.length > 0) {
    const avatarItem = shopItems.find((item) => item._id === currentAvatar);
    if (avatarItem && avatarItem.imageUrl) {
      avatarUrl = avatarItem.imageUrl;
    }
  }

  const progressPercentage = totalQuestions > 0
    ? Math.round(((currentQuestionIndex + 1) / totalQuestions) * 100)
    : 0;

  const progressColorHue = (progressPercentage * 120) / 100;
  const progressColor = `hsl(${progressColorHue}, 100%, 50%)`;

  return (
    <div className="aplus-test-container">
      <ConfettiAnimation trigger={showLevelUpOverlay} level={level} />

      {renderRestartPopup()}
      {renderFinishPopup()}
      {renderNextPopup()}
      {renderScoreOverlay()}
      {renderReviewMode()}




      <div className="top-control-bar">
        <button className="flag-btn" onClick={handleFlagQuestion}>
          {questionObject && flaggedQuestions.includes(questionObject.id)
            ? "Unflag"
            : "Flag"}
        </button>
        <QuestionDropdown
          totalQuestions={totalQuestions}
          currentQuestionIndex={currentQuestionIndex}
          onQuestionSelect={(index) => {
            setCurrentQuestionIndex(index);
            updateServerProgress(answers, score, false);
          }}
          answers={answers}
          flaggedQuestions={flaggedQuestions}
          testData={testData}
          shuffleOrder={shuffleOrder}
        />
        <button
          className="finish-test-btn"
          onClick={() => setShowFinishPopup(true)}
        >
          Finish Test
        </button>
      </div>
      <div className="upper-control-bar">
        <button
          className="restart-test-btn"
          onClick={() => setShowRestartPopup(true)}
        >
          Restart Test
        </button>
        <button
          className="back-btn"
          onClick={() => navigate(backToListPath)}
        >
          Back to Test List
        </button>
      </div>

      <h1 className="aplus-title">{testData.testName}</h1>

      {/* Avatar + XP + Coins */}
      <div className="top-bar">
        <div className="avatar-section">
          <div
            className="avatar-image"
            style={{ backgroundImage: `url(${avatarUrl})` }}
          />
          <div className="avatar-level">Lvl {level}</div>
        </div>
        <div className="xp-level-display">XP: {xp}</div>
        <div className="coins-display">Coins: {coins}</div>
      </div>

      {/* Progress Bar */}
      <div className="progress-container">
        <div
          className="progress-fill"
          style={{ width: `${progressPercentage}%`, background: progressColor }}
        >
          {currentQuestionIndex + 1} / {totalQuestions} ({progressPercentage}%)
        </div>
      </div>

      {/* Main question UI (if not finished/score overlay/review) */}
      {!showScoreOverlay && !showReviewMode && !isFinished && (
        <div className="question-card">
          <div className="question-text">
            {questionObject && questionObject.question}
          </div>
          <ul className="options-list">
            {questionObject.options.map((option, idx) => {
              let optionClass = "option-button";
              const correctIndex = questionObject.correctAnswerIndex;
              if (isAnswered && idx === correctIndex) {
                optionClass += " correct-option";
              } else if (
                isAnswered &&
                idx === selectedOptionIndex &&
                idx !== correctIndex
              ) {
                optionClass += " incorrect-option";
              }
              return (
                <li className="option-item" key={idx}>
                  <button
                    className={optionClass}
                    onClick={() => handleOptionClick(idx)}
                    disabled={isAnswered}
                  >
                    {option}
                  </button>
                </li>
              );
            })}
          </ul>

          {isAnswered && questionObject && (
            <div className="explanation">
              <strong>
                {selectedOptionIndex === questionObject.correctAnswerIndex
                  ? "Correct!"
                  : "Incorrect!"}
              </strong>
              <p>{questionObject.explanation}</p>
            </div>
          )}

          <div className="bottom-control-bar">
            <div className="bottom-control-row">
              <button
                className="prev-question-btn"
                onClick={handlePreviousQuestion}
                disabled={currentQuestionIndex === 0}
              >
                Previous Question
              </button>
              {currentQuestionIndex === totalQuestions - 1 ? (
                <button className="next-question-btn" onClick={onNextClick}>
                  Finish Test
                </button>
              ) : (
                <button className="next-question-btn" onClick={onNextClick}>
                  Next Question
                </button>
              )}
            </div>
            <div className="bottom-control-row skip-row">
              <button className="skip-question-btn" onClick={handleSkipQuestion}>
                Skip Question
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GlobalTestPage;

================
File: frontend/my-react-app/src/components/ProtectedRoute.js
================
// src/components/ProtectedRoute.js
import React from 'react';
import { useSelector } from 'react-redux';
import { Navigate } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
  const { userId, status } = useSelector((state) => state.user);
  
  // If user data is still loading, return a loader (or null)
  if (status === 'loading') {
    return <div>Loading...</div>;
  }
  
  // If userId exists, render the protected content; otherwise, redirect to login.
  return userId ? children : <Navigate to="/login" replace />;
};

export default ProtectedRoute;

================
File: frontend/my-react-app/src/components/test.css
================
@import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Oswald&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Creepster&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Orbitron&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap');





/* ===================== */
/* Global Reset & Basics */
/* ===================== */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  /* Urban Graffiti Theme Background: Dark concrete with a subtle gradient */
  background: linear-gradient(135deg, #2f2f2f, #000000);
  font-family: 'Trebuchet MS', sans-serif;
  color: #e0e0e0;
}

/* ===================== */
/* Test List Container */
/* ===================== */
.tests-list-container {
  width: 100%;
  min-height: 100vh;
  padding: 2rem;
  background: linear-gradient(135deg, #2f2f2f, #000000);
}

.tests-list-title {
  font-size: 2.8rem;
  margin-bottom: 1rem;
  /* Bold neon yellow with a spray-paint feel */
  color: #f0f8ff;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #a93226;
  text-align: center;
  font-family: 'Merriweather', serif;
}

.tests-list-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.6rem;
}

/* ===================== */
/* Test Card (each individual test in the list) */
/* ===================== */
.test-card {
  position: relative;
  /* Dark, textured background reminiscent of worn urban walls */
  background: linear-gradient(135deg, #3a3a3a, #1f1f1f);
  padding: 1.7rem;
  border-radius: 8px;
  /* A bold neon pink border as a spray-painted accent */
  border: 1px solid #a93226;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
  overflow: hidden;
}

/* Force test 10 to appear centered in a three-column grid */
.test-card[data-test-id="10"] {
  grid-column: 2;
}

.test-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 15px #fff
}

/* Test Badge (number) */
.test-badge {
  font-size: 1.6rem;
  font-weight: bold;
  font-family: 'Merriweather', serif;
  margin-bottom: 0.3rem;
  /* A vivid neon orange for an attention-grabbing look */
  color: #a93226;
  text-shadow: .5px .5px 0 #fff, .5px .5px 0 #fff;
}

/* Difficulty label under test number */
.difficulty-label {
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
  /* (The color is set inline from JS) */
}

/* Test Progress & Action Text */
.test-progress {
  font-size: 1rem;
  /* A striking neon blue */
  color: #bfbfbf;
  margin-bottom: 0.5rem;
}

/* New CSS for the additional buttons inside each test card */
.test-card-buttons {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
  justify-content: center;
}

.resume-button {
  background: #1a8cff; /* Electric blue */
  color: #fff;
  padding: 0.5rem 1rem;
  border: 1px solid #000;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.resume-button:hover {
  background: #00b0ff;
  border: 1px solid #000;
}

.restart-button-testlist {
  background: #a93226; /* Bold red */
  color: #fff;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
  border: 1px solid #000;
}

.restart-button-testlist:hover {
  background: #d62929;
}

/* The "Click to Start" button */
.start-button {
  width: 100%;
  padding: 0.75rem;
  font-size: 1rem;
  background: #a93226; /* Deep purple */
  color: #fff;
  border: 1px solid #000;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.start-button:hover {
  background: #d9d9d9;
  color: #000;
}

.back-to-list-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #00e5ff;
  color: #000;
  border: none;
  border-radius: 6px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.back-to-list-btn:hover {
  background: #00b0ff;
}

/* ===================== */
/* APlus Test Container */
/* ===================== */
.aplus-test-container {
  max-width: 900px;
  margin: 2rem auto;
  padding: 2rem;
  /* Using the same dark concrete look for consistency */
  background: linear-gradient(135deg, #2f2f2f, #000000);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.7);
  position: relative;
}

.aplus-title {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 1rem;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
  font-family: 'Merriweather', serif;
}

/* ===================== */
/* XP/Level & Coin Info */
/* ===================== */
.top-bar {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin-bottom: 1rem;
}

.avatar-section {
  text-align: center;
}

.avatar-image {
  width: 80px;
  height: 80px;
  /* Placeholder image styled to resemble a graffiti sticker */
  background: url('https://via.placeholder.com/60') no-repeat center/cover;
  border: 2px solid #000;
  border-radius: 50%;
  margin-bottom: 0.5rem;
  box-shadow: 0px 0px 4px #fff
}

.avatar-level,
.xp-level-display,
.coins-display {
  font-size: 1.1rem;
  /* Neon pink accents for a consistent graffiti look */
  color: #1a8cff;
  text-align: center;
  font-family: 'Orbitron', sans-serif;
}

/* ===================== */
/* Progress Bar */
/* ===================== */
.progress-container {
  position: relative;
  height: 24px;
  background-color: #424242;
  border-radius: 12px;
  margin: 0.75rem 0 1rem 0;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  border-radius: 12px;
  text-align: center;
  color: #000;
  font-weight: bold;
  line-height: 24px;
  transition: width 0.3s ease-in-out;
}

/* ===================== */
/* Question Card */
/* ===================== */
.question-card {
  margin: 1.5rem 0;
  padding: 1.5rem;
  /* A semi-opaque dark layer that mimics spray-painted stencils */
  background: rgba(50, 50, 50, 0.9);
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

.question-text {
  font-size: 1.3rem;
  margin-bottom: 1rem;
  font-family: 'Helvetica Neue', Arial, sans-serif;
  line-height: 1.5;
  /* Neon yellow to pop against the dark background */
  color: #d9d9d9;
  font-weight: bold;
}

.options-list {
  list-style: none;
}

.option-item {
  margin: 0.5rem 0;
}

.option-button {
  width: 100%;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  text-align: left;
  /* A dark base with a hint of urban texture */
  background: #212121;
  /* Neon green text for a bold statement */
  color: #00e676;
  transition: background 0.5s ease;
  outline: none;
}

.option-button:hover {
  background: #737373;
}

/* Correct/Incorrect Animations */
.correct-option {
  animation: correctAnswer 0.3s ease;
  background: #239023 !important;
  color: #fff !important;
}

@keyframes correctAnswer {
  0% { transform: scale(1); box-shadow: 0 0 5px #00e676; }
  50% { transform: scale(1.05); box-shadow: 0 0 10px #00e676; }
  100% { transform: scale(1); box-shadow: 0 0 5px #00e676; }
}

.incorrect-option {
  animation: incorrectAnswer 0.3s ease;
  background: #c12525 !important;
  color: #fff !important;
}

@keyframes incorrectAnswer {
  0% { transform: scale(1); box-shadow: 0 0 5px #ff1744; }
  50% { transform: scale(1.05); box-shadow: 0 0 10px #ff1744; }
  100% { transform: scale(1); box-shadow: 0 0 5px #ff1744; }
}

.explanation {
  margin-top: 1rem;
  /* A translucent layer of neon blue to hint at urban murals */
  background: #465d7d;
  padding: 1rem;
  border-radius: 6px;
  font-size: 1.1rem;
  line-height: 1.5;
  font-family: 'Trebuchet MS', sans-serif;
}

/* ===================== */
/* Next Button */
/* ===================== */
.next-button {
  display: inline-block;
  margin-top: 1rem;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  /* A vibrant neon gradient combining pink and magenta */
  background: linear-gradient(135deg, #ff4081, #f50057);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: box-shadow 0.3s;
  font-weight: 600;
}

.next-button:hover {
  box-shadow: 0 0 10px rgba(245, 0, 87, 0.5);
}

/* ===================== */
/* Overlay (Score & Review) */
/* ===================== */
.score-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  animation: fadeIn 0.5s forwards;
  z-index: 9999;
  font-family: 'Trebuchet MS', sans-serif;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.score-content {
  /* A bold graffiti-inspired gradient of neon purple and electric blue */
  background: linear-gradient(135deg, #6a1b9a, #2979ff);
  padding: 2rem;
  border-radius: 12px;
  text-align: center;
  color: #fff;
  max-width: 50rem;
  width: 80%;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
  font-family: 'Trebuchet MS', sans-serif;
}

.score-title {
  font-size: 2.8rem;
  margin-bottom: 1rem;
  /* Neon yellow for maximum impact */
  color: #ffeb3b;
  font-weight: bold;
}

.score-details {
  font-size: 1.4rem;
  margin-bottom: 1.5rem;
  font-weight: bold;
  color: #e0e0e0;
  font-family: 'Trebuchet MS', sans-serif;
}

.overlay-buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.75rem;
}

.restart-button,
.review-button,
.next-test-button,
.back-btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: box-shadow 0.3s, transform 0.2s;
}

.restart-button {
  background: linear-gradient(135deg, #ff1744, #d50000);
  color: #fff;
}

.restart-button:hover {
  background: linear-gradient(135deg, #d50000, #ff1744);
  transform: scale(1.05);
}

.review-filter-buttons {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  justify-content: center;
}

.review-filter-buttons button {
  background: #212121;
  color: #fff;
  border: 1px solid #fff;
  padding: 1rem 2.8rem;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.review-filter-buttons button:hover {
  background: #424242;
}

.review-filter-buttons .active-filter {
  background: #ff1744;
}

.review-score-line {
  text-align: center;
  font-size: 1.5rem;
  margin-bottom: 0.75rem;
  color: #000;
  font-weight: bold;
}

.score-details {
  margin: 0.5rem 0 1rem 0;
  font-size: 1.3rem;
  text-align: center;
  color: #e0e0e0;
  font-weight: bold;
}

.review-button {
  background: linear-gradient(135deg, #00e5ff, #00bcd4);
  color: #000;
}

.review-button:hover {
  background: linear-gradient(135deg, #00bcd4, #00e5ff);
  transform: scale(1.05);
}

.next-test-button {
  background: #ffea00;
  color: #000;
}

.next-test-button:hover {
  box-shadow: 0 0 10px rgba(255, 234, 0, 0.5);
}

.back-btn {
  background: transparent;
  border: 2px solid #fff;
  color: #fff;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.back-btn:hover {
  background: #fff;
  color: #000;
  transform: scale(1.05);
}

/* ===================== */
/* Level Up Overlay */
/* ===================== */
.simple-level-up-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 193, 7, 0.7);
  color: #000;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 99999;
  animation: levelUpFade 1s forwards;
}

@keyframes levelUpFade {
  0% { opacity: 0; }
  20% { opacity: 1; }
  80% { opacity: 1; }
  100% { opacity: 0; }
}

.simple-level-up-content {
  font-size: 3rem;
  font-weight: bold;
  text-shadow: 2px 2px 4px #000;
}

/* ===================== */
/* Review Mode */
/* ===================== */
.review-mode-container {
  margin: 2rem 0;
}

.review-question-card {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: rgba(237, 201, 175, 0.15);
  border-radius: 6px;
  font-family: 'Trebuchet MS', sans-serif;
  line-height: 1.6;
  font-size: 1.2rem;
}

.close-review-x {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #fdf6e3;
  color: #d84315;
  border: 2px solid #d84315;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  cursor: pointer;
}

.close-review-x:hover {
  background: #d84315;
  color: #fdf6e3;
}

.close-review-btn {
  margin-top: 1rem;
}

.score-content.review-content {
  max-height: 80vh;
  overflow-y: auto;
}

/* ===================== */
/* Minimal Level-Up Particle Burst */
/* ===================== */
.simple-level-up-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;
  z-index: 3000;
}

.simple-level-up-content {
  background-color: rgba(0, 0, 0, 0.8);
  padding: 2rem 3rem;
  border-radius: 8px;
  font-size: 2rem;
  color: #fff;
  text-align: center;
  animation: simpleLevelUp 1s ease-out forwards;
}

@keyframes simpleLevelUp {
  0% { transform: scale(0.5); opacity: 0; }
  50% { transform: scale(1.2); opacity: 1; }
  100% { transform: scale(1); opacity: 0; }
}

/* ===================== */
/* New Control Bars for Test View */
/* ===================== */
.top-control-bar {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.top-control-bar .flag-btn,
.top-control-bar .finish-test-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.top-control-bar .flag-btn {
  background: #ffea00;
  color: #000;
}

.top-control-bar .flag-btn:hover {
  background: #424242;
}

.top-control-bar .finish-test-btn {
  background: #d84315;
  color: #fff;
}

.top-control-bar .finish-test-btn:hover {
  background: #bf360c;
}

.upper-control-bar {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.upper-control-bar .restart-test-btn,
.upper-control-bar .back-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.upper-control-bar .restart-test-btn {
  background: #d84315;
  color: #fff;
}

.upper-control-bar .restart-test-btn:hover {
  background: #bf360c;
}

.bottom-control-bar {
  display: flex;
  flex-direction: column;
  margin-top: 1rem;
}

.bottom-control-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
}

.next-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #2979ff;
  color: #fff;
  transition: background 0.3s;
}

.next-question-btn:hover {
  background: #1565c0;
}

.skip-row {
  justify-content: flex-end;
}

.skip-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #ffea00;
  color: #000;
  transition: background 0.3s;
}

.skip-question-btn:hover {
  background: #ffd600;
}

.prev-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #2979ff;
  color: #fff;
  transition: background 0.3s;
}

.prev-question-btn:hover {
  background: #1565c0;
}

/* ===================== */
/* Confirmation Popup Styles */
/* ===================== */
.confirm-popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
}

.confirm-popup-content {
  background: #212121;
  padding: 1.5rem;
  border-radius: 8px;
  text-align: center;
  max-width: 400px;
  width: 90%;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
  color: #fff;
}

.confirm-popup-buttons {
  margin-top: 1rem;
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.confirm-popup-yes,
.confirm-popup-no {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.confirm-popup-yes {
  background: #2979ff;
  color: #fff;
}

.confirm-popup-yes:hover {
  background: #1565c0;
}

.confirm-popup-no {
  background: #d84315;
  color: #fff;
}

.confirm-popup-no:hover {
  background: #bf360c;
}

/*******************************************/
/* Imported Fonts                          */
/*******************************************/
@import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Oswald&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Creepster&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Orbitron&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap');


/*******************************************/
/* Global Reset & Basics                   */
/*******************************************/
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  /* Urban Graffiti Theme Background: Dark concrete with a subtle gradient */
  background: linear-gradient(135deg, #2f2f2f, #000000);
  font-family: 'Trebuchet MS', sans-serif;
  color: #e0e0e0;
}

/*******************************************/
/* Test List Container                     */
/*******************************************/
.tests-list-container {
  width: 100%;
  min-height: 100vh;
  padding: 2rem;
  background: linear-gradient(135deg, #2f2f2f, #000000);
}

.tests-list-title {
  font-size: 2.8rem;
  margin-bottom: 1rem;
  /* Bold neon yellow with a spray-paint feel */
  color: #f0f8ff;
  text-shadow: 2px 2px 0 #000, 4px 4px 0 #a93226;
  text-align: center;
  font-family: 'Merriweather', serif;
}

.tests-list-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.6rem;
}

/*******************************************/
/* Test Card (each test in the list)       */
/*******************************************/
.test-card {
  position: relative;
  background: linear-gradient(135deg, #3a3a3a, #1f1f1f);
  padding: 1.7rem;
  border-radius: 8px;
  border: 1px solid #a93226;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
  overflow: hidden;
}

/* Force test 10 to appear centered in a three-column grid */
.test-card[data-test-id="10"] {
  grid-column: 2;
}

.test-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 15px #fff;
}

.test-badge {
  font-size: 1.6rem;
  font-weight: bold;
  font-family: 'Merriweather', serif;
  margin-bottom: 0.3rem;
  color: #a93226;
  text-shadow: .5px .5px 0 #fff, .5px .5px 0 #fff;
}

.difficulty-label {
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
}

.test-progress {
  font-size: 1rem;
  color: #bfbfbf;
  margin-bottom: 0.5rem;
}

/*******************************************/
/* Buttons within Each Test Card           */
/*******************************************/
.test-card-buttons {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
  justify-content: center;
}

.resume-button {
  background: #1a8cff;
  color: #fff;
  padding: 0.5rem 1rem;
  border: 1px solid #000;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.resume-button:hover {
  background: #00b0ff;
  border: 1px solid #000;
}

.restart-button-testlist {
  background: #a93226;
  color: #fff;
  padding: 0.5rem 1rem;
  border: 1px solid #000;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.restart-button-testlist:hover {
  background: #d62929;
}

/* The "Click to Start" button */
.start-button {
  width: 100%;
  padding: 0.75rem;
  font-size: 1rem;
  background: #a93226;
  color: #fff;
  border: 1px solid #000;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.start-button:hover {
  background: #d9d9d9;
  color: #000;
}

.back-to-list-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #00e5ff;
  color: #000;
  border: none;
  border-radius: 6px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.back-to-list-btn:hover {
  background: #00b0ff;
}

/*******************************************/
/* APlus Test Container                    */
/*******************************************/
.aplus-test-container {
  max-width: 900px;
  margin: 2rem auto;
  padding: 2rem;
  background: linear-gradient(135deg, #2f2f2f, #000000);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.7);
  position: relative;
}

.aplus-title {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 1rem;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
  font-family: 'Merriweather', serif;
}

/*******************************************/
/* XP/Level & Coin Info                    */
/*******************************************/
.top-bar {
  display: flex;
  justify-content: space-around;
  align-items: center;
  margin-bottom: 1rem;
}

.avatar-section {
  text-align: center;
}

.avatar-image {
  width: 80px;
  height: 80px;
  background: url('https://via.placeholder.com/60') no-repeat center/cover;
  border: 2px solid #000;
  border-radius: 50%;
  margin-bottom: 0.5rem;
  box-shadow: 0px 0px 4px #fff;
}

.avatar-level,
.xp-level-display,
.coins-display {
  font-size: 1.1rem;
  color: #1a8cff;
  text-align: center;
  font-family: 'Orbitron', sans-serif;
}

/*******************************************/
/* Progress Bar                            */
/*******************************************/
.progress-container {
  position: relative;
  height: 24px;
  background-color: #424242;
  border-radius: 12px;
  margin: 0.75rem 0 1rem 0;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  border-radius: 12px;
  text-align: center;
  color: #000;
  font-weight: bold;
  line-height: 24px;
  transition: width 0.3s ease-in-out;
}

/*******************************************/
/* Question Card                           */
/*******************************************/
.question-card {
  margin: 1.5rem 0;
  padding: 1.5rem;
  background: rgba(50, 50, 50, 0.9);
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

.question-text {
  font-size: 1.3rem;
  margin-bottom: 1rem;
  font-family: 'Helvetica Neue', Arial, sans-serif;
  line-height: 1.5;
  color: #d9d9d9;
  font-weight: bold;
}

.options-list {
  list-style: none;
}

.option-item {
  margin: 0.5rem 0;
}

.option-button {
  width: 100%;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  text-align: left;
  background: #212121;
  color: #00e676;
  transition: background 0.5s ease;
  outline: none;
}

.option-button:hover {
  background: #737373;
}

/* Correct/Incorrect Animations */
.correct-option {
  animation: correctAnswer 0.3s ease;
  background: #239023 !important;
  color: #fff !important;
}

@keyframes correctAnswer {
  0% { transform: scale(1); box-shadow: 0 0 5px #00e676; }
  50% { transform: scale(1.05); box-shadow: 0 0 10px #00e676; }
  100% { transform: scale(1); box-shadow: 0 0 5px #00e676; }
}

.incorrect-option {
  animation: incorrectAnswer 0.3s ease;
  background: #c12525 !important;
  color: #fff !important;
}

@keyframes incorrectAnswer {
  0% { transform: scale(1); box-shadow: 0 0 5px #ff1744; }
  50% { transform: scale(1.05); box-shadow: 0 0 10px #ff1744; }
  100% { transform: scale(1); box-shadow: 0 0 5px #ff1744; }
}

.explanation {
  margin-top: 1rem;
  background: #465d7d;
  padding: 1rem;
  border-radius: 6px;
  font-size: 1.1rem;
  line-height: 1.5;
  font-family: 'Trebuchet MS', sans-serif;
}

/*******************************************/
/* Next Button                             */
/*******************************************/
.next-button {
  display: inline-block;
  margin-top: 1rem;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  background: linear-gradient(135deg, #ff4081, #f50057);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: box-shadow 0.3s;
  font-weight: 600;
}

.next-button:hover {
  box-shadow: 0 0 10px rgba(245, 0, 87, 0.5);
}

/*******************************************/
/* Overlay (Score & Review)                */
/*******************************************/
.score-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  animation: fadeIn 0.5s forwards;
  z-index: 9999;
  font-family: 'Trebuchet MS', sans-serif;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.score-content {
  background: linear-gradient(135deg, #6a1b9a, #2979ff);
  padding: 2rem;
  border-radius: 12px;
  text-align: center;
  color: #fff;
  max-width: 50rem;
  width: 80%;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
  font-family: 'Trebuchet MS', sans-serif;
}

.score-title {
  font-size: 2.8rem;
  margin-bottom: 1rem;
  color: #ffeb3b;
  font-weight: bold;
}

.score-details {
  font-size: 1.4rem;
  margin-bottom: 1.5rem;
  font-weight: bold;
  color: #e0e0e0;
  font-family: 'Trebuchet MS', sans-serif;
}

.overlay-buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.75rem;
}

.restart-button,
.review-button,
.next-test-button,
.back-btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: box-shadow 0.3s, transform 0.2s;
}

.restart-button {
  background: linear-gradient(135deg, #ff1744, #d50000);
  color: #fff;
}

.restart-button:hover {
  background: linear-gradient(135deg, #d50000, #ff1744);
  transform: scale(1.05);
}

.review-filter-buttons {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  justify-content: center;
}

.review-filter-buttons button {
  background: #212121;
  color: #fff;
  border: 1px solid #fff;
  padding: 1rem 2.8rem;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;
}

.review-filter-buttons button:hover {
  background: #424242;
}

.review-filter-buttons .active-filter {
  background: #ff1744;
}

.review-score-line {
  text-align: center;
  font-size: 1.5rem;
  margin-bottom: 0.75rem;
  color: #000;
  font-weight: bold;
}

.score-details {
  margin: 0.5rem 0 1rem 0;
  font-size: 1.3rem;
  text-align: center;
  color: #e0e0e0;
  font-weight: bold;
}

.review-button {
  background: linear-gradient(135deg, #00e5ff, #00bcd4);
  color: #000;
}

.review-button:hover {
  background: linear-gradient(135deg, #00bcd4, #00e5ff);
  transform: scale(1.05);
}

.next-test-button {
  background: #ffea00;
  color: #000;
}

.next-test-button:hover {
  box-shadow: 0 0 10px rgba(255, 234, 0, 0.5);
}

.back-btn {
  background: transparent;
  border: 2px solid #fff;
  color: #fff;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.back-btn:hover {
  background: #fff;
  color: #000;
  transform: scale(1.05);
}

/*******************************************/
/* Level Up Overlay                        */
/*******************************************/
.simple-level-up-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 193, 7, 0.7);
  color: #000;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 99999;
  animation: levelUpFade 1s forwards;
}

@keyframes levelUpFade {
  0% { opacity: 0; }
  20% { opacity: 1; }
  80% { opacity: 1; }
  100% { opacity: 0; }
}

.simple-level-up-content {
  font-size: 3rem;
  font-weight: bold;
  text-shadow: 2px 2px 4px #000;
}

/*******************************************/
/* Review Mode                             */
/*******************************************/
.review-mode-container {
  margin: 2rem 0;
}

.review-question-card {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: rgba(237, 201, 175, 0.15);
  border-radius: 6px;
  font-family: 'Trebuchet MS', sans-serif;
  line-height: 1.6;
  font-size: 1.2rem;
}

.close-review-x {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #fdf6e3;
  color: #d84315;
  border: 2px solid #d84315;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  cursor: pointer;
}

.close-review-x:hover {
  background: #d84315;
  color: #fdf6e3;
}

.close-review-btn {
  margin-top: 1rem;
}

.score-content.review-content {
  max-height: 80vh;
  overflow-y: auto;
}

/*******************************************/
/* Minimal Level-Up Particle Burst         */
/*******************************************/
.simple-level-up-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;
  z-index: 3000;
}

.simple-level-up-content {
  background-color: rgba(0, 0, 0, 0.8);
  padding: 2rem 3rem;
  border-radius: 8px;
  font-size: 2rem;
  color: #fff;
  text-align: center;
  animation: simpleLevelUp 1s ease-out forwards;
}

@keyframes simpleLevelUp {
  0% { transform: scale(0.5); opacity: 0; }
  50% { transform: scale(1.2); opacity: 1; }
  100% { transform: scale(1); opacity: 0; }
}

/*******************************************/
/* New Control Bars for Test View          */
/*******************************************/
.top-control-bar {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.top-control-bar .flag-btn,
.top-control-bar .finish-test-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.top-control-bar .flag-btn {
  background: #ffea00;
  color: #000;
}
.top-control-bar .flag-btn:hover {
  background: #424242;
}

.top-control-bar .finish-test-btn {
  background: #d84315;
  color: #fff;
}
.top-control-bar .finish-test-btn:hover {
  background: #bf360c;
}

.upper-control-bar {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.upper-control-bar .restart-test-btn,
.upper-control-bar .back-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.upper-control-bar .restart-test-btn {
  background: #d84315;
  color: #fff;
}
.upper-control-bar .restart-test-btn:hover {
  background: #bf360c;
}

.bottom-control-bar {
  display: flex;
  flex-direction: column;
  margin-top: 1rem;
}

.bottom-control-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
}

.next-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #2979ff;
  color: #fff;
  transition: background 0.3s;
}
.next-question-btn:hover {
  background: #1565c0;
}

.skip-row {
  justify-content: flex-end;
}

.skip-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #ffea00;
  color: #000;
  transition: background 0.3s;
}
.skip-question-btn:hover {
  background: #ffd600;
}

.prev-question-btn {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  background: #2979ff;
  color: #fff;
  transition: background 0.3s;
}
.prev-question-btn:hover {
  background: #1565c0;
}

/*******************************************/
/* Confirmation Popup Styles               */
/*******************************************/
.confirm-popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
}

.confirm-popup-content {
  background: #212121;
  padding: 1.5rem;
  border-radius: 8px;
  text-align: center;
  max-width: 400px;
  width: 90%;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
  color: #fff;
}

.confirm-popup-buttons {
  margin-top: 1rem;
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.confirm-popup-yes,
.confirm-popup-no {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
}

.confirm-popup-yes {
  background: #2979ff;
  color: #fff;
}
.confirm-popup-yes:hover {
  background: #1565c0;
}

.confirm-popup-no {
  background: #d84315;
  color: #fff;
}
.confirm-popup-no:hover {
  background: #bf360c;
}

/* Question Dropdown Styles */
.question-dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-button {
  background-color: #2c3e50;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.dropdown-content {
  position: absolute;
  top: 100%;
  left: 0;
  background-color: #34495e;
  min-width: 200px;
  max-height: 400px;
  overflow-y: auto;
  border-radius: 4px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  z-index: 1000;
}

.dropdown-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  padding: 8px 12px;
  border: none;
  background: none;
  color: white;
  text-align: left;
  cursor: pointer;
}

.dropdown-item:hover {
  background-color: #2c3e50;
}

.dropdown-item.active {
  background-color: #3498db;
}

.status-indicators {
  display: flex;
  gap: 4px;
  align-items: center;
}

.answer-indicator.correct {
  color: #2ecc71;
}

.answer-indicator.incorrect {
  color: #e74c3c;
}

.skip-indicator {
  color: #f1c40f;
}

.flag-indicator {
  color: #e74c3c;
}

*******************************************/
/* 1) Extra-Small Devices: max-width 320px */
/*******************************************/
@media (max-width: 320px) {
  body {
    overflow-x: hidden;
  }

  /* Hide the row of filter buttons */
  .review-filter-buttons {
    flex-wrap: wrap;
    justify-content: center; 
  }

  /* Make each button smaller (both text & padding) */
  .review-filter-buttons button {
    font-size: 0.9rem;       /* or 0.8rem if you need even smaller */
    padding: 0.5rem 1rem;
    margin: 0.25rem;         /* small margin around each button */
  }



  .tests-list-title {
    font-size: 2.2rem;
    margin-bottom: 0.75rem;
  }

  .tests-list-grid {
    grid-template-columns: 1fr; /* Force single column on tiny screens */
  }

  .test-badge {
    font-size: 1.3rem;
  }

  /* Buttons & Card text */
  .resume-button, .restart-button-testlist, .start-button {
    font-size: 0.85rem;
    padding: 0.4rem 0.8rem;
  }
  .test-progress {
    font-size: 0.85rem;
  }

  /* Next/option buttons in question area */
  .prev-question-btn,
  .next-question-btn,
  .skip-question-btn {
    font-size: 0.7rem;
    padding: 0.4rem 0.7rem;
    margin: 5px;
    /* Or whatever smaller spacing you like */
  }
    
    
  .question-text {
    font-size: 1.15rem;
  }
}

/*******************************************/
/* 2) Small Devices: max-width 480px       */
/*******************************************/
@media (max-width: 480px) {
  body {
    overflow-x: hidden;
  }

  /* Hide the row of filter buttons */
  .review-filter-buttons {
    flex-wrap: wrap;
    justify-content: center; 
  }

  /* Make each button smaller (both text & padding) */
  .review-filter-buttons button {
    font-size: 0.9rem;       /* or 0.8rem if you need even smaller */
    padding: 0.5rem 1rem;
    margin: 0.25rem;         /* small margin around each button */
  }

  .tests-list-title {
    font-size: 2.4rem;
    margin-bottom: 1rem;
  }

  .tests-list-grid {
    grid-template-columns: 1fr; /* Single column still recommended */
  }

  .test-badge {
    font-size: 1.4rem;
  }

  .resume-button, .restart-button-testlist, .start-button {
    font-size: 0.8rem;
    padding: 0.4rem 1rem;
  }

  .prev-question-btn,
  .next-question-btn,
  .skip-question-btn {
    font-size: 0.8rem;
    padding: 0.5rem 0.85rem;
    margin: 5px;
    /* Or whatever smaller spacing you like */
  }
  .question-text {
    font-size: 1.2rem;
  }
}

/*******************************************/
/* 3) Medium-Small Devices: max-width 600px*/
/*******************************************/
@media (max-width: 600px) {
  body {
    overflow-x: hidden;
  }

  /* Hide the row of filter buttons */
  .review-filter-buttons {
    flex-wrap: wrap;
    justify-content: center; 
  }

  /* Make each button smaller (both text & padding) */
  .review-filter-buttons button {
    font-size: 0.9rem;       /* or 0.8rem if you need even smaller */
    padding: 0.5rem 1rem;
    margin: 0.25rem;         /* small margin around each button */
  }


  .tests-list-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }

  .tests-list-title {
    font-size: 2.5rem;
  }

  .test-badge {
    font-size: 1.5rem;
  }

  .resume-button, .restart-button-testlist, .start-button {
    font-size: 0.95rem;
    padding: 0.5rem 1rem;
  }

  .option-button,
  .next-button {
    font-size: 1rem;
    padding: 0.7rem 1rem;
  }
  .question-text {
    font-size: 1.25rem;
  }
}

/*******************************************/
/* 4) Tablets / Larger Mobiles: max-width 768px */
/*******************************************/
@media (max-width: 768px) {
  body {
    overflow-x: hidden;
  }
  
  .review-filter-buttons {
    flex-wrap: wrap;
    justify-content: center; 
  }

  /* Make each button smaller (both text & padding) */
  .review-filter-buttons button {
    font-size: 0.9rem;       /* or 0.8rem if you need even smaller */
    padding: 0.5rem 1rem;
    margin: 0.25rem;         /* small margin around each button */
  }
  
  .tests-list-grid {
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  }

  .tests-list-title {
    font-size: 2.6rem;
  }

  .test-badge {
    font-size: 1.55rem;
  }

  .resume-button, .restart-button-testlist, .start-button {
    font-size: 1rem;
    padding: 0.6rem 1.2rem;
  }

  .option-button,
  .next-button {
    font-size: 1.05rem;
    padding: 0.75rem 1rem;
  }
  .question-text {
    font-size: 1.3rem;
  }
}

================
File: frontend/my-react-app/src/App.js
================
// src/App.js
import React, { useEffect } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserData } from './components/pages/store/userSlice';

// Import ToastContainer from react-toastify
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Public pages
import InfoPage from './components/pages/Info/InfoPage';
import Login from './components/pages/auth/Login';
import Register from './components/pages/auth/Register';
import ForgotPassword from './components/pages/auth/ForgotPassword';

// Protected pages
import ProtectedRoute from './components/ProtectedRoute';
import Sidebar from './components/Sidebar/Sidebar';
import AchievementPage from './components/pages/store/AchievementPage';

import Xploitcraft from './components/pages/XploitcraftPage/Xploitcraft';
import ScenarioSphere from './components/pages/ScenarioPage/ScenarioSphere';
import AnalogyHub from './components/pages/AnalogyPage/AnalogyHub';
import Log from './components/pages/LogPage/Log';
import GRC from './components/pages/GRCpage/GRC';
import DailyCyberBrief from './components/pages/DailyPage/DailyCyberBrief';
import Resources from './components/pages/ResourcesPage/Resources';
import AdminInterface from './components/pages/AdminInterface/AdminInterface';
import PBQWizard from './components/pages/PBQpage/PBQWizard';
import ShopPage from './components/pages/store/ShopPage';
import UserProfile from './components/pages/store/UserProfile';
import LeaderboardPage from './components/pages/store/LeaderboardPage';

// Test Pages
import APlusTestPage from './components/pages/aplus/APlusTestPage';
import APlusCore2TestPage from './components/pages/aplus2/APlusCore2TestPage';
import NetworkPlusTestPage from './components/pages/nplus/NetworkPlusTestPage';
import SecurityPlusTestPage from './components/pages/secplus/SecurityPlusTestPage';
import CySAPlusTestPage from './components/pages/cysa/CySAPlusTestPage';
import PenPlusTestPage from './components/pages/penplus/PenPlusTestPage';
import CaspPlusTestPage from './components/pages/casp/CaspPlusTestPage';
import LinuxPlusTestPage from './components/pages/linuxplus/LinuxPlusTestPage';
import CloudPlusTestPage from './components/pages/cloudplus/CloudPlusTestPage';
import DataPlusTestPage from './components/pages/dataplus/DataPlusTestPage';
import ServerPlusTestPage from './components/pages/serverplus/ServerPlusTestPage';
import CisspTestPage from './components/pages/cissp/CisspTestPage';
import AWSCloudTestPage from './components/pages/awscloud/AWSCloudTestPage';
import GlobalTestPage from './components/GlobalTestPage';

// Global CSS import
import './components/pages/XploitcraftPage/global.css';

function App() {
  const dispatch = useDispatch();
  const { userId } = useSelector((state) => state.user);

  useEffect(() => {
    if (userId) {
      dispatch(fetchUserData(userId));
    }
  }, [dispatch, userId]);

  return (
    <div className="App">
      {userId && <Sidebar />}
      {/* React Toastify container for notifications */}
      <ToastContainer 
        position="top-right"
        autoClose={7000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <div className="main-content">
        <Routes>
          <Route path="/" element={<InfoPage />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/forgot-password" element={<ForgotPassword />} />

          <Route path="/profile" element={
            <ProtectedRoute>
              <UserProfile />
            </ProtectedRoute>
          }/>
          <Route path="/achievements" element={
            <ProtectedRoute>
              <AchievementPage />
            </ProtectedRoute>
          }/>
          <Route path="/shop" element={
            <ProtectedRoute>
              <ShopPage />
            </ProtectedRoute>
          }/>
          <Route path="/leaderboard" element={
            <ProtectedRoute>
              <LeaderboardPage />
            </ProtectedRoute>
          }/>
          <Route path="/xploitcraft" element={
            <ProtectedRoute>
              <Xploitcraft />
            </ProtectedRoute>
          }/>
          <Route path="/scenariosphere" element={
            <ProtectedRoute>
              <ScenarioSphere />
            </ProtectedRoute>
          }/>
          <Route path="/analogyhub" element={
            <ProtectedRoute>
              <AnalogyHub />
            </ProtectedRoute>
          }/>
          <Route path="/log" element={
            <ProtectedRoute>
              <Log />
            </ProtectedRoute>
          }/>
          <Route path="/grc" element={
            <ProtectedRoute>
              <GRC />
            </ProtectedRoute>
          }/>
          <Route path="/dailycyberbrief" element={<DailyCyberBrief />} />
          <Route path="/resources" element={<Resources />} />
          <Route path="/admin" element={
            <ProtectedRoute>
              <AdminInterface />
            </ProtectedRoute>
          }/>
          <Route path="/pbq" element={
            <ProtectedRoute>
              <PBQWizard />
            </ProtectedRoute>
          }/>
          {/* Test Routes */}
          <Route path="/practice-tests/a-plus" element={
            <ProtectedRoute>
              <APlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/a-plus/:testId" element={
            <ProtectedRoute>
              <APlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/aplus-core2" element={
            <ProtectedRoute>
              <APlusCore2TestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/aplus-core2/:testId" element={
            <ProtectedRoute>
              <APlusCore2TestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/network-plus" element={
            <ProtectedRoute>
              <NetworkPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/network-plus/:testId" element={
            <ProtectedRoute>
              <NetworkPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/security-plus" element={
            <ProtectedRoute>
              <SecurityPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/security-plus/:testId" element={
            <ProtectedRoute>
              <SecurityPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cysa-plus" element={
            <ProtectedRoute>
              <CySAPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cysa-plus/:testId" element={
            <ProtectedRoute>
              <CySAPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/pen-plus" element={
            <ProtectedRoute>
              <PenPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/pen-plus/:testId" element={
            <ProtectedRoute>
              <PenPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/casp-plus" element={
            <ProtectedRoute>
              <CaspPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/casp-plus/:testId" element={
            <ProtectedRoute>
              <CaspPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/linux-plus" element={
            <ProtectedRoute>
              <LinuxPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/linux-plus/:testId" element={
            <ProtectedRoute>
              <linuxPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cloud-plus" element={
            <ProtectedRoute>
              <CloudPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cloud-plus/:testId" element={
            <ProtectedRoute>
              <CloudPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/data-plus" element={
            <ProtectedRoute>
              <DataPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/data-plus/:testId" element={
            <ProtectedRoute>
              <DataPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/server-plus" element={
            <ProtectedRoute>
              <ServerPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/server-plus/:testId" element={
            <ProtectedRoute>
              <ServerPlusTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cissp" element={
            <ProtectedRoute>
              <CisspTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/cissp/:testId" element={
            <ProtectedRoute>
              <CisspTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/aws-cloud" element={
            <ProtectedRoute>
              <AWSCloudTestPage />
            </ProtectedRoute>
          }/>
          <Route path="/practice-tests/aws-cloud/:testId" element={
            <ProtectedRoute>
              <AWSCloudTestPage />
            </ProtectedRoute>
          }/>

          
          
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
    </div>
  );
}

export default App;

================
File: frontend/my-react-app/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: frontend/my-react-app/src/global.css
================
.main-content {
  /* no margin-left at all */
  transition: all 0.1s ease;  /* optional if you want smoothness */
}

================
File: frontend/my-react-app/src/index.css
================
/* Add a dark mode theme to the entire page */
body {
  background-color: #121212;  /* Dark background for the whole app */
  color: #ffffff;  /* Light text for high contrast */
  font-family: 'Roboto', sans-serif;  /* Clean, modern font */
  margin: 0;  /* Remove default browser margin */
  padding: 0;  /* Remove default padding */
}

/* Style all input and button elements with consistent font */
input, button {
  font-family: inherit;  /* Use the same font as the body */
}

/* Add a universal box-sizing property for better layout consistency */
*,
*::before,
*::after {
  box-sizing: border-box;
}

================
File: frontend/my-react-app/src/index.js
================
// index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { store } from './components/pages/store/store'; // Adjust the path if necessary
import { BrowserRouter } from 'react-router-dom';
import App from './App';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    {/* Provide the Redux store to the entire app */}
    <Provider store={store}>
      {/* Provide React Router context */}
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
);

================
File: frontend/my-react-app/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/my-react-app/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: frontend/my-react-app/.eslintignore
================
node_modules/
build/
public/

================
File: frontend/my-react-app/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/my-react-app/craco.config.js
================
// craco.config.js
module.exports = {
  webpack: {
    configure: (webpackConfig) => {
      // Filter out the CssMinimizerPlugin from the list of minimizers
      webpackConfig.optimization.minimizer = webpackConfig.optimization.minimizer.filter(
        (plugin) => plugin.constructor.name !== 'CssMinimizerPlugin'
      );
      return webpackConfig;
    },
  },
};

================
File: frontend/my-react-app/Dockerfile.audit
================
FROM node:20-alpine


RUN apk add --no-cache bash curl


WORKDIR /app


COPY package*.json ./

RUN npm install -g npm@11.0.0


RUN npm install


RUN npm audit --audit-level=high


COPY . .


EXPOSE 3000


CMD ["npm", "start"]

================
File: frontend/my-react-app/Dockerfile.dev
================
FROM node:23-alpine


RUN apk add --no-cache bash curl


WORKDIR /app


COPY package*.json ./


RUN npm install


COPY . .


RUN npm install -g nodemon react-scripts



EXPOSE 3000


CMD ["npm", "start"]

================
File: frontend/my-react-app/Dockerfile.frontend
================
FROM node:23-alpine
RUN apk add --no-cache bash curl
RUN npm install -g npm@10.9.2
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build
RUN npm install -g serve
RUN chown -R node:node /app
USER node
EXPOSE 3000
CMD ["serve", "-s", "build", "-l", "3000"]

================
File: frontend/my-react-app/eslint.config.mjs
================
import pluginJs from "@eslint/js";
import pluginReact from "eslint-plugin-react";


/** @type {import('eslint').Linter.Config[]} */
export default [
  {files: ["**/*.{js,mjs,cjs,jsx}"]},
  pluginJs.configs.recommended,
  pluginReact.configs.flat.recommended,
];

================
File: frontend/my-react-app/package.json
================
{
  "name": "my-react-app",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@csstools/normalize.css": "^12.1.1",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@formspree/react": "^2.5.1",
    "@mui/material": "^6.3.0",
    "@react-three/drei": "^9.120.4",
    "@react-three/fiber": "^8.17.10",
    "@reduxjs/toolkit": "^2.5.1",
    "axios": "^1.7.9",
    "highlight.js": "^11.11.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.1.1",
    "react-scripts": "^5.0.1",
    "react-syntax-highlighter": "^15.6.1",
    "react-toastify": "^11.0.2",
    "react-window": "^1.8.11",
    "socket.io-client": "^4.8.1",
    "three": "^0.171.0",
    "web-vitals": "^4.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "cssnano": "^7.0.6",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.3",
    "eslint-plugin-react-hooks": "^5.1.0",
    "patch-package": "^8.0.0",
    "postinstall-postinstall": "^2.1.0",
    "strip-comments": "^2.0.1",
    "webpack-dev-server": "^5.2.0"
  }
}

================
File: nginx/sites-enabled/reverse_proxy.conf
================
server {
    listen 80;
    listen [::]:80;
    server_name _;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://apache:8080;
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        
        proxy_request_buffering off;

      
        proxy_buffering off;
        proxy_cache off;


        proxy_set_header X-Accel-Buffering "no";

        # Standard pass-through headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

================
File: nginx/nginx.conf
================
# Define the user
user www-data;


worker_processes auto;

events {
    worker_connections 1024;  # Max simultaneous connections per worker
}

http {
    include       /etc/nginx/mime.types;  
    include       /etc/nginx/sites-enabled/*;  
    default_type  application/octet-stream;  

   
    sendfile        on;

   
    keepalive_timeout 65;

    
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss;

   
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
}

================
File: redis/redis.conf
================
bind 0.0.0.0

protected-mode yes





rename-command FLUSHALL ""
rename-command FLUSHDB ""
rename-command CONFIG ""
rename-command SHUTDOWN ""
rename-command MONITOR ""
rename-command DEBUG ""
rename-command SLAVEOF ""
rename-command MIGRATE ""


loglevel notice


appendonly yes
appendfsync everysec


save 900 1
save 300 10
save 60 10000


maxmemory 12gb

maxmemory-policy allkeys-lru

port 6379


tcp-backlog 511

timeout 0

tcp-keepalive 300

================
File: .gitignore
================
# Python virtual environment folders (used to isolate dependencies)
venv/

# Compiled Python files (automatically created during runtime)
*.pyc

#  Python cache directories (stores temporary compiled Python files)
__pycache__/

# Environment variable files (contains sensitive info like API keys)
.env

# Node.js dependencies folder (installed by npm or yarn)
node_modules/

# React build files (generated during production build, not needed in source control)
my-react-app/build/

# AWS EC2 SSH key
xploitcraft.pem

----------------------------
END OF CODEBASE
----------------------------
