db.tests.insertOne({
  "category": "penplus",
  "testId": 10,
  "testName": "CompTIA Pentest+ (PT0-003) Practice Test #10 (Ultra Level)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "A penetration tester gains access to a Kubernetes pod running with the following spec:\n\n```yaml\nspec:\n  containers:\n  - name: webapp\n    image: nginx:latest\n    securityContext:\n      privileged: true\n  hostPID: true\n```\n\nWhich exploitation path would MOST likely lead to host-level compromise?",
      "options": [
        "Mounting the host’s `/` filesystem via pod’s namespace access for direct host manipulation.",
        "Injecting malicious environment variables to exploit application code for remote access.",
        "Exploiting Kubernetes API tokens mounted within the pod for lateral movement.",
        "Performing nodePort scans to identify open services on the Kubernetes master node."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privileged: true` and `hostPID: true` allow attackers to mount host filesystems, providing direct access to the host and enabling complete takeover.",
      "examTip": "`privileged + hostPID` = immediate host-level escape. Avoid these settings in production."
    },
    {
      "id": 2,
      "question": "Analyze the following AWS CLI output:\n\n```\n{\n    \"UserName\": \"developer\",\n    \"AttachedPolicies\": [\n        {\n            \"PolicyName\": \"AdministratorAccess\",\n            \"PolicyArn\": \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        }\n    ]\n}\n```\n\nWhat is the MOST impactful immediate action an attacker could take?",
      "options": [
        "Create new IAM users with full administrative privileges for persistent access.",
        "Enumerate S3 buckets for sensitive data exfiltration across regions.",
        "Deploy Lambda functions configured for external callbacks to maintain persistence.",
        "Establish VPC peering connections to pivot into additional AWS accounts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "AdministratorAccess provides full IAM privileges. Creating new users ensures persistent access without relying on compromised credentials.",
      "examTip": "Admin creds? Secure persistence first—new IAM users = long-term foothold."
    },
    {
      "id": 3,
      "question": "The following JWT payload is observed:\n\n```json\n{\n  \"user\": \"admin\",\n  \"exp\": 9999999999,\n  \"iat\": 1000000000\n}\n```\n\nWhat is the MOST critical risk presented by this configuration?",
      "options": [
        "Indefinite session duration enabling long-term session hijacking.",
        "Privilege escalation via weak signing algorithms in JWT headers.",
        "Replay attacks due to lack of contextual binding (e.g., IP or user-agent).",
        "Token confusion attack exploiting OAuth misconfigurations for privilege escalation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`exp` values far in the future create non-expiring tokens, enabling attackers to maintain sessions indefinitely, risking persistent access.",
      "examTip": "Long-lived JWTs = persistent sessions for attackers. Implement short `exp` windows and rotate keys regularly."
    },
    {
      "id": 4,
      "question": "Review the following BloodHound edge:\n\n```\nEdge: AddMember\nSource: svc_deploy\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation technique MOST effectively leverages this finding?",
      "options": [
        "Add `svc_deploy` to Domain Admins, immediately granting domain-wide privileges.",
        "Perform DCSync attacks to obtain krbtgt hashes for Golden Ticket creation.",
        "Abuse ACLs to modify GPOs for lateral movement across the domain.",
        "Leverage unconstrained delegation to access Kerberos tickets for DC impersonation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`AddMember` rights mean the user can add themselves to privileged groups like Domain Admins, achieving instant domain control.",
      "examTip": "`AddMember` edges = instant admin path. Act fast—complete compromise is one step away."
    },
    {
      "id": 5,
      "question": "The following Python code snippet is discovered:\n\n```python\nimport subprocess\nuser_input = input(\"Enter filename:\")\nsubprocess.call(\"cat \" + user_input, shell=True)\n```\n\nWhich vulnerability does this MOST likely represent?",
      "options": [
        "Command injection enabling arbitrary OS command execution.",
        "Path traversal allowing unauthorized file disclosure.",
        "Insecure deserialization leading to arbitrary code execution.",
        "Reflected input vulnerability enabling cross-site scripting (XSS)."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`subprocess.call` with `shell=True` and unsanitized user input enables command injection, allowing arbitrary command execution on the host system.",
      "examTip": "`shell=True` + user input = critical command injection risk. Always sanitize inputs or avoid shell execution."
    },
    {
      "id": 6,
      "question": "A penetration tester runs the following Metasploit module:\n\n```\nuse exploit/windows/smb/ms17_010_psexec\nset RHOSTS 192.168.10.10\nrun\n```\n\nWhat is the PRIMARY objective of this exploit?",
      "options": [
        "Gain remote code execution on SMBv1-vulnerable systems leveraging EternalBlue.",
        "Capture NTLM hashes via SMB relay attacks on Windows hosts.",
        "Enumerate SMB shares and user permissions for lateral movement opportunities.",
        "Bypass SMB signing to execute arbitrary commands on remote hosts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ms17_010_psexec` exploits the SMBv1 EternalBlue vulnerability to achieve remote code execution on unpatched Windows systems.",
      "examTip": "EternalBlue + PsExec = quick RCE. Always check SMBv1 exposure."
    },
    {
      "id": 7,
      "question": "Examine the following OAuth 2.0 request:\n\n```\nGET /auth?response_type=token&client_id=client123&redirect_uri=https://malicious.com\n```\n\nWhat vulnerability is MOST likely present?",
      "options": [
        "Open redirect flaw enabling OAuth token theft via malicious redirect URIs.",
        "OAuth token leakage through improper scope validation.",
        "CSRF vulnerability allowing unauthorized authorization requests.",
        "Token replay vulnerability due to weak session state management."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An attacker can manipulate the `redirect_uri` parameter to exfiltrate tokens by redirecting users to malicious domains.",
      "examTip": "Strict `redirect_uri` validation = OAuth must. Open redirects = token theft risk."
    },
    {
      "id": 8,
      "question": "A tester executes the following:\n\n```\nsqlmap -u \"http://app.local/product.php?id=5\" --technique=U --os-shell\n```\n\nWhat is the PRIMARY purpose of the `--technique=U` option?",
      "options": [
        "Test for UNION-based SQL injection to retrieve data from additional tables.",
        "Check for time-based blind SQLi vulnerabilities for deeper enumeration.",
        "Force stacked queries for multi-command SQL injection attempts.",
        "Test for error-based SQLi by leveraging verbose database responses."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--technique=U` specifies UNION-based SQL injection testing, aiming to extract data by joining additional queries to the main statement.",
      "examTip": "`--technique=U` = UNION-based SQLi. Great for pulling multiple datasets with minimal noise."
    },
    {
      "id": 9,
      "question": "A tester intercepts the following HTTP response header:\n\n```\nAccess-Control-Allow-Origin: *\n```\n\nWhich security risk does this configuration MOST critically introduce?",
      "options": [
        "Cross-origin resource sharing (CORS) vulnerability allowing unauthorized API access.",
        "Cross-site request forgery (CSRF) attacks due to lack of origin checks.",
        "Reflected XSS attacks enabled by unsanitized API responses.",
        "Session fixation by exploiting weak origin policies in authentication flows."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The wildcard (`*`) in CORS allows any origin to access resources, potentially enabling malicious third parties to interact with APIs without proper authorization.",
      "examTip": "CORS `*` = wide-open APIs. Always define trusted origins."
    },
    {
      "id": 10,
      "question": "During a wireless penetration test, the following is executed:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Crack WPA/WPA2 pre-shared keys by brute-forcing captured handshakes using a wordlist.",
        "Perform a deauthentication attack to capture WPA handshakes during reconnection attempts.",
        "Enumerate access points in range to identify WPS-enabled networks for key retrieval.",
        "Launch a beacon flood attack to disrupt wireless network connectivity."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` uses `rockyou.txt` to brute force the WPA/WPA2 pre-shared key from the captured handshake file (`handshake.cap`).",
      "examTip": "Handshakes captured? `aircrack-ng` + `rockyou.txt` = common WPA cracking approach."
    },
    {
      "id": 11,
      "question": "A penetration tester discovers the following in `.env`:\n\n```\nDB_PASSWORD=supersecret123\nJWT_SECRET=changeme\n```\n\nWhich risk is MOST critical?",
      "options": [
        "JWT_SECRET exposure enables attackers to forge tokens for authentication bypass.",
        "DB_PASSWORD leakage allows direct database access for data exfiltration.",
        "Hardcoded secrets increase the attack surface for lateral movement in cloud deployments.",
        "Weak secret management may allow SSRF exploitation through metadata manipulation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `JWT_SECRET` can be used to forge authentication tokens, allowing attackers to impersonate users and bypass authentication entirely.",
      "examTip": "JWT secrets = high-value targets. Always secure `.env` files with restricted permissions."
    },
    {
      "id": 12,
      "question": "A tester executes the following Nmap command:\n\n```\nnmap -sC -sV -p- target.local\n```\n\nWhat is the PRIMARY objective of combining these flags?",
      "options": [
        "Conduct a comprehensive scan running default scripts (`-sC`), service version detection (`-sV`), and scanning all TCP ports (`-p-`).",
        "Run stealth scans (`-sS`) for full port enumeration and OS fingerprinting.",
        "Perform UDP port scanning alongside detailed service detection.",
        "Test for vulnerable services using aggressive scanning techniques for rapid enumeration."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`-sC` runs default NSE scripts, `-sV` detects service versions, and `-p-` scans all 65,535 TCP ports, providing comprehensive reconnaissance.",
      "examTip": "`-sC -sV -p-` = full reconnaissance trifecta. Best for deep target analysis pre-exploitation."
    },
    {
      "id": 13,
      "question": "A penetration tester captures the following Kerberos ticket:\n\n```\nkrbtgt/domain.local@DOMAIN.LOCAL\nEncType: rc4_hmac\n```\n\nWhich attack does this MOST likely indicate?",
      "options": [
        "DCSync attack to retrieve the krbtgt hash for crafting Golden Tickets.",
        "AS-REP roasting exploiting user accounts with pre-authentication disabled.",
        "Kerberoasting targeting SPN hashes for offline brute-force attacks.",
        "Pass-the-Ticket (PtT) attack using stolen service tickets for lateral movement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Retrieving the krbtgt hash through a DCSync attack allows attackers to generate Golden Tickets, providing indefinite domain admin access.",
      "examTip": "krbtgt = the key to the domain. DCSync + Golden Ticket = undetectable domain persistence."
    },
    {
      "id": 14,
      "question": "A tester reviews the following Kubernetes RoleBinding:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: admin-binding\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: production\n```\n\nWhat is the MOST critical security concern with this configuration?",
      "options": [
        "Default service account with cluster-admin privileges allows pod-level compromise to escalate to full cluster control.",
        "Lack of explicit namespace scoping could expose cluster-admin privileges across all namespaces.",
        "RoleBinding referencing `cluster-admin` introduces risk of lateral movement between workloads.",
        "Improper RoleRef configuration can lead to privilege escalation through misassigned roles."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Assigning `cluster-admin` privileges to the default service account means any pod running in the namespace gains full control of the Kubernetes cluster.",
      "examTip": "Default SA + cluster-admin = cluster-wide pwn. Always scope tightly and remove default bindings."
    },
    {
      "id": 15,
      "question": "The following Dockerfile is reviewed:\n\n```dockerfile\nFROM ubuntu:20.04\nRUN apt update && apt install -y sudo\nRUN useradd -m user && echo \"user:password\" | chpasswd && adduser user sudo\nCMD [\"/bin/bash\"]\n```\n\nWhich exploitation path is MOST likely given this configuration?",
      "options": [
        "Privilege escalation inside the container via unrestricted sudo access, potentially leading to host compromise.",
        "Docker socket abuse enabling direct host manipulation through container APIs.",
        "Container escape via shared volume misconfigurations providing host file access.",
        "Privilege escalation by exploiting unquoted service paths in user-level processes."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting sudo rights to a default user in a container can allow privilege escalation, potentially leading to host-level access if other misconfigurations exist.",
      "examTip": "Sudo in containers = host-level risks. Principle of least privilege applies everywhere."
    },
    {
      "id": 16,
      "question": "A tester executes the following Metasploit command:\n\n```\nuse exploit/multi/http/struts2_content_type_ognl\nset RHOSTS 10.10.10.5\nrun\n```\n\nWhich CVE is MOST likely being exploited?",
      "options": [
        "CVE-2017-5638 — Apache Struts 2 remote code execution via crafted Content-Type headers.",
        "CVE-2018-11776 — Apache Struts 2 namespace-based OGNL injection.",
        "CVE-2019-0230 — Apache Struts 2 remote command execution via crafted input streams.",
        "CVE-2020-17530 — OGNL expression injection leading to code execution."
      ],
      "correctAnswerIndex": 0,
      "explanation": "CVE-2017-5638 is a critical Apache Struts 2 vulnerability allowing RCE through malicious Content-Type headers, widely exploited in the wild.",
      "examTip": "Struts2 + Content-Type = CVE-2017-5638. Always sanitize input headers!"
    },
    {
      "id": 17,
      "question": "The following OAuth 2.0 request is observed:\n\n```\nGET /authorize?response_type=token&client_id=trustedapp&redirect_uri=https://attacker.com\n```\n\nWhich vulnerability does this MOST likely represent?",
      "options": [
        "Open redirect enabling access token theft through malicious URIs.",
        "Insufficient scope validation allowing privilege escalation.",
        "State parameter omission leading to CSRF token fixation attacks.",
        "Improper grant type usage exposing authorization code interception risks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Open redirects in OAuth flows allow attackers to steal access tokens by redirecting responses to malicious domains.",
      "examTip": "Redirect URIs must be strictly validated. Open redirects = OAuth token theft vector."
    },
    {
      "id": 18,
      "question": "While analyzing a serverless application, a tester discovers the following policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk of this configuration?",
      "options": [
        "Unrestricted Lambda invocation enabling arbitrary code execution and persistence.",
        "Privilege escalation by chaining Lambda permissions with `iam:PassRole` abuse.",
        "Data exfiltration via misconfigured API Gateway endpoints calling sensitive Lambda functions.",
        "Cross-account resource enumeration leading to unauthorized access to other AWS services."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`lambda:InvokeFunction` without restrictions allows attackers to run arbitrary Lambda code, enabling persistence and potential lateral movement within the environment.",
      "examTip": "Lambda:InvokeFunction = cloud code exec. Always apply fine-grained permission scopes."
    },
    {
      "id": 19,
      "question": "A penetration tester observes the following packet capture:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerable.local\nX-Forwarded-Host: 169.254.169.254\n```\n\nWhat attack is MOST likely being conducted?",
      "options": [
        "Server-side request forgery (SSRF) targeting AWS metadata for credential extraction.",
        "DNS rebinding attack attempting to bypass network isolation controls.",
        "Reflected XSS via manipulated HTTP headers in backend processing.",
        "Session fixation attack exploiting weak proxy validation mechanisms."
      ],
      "correctAnswerIndex": 0,
      "explanation": "SSRF targeting the AWS metadata service (`169.254.169.254`) enables attackers to steal temporary credentials from EC2 instances.",
      "examTip": "SSRF + AWS metadata IP = high-value cloud creds. Always validate user-controlled URLs."
    },
    {
      "id": 20,
      "question": "A tester runs the following SQLMap command:\n\n```\nsqlmap -u \"http://target.local/product.php?id=1\" --os-shell\n```\n\nWhat is the PRIMARY objective of the `--os-shell` option?",
      "options": [
        "Achieve a remote shell on the target host through SQL injection escalation.",
        "Dump database schema and sensitive data through database access.",
        "Enumerate database version and backend technologies for tailored exploitation.",
        "Perform blind SQL injection to infer data through time-based techniques."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--os-shell` attempts to escalate SQL injection vulnerabilities to OS-level shell access, enabling full host control.",
      "examTip": "`--os-shell` = RCE via SQLi. Maximum impact when backend misconfigurations exist."
    },
    {
      "id": 21,
      "question": "A tester executes:\n\n```\nairmon-ng start wlan0\nairodump-ng wlan0mon\n```\n\nWhat is the PRIMARY purpose of these commands in a wireless penetration test?",
      "options": [
        "Enable monitor mode and capture WPA/WPA2 handshakes for offline cracking.",
        "Launch deauthentication attacks to capture handshake packets during reauthentication.",
        "Intercept WPS PIN exchanges for rapid key recovery via brute-force attacks.",
        "Perform beacon flood attacks to disrupt wireless network availability."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`airmon-ng start` activates monitor mode, while `airodump-ng` captures wireless traffic, including WPA/WPA2 handshakes needed for brute force attacks.",
      "examTip": "Monitor mode + airodump-ng = wireless reconnaissance foundation. Always validate regulatory compliance."
    },
    {
      "id": 22,
      "question": "A penetration tester uses Pacu with the following command:\n\n```\nrun privesc_scan\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Identify privilege escalation opportunities in AWS IAM configurations.",
        "Enumerate publicly accessible S3 buckets for sensitive data exposure.",
        "Analyze Lambda functions for excessive permissions enabling persistence.",
        "Detect misconfigured VPC peering connections for lateral movement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privesc_scan` in Pacu checks AWS IAM roles, policies, and trust relationships for privilege escalation paths.",
      "examTip": "AWS keys compromised? `privesc_scan` = instant escalation road map."
    },
    {
      "id": 23,
      "question": "A tester observes this BloodHound finding:\n\n```\nEdge: ForceChangePassword\nSource: svc_support\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation method would MOST effectively achieve domain admin access?",
      "options": [
        "Reset the Domain Admin password via ForceChangePassword edge for immediate administrative control.",
        "Perform DCShadow attacks by altering domain controller replication settings.",
        "Exploit unconstrained delegation for Kerberos ticket impersonation.",
        "Abuse ACLs to conduct DCSync attacks retrieving krbtgt hashes."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ForceChangePassword` permissions allow the attacker to reset passwords of privileged accounts, granting instant administrative access.",
      "examTip": "ForceChangePassword = admin creds on demand. The fastest privilege escalation path in AD."
    },
    {
      "id": 24,
      "question": "Examine the following Dockerfile:\n\n```dockerfile\nFROM alpine:latest\nRUN apk add --no-cache openssh\nRUN echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhat is the MOST critical security concern here?",
      "options": [
        "Root SSH access with default credentials enabling immediate container compromise.",
        "Lack of key-based SSH authentication increasing brute-force attack viability.",
        "Outdated Alpine base image introducing known vulnerabilities into the environment.",
        "Missing user namespace remapping exposing host-level processes."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Hardcoded root credentials combined with SSH enabled for root login provides attackers with trivial access to the container, which may lead to host compromise depending on configurations.",
      "examTip": "Root SSH + default password = instant compromise. Never expose such containers to external networks."
    },
    {
      "id": 25,
      "question": "A penetration tester intercepts the following SAML assertion:\n\n```xml\n<saml:Assertion>\n  <saml:Subject>\n    <saml:NameID>admin@example.com</saml:NameID>\n  </saml:Subject>\n  <saml:AttributeStatement>\n    <saml:Attribute Name=\"Role\">Admin</saml:Attribute>\n  </saml:AttributeStatement>\n</saml:Assertion>\n```\n\nIf the attacker successfully forges this assertion, which attack are they MOST likely performing?",
      "options": [
        "Golden SAML attack enabling federation-based domain admin access.",
        "SAML replay attack by resending captured assertions for session hijacking.",
        "SAML injection attack exploiting weak input validation in identity providers.",
        "SAML signature wrapping attack bypassing digital signature verification."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Golden SAML attacks allow forging of SAML tokens after compromising the token-signing certificate, granting domain admin access via federated authentication.",
      "examTip": "Golden SAML = domain admin with federation. Protect token-signing certificates at all costs."
    },
    {
      "id": 26,
      "question": "The following Wireshark capture shows:\n\n```\nPOST /internal-api HTTP/1.1\nHost: vulnerableapp.local\nX-Original-URL: http://169.254.169.254/latest/meta-data/iam/security-credentials/\n```\n\nWhat is the MOST likely purpose of this request?",
      "options": [
        "SSRF attack targeting AWS instance metadata to retrieve IAM credentials.",
        "Command injection exploiting HTTP header manipulation for RCE.",
        "Reflected XSS attack using user-controlled headers in responses.",
        "Open redirect attack to exfiltrate session tokens via crafted URLs."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The AWS metadata service at `169.254.169.254` is a known SSRF target for stealing IAM credentials when applications process user-controlled URLs.",
      "examTip": "SSRF + AWS metadata = instant cloud credential theft. Always validate and whitelist URLs."
    },
    {
      "id": 27,
      "question": "A penetration tester uses the following Metasploit module:\n\n```\nuse exploit/windows/smb/psexec\nset RHOSTS 10.0.0.5\nset SMBUser admin\nset SMBPass password123\nrun\n```\n\nWhat is the PRIMARY exploitation technique here?",
      "options": [
        "Remote code execution via SMB using PsExec with valid credentials.",
        "SMB relay attack intercepting NTLM hashes for lateral movement.",
        "SMB signing bypass enabling man-in-the-middle attacks.",
        "EternalBlue exploitation targeting SMBv1 vulnerabilities for RCE."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`psexec` modules exploit valid SMB credentials to achieve remote code execution by creating a service on the target host.",
      "examTip": "PsExec + valid creds = instant RCE. Prioritize password reuse checks."
    },
    {
      "id": 28,
      "question": "Examine the following Kubernetes pod spec:\n\n```yaml\nspec:\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      runAsUser: 0\n      privileged: true\n```\n\nWhat is the MOST critical risk introduced by this configuration?",
      "options": [
        "Container escape leading to host-level compromise via privileged access running as root.",
        "Cross-namespace privilege escalation using Kubernetes API tokens.",
        "Unintended exposure of Kubernetes secrets due to misconfigured volumes.",
        "Denial-of-service attacks through uncontrolled resource consumption."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`runAsUser: 0` (root) combined with `privileged: true` allows attackers full access to the host’s resources, enabling container escape.",
      "examTip": "Privileged root pods = host-level risks. Use PodSecurityPolicies to enforce restrictions."
    },
    {
      "id": 29,
      "question": "During AWS penetration testing, a tester discovers hardcoded access keys:\n\n```\nAWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\nWhat is the MOST critical next step?",
      "options": [
        "Use Pacu's `privesc_scan` to enumerate privilege escalation opportunities in IAM roles.",
        "Enumerate S3 buckets for sensitive data exposure via AWS CLI.",
        "Deploy malicious Lambda functions to maintain persistent cloud access.",
        "Review CloudTrail logs for traces of potential key revocation or alerting."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pacu’s `privesc_scan` quickly identifies IAM misconfigurations that can be exploited to escalate privileges within the AWS account.",
      "examTip": "Compromised keys? Privilege escalation is the fastest path to AWS domination—`privesc_scan` first."
    },
    {
      "id": 30,
      "question": "Analyze the following Python snippet:\n\n```python\nimport os\nuser_input = input(\"Enter filename:\")\nos.system(f\"cat {user_input}\")\n```\n\nWhat vulnerability is present?",
      "options": [
        "Command injection allowing arbitrary OS-level code execution.",
        "Path traversal enabling unauthorized access to sensitive files.",
        "Insecure deserialization leading to remote code execution.",
        "Cross-site scripting (XSS) via unsanitized user input in web applications."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Using `os.system` with unsanitized input allows command injection, granting attackers the ability to execute arbitrary OS commands.",
      "examTip": "Unsanitized `os.system()` calls = critical injection risk. Use safer alternatives like `subprocess.run` with proper sanitization."
    },
    {
      "id": 31,
      "question": "A tester performs a cloud penetration test and finds:\n\n```\n\"Effect\": \"Allow\",\n\"Action\": \"iam:PassRole\",\n\"Resource\": \"*\"\n```\n\nWhich exploitation technique MOST effectively escalates privileges?",
      "options": [
        "Assigning high-privilege roles to Lambda functions for full administrative access.",
        "Launching EC2 instances with privileged IAM roles for lateral cloud pivoting.",
        "Accessing S3 buckets linked to sensitive resources using assumed roles.",
        "Creating new IAM policies to enable unrestricted cross-account trust relationships."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iam:PassRole` enables attackers to assign privileged IAM roles to compute services like Lambda, leading to full administrative access if misconfigured.",
      "examTip": "`iam:PassRole` is a known AWS escalation vector—restrict it with resource-level permissions."
    },
    {
      "id": 32,
      "question": "The following Burp Suite output is captured:\n\n```\nPOST /login HTTP/1.1\nHost: targetapp.local\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhat is the MOST critical vulnerability demonstrated?",
      "options": [
        "Weak credentials in Basic Authentication, enabling brute-force attacks.",
        "Open redirect flaws exposing authentication tokens in OAuth flows.",
        "Session fixation vulnerabilities via predictable authorization headers.",
        "Insufficient input validation leading to SQL injection opportunities."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication using weak credentials (`admin:password`) makes brute-force attacks trivial, compromising the authentication process.",
      "examTip": "Weak auth headers = easy brute-force wins. Always enforce strong passwords and multifactor authentication."
    },
    {
      "id": 33,
      "question": "A tester executes the following Nmap command:\n\n```\nnmap -sU -p 161 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "Enumerate SNMP services that could reveal sensitive configuration data.",
        "Identify open UDP ports for potential DNS amplification attack vectors.",
        "Discover TFTP services to exploit unauthorized firmware updates.",
        "Detect NetBIOS services for SMB relay exploitation opportunities."
      ],
      "correctAnswerIndex": 0,
      "explanation": "UDP port 161 is associated with SNMP, which can leak sensitive information if default community strings are not properly secured.",
      "examTip": "SNMP (UDP 161) with `public/private` defaults = low-hanging fruit. Enumerate carefully."
    },
    {
      "id": 34,
      "question": "During a code review, the following line is identified:\n\n```python\npickle.loads(user_input)\n```\n\nWhat vulnerability does this line introduce?",
      "options": [
        "Insecure deserialization, potentially leading to arbitrary code execution.",
        "Cross-site scripting (XSS) through reflected payloads in web responses.",
        "Command injection allowing arbitrary system-level code execution.",
        "Path traversal, enabling unauthorized file access on the host system."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Python's `pickle.loads` is unsafe with untrusted data, as it can deserialize objects that execute arbitrary code during loading.",
      "examTip": "Never use `pickle.loads` with untrusted input. Consider `json.loads` for safer alternatives."
    },
    {
      "id": 35,
      "question": "The following Dockerfile is discovered:\n\n```dockerfile\nFROM alpine:3.12\nRUN apk add --no-cache openssh\nRUN echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhat is the MOST critical security risk here?",
      "options": [
        "Root SSH access with default credentials enabling instant container compromise.",
        "Use of an outdated Alpine base image exposing known vulnerabilities.",
        "Lack of SSH key-based authentication increasing brute-force attack risks.",
        "Absence of namespace remapping exposing host-level resources."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Default root credentials and SSH access create an immediate attack path for compromise, potentially leading to host access depending on Docker configurations.",
      "examTip": "Root SSH + weak creds = do not deploy. Always disable root login and enforce key-based authentication."
    },
    {
      "id": 36,
      "question": "A tester reviews an OAuth token request:\n\n```\nGET /oauth/token?response_type=token&client_id=appclient&redirect_uri=https://malicious.com\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Open redirect flaw enabling OAuth token theft via manipulated URIs.",
        "CSRF vulnerability due to missing state parameters in authorization requests.",
        "Privilege escalation by manipulating token scopes in OAuth flows.",
        "Token replay attacks due to lack of proper expiration checks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `redirect_uri` parameter pointing to a malicious domain suggests an open redirect vulnerability that can be exploited to steal OAuth tokens.",
      "examTip": "Open redirects = OAuth token theft risk. Always enforce strict URI whitelisting."
    },
    {
      "id": 37,
      "question": "A penetration tester discovers the following Kubernetes pod spec:\n\n```yaml\nspec:\n  hostPID: true\n  containers:\n  - name: attacker\n    image: alpine:latest\n    securityContext:\n      privileged: true\n```\n\nWhich exploitation path MOST effectively leads to host-level compromise?",
      "options": [
        "Mounting the host filesystem and modifying `/etc/shadow` to add a root user.",
        "Harvesting Kubernetes API tokens for lateral movement within the cluster.",
        "Performing nodePort scans to identify services exposed on the Kubernetes master node.",
        "Exploiting environment variables to extract sensitive service configurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privileged: true` with `hostPID: true` allows mounting of host filesystems, enabling modification of `/etc/shadow` for root access on the host.",
      "examTip": "Privileged pods + hostPID = cluster-to-host breakout. Enforce PodSecurityStandards to mitigate."
    },
    {
      "id": 38,
      "question": "The following OAuth 2.0 authorization request is observed:\n\n```\nGET /oauth/authorize?response_type=token&client_id=trustedapp&redirect_uri=https://evil.com\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Open redirect flaw enabling OAuth token theft by redirecting authorization codes to a malicious domain.",
        "State parameter omission enabling CSRF token fixation attacks during OAuth flows.",
        "Improper scope validation allowing privilege escalation in downstream applications.",
        "Token replay vulnerabilities due to lack of access token expiration controls."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An unvalidated `redirect_uri` allows an attacker to intercept OAuth tokens by redirecting them to a malicious endpoint.",
      "examTip": "Validate `redirect_uri` parameters rigorously. Open redirects = OAuth token exfiltration vector."
    },
    {
      "id": 39,
      "question": "During a code review, the following Python snippet is identified:\n\n```python\nimport pickle\nuser_input = input(\"Enter data:\")\npickle.loads(user_input)\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Insecure deserialization vulnerability allowing arbitrary code execution.",
        "Command injection vulnerability enabling OS-level command execution.",
        "Cross-site scripting (XSS) through unsanitized reflected input in web applications.",
        "Path traversal vulnerability providing unauthorized file access on the host system."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`pickle.loads()` with untrusted input allows attackers to deserialize malicious payloads, potentially leading to arbitrary code execution.",
      "examTip": "Never trust user input with `pickle.loads`. Use `json.loads` when possible for safer deserialization."
    },
    {
      "id": 40,
      "question": "A tester runs the following SQLMap command:\n\n```\nsqlmap -u \"http://target.local/item.php?id=1\" --technique=U --os-shell\n```\n\nWhat is the PRIMARY purpose of `--technique=U` in this context?",
      "options": [
        "To test for UNION-based SQL injection for data extraction and OS-level shell escalation.",
        "To perform time-based blind SQLi techniques for inference of data structures.",
        "To enumerate database schemas using error-based SQL injection techniques.",
        "To execute stacked queries allowing multiple SQL statements in a single request."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--technique=U` tests UNION-based SQLi, which can escalate from data extraction to OS-level shell access when combined with `--os-shell`.",
      "examTip": "`--technique=U` = UNION-based SQLi for rapid data extraction and potential RCE."
    },
    {
      "id": 41,
      "question": "A penetration tester executes the following Nmap command:\n\n```\nnmap -sV -p 3389 --script=rdp-vuln-ms12-020 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "Identify vulnerabilities in RDP services related to MS12-020 that could enable remote code execution.",
        "Enumerate open RDP ports for potential brute-force authentication attacks.",
        "Perform OS fingerprinting through the RDP service for subsequent exploitation planning.",
        "Scan for SMB relay vulnerabilities leveraging RDP endpoint misconfigurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`rdp-vuln-ms12-020` checks for the RDP vulnerability associated with MS12-020, which allows for remote code execution via malformed RDP requests.",
      "examTip": "RDP + MS12-020 = pre-BlueKeep era RCE. Always patch vulnerable RDP services."
    },
    {
      "id": 42,
      "question": "The following BloodHound edge is identified:\n\n```\nEdge: WriteDacl\nSource: svc_web\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation technique MOST effectively achieves domain admin access?",
      "options": [
        "Modify the DACL to grant `svc_web` the `GenericAll` right, providing full control over the Domain Admins group.",
        "Reset the krbtgt password to generate Golden Tickets for indefinite domain access.",
        "Abuse unconstrained delegation by requesting Kerberos TGTs for privileged accounts.",
        "Execute a DCSync attack to replicate domain controller data and retrieve sensitive hashes."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`WriteDacl` rights allow modification of permissions. Granting `GenericAll` results in full domain admin control.",
      "examTip": "`WriteDacl` = key to privilege escalation. Always monitor for suspicious ACL modifications."
    },
    {
      "id": 43,
      "question": "A tester runs the following Pacu command:\n\n```\nrun iam__enum_roles\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Enumerate IAM roles in AWS for privilege escalation and lateral movement opportunities.",
        "Identify misconfigured Lambda functions exposing privileged IAM permissions.",
        "Scan S3 buckets for sensitive data linked to overprivileged IAM roles.",
        "Review CloudTrail logs for anomalous role assumption events indicating compromise."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iam__enum_roles` in Pacu lists available IAM roles that could be assumed or abused for privilege escalation in AWS environments.",
      "examTip": "IAM role enumeration = cloud privilege roadmap. Focus on `AssumeRole` permissions for escalation."
    },
    {
      "id": 44,
      "question": "The following Dockerfile is analyzed:\n\n```dockerfile\nFROM ubuntu:20.04\nRUN apt update && apt install -y sudo\nRUN useradd -m user && echo \"user:password\" | chpasswd && adduser user sudo\nCMD [\"/bin/bash\"]\n```\n\nWhat is the MOST critical risk in this configuration?",
      "options": [
        "User with sudo privileges and weak credentials enabling container-to-host escape via privileged operations.",
        "Lack of SSH key-based authentication exposing container to brute-force SSH attacks.",
        "Outdated Ubuntu base image introducing unpatched vulnerabilities to the container environment.",
        "Improper namespace remapping exposing host kernel interfaces to the container."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting sudo privileges with weak credentials (`user:password`) can lead to container escapes and potential host-level compromise.",
      "examTip": "Sudo + weak creds in containers = instant escalation. Apply least-privilege principles even inside containers."
    },
    {
      "id": 45,
      "question": "A penetration tester observes this network packet:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerableapp.local\nX-Forwarded-For: 169.254.169.254\n```\n\nWhat is the MOST likely attack represented here?",
      "options": [
        "SSRF targeting AWS instance metadata to retrieve temporary security credentials.",
        "Cross-site request forgery (CSRF) exploiting misconfigured proxy headers.",
        "DNS rebinding attack circumventing same-origin policies for internal resource access.",
        "Session fixation attack through header manipulation targeting backend authentication."
      ],
      "correctAnswerIndex": 0,
      "explanation": "SSRF targeting `169.254.169.254` is a common technique to extract AWS IAM credentials from EC2 instance metadata endpoints.",
      "examTip": "169.254.169.254 = AWS metadata SSRF hotspot. Validate and sanitize all user-controlled URLs."
    },
    {
      "id": 46,
      "question": "A penetration tester uses Burp Suite and captures the following request:\n\n```\nPOST /login HTTP/1.1\nHost: app.local\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhat is the MOST critical vulnerability identified here?",
      "options": [
        "Weak credentials transmitted via Basic Authentication, enabling brute-force attacks.",
        "Lack of TLS encryption enabling MITM attacks during credential transmission.",
        "Improper session handling increasing the risk of session fixation attacks.",
        "Reflected input from authentication parameters enabling XSS vulnerabilities."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Weak credentials (`admin:password`) in Basic Authentication headers make brute-force attacks trivial and increase risk of compromise.",
      "examTip": "Basic auth with weak creds = easy brute force. Always enforce strong password policies and MFA."
    },
    {
      "id": 47,
      "question": "A tester runs the following Wireshark capture:\n\n```\nProtocol: SMB2\nCommand: Tree Connect Request\nTree ID: 0x0001\nShare: \\\\192.168.1.100\\C$\n```\n\nWhich attack is MOST likely being attempted?",
      "options": [
        "Pass-the-Hash attack leveraging SMB authentication without password knowledge.",
        "SMB relay attack forwarding NTLM authentication to access privileged shares.",
        "EternalBlue exploitation targeting SMBv1 for remote code execution.",
        "Credential stuffing attack against SMB services using reused passwords."
      ],
      "correctAnswerIndex": 0,
      "explanation": "A Tree Connect Request to the C$ administrative share suggests a Pass-the-Hash attack where NTLM hashes are used to authenticate without knowing plaintext passwords.",
      "examTip": "C$ shares + NTLM auth = likely Pass-the-Hash attempt. Harden SMB settings and monitor logs."
    },
    {
      "id": 48,
      "question": "The following command is executed:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Crack WPA/WPA2 pre-shared keys using a brute-force attack against the captured handshake.",
        "Launch deauthentication attacks to capture WPA handshakes during client reconnections.",
        "Enumerate wireless access points for WPS vulnerabilities and PIN brute-force attacks.",
        "Conduct beacon flood attacks to disrupt wireless network availability."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` combined with `rockyou.txt` is a standard approach for brute-forcing WPA/WPA2 pre-shared keys from captured handshakes.",
      "examTip": "Handshakes captured? `aircrack-ng` + `rockyou.txt` = common WPA cracking workflow."
    },
    {
      "id": 49,
      "question": "A penetration tester intercepts the following SAML response:\n\n```xml\n<saml:Assertion>\n  <saml:Subject>\n    <saml:NameID>admin@example.com</saml:NameID>\n  </saml:Subject>\n  <saml:AttributeStatement>\n    <saml:Attribute Name=\"Role\">Domain Admin</saml:Attribute>\n  </saml:AttributeStatement>\n</saml:Assertion>\n```\n\nIf the tester can forge this assertion, which attack are they MOST likely conducting?",
      "options": [
        "Golden SAML attack allowing domain-wide authentication without credential reuse.",
        "SAML replay attack exploiting non-expiring authentication assertions for session hijacking.",
        "SAML signature wrapping attack bypassing integrity checks during SAML validation.",
        "OAuth token substitution attack leveraging federated SAML attributes for privilege escalation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Golden SAML attacks enable attackers to forge SAML assertions after obtaining the token-signing certificate, providing domain admin access without detection.",
      "examTip": "Golden SAML = domain admin via federation. Protect token-signing certificates at all costs."
    },
    {
      "id": 50,
      "question": "Review the following AWS policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"sts:AssumeRole\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk associated with this configuration?",
      "options": [
        "Unrestricted cross-account role assumption enabling privilege escalation and lateral movement across AWS environments.",
        "Lambda function abuse allowing attackers to persist in the environment with escalated permissions.",
        "CloudTrail manipulation enabling attackers to delete logs and cover their tracks after privilege escalation.",
        "Exposed S3 buckets allowing attackers to inject malicious artifacts for supply chain attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`sts:AssumeRole` without resource restrictions enables attackers to assume high-privilege roles across AWS accounts, leading to uncontrolled privilege escalation.",
      "examTip": "Restrict `sts:AssumeRole` permissions. Unrestricted assume role = cross-account compromise vector."
    },
    {
      "id": 51,
      "question": "A tester runs the following command:\n\n```\nsqlmap -u \"http://app.local/product.php?id=5\" --level=5 --risk=3 --os-shell\n```\n\nWhat is the PRIMARY objective of this SQLMap execution?",
      "options": [
        "To escalate SQL injection exploitation to OS-level remote code execution (RCE).",
        "To enumerate database schemas and sensitive data through advanced SQLi techniques.",
        "To detect time-based blind SQLi vulnerabilities using high-risk payloads.",
        "To perform stacked query injections for complex data manipulation on the backend."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--os-shell` in SQLMap attempts to escalate SQLi from database access to full OS-level shell access, enabling remote code execution.",
      "examTip": "`--os-shell` = RCE from SQLi. Use high `--level` and `--risk` settings cautiously; they may impact server stability."
    },
    {
      "id": 52,
      "question": "The following Dockerfile is identified during an engagement:\n\n```dockerfile\nFROM alpine:3.12\nRUN apk add --no-cache openssh\nRUN echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhat is the MOST critical security concern with this configuration?",
      "options": [
        "Root SSH access using weak credentials enabling trivial container compromise and potential host escape.",
        "Outdated Alpine base image exposing unpatched vulnerabilities that can be exploited for container breakout.",
        "Lack of SSH key-based authentication mechanisms increasing brute-force attack viability.",
        "Improper namespace remapping exposing host kernel resources to the container environment."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Root SSH access with default credentials (`root:password`) creates an immediate attack vector that can lead to container escape if combined with additional misconfigurations.",
      "examTip": "Root SSH + weak password = guaranteed compromise. Disable root login and enforce key-based authentication."
    },
    {
      "id": 53,
      "question": "Analyze the following Python code:\n\n```python\nimport os\nuser_input = input(\"Enter filename:\")\nos.system(f\"cat {user_input}\")\n```\n\nWhich vulnerability does this code MOST likely introduce?",
      "options": [
        "Command injection allowing arbitrary command execution at the OS level.",
        "Path traversal enabling unauthorized access to sensitive files within the filesystem.",
        "Insecure deserialization leading to remote code execution upon malicious payload input.",
        "Reflected input exploitation enabling cross-site scripting (XSS) in web applications."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`os.system` combined with unsanitized user input enables command injection, allowing attackers to execute arbitrary OS commands.",
      "examTip": "Avoid `os.system` with user input. Use safer alternatives like `subprocess.run` with strict input sanitization."
    },
    {
      "id": 54,
      "question": "A penetration tester observes the following HTTP request in Burp Suite:\n\n```\nGET /auth?response_type=token&client_id=trustedapp&redirect_uri=https://attacker.com\n```\n\nWhat is the MOST critical vulnerability demonstrated here?",
      "options": [
        "Open redirect vulnerability enabling OAuth token theft via malicious redirection.",
        "Cross-site request forgery (CSRF) due to lack of state parameter validation in OAuth flows.",
        "Privilege escalation through improper scope validation in OAuth access tokens.",
        "Token replay vulnerability arising from missing expiration checks in OAuth tokens."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An unvalidated `redirect_uri` parameter allows attackers to redirect OAuth tokens to malicious domains, facilitating token theft.",
      "examTip": "Strictly validate `redirect_uri` parameters. Open redirects = OAuth token exfiltration risks."
    },
    {
      "id": 55,
      "question": "A penetration tester executes the following Nmap scan:\n\n```\nnmap -sU -p 161 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "To enumerate SNMP services that could disclose sensitive configuration data.",
        "To identify TFTP services for potential exploitation via unauthorized firmware updates.",
        "To discover open UDP ports for possible DNS amplification attack vectors.",
        "To detect NetBIOS services vulnerable to SMB relay exploitation attempts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "UDP port 161 is associated with SNMP. Misconfigured SNMP services can leak sensitive network configuration and device information.",
      "examTip": "SNMP (UDP 161) with default `public/private` strings = low-hanging fruit. Always enumerate SNMP securely."
    },
    {
      "id": 56,
      "question": "The following Kubernetes RoleBinding is found:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: admin-binding\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: production\n```\n\nWhat is the MOST critical risk associated with this configuration?",
      "options": [
        "Default service account with `cluster-admin` privileges enables any pod in the namespace to achieve full cluster compromise.",
        "Cross-namespace privilege escalation risks due to improperly scoped RoleBinding configurations.",
        "Exposure of Kubernetes API tokens through default service accounts enabling lateral movement between workloads.",
        "Potential for DoS attacks through uncontrolled access to resource-intensive cluster-wide operations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Assigning `cluster-admin` privileges to the default service account allows any pod in that namespace to control the entire Kubernetes cluster.",
      "examTip": "Default service account + cluster-admin = cluster-wide compromise. Always enforce minimal privilege principles."
    },
    {
      "id": 57,
      "question": "A tester observes the following AWS Lambda execution policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk posed by this configuration?",
      "options": [
        "Unrestricted Lambda invocation allows arbitrary code execution and persistence within the cloud environment.",
        "Privilege escalation by chaining Lambda execution with `iam:PassRole` permissions for administrative access.",
        "Exfiltration of sensitive data via misconfigured API Gateway endpoints invoking unsecured Lambda functions.",
        "Cross-account resource enumeration enabling attackers to pivot into additional AWS accounts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The policy allows any Lambda function to be invoked without restrictions, enabling attackers to execute arbitrary code and persist in the environment.",
      "examTip": "Restrict Lambda execution rights. Unrestricted Lambda invocation = code execution risk."
    },
    {
      "id": 58,
      "question": "The following packet is captured in Wireshark:\n\n```\nPOST /api/internal HTTP/1.1\nHost: internal.local\nX-Forwarded-Host: 169.254.169.254\n```\n\nWhat attack is MOST likely represented by this traffic?",
      "options": [
        "Server-side request forgery (SSRF) targeting AWS metadata to retrieve temporary security credentials.",
        "Cross-site request forgery (CSRF) exploiting misconfigured proxy header validation.",
        "DNS rebinding attack circumventing same-origin policy protections for internal resource access.",
        "Session fixation attack by manipulating proxy headers to gain unauthorized session tokens."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Requests to `169.254.169.254` target the AWS metadata service. This SSRF vector allows attackers to retrieve IAM credentials from EC2 instances.",
      "examTip": "SSRF + AWS metadata = cloud credential theft. Always sanitize user-controlled headers."
    },
    {
      "id": 59,
      "question": "A tester executes the following BloodHound analysis:\n\n```\nEdge: AddMember\nSource: svc_deploy\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation method MOST effectively achieves domain admin access?",
      "options": [
        "Adding `svc_deploy` to the Domain Admins group for immediate domain-wide administrative privileges.",
        "Executing a DCSync attack to obtain `krbtgt` hashes for Golden Ticket creation.",
        "Abusing unconstrained delegation by requesting Kerberos TGTs for domain controller impersonation.",
        "Performing ACL abuse to modify Group Policy Objects (GPOs) for domain persistence."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`AddMember` permissions enable `svc_deploy` to add itself to privileged groups such as Domain Admins, granting instant administrative access.",
      "examTip": "`AddMember` edges = instant domain admin. Act immediately—complete domain control is one step away."
    },
    {
      "id": 60,
      "question": "A penetration tester runs the following Aircrack-ng command:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Cracking WPA/WPA2 pre-shared keys using a brute-force attack against the captured handshake file.",
        "Conducting a deauthentication attack to capture WPA handshakes during reconnection attempts.",
        "Enumerating wireless access points to identify WPS-enabled networks for PIN brute-forcing.",
        "Launching a beacon flood attack to disrupt wireless network availability through access point spoofing."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` with `rockyou.txt` is commonly used to brute force WPA/WPA2 pre-shared keys from captured handshake files.",
      "examTip": "Captured WPA handshakes + `aircrack-ng` + `rockyou.txt` = standard Wi-Fi cracking technique."
    },
    {
      "id": 61,
      "question": "A tester captures the following Kerberos ticket:\n\n```\nkrbtgt/domain.local@DOMAIN.LOCAL\nEncType: rc4_hmac\n```\n\nWhich attack is MOST likely indicated by this capture?",
      "options": [
        "DCSync attack used to retrieve the krbtgt hash for crafting Golden Tickets.",
        "AS-REP roasting exploiting accounts with pre-authentication disabled for offline cracking.",
        "Kerberoasting targeting SPN service tickets for offline brute-force attacks.",
        "Pass-the-Ticket (PtT) attack using stolen service tickets for lateral movement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Capturing the krbtgt hash via DCSync allows attackers to forge Golden Tickets, enabling indefinite domain admin access without detection.",
      "examTip": "krbtgt hash = domain master key. DCSync + Golden Ticket = stealthy domain persistence."
    },
    {
      "id": 62,
      "question": "A penetration tester reviews the following AWS policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"iam:PassRole\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk of this policy?",
      "options": [
        "Privilege escalation by assigning high-privilege roles to compute resources like EC2 or Lambda.",
        "Exfiltration of sensitive data via misconfigured S3 buckets accessible through assumed roles.",
        "CloudTrail log deletion through role abuse, covering post-exploitation activities.",
        "Cross-account lateral movement by enumerating trust relationships with external AWS accounts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iam:PassRole` with no restrictions enables privilege escalation by assigning privileged roles to AWS services.",
      "examTip": "`iam:PassRole` = AWS privilege escalation hot path. Always apply resource-level constraints."
    },
    {
      "id": 63,
      "question": "A penetration tester executes:\n\n```\nsqlmap -u \"http://target.local/item.php?id=1\" --os-shell\n```\n\nWhat does the `--os-shell` option accomplish?",
      "options": [
        "It attempts to escalate SQL injection vulnerabilities to OS-level remote code execution (RCE).",
        "It performs time-based blind SQL injection for inferring data through delays.",
        "It dumps the database schema and backend technologies for further exploitation.",
        "It enumerates database versions to tailor subsequent SQL injection payloads."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--os-shell` in SQLMap attempts to achieve OS-level shell access after exploiting SQL injection vulnerabilities.",
      "examTip": "`--os-shell` = SQLi to RCE bridge. Ensure you understand backend permissions before executing."
    },
    {
      "id": 64,
      "question": "Review the Dockerfile below:\n\n```dockerfile\nFROM ubuntu:20.04\nRUN apt update && apt install -y sudo\nRUN useradd -m user && echo \"user:password\" | chpasswd && adduser user sudo\nCMD [\"/bin/bash\"]\n```\n\nWhat is the MOST critical risk in this configuration?",
      "options": [
        "Sudo privileges granted with weak credentials enabling container-to-host escape.",
        "Exposure to brute-force attacks due to lack of SSH key-based authentication.",
        "Outdated base image introducing known vulnerabilities exploitable for container breakout.",
        "Improper namespace remapping exposing host kernel interfaces to the container environment."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting sudo rights with weak credentials (`user:password`) can enable container escapes and potential host-level compromise.",
      "examTip": "Sudo in containers = host-level risks. Apply least-privilege principles everywhere."
    },
    {
      "id": 65,
      "question": "A tester observes this Wireshark capture:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerable.local\nX-Forwarded-Host: 169.254.169.254\n```\n\nWhat attack is MOST likely represented?",
      "options": [
        "SSRF targeting AWS metadata service to retrieve IAM credentials.",
        "DNS rebinding to bypass same-origin policies and access internal resources.",
        "Reflected XSS leveraging manipulated HTTP headers in backend processing.",
        "Session fixation attack exploiting weak proxy validation mechanisms."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Requests to `169.254.169.254` indicate SSRF attempts targeting AWS metadata endpoints for credential theft.",
      "examTip": "SSRF + AWS metadata IP = high-value cloud creds. Always validate user-controlled URLs."
    },
    {
      "id": 66,
      "question": "The following Kubernetes pod spec is discovered:\n\n```yaml\nspec:\n  containers:\n  - name: attacker\n    image: alpine:latest\n    securityContext:\n      runAsUser: 0\n      privileged: true\n```\n\nWhat is the MOST critical risk of this configuration?",
      "options": [
        "Host-level compromise via container escape by modifying `/etc/shadow` for root access.",
        "Lateral movement using Kubernetes API tokens for cross-namespace escalation.",
        "Resource exhaustion attacks causing denial-of-service (DoS) in the cluster environment.",
        "Data exfiltration by accessing improperly scoped persistent volumes."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privileged: true` and `runAsUser: 0` allow direct access to host resources, enabling container escape and full host compromise.",
      "examTip": "Privileged root pods = cluster-to-host breakout. Enforce PodSecurityStandards strictly."
    },
    {
      "id": 67,
      "question": "A penetration tester runs the following Nmap scan:\n\n```\nnmap -sV -p 3389 --script=rdp-vuln-ms12-020 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "Identify MS12-020 RDP vulnerabilities that enable remote code execution (RCE).",
        "Enumerate open RDP ports for potential brute-force attacks targeting weak credentials.",
        "Detect SMB relay vulnerabilities leveraging RDP endpoint misconfigurations.",
        "Fingerprint OS versions via RDP services for tailored exploitation strategies."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`rdp-vuln-ms12-020` checks for a known RDP vulnerability that allows RCE through malformed RDP requests.",
      "examTip": "MS12-020 = pre-BlueKeep RDP RCE. Always patch legacy RDP services."
    },
    {
      "id": 68,
      "question": "The following BloodHound finding is reported:\n\n```\nEdge: ForceChangePassword\nSource: svc_support\nTarget: DOMAIN\\Domain Admins\n```\n\nWhat exploitation method would MOST effectively achieve domain admin access?",
      "options": [
        "Reset the Domain Admin password via ForceChangePassword edge for instant domain-wide control.",
        "Perform DCShadow attacks by altering domain controller replication settings.",
        "Exploit unconstrained delegation for Kerberos ticket impersonation across the domain.",
        "Abuse ACLs to conduct DCSync attacks for krbtgt hash retrieval and Golden Ticket creation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ForceChangePassword` permissions enable attackers to reset passwords of privileged accounts, providing immediate domain admin access.",
      "examTip": "ForceChangePassword = instant DA credentials. Act fast—complete domain control is just one reset away."
    },
    {
      "id": 69,
      "question": "A penetration tester runs the following command:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Crack WPA/WPA2 pre-shared keys using a brute-force attack against the captured handshake.",
        "Launch deauthentication attacks to capture WPA handshakes during client reconnections.",
        "Intercept WPS PIN exchanges for rapid key recovery through brute-force methods.",
        "Perform beacon flood attacks to disrupt wireless network availability through access point spoofing."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` with `rockyou.txt` is a standard brute-force approach for cracking WPA/WPA2 keys from handshake captures.",
      "examTip": "WPA handshakes + rockyou.txt = common Wi-Fi cracking workflow. Always validate engagement scope."
    },
    {
      "id": 70,
      "question": "A tester uses Pacu with the following command:\n\n```\nrun privesc_scan\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Identify AWS IAM misconfigurations that can be exploited for privilege escalation.",
        "Enumerate publicly accessible S3 buckets for sensitive data exposure risks.",
        "Analyze Lambda functions for overprivileged permissions enabling cloud persistence.",
        "Detect misconfigured VPC peering connections enabling lateral movement across environments."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privesc_scan` identifies privilege escalation opportunities by analyzing IAM roles, policies, and trust relationships in AWS environments.",
      "examTip": "AWS keys compromised? `privesc_scan` = privilege escalation roadmap."
    },
    {
      "id": 71,
      "question": "A tester captures this Burp Suite request:\n\n```\nPOST /login HTTP/1.1\nHost: targetapp.local\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhat is the MOST critical vulnerability demonstrated here?",
      "options": [
        "Weak credentials in Basic Authentication, enabling brute-force attacks and session hijacking.",
        "Session fixation vulnerability due to predictable authorization headers in authentication flows.",
        "Reflected XSS vulnerabilities via unsanitized authentication parameters in HTTP responses.",
        "Improper input validation allowing SQL injection through authentication mechanisms."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication using weak credentials (`admin:password`) makes brute-force attacks trivial and compromises authentication processes.",
      "examTip": "Weak auth headers = easy brute-force wins. Always enforce strong passwords and MFA."
    },
    {
      "id": 72,
      "question": "A tester observes the following AWS Lambda policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk posed by this configuration?",
      "options": [
        "Unrestricted Lambda invocation allowing arbitrary code execution and persistent access within the cloud environment.",
        "Cross-account resource enumeration enabling attackers to pivot into additional AWS accounts.",
        "Privilege escalation through chained Lambda functions combined with `iam:PassRole` permissions.",
        "Exfiltration of sensitive data via misconfigured API Gateway endpoints linked to unsecured Lambda functions."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unrestricted `lambda:InvokeFunction` permissions allow attackers to execute arbitrary Lambda code, enabling persistence and potential lateral movement.",
      "examTip": "Lambda:InvokeFunction = cloud code exec. Always apply fine-grained permission scopes."
    },
    {
      "id": 73,
      "question": "A tester observes the following BloodHound edge:\n\n```\nEdge: GenericWrite\nSource: svc_backup\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation method would MOST effectively achieve domain admin access?",
      "options": [
        "Modify the target object’s properties to add the attacker’s account to the Domain Admins group.",
        "Perform a DCSync attack to replicate domain controller data and retrieve sensitive password hashes.",
        "Exploit unconstrained delegation to impersonate Kerberos tickets for privileged accounts.",
        "Execute a Golden Ticket attack by forging TGTs using the krbtgt account hash."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`GenericWrite` permissions allow attackers to modify object properties, such as group membership, granting instant domain admin access.",
      "examTip": "GenericWrite = domain privilege escalation. Monitor ACL changes closely."
    },
    {
      "id": 74,
      "question": "Analyze the following Kubernetes deployment:\n\n```yaml\nspec:\n  containers:\n  - name: vulnerable-app\n    image: nginx:latest\n    securityContext:\n      privileged: true\n      capabilities:\n        add:\n        - SYS_ADMIN\n```\n\nWhat is the MOST critical risk posed by this configuration?",
      "options": [
        "Container escape enabling host-level compromise via `SYS_ADMIN` capability and privileged mode.",
        "Unauthorized data exfiltration through misconfigured persistent volumes accessible to all pods.",
        "Cross-namespace privilege escalation by harvesting Kubernetes API tokens exposed in pods.",
        "Denial-of-service (DoS) attacks through excessive resource consumption and lack of limits."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privileged: true` combined with `SYS_ADMIN` capabilities allows attackers to perform container escapes and access host resources.",
      "examTip": "Privileged pods + SYS_ADMIN = host compromise. Use PodSecurityPolicies to enforce least privilege."
    },
    {
      "id": 75,
      "question": "A tester executes:\n\n```\nmsfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS 10.0.0.5\nrun\n```\n\nWhat is the PRIMARY objective of this exploitation?",
      "options": [
        "Remote code execution (RCE) on unpatched Windows hosts vulnerable to EternalBlue (MS17-010).",
        "Intercepting SMB traffic for NTLM hash harvesting through SMB relay attacks.",
        "Privilege escalation by exploiting unquoted service paths on Windows endpoints.",
        "Bypassing SMB signing for man-in-the-middle (MitM) attacks across the network."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `ms17_010_eternalblue` module exploits SMB vulnerabilities in Windows systems to achieve remote code execution (RCE).",
      "examTip": "MS17-010 = EternalBlue RCE. Always prioritize patching SMBv1 vulnerabilities."
    },
    {
      "id": 76,
      "question": "During a cloud penetration test, a tester discovers the following policy:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"sts:AssumeRole\",\n  \"Resource\": \"arn:aws:iam::123456789012:role/Admin\"\n}\n```\n\nWhat exploitation technique MOST effectively achieves full administrative access?",
      "options": [
        "Assuming the Admin role using `sts:AssumeRole` to gain administrative privileges across the AWS account.",
        "Enumerating trust relationships to perform cross-account pivoting for lateral movement.",
        "Deploying malicious Lambda functions with elevated permissions for persistent access.",
        "Modifying CloudTrail configurations to hide malicious activities and evade detection."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unrestricted `sts:AssumeRole` permissions allow attackers to assume administrative roles, resulting in full control over the AWS account.",
      "examTip": "AssumeRole with admin privileges = total AWS takeover. Limit trust relationships rigorously."
    },
    {
      "id": 77,
      "question": "The following Python code snippet is found in a web application:\n\n```python\nimport pickle\nuser_input = input(\"Provide input:\")\npickle.loads(user_input)\n```\n\nWhat is the MOST critical vulnerability in this code?",
      "options": [
        "Insecure deserialization leading to arbitrary code execution on the host machine.",
        "Command injection vulnerability allowing OS-level execution through user-supplied input.",
        "Cross-site scripting (XSS) vulnerabilities due to improper input sanitization in responses.",
        "Path traversal enabling unauthorized file access by manipulating input parameters."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`pickle.loads()` is inherently unsafe when deserializing untrusted data, enabling attackers to execute arbitrary code during the deserialization process.",
      "examTip": "Avoid `pickle.loads` with user input. Use safer serialization methods like `json.loads`."
    },
    {
      "id": 78,
      "question": "A tester captures the following HTTP request:\n\n```\nPOST /login HTTP/1.1\nHost: target.local\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhat is the MOST critical vulnerability demonstrated?",
      "options": [
        "Weak credentials transmitted using Basic Authentication, facilitating brute-force attacks.",
        "Lack of TLS encryption enabling credential interception through man-in-the-middle attacks.",
        "Session fixation vulnerability due to predictable authorization headers in authentication flows.",
        "Reflected XSS vulnerabilities via unsanitized authentication parameters in HTTP responses."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Weak credentials transmitted using Basic Authentication (`admin:password`) make brute-force attacks trivial and authentication mechanisms vulnerable.",
      "examTip": "Basic auth with weak creds = easy brute force. Enforce MFA and strong password policies."
    },
    {
      "id": 79,
      "question": "A penetration tester uses Burp Suite and observes the following OAuth authorization request:\n\n```\nGET /oauth/authorize?response_type=token&client_id=app&redirect_uri=https://malicious.com\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Open redirect flaw allowing OAuth token theft by redirecting the token to a malicious endpoint.",
        "Cross-site request forgery (CSRF) due to the absence of state parameters in OAuth requests.",
        "Privilege escalation by manipulating token scopes to gain unauthorized access to protected resources.",
        "Token replay vulnerability caused by missing expiration checks in issued access tokens."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An unvalidated `redirect_uri` parameter allows attackers to intercept OAuth tokens by redirecting them to a malicious endpoint.",
      "examTip": "Validate `redirect_uri` parameters rigorously. Open redirects = OAuth token exfiltration risk."
    },
    {
      "id": 80,
      "question": "During reconnaissance, the tester runs the following Nmap command:\n\n```\nnmap -sU -p 161 target.local\n```\n\nWhat is the PRIMARY objective of this scan?",
      "options": [
        "Enumerate SNMP services that could reveal sensitive configuration information.",
        "Identify TFTP services susceptible to unauthorized firmware updates.",
        "Detect open UDP ports for potential DNS amplification attack vectors.",
        "Discover NetBIOS services vulnerable to SMB relay exploitation attempts."
      ],
      "correctAnswerIndex": 0,
      "explanation": "UDP port 161 is associated with SNMP. Misconfigured SNMP services can leak sensitive information about network infrastructure and configurations.",
      "examTip": "SNMP (UDP 161) with default credentials = critical misconfigurations. Always enumerate securely."
    },
    {
      "id": 81,
      "question": "The following Wireshark capture is analyzed:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerable.local\nX-Forwarded-For: 169.254.169.254\n```\n\nWhat attack is MOST likely represented by this traffic?",
      "options": [
        "SSRF targeting AWS metadata service to retrieve temporary IAM security credentials.",
        "DNS rebinding attack bypassing same-origin policies for internal network access.",
        "Session fixation attack through manipulated HTTP headers affecting backend authentication.",
        "Cross-site request forgery (CSRF) leveraging misconfigured proxy headers in HTTP requests."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Requests to `169.254.169.254` typically indicate SSRF attempts targeting AWS metadata endpoints for credential theft.",
      "examTip": "SSRF + AWS metadata endpoint = cloud credential theft risk. Sanitize all user-controlled URL inputs."
    },
    {
      "id": 82,
      "question": "A tester performs a wireless attack using the following command:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Crack WPA/WPA2 pre-shared keys using brute-force attacks on captured handshake files.",
        "Launch deauthentication attacks to force reconnections and capture fresh WPA handshakes.",
        "Enumerate wireless access points for WPS-enabled networks susceptible to PIN brute-forcing.",
        "Conduct beacon flood attacks to disrupt wireless network availability through AP spoofing."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` combined with `rockyou.txt` performs brute-force attacks against WPA/WPA2 keys from captured handshake files.",
      "examTip": "Captured WPA handshakes + rockyou.txt = standard Wi-Fi cracking method. Confirm engagement scope first."
    },
    {
      "id": 83,
      "question": "A penetration tester uses Pacu with the following command:\n\n```\nrun iam__enum_roles\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Enumerate AWS IAM roles to identify potential privilege escalation opportunities.",
        "Identify misconfigured Lambda functions exposing privileged IAM permissions.",
        "Analyze trust relationships to perform cross-account lateral movement within AWS environments.",
        "Review CloudTrail logs for anomalous role assumption events indicating compromise."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iam__enum_roles` lists available IAM roles in AWS that can potentially be assumed or abused for privilege escalation.",
      "examTip": "IAM role enumeration = cloud privilege map. Focus on `AssumeRole` permissions for escalation opportunities."
    },
    {
      "id": 84,
      "question": "The following Dockerfile is analyzed:\n\n```dockerfile\nFROM alpine:3.12\nRUN apk add --no-cache openssh\nRUN echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config\nRUN echo 'root:password' | chpasswd\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nWhat is the MOST critical security risk in this configuration?",
      "options": [
        "Root SSH access with weak credentials enabling trivial container compromise and potential host escape.",
        "Outdated Alpine base image exposing known vulnerabilities exploitable for container breakout.",
        "Lack of SSH key-based authentication increasing the risk of brute-force attacks on the container.",
        "Improper namespace remapping exposing host kernel resources to the container environment."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Root SSH access with default credentials (`root:password`) creates an immediate attack path for container compromise and potential host escape.",
      "examTip": "Root SSH + weak credentials = instant compromise. Disable root login and use key-based authentication."
    },
    {
      "id": 85,
      "question": "A tester captures the following Kerberos ticket:\n\n```\nkrbtgt/domain.local@DOMAIN.LOCAL\nEncType: rc4_hmac\n```\n\nWhich attack is MOST likely indicated by this capture?",
      "options": [
        "Golden Ticket attack by forging TGTs for indefinite domain admin access.",
        "Kerberoasting targeting SPN service tickets for offline password cracking.",
        "AS-REP roasting exploiting accounts with pre-authentication disabled.",
        "Pass-the-Ticket (PtT) attack using stolen service tickets for lateral movement."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Capturing the `krbtgt` hash enables attackers to craft Golden Tickets, granting indefinite domain admin access without detection.",
      "examTip": "Golden Ticket = stealthy domain persistence. Secure the `krbtgt` hash at all costs."
    },
    {
      "id": 86,
      "question": "Analyze the following Kubernetes pod specification:\n\n```yaml\nspec:\n  hostPID: true\n  containers:\n  - name: attacker\n    image: alpine:latest\n    securityContext:\n      privileged: true\n```\n\nWhat is the MOST effective exploitation path to achieve host-level compromise?",
      "options": [
        "Mount the host filesystem and modify `/etc/shadow` to add a root user.",
        "Harvest Kubernetes API tokens for lateral movement within the cluster.",
        "Scan nodePorts to identify master node services for exploitation.",
        "Extract environment variables to compromise service configurations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privileged: true` with `hostPID: true` allows mounting host filesystems, enabling root user creation by modifying `/etc/shadow`.",
      "examTip": "Privileged pods + hostPID = direct cluster-to-host breakout."
    },
    {
      "id": 87,
      "question": "The following Pacu command is executed:\n\n```\nrun privesc_scan\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Identify IAM misconfigurations enabling privilege escalation within AWS.",
        "Analyze CloudTrail logs for anomalous activities suggesting compromise.",
        "Detect misconfigured VPC peering for lateral movement across accounts.",
        "Enumerate S3 buckets linked to overprivileged IAM roles for data exfiltration."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`privesc_scan` identifies privilege escalation opportunities by analyzing IAM roles, policies, and trust relationships.",
      "examTip": "Compromised AWS keys? `privesc_scan` maps out privilege escalation paths."
    },
    {
      "id": 88,
      "question": "A tester analyzes the following HTTP request:\n\n```\nGET /auth?response_type=token&client_id=trustedapp&redirect_uri=https://evil.com\n```\n\nWhich vulnerability is MOST likely present?",
      "options": [
        "Open redirect flaw enabling OAuth token theft through malicious endpoint redirection.",
        "CSRF due to the omission of state parameters in the OAuth request.",
        "Privilege escalation via improperly scoped OAuth access tokens.",
        "Token replay vulnerability due to missing expiration in access tokens."
      ],
      "correctAnswerIndex": 0,
      "explanation": "An unvalidated `redirect_uri` allows attackers to redirect OAuth tokens to malicious endpoints, enabling theft.",
      "examTip": "Validate `redirect_uri` parameters to prevent OAuth token exfiltration."
    },
    {
      "id": 89,
      "question": "A penetration tester observes this BloodHound edge:\n\n```\nEdge: AddMember\nSource: svc_web\nTarget: DOMAIN\\Domain Admins\n```\n\nWhich exploitation technique MOST effectively achieves domain admin access?",
      "options": [
        "Add the attacker’s account to the Domain Admins group for immediate full control.",
        "Abuse unconstrained delegation to impersonate Kerberos TGTs for privileged accounts.",
        "Perform a DCSync attack to obtain krbtgt hashes for Golden Ticket creation.",
        "Exploit ACLs to manipulate Group Policy Objects (GPOs) for persistent access."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`AddMember` permissions allow attackers to add themselves to privileged groups such as Domain Admins, granting full access.",
      "examTip": "`AddMember` edges = instant DA. Detect and mitigate quickly."
    },
    {
      "id": 90,
      "question": "A tester captures this network packet:\n\n```\nPOST /api/internal HTTP/1.1\nHost: vulnerableapp.local\nX-Forwarded-For: 169.254.169.254\n```\n\nWhat is the MOST likely attack represented here?",
      "options": [
        "SSRF targeting AWS instance metadata to retrieve temporary IAM credentials.",
        "DNS rebinding attack bypassing same-origin policies for internal resource access.",
        "Session fixation through header manipulation affecting authentication mechanisms.",
        "CSRF attack exploiting misconfigured proxy headers."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Requests to `169.254.169.254` indicate SSRF targeting AWS metadata for credential theft.",
      "examTip": "SSRF + AWS metadata endpoint = cloud credential theft. Sanitize user-controlled headers."
    },
    {
      "id": 91,
      "question": "The following Wireshark capture is observed:\n\n```\nProtocol: SMB2\nCommand: Tree Connect Request\nTree ID: 0x0001\nShare: \\\\192.168.1.100\\C$\n```\n\nWhich attack is MOST likely occurring?",
      "options": [
        "Pass-the-Hash attack leveraging SMB authentication without knowledge of plaintext passwords.",
        "SMB relay attack forwarding NTLM authentication to gain access to privileged shares.",
        "EternalBlue exploitation targeting SMBv1 for remote code execution.",
        "Credential stuffing attack using reused passwords across SMB services."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Access attempts to `C$` administrative shares combined with NTLM authentication patterns suggest Pass-the-Hash attacks.",
      "examTip": "C$ + NTLM auth = likely Pass-the-Hash. Harden SMB settings and monitor authentication logs."
    },
    {
      "id": 92,
      "question": "The following Dockerfile is reviewed:\n\n```dockerfile\nFROM ubuntu:20.04\nRUN apt update && apt install -y sudo\nRUN useradd -m user && echo \"user:password\" | chpasswd && adduser user sudo\nCMD [\"/bin/bash\"]\n```\n\nWhat is the MOST critical risk associated with this configuration?",
      "options": [
        "Sudo privileges combined with weak credentials enabling container-to-host escapes.",
        "Lack of SSH key-based authentication increasing brute-force attack risk.",
        "Outdated Ubuntu base image introducing unpatched vulnerabilities exploitable for breakout.",
        "Improper namespace remapping exposing host kernel resources to the container."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting sudo rights with weak credentials (`user:password`) allows easy privilege escalation and potential host compromise.",
      "examTip": "Sudo rights in containers = high risk. Apply least-privilege principles."
    },
    {
      "id": 93,
      "question": "The following SQLMap command is executed:\n\n```\nsqlmap -u \"http://target.local/item.php?id=1\" --technique=U --os-shell\n```\n\nWhat is the PRIMARY objective of `--technique=U` in this context?",
      "options": [
        "To test for UNION-based SQL injection, enabling OS-level shell access via `--os-shell`.",
        "To detect time-based blind SQLi vulnerabilities through delayed responses.",
        "To enumerate database schemas using error-based SQL injection techniques.",
        "To execute stacked queries allowing multiple SQL statements in a single request."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--technique=U` specifies UNION-based SQLi, often enabling data extraction and RCE when combined with `--os-shell`.",
      "examTip": "`--technique=U` = UNION-based SQLi. Use cautiously when escalating to OS-level shell access."
    },
    {
      "id": 94,
      "question": "A tester executes the following Metasploit module:\n\n```\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS 10.0.0.5\nrun\n```\n\nWhat is the PRIMARY objective?",
      "options": [
        "Achieve remote code execution (RCE) on unpatched Windows systems vulnerable to EternalBlue (MS17-010).",
        "Harvest NTLM hashes by intercepting SMB traffic through relay attacks.",
        "Escalate privileges by exploiting unquoted service paths on Windows hosts.",
        "Bypass SMB signing to execute man-in-the-middle attacks across the network."
      ],
      "correctAnswerIndex": 0,
      "explanation": "MS17-010 (EternalBlue) exploits SMBv1 vulnerabilities for RCE on unpatched Windows systems.",
      "examTip": "Patch SMBv1 immediately. EternalBlue = critical RCE vector."
    },
    {
      "id": 95,
      "question": "A tester executes the following Aircrack-ng command:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective?",
      "options": [
        "Crack WPA/WPA2 pre-shared keys using brute-force attacks on captured handshake files.",
        "Force deauthentication to capture fresh WPA handshakes during client reconnections.",
        "Enumerate WPS-enabled networks for PIN brute-forcing attacks.",
        "Conduct beacon flood attacks to disrupt wireless networks via AP spoofing."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` with `rockyou.txt` performs brute-force attacks against WPA/WPA2 keys from captured handshakes.",
      "examTip": "Wi-Fi cracking 101: Capture WPA handshakes, then brute force with common wordlists like rockyou.txt."
    },
    {
      "id": 96,
      "question": "The following AWS Lambda policy is analyzed:\n\n```json\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"*\"\n}\n```\n\nWhat is the MOST critical risk posed by this configuration?",
      "options": [
        "Unrestricted Lambda invocation enabling arbitrary code execution and persistent access.",
        "Privilege escalation through chained Lambda functions with `iam:PassRole` permissions.",
        "Exfiltration of sensitive data via unsecured API Gateway endpoints linked to Lambda functions.",
        "Cross-account enumeration enabling attackers to pivot into additional AWS environments."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unrestricted `lambda:InvokeFunction` permissions allow attackers to execute arbitrary Lambda code, enabling persistent access.",
      "examTip": "Lambda execution = code execution. Scope permissions narrowly to reduce attack surface."
    },
    {
      "id": 97,
      "question": "A penetration tester runs the following BloodHound query:\n\n```\nMATCH (n)-[r:Owns]->(m {name: 'DOMAIN\\\\Domain Admins'}) RETURN n, r, m\n```\n\nWhat is the tester MOST likely attempting to discover?",
      "options": [
        "Accounts or objects with direct ownership over the Domain Admins group, enabling instant privilege escalation.",
        "Service principal names (SPNs) that can be targeted for Kerberoasting attacks.",
        "Misconfigured ACLs that permit lateral movement through resource-based constrained delegation.",
        "Unconstrained delegation paths that can be abused for Kerberos ticket impersonation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `Owns` relationship in BloodHound reveals accounts with ownership rights over Domain Admins, enabling immediate domain-wide control.",
      "examTip": "`Owns` = full control. These relationships should trigger immediate security reviews."
    },
    {
      "id": 98,
      "question": "A tester captures this SAML assertion:\n\n```xml\n<saml:Assertion>\n  <saml:Subject>\n    <saml:NameID>admin@example.com</saml:NameID>\n  </saml:Subject>\n  <saml:AttributeStatement>\n    <saml:Attribute Name=\"Role\">Domain Admin</saml:Attribute>\n  </saml:AttributeStatement>\n</saml:Assertion>\n```\n\nIf forged, what attack does this represent?",
      "options": [
        "Golden SAML attack enabling domain-wide authentication without credential reuse.",
        "SAML replay attack using previously issued tokens to gain unauthorized access.",
        "Signature wrapping attack bypassing SAML integrity checks during validation.",
        "Token substitution attack leveraging federated SAML attributes for privilege escalation."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Golden SAML attacks involve forging SAML assertions after compromising the token-signing certificate, granting domain admin access.",
      "examTip": "Golden SAML = federation compromise. Protect token-signing certificates at all times."
    },
    {
      "id": 99,
      "question": "A tester observes the following Kubernetes RoleBinding:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: admin-binding\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: production\n```\n\nWhat is the MOST critical risk associated with this configuration?",
      "options": [
        "Default service account with `cluster-admin` privileges enables any pod in the namespace to achieve full cluster control.",
        "Cross-namespace privilege escalation risks due to improperly scoped RoleBinding configurations.",
        "Exposure of Kubernetes API tokens through default service accounts allowing lateral movement.",
        "Potential DoS attacks from uncontrolled access to resource-intensive cluster operations."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Granting `cluster-admin` rights to a default service account allows any pod in the namespace to control the entire Kubernetes cluster.",
      "examTip": "Default + cluster-admin = cluster-wide compromise. Always enforce least privilege."
    },
    {
      "id": 100,
      "question": "A tester runs the following Aircrack-ng command:\n\n```\naircrack-ng handshake.cap -w rockyou.txt\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Cracking WPA/WPA2 pre-shared keys using brute-force attacks against captured handshakes.",
        "Launching deauthentication attacks to capture WPA handshakes during reconnection attempts.",
        "Enumerating wireless access points for WPS vulnerabilities and PIN brute-forcing.",
        "Conducting beacon flood attacks to disrupt wireless network availability."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`aircrack-ng` with `rockyou.txt` performs brute-force attacks on WPA/WPA2 pre-shared keys from captured handshakes.",
      "examTip": "Standard Wi-Fi cracking process: Capture handshakes, then brute force with common dictionaries like rockyou.txt."
    }
  ]
});
