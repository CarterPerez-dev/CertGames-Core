{
  "category": "penplus",
  "testId": 5,
  "testName": "Pentest Practice Test #5 (Intermediate)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "You are performing a penetration test and discover a web application that appears to be vulnerable to SQL injection. You want to use sqlmap to automate the exploitation process. Which sqlmap command is MOST appropriate to identify the database management system (DBMS) being used?",
      "options": [
        "sqlmap -u \"http://example.com/page.php?id=1\" --dbs",
        "sqlmap -u \"http://example.com/page.php?id=1\" --banner",
        "sqlmap -u \"http://example.com/page.php?id=1\" --tables",
        "sqlmap -u \"http://example.com/page.php?id=1\" --dump"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `--banner` option in sqlmap attempts to retrieve the database banner, which often reveals the DBMS type and version. `--dbs` lists databases, `--tables` lists tables within a database, and `--dump` extracts data.",
      "examTip": "sqlmap --banner = Retrieve DBMS information."
    },
    {
      "id": 2,
      "question": "Which of the following techniques is MOST effective at mitigating the risk of LLMNR/NBT-NS poisoning attacks?",
      "options": [
        "Implementing strong passwords for all user accounts.",
        "Disabling LLMNR and NBT-NS on network hosts, and enabling SMB signing.",
        "Using a VPN for all network communications.",
        "Enabling two-factor authentication for all user accounts."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Disabling these protocols prevents the attack vector entirely. While strong passwords, VPNs, and 2FA are good security practices, they don't directly address this specific vulnerability. SMB signing helps prevent relay attacks.",
      "examTip": "Disable LLMNR/NBT-NS = Prevent poisoning attacks."
    },
    {
      "id": 3,
      "question": "You are performing a wireless penetration test against a network using WPA2-Enterprise. Which of the following attacks is MOST likely to be successful?",
      "options": [
        "Capturing the four-way handshake and performing an offline brute-force attack.",
        "Performing a WPS PIN attack.",
        "Targeting vulnerabilities in the EAP authentication method used (e.g., EAP-TTLS, PEAP).",
        "Using an evil twin attack."
      ],
      "correctAnswerIndex": 2,
      "explanation": "WPA2-Enterprise uses 802.1X authentication with EAP (Extensible Authentication Protocol).  Attacks often focus on weaknesses in the specific EAP method chosen (e.g., misconfigured certificates, weak authentication mechanisms).  Offline brute-force against the handshake is not feasible with WPA2-Enterprise. WPS is not typically used with Enterprise. Evil twin is a possibility, but less direct than targeting EAP vulnerabilities.",
      "examTip": "WPA2-Enterprise attacks often target EAP vulnerabilities."
    },
    {
      "id": 4,
        "question": "Analyze the following Apache web server error log snippet:\n```\n[Mon Aug 28 10:15:22.123456 2024] [php:error] [pid 1234] [client 192.168.1.100:54321] PHP Fatal error:  Uncaught Error: Call to undefined function mysql_connect() in /var/www/html/connect.php:3\nStack trace:\n#0 {main}\n  thrown in /var/www/html/connect.php on line 3\n```\nWhat can you conclude from this log entry?",
        "options":[
            "The web application is using a deprecated database connection function.",
            "The web server is experiencing a denial-of-service attack.",
            "The client (192.168.1.100) is attempting a SQL injection attack.",
            "The web application is using a secure database connection."
        ],
        "correctAnswerIndex": 0,
        "explanation": "The error message `Call to undefined function mysql_connect()` indicates that the PHP code is trying to use the old `mysql_*` functions, which are deprecated and should be replaced with `mysqli_*` or PDO. This is a coding error and a potential security risk (as deprecated functions may have known vulnerabilities), but it's not directly evidence of a DoS, SQLi, or secure connection.",
        "examTip":"Deprecated function calls in logs indicate potential vulnerabilities."
    },
    {
      "id": 5,
      "question": "You have gained access to a low-privilege user account on a Linux system. Which of the following commands is MOST useful for identifying files with the SUID bit set?",
      "options": [
        "`ls -l /`",
        "`find / -perm -u=s -type f 2>/dev/null`",
        "`cat /etc/passwd`",
        "`uname -a`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "`find / -perm -u=s -type f 2>/dev/null` searches the entire filesystem (`/`) for files (`-type f`) with the SUID permission bit set (`-perm -u=s`). SUID binaries run with the owner's privileges (often root), making them potential targets for privilege escalation. `ls -l /` lists files in the root directory. `cat /etc/passwd` displays user information. `uname -a` shows system information.",
      "examTip": "Find SUID binaries = Potential privilege escalation on Linux."
    },
    {
      "id": 6,
       "question": "Which of the following BEST describes the concept of 'defense in depth' in information security?",
       "options": [
         "Relying solely on a single, robust firewall for network protection.",
         "Implementing multiple, overlapping layers of security controls to protect assets, so that if one layer fails, others are in place to mitigate the risk.",
         "Using only intrusion detection systems (IDS) to monitor for malicious activity.",
         "Encrypting all data at rest and in transit."
       ],
       "correctAnswerIndex": 1,
       "explanation": "Defense in depth is about layered security. A single firewall is a single point of failure. IDS is reactive, not preventative. Encryption is one layer, but not a complete security strategy.",
       "examTip": "Defense in depth = Multiple layers of security."
     },
    {
      "id": 7,
        "question": "Consider this Python code snippet, designed to interact with a web application:\n```python\nimport requests\nurl = 'http://example.com/page.php'\nheaders = {'User-Agent': 'My Custom User Agent'}\nresponse = requests.get(url, headers=headers)\nprint(response.text)\n```\nWhy might a penetration tester modify the `User-Agent` header?",
        "options":[
            "To make the request faster.",
            "To potentially bypass web application firewalls (WAFs) or other security controls that filter based on User-Agent, or to fingerprint the application's behavior based on different User-Agents.",
            "To encrypt the request.",
            "To change the request method to POST."
        ],
        "correctAnswerIndex": 1,
        "explanation":"Modifying the User-Agent can help evade detection or reveal different application behaviors. Some WAFs or applications might block or treat requests differently based on the User-Agent. It doesn't inherently make the request faster, encrypt it, or change the request method.",
        "examTip": "Modifying the User-Agent = Potential WAF evasion or application fingerprinting."
    },
    {
      "id": 8,
      "question": "What is the primary purpose of using 'salted' password hashes?",
      "options": [
        "To make passwords longer and more complex.",
        "To make each password hash unique, even if two users choose the same password, preventing rainbow table attacks.",
        "To encrypt passwords using a secret key.",
        "To speed up the password hashing process."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Salting adds random data to the password *before* hashing, making pre-computed rainbow table attacks ineffective. It doesn't simply make the password longer (though complexity is important). It's not encryption (hashing is one-way). It *slows down* hashing, but that's a trade-off for security.",
      "examTip": "Salt = Random data added to passwords before hashing."
    },
    {
      "id": 9,
      "question": "You are performing a penetration test and discover that a web application is vulnerable to Local File Inclusion (LFI). Which of the following is the MOST likely impact of this vulnerability?",
      "options": [
        "An attacker can force the user to perform unintended actions on the web application.",
        "An attacker can read arbitrary files from the web server's file system.",
        "An attacker can inject malicious scripts into web pages viewed by other users.",
        "An attacker can gain access to the web server's database."
      ],
      "correctAnswerIndex": 1,
      "explanation": "LFI allows an attacker to include and execute local files on the server, potentially revealing sensitive information or gaining code execution. Forcing unintended actions is CSRF. Injecting scripts is XSS. Database access might be a *consequence* of LFI, but it's not the direct impact.",
      "examTip": "LFI = Reading arbitrary files from the server."
    },
    {
      "id": 10,
      "question": "Which of the following is a key difference between a 'bind shell' and a 'reverse shell'?",
      "options":[
        "A bind shell is used for web applications; a reverse shell is used for network devices.",
        "A bind shell listens for incoming connections on the target machine; a reverse shell initiates a connection *from* the target machine *back* to the attacker's machine.",
        "A bind shell is more secure than a reverse shell.",
        "There is no significant difference."
      ],
      "correctAnswerIndex": 1,
      "explanation": "The key difference is the direction of the connection. A bind shell *listens* on the target. A reverse shell *connects out* from the target (often to bypass firewalls). They are used in various contexts, not just web apps or network devices. Security depends on the context, not the shell type itself.",
      "examTip": "Bind shell = Target listens; Reverse shell = Target connects out."
    },
    {
        "id": 11,
        "question": "Examine the following Nmap command:\n ```bash\nnmap -sV --script=http-enum -p 80,443 example.com\n```\nWhat is the purpose of the `--script=http-enum` argument?",
        "options":[
          "It performs a stealth scan.",
          "It performs OS detection.",
          "It runs Nmap scripts designed to enumerate information about web servers and web applications running on the target.",
          "It scans only UDP ports."
        ],
        "correctAnswerIndex": 2,
        "explanation": "The `--script=http-enum` argument instructs Nmap to use scripts specifically created to gather information about HTTP services, such as directory listings, web application frameworks, and other details. It's not a general stealth scan, OS detection (though that can be done separately), or UDP scan.",
        "examTip": "`--script=http-enum` = Enumerate web server information (Nmap)."
    },
    {
        "id": 12,
         "question": "You are performing a penetration test and have gained access to a Windows system. You suspect there may be other users currently logged in.  Which command is MOST likely to show you currently logged-in users?",
         "options":[
             "netstat",
             "query user",
             "ipconfig",
             "ping"
         ],
         "correctAnswerIndex": 1,
         "explanation": "The `query user` command (or `qwinsta`) on Windows displays information about users currently logged on to the system, including their session state and logon time.  `netstat` shows network connections, `ipconfig` shows network interface configuration, and `ping` tests network connectivity.",
         "examTip": "`query user` (or `qwinsta`) = Show logged-in users (Windows)."
    },
    {
      "id": 13,
      "question": "What is the primary purpose of 'fuzzing' in software testing?",
      "options": [
        "To encrypt data transmitted between a client and a server.",
        "To test software by providing invalid, unexpected, or random data as input, aiming to identify vulnerabilities and crashes.",
        "To crack passwords using a dictionary attack.",
        "To manage user accounts and permissions."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Fuzzing is about finding bugs and vulnerabilities by feeding a program with 'bad' data. It's not encryption, password cracking, or user management.",
      "examTip": "Fuzzing = Testing with invalid/unexpected input."
    },
    {
       "id": 14,
        "question":"Analyze the following command:\n```bash\nmkdir new_directory && cd new_directory\n```\nWhat is the effect of this combined command?",
        "options":[
            "It creates a new directory named 'new_directory' and then changes the current working directory to 'new_directory'.",
            "It creates a new file named 'new_directory'.",
            "It changes the current working directory to 'new_directory' if it exists, and does nothing if the directory doesn't exist." ,
            "It deletes the directory named 'new_directory'."
        ],
        "correctAnswerIndex": 0,
        "explanation": "The `mkdir` command creates a directory.  The `&&` operator executes the second command (`cd new_directory`) only if the first command (`mkdir new_directory`) succeeds.  So, it creates the directory and then moves into it. It doesn't create a file, and it will error if the directory cannot be created.",
        "examTip": "`&&` = Execute the next command only if the previous one succeeded (bash)."
    },
    {
      "id": 15,
      "question": "Which of the following is a common technique for bypassing network segmentation and gaining access to restricted network zones?",
      "options": [
        "Using strong passwords.",
        "VLAN hopping, exploiting misconfigured switches or routers, or using compromised hosts as pivot points.",
        "Enabling two-factor authentication.",
        "Updating software regularly."
      ],
      "correctAnswerIndex": 1,
      "explanation": "VLAN hopping exploits weaknesses in VLAN configurations to jump between VLANs. Misconfigured network devices and pivoting through compromised hosts are also methods. Strong passwords, 2FA, and updates are good security practices, but don't directly address network segmentation bypass.",
      "examTip": "VLAN hopping and pivoting = Bypassing network segmentation."
    },
    {
       "id": 16,
        "question":"What is 'command injection'?",
        "options":[
            "A type of social engineering attack.",
            "An attack that allows an attacker to execute arbitrary operating system commands on a vulnerable system, often through a web application.",
            "A method for encrypting data.",
            "A way to improve network performance."
        ],
        "correctAnswerIndex": 1,
        "explanation":"Command injection exploits vulnerabilities in input validation to run OS commands. It's not a social engineering attack, encryption method, or performance improvement technique. It often occurs via web applications but can happen in other contexts too.",
        "examTip": "Command injection = Executing arbitrary OS commands."
       },
    {
      "id": 17,
      "question": "You are testing a web application and find a parameter in the URL that seems to control which page is displayed. You modify the parameter to `../../etc/passwd`. What type of vulnerability are you MOST likely testing for?",
      "options": [
        "Cross-Site Scripting (XSS)",
        "Local File Inclusion (LFI) / Directory Traversal",
        "SQL Injection (SQLi)",
        "Cross-Site Request Forgery (CSRF)"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `../../etc/passwd` pattern is a classic signature of Local File Inclusion (LFI) or Directory Traversal attacks. The attacker is trying to navigate outside the web root directory to access system files. XSS involves injecting scripts, SQLi targets databases, and CSRF forces unintended user actions.",
      "examTip": "`../../` in a URL parameter = Possible LFI/Directory Traversal."
    },
    {
      "id": 18,
        "question": "What is the purpose of using a 'web application vulnerability scanner'?",
        "options":[
            "To manually test a web application for security flaws.",
            "To automatically identify potential security vulnerabilities in web applications, such as XSS, SQLi, and others.",
            "To encrypt web traffic using HTTPS.",
            "To manage user accounts and passwords."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Web application scanners automate the process of finding common web vulnerabilities. While manual testing is also important, scanners provide a broad initial assessment. They don't primarily handle encryption or user account management.",
        "examTip":"Web application scanner = Automated vulnerability detection."
    },
    {
        "id": 19,
        "question": "Consider the following scenario: You are able to upload a file named `shell.php` to a web server, and then you can access it directly through a URL, causing the PHP code within the file to execute. What type of vulnerability have you successfully exploited?",
        "options":[
            "Cross-Site Scripting (XSS)",
            "Unrestricted File Upload leading to Remote Code Execution (RCE)",
            "SQL Injection (SQLi)",
            "Denial-of-Service (DoS)"
        ],
        "correctAnswerIndex": 1,
        "explanation": "Unrestricted file uploads that allow for the execution of server-side code (like PHP) lead to Remote Code Execution (RCE), a very serious vulnerability. XSS involves client-side script injection, SQLi targets databases, and DoS disrupts availability.",
        "examTip": "Unrestricted file upload + code execution = RCE."
    },
    {
      "id": 20,
      "question": "Which of the following is a common technique for gathering information about a target organization's DNS infrastructure?",
      "options": [
        "Exploiting a vulnerability in a web server.",
        "Performing DNS zone transfers (if allowed), using tools like `dig` and `nslookup`, and performing subdomain enumeration.",
        "Sending phishing emails to employees.",
        "Cracking passwords using a brute-force attack."
      ],
      "correctAnswerIndex": 1,
      "explanation": "DNS reconnaissance involves techniques like attempting zone transfers (which reveal all DNS records for a domain), querying DNS servers with `dig` and `nslookup`, and using subdomain enumeration tools.  Exploiting web servers, phishing, and brute-force attacks are different attack techniques.",
      "examTip": "DNS zone transfers, `dig`, `nslookup` = DNS reconnaissance."
    },
    {
      "id": 21,
        "question": "What is the primary purpose of 'output encoding' in web application security?",
        "options":[
          "To make web pages load faster.",
          "To prevent cross-site scripting (XSS) by converting special characters into their HTML entities (or the appropriate encoding for the context, such as JavaScript encoding).",
          "To encrypt user passwords.",
          "To improve the visual design of a website."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Output encoding neutralizes potentially malicious characters, preventing them from being interpreted as code by the browser, thus mitigating XSS. It's not about website speed, password encryption, or visual design.",
        "examTip": "Output encoding = Preventing XSS."
    },
    {
       "id": 22,
       "question":"Which of the following BEST describes 'privilege escalation'?",
       "options":[
          "Encrypting data on a system.",
          "Gaining higher-level permissions than initially granted, often by exploiting vulnerabilities or misconfigurations.",
          "Scanning a network for open ports.",
          "Sending phishing emails to users."
       ],
       "correctAnswerIndex": 1,
       "explanation": "Privilege escalation is about obtaining greater access rights than originally intended, typically by exploiting system weaknesses. It's not encryption, port scanning, or phishing.",
       "examTip":"Privilege escalation = Gaining higher access rights."
    },
     {
        "id": 23,
        "question": "Examine the following HTTP request:\n```\nGET /search.php?term=<script>alert('XSS');</script> HTTP/1.1\nHost: example.com\n```\nWhat type of attack is MOST likely being attempted?",
        "options":[
          "SQL Injection (SQLi)",
          "Cross-Site Scripting (XSS)",
          "Cross-Site Request Forgery (CSRF)",
          "Denial-of-Service (DoS)"
        ],
        "correctAnswerIndex": 1,
        "explanation": "The presence of `<script>alert('XSS');</script>` in the URL parameter is a classic indicator of a Cross-Site Scripting (XSS) attack. The attacker is attempting to inject JavaScript code into the web page. The other options are different types of vulnerabilities.",
        "examTip": "`<script>` tag in a URL parameter = Possible XSS attempt."
    },
    {
      "id": 24,
      "question": "Which of the following is a common method for an attacker to maintain persistence on a compromised Windows system?",
      "options": [
        "Regularly updating the operating system.",
        "Creating a scheduled task, modifying the registry (e.g., Run keys), or installing a service.",
        "Using strong passwords for all user accounts.",
        "Enabling the Windows Firewall."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Scheduled tasks, registry modifications, and service creation are common persistence mechanisms, allowing the attacker's code to run automatically even after reboots.  Updating the OS, using strong passwords, and enabling the firewall are defensive measures.",
      "examTip": "Scheduled tasks, registry keys, services = Persistence on Windows."
    },
    {
      "id": 25,
      "question": "What is the primary difference between a 'black box' and a 'white box' penetration test?",
      "options": [
        "Black box tests are always performed remotely; white box tests are always performed on-site.",
        "Black box tests involve no prior knowledge of the target system; white box tests involve full knowledge, including source code, architecture diagrams, and documentation.",
        "Black box tests are only used for web applications; white box tests are only used for network infrastructure.",
        "There is no significant difference."
      ],
      "correctAnswerIndex": 1,
      "explanation": "The key distinction is the level of prior knowledge provided to the testers. Black box = no knowledge; white box = full knowledge. The location (remote/on-site) and target type (web app/network) can vary.",
      "examTip": "Black box = No prior knowledge; White box = Full knowledge."
    },
        {
            "id": 26,
            "question": "Analyze the following snippet from a web application's source code (PHP):\n```php\n$username = $_POST['username'];\n$password = $_POST['password'];\n$query = \"SELECT * FROM users WHERE username='$username' AND password='$password'\";\n$result = mysqli_query($conn, $query);\n```\nWhat is the MAJOR security vulnerability present in this code?",
            "options":[
               "Cross-site scripting (XSS)",
               "SQL injection (SQLi)",
               "Cross-site request forgery (CSRF)",
               "Lack of HTTPS"
            ],
            "correctAnswerIndex": 1,
            "explanation":"The code is vulnerable to SQL injection because it directly incorporates user-supplied data (`$_POST['username']` and `$_POST['password']`) into the SQL query without any sanitization or parameterization. An attacker could manipulate these values to inject malicious SQL code.  While lack of HTTPS is a concern, it's not the *primary* vulnerability in this snippet.  XSS and CSRF are different attack types.",
            "examTip": "Directly embedding user input in SQL queries = SQL injection risk."
        },
        {
          "id": 27,
          "question":"What is the purpose of 'fuzzing'?",
          "options":[
             "To encrypt data transmitted over a network.",
             "To provide invalid, unexpected, or random data as input to a program to identify vulnerabilities and potential crashes.",
             "To crack user passwords.",
             "To manage user accounts and permissions."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Fuzzing is a software testing technique that aims to find bugs and vulnerabilities by feeding a program with 'bad' or unexpected data.  It's not encryption, password cracking, or user management.",
          "examTip": "Fuzzing = Testing with invalid/unexpected input to find bugs."
        },
        {
            "id": 28,
            "question": "Which of the following is a common technique for evading network intrusion detection systems (NIDS) and intrusion prevention systems (IPS)?",
            "options":[
                "Using well-known attack signatures.",
                "Packet fragmentation, obfuscation, encryption, or using non-standard ports.",
                "Sending very large, unfragmented packets.",
                "Using default NIDS/IPS settings."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Fragmentation breaks up attack traffic into smaller pieces, obfuscation disguises the traffic, encryption hides the content, and non-standard ports might bypass rules based on common port assignments. Using known signatures, large unfragmented packets, and default settings are all likely to *trigger* the NIDS/IPS.",
            "examTip": "Fragmentation, obfuscation, encryption, non-standard ports = Evasion techniques."
        },
        {
            "id": 29,
            "question":"What is a common method for an attacker to gain a 'reverse shell' from a compromised system?",
            "options":[
              "Using the `ls` command.",
              "Using tools like Netcat, Socat, or scripting languages (Python, Perl, etc.) to initiate a connection *from* the target system *back* to the attacker's machine.",
              "Using the `cd` command.",
              "Using the `mkdir` command."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A reverse shell involves the *target* connecting *back* to the attacker, often to bypass firewall restrictions.  Netcat, Socat, and scripting languages are common tools for achieving this. `ls`, `cd`, and `mkdir` are standard Linux commands, not for establishing reverse shells.",
            "examTip": "Reverse shell = Target connects *back* to attacker."
        },
       {
        "id": 30,
        "question": "You have compromised a Linux system. Which of the following commands is MOST likely to reveal information about the system's network interfaces and their configurations?",
        "options":[
          "ps aux",
          "ifconfig -a (or ip addr show)",
          "cat /etc/passwd",
          "ls -l /"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`ifconfig -a` (or the more modern `ip addr show`) displays detailed information about all network interfaces, including IP addresses, MAC addresses, and status. `ps aux` shows running processes, `cat /etc/passwd` shows user accounts, and `ls -l /` lists files in the root directory.",
        "examTip": "`ifconfig` or `ip addr` = Network interface information (Linux)."
       },
       {
        "id": 31,
        "question": "What is the main purpose of using 'synchronizer tokens' (anti-CSRF tokens) in web applications?",
        "options":[
            "To encrypt user passwords.",
            "To prevent cross-site request forgery (CSRF) attacks by verifying that user-initiated requests originated from the legitimate application.",
            "To make web pages load faster.",
            "To improve the visual design of a website."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Anti-CSRF tokens are unique, unpredictable values included in requests to ensure they came from the application itself, not an attacker. They are not for password encryption, performance improvement, or visual design.",
        "examTip": "Synchronizer tokens (anti-CSRF tokens) = Prevent CSRF."
       },
        {
           "id": 32,
            "question": "What is the primary difference between 'vulnerability scanning' and 'penetration testing'?",
            "options":[
                "Vulnerability scanning is always performed manually; penetration testing is always performed using automated tools.",
                "Vulnerability scanning identifies potential security weaknesses; penetration testing attempts to *exploit* those weaknesses to demonstrate the impact and risk.",
                "Vulnerability scanning is only used for external networks; penetration testing is only used for internal networks.",
                "There is no significant difference between the two."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Vulnerability scanning is primarily about *finding* potential vulnerabilities, often using automated tools. Penetration testing goes further, actively *trying* to exploit those vulnerabilities to assess the real-world risk. Both can involve manual and automated techniques, and can be applied to internal and external systems.",
            "examTip": "Vulnerability scan = Find weaknesses; Penetration test = Exploit weaknesses (ethically)."
        },
        {
            "id": 33,
             "question": "Which of the following is a common technique used in 'spear phishing' attacks?",
             "options":[
                "Sending generic emails to a large, undifferentiated group of recipients.",
                "Targeting specific individuals or organizations with carefully crafted, personalized emails that often leverage information gathered through reconnaissance.",
                "Exploiting vulnerabilities in web server software.",
                "Scanning a network for open ports."
             ],
             "correctAnswerIndex": 1,
             "explanation":"Spear phishing is highly targeted and personalized, often using information gathered about the specific victim to make the attack more believable. Generic emails are mass phishing. Web server exploits and port scanning are different attack types.",
             "examTip": "Spear phishing = Targeted and personalized phishing attacks."
        },
        {
            "id": 34,
            "question": "You are reviewing the configuration of an Apache web server. Which directive within the `httpd.conf` or `.htaccess` file is MOST directly related to preventing directory listing?",
            "options":[
                "ServerSignature Off",
                "Options -Indexes",
                "AllowOverride None",
                "Require all granted"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `Options -Indexes` directive disables directory listing, preventing the web server from displaying a list of files if a directory is requested without a default index file (e.g., index.html). `ServerSignature Off` hides server information. `AllowOverride None` restricts the use of `.htaccess` files. `Require all granted` (in Apache 2.4) allows access.",
            "examTip": "`Options -Indexes` = Disable directory listing (Apache)."
        },
         {
            "id": 35,
            "question": "What is the primary goal of 'post-exploitation' activities during a penetration test?",
            "options":[
                "To gather information about the target system *before* compromising it.",
                "To maintain access to the compromised system, escalate privileges, move laterally within the network, and achieve the attacker's objectives (e.g., data exfiltration).",
                "To write a report about the penetration test findings.",
                "To plan the penetration test engagement."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Post-exploitation occurs *after* initial access has been gained. It focuses on expanding control, maintaining persistence, and achieving the attacker's goals (within the ethical boundaries of the penetration test). Information gathering (reconnaissance) and planning happen earlier, and report writing is a separate phase.",
            "examTip": "Post-exploitation = Actions *after* initial compromise."
        },
        {
          "id": 36,
          "question":"What is 'session riding' another term for?",
          "options":[
            "Cross-Site Scripting (XSS)",
            "Cross-Site Request Forgery (CSRF)",
            "SQL Injection",
            "Denial of Service"
          ],
          "correctAnswerIndex": 1,
          "explanation": "Session riding is a synonym for Cross-Site Request Forgery (CSRF). Both terms refer to the same type of attack.",
          "examTip": "Session riding = CSRF"
        },
        {
            "id": 37,
            "question": "Which of the following is a common tool used for performing brute-force attacks against online services?",
            "options":[
                "Nmap",
                "Hydra",
                "Wireshark",
                "Metasploit"
            ],
            "correctAnswerIndex": 1,
            "explanation": "Hydra is specifically designed for online brute-force attacks against various protocols and services (e.g., SSH, FTP, HTTP forms). Nmap is primarily a port scanner, Wireshark is a packet analyzer, and Metasploit is a broader exploitation framework.",
            "examTip": "Hydra = Online brute-force attacks."
        },
        {
            "id": 38,
            "question": "You are analyzing a compromised web server and discover a file named `shell.php` in the web root directory.  The file contains PHP code that allows for executing arbitrary system commands. What type of attack MOST likely led to the presence of this file?",
            "options":[
               "Cross-Site Scripting (XSS)",
               "Unrestricted File Upload leading to Remote Code Execution (RCE)",
               "SQL Injection (SQLi)",
               "Denial-of-Service (DoS)"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The presence of a web shell (`shell.php`) strongly suggests a successful file upload vulnerability that allowed the attacker to upload and execute arbitrary code on the server. This is a classic example of Remote Code Execution (RCE). XSS involves injecting client-side scripts, SQLi targets databases, and DoS disrupts service.",
            "examTip": "Web shell (e.g., shell.php) = Remote Code Execution (RCE)."
        },
        {
            "id": 39,
            "question": "What is the primary purpose of using a 'honeypot' in network security?",
            "options":[
              "To store highly sensitive data.",
              "To act as a decoy system, designed to attract and detect attackers, providing early warning of attacks and insights into their methods.",
              "To encrypt network traffic.",
              "To manage user accounts and permissions."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A honeypot is a deliberately vulnerable system designed to lure attackers and study their behavior. It's not for storing sensitive data, encrypting traffic, or managing user accounts.",
            "examTip": "Honeypot = Decoy system to attract and study attackers."
        },
        {
          "id": 40,
            "question": "Examine the following `iptables` command:\n```bash\niptables -A INPUT -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A INPUT -p tcp --dport 80 -j DROP\n```\nWhat is the purpose of these rules?",
            "options":[
              "To block all incoming traffic on port 80.",
              "To allow only new and established incoming TCP connections on port 80, and block all other traffic on that port.",
              "To allow all incoming traffic on port 80.",
              "To block all outgoing traffic on port 80."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The first rule allows (`-j ACCEPT`) new (`NEW`) and established (`ESTABLISHED`) incoming (`INPUT`) TCP (`-p tcp`) connections on port 80 (`--dport 80`). The second rule then drops (`-j DROP`) *any other* incoming TCP traffic on port 80. This is a common way to allow legitimate web traffic while blocking connection attempts that aren't part of an established session. The `-m state` module is crucial for tracking connection states.",
            "examTip": "`iptables` stateful firewall = Track connection states (NEW, ESTABLISHED)."
        },
        {
            "id": 41,
            "question":"Which of the following is a common technique used to discover hidden parameters or functionality in web applications?",
            "options":[
                "Shoulder surfing",
                "Parameter tampering, using tools like Burp Suite's Intruder or manual analysis of requests and responses.",
                "Phishing",
                "Social Engineering"
            ],
            "correctAnswerIndex": 1,
            "explanation":"Parameter tampering involves modifying parameters in HTTP requests (e.g., in URLs, POST data) to see if the application behaves unexpectedly, revealing hidden functionality or vulnerabilities. Tools like Burp Suite's Intruder can automate this process. Shoulder surfing, phishing, and social engineering are different techniques.",
            "examTip": "Parameter tampering = Finding hidden web app functionality."
        },
        {
            "id": 42,
             "question": "What is 'credential stuffing'?",
             "options":[
                "A type of social engineering attack.",
                "Using stolen username/password pairs from one service or breach to try and gain access to other accounts belonging to the same user, exploiting password reuse.",
                "A method for encrypting user credentials.",
                "A technique for creating strong, unique passwords."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Credential stuffing leverages the common (but insecure) practice of password reuse across multiple websites and services. It's not inherently a social engineering attack (though it might use data obtained through social engineering), an encryption method, or a strong password technique.",
             "examTip": "Credential stuffing = Using stolen credentials on multiple sites."
        },
        {
            "id": 43,
            "question": "Which of the following Linux commands would be MOST useful for searching for a specific string within multiple files?",
            "options":[
               "ls -l",
               "grep -r \"search_string\" /path/to/search",
               "find / -name \"filename\"",
               "cat filename"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `grep` command is designed for searching text within files. The `-r` option makes it recursive (searching through subdirectories). `ls -l` lists files, `find` locates files based on name or other attributes, and `cat` displays file contents.",
            "examTip": "`grep` = Search for text within files (Linux)."
        },
        {
            "id": 44,
            "question": "What is the primary purpose of 'input validation' in web application security?",
            "options":[
               "To make web pages load faster.",
               "To check and sanitize user-supplied data to prevent injection attacks (like SQL injection and cross-site scripting) and other vulnerabilities.",
               "To encrypt user passwords before storing them in a database.",
               "To improve the visual design and user interface of a website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Input validation is a critical defense against injection attacks. It ensures that user-provided data conforms to expected formats and doesn't contain malicious code. It's not primarily about website speed, password encryption (which is a separate process), or visual design.",
            "examTip": "Input validation = Preventing injection attacks by sanitizing user input."
        },
        {
            "id": 45,
            "question": "What is 'VLAN hopping'?",
            "options":[
                "A type of social engineering attack.",
                "A method for gaining unauthorized access to different VLANs on a network, often by exploiting misconfigured switches or using double-tagged 802.1Q frames.",
                "A way to encrypt network traffic.",
                "A technique for cracking passwords."
            ],
            "correctAnswerIndex": 1,
            "explanation": "VLAN hopping exploits weaknesses in VLAN configurations to jump between VLANs, bypassing network segmentation. It's not a social engineering attack, encryption method, or password cracking technique.",
            "examTip": "VLAN hopping = Bypassing VLAN segmentation."
        },
         {
            "id": 46,
            "question": "You are performing a penetration test and successfully compromise a Windows system. You want to extract password hashes from the system. Which tool is MOST commonly used for this purpose?",
            "options":[
                "Nmap",
                "Wireshark",
                "Mimikatz",
                "Burp Suite"
            ],
            "correctAnswerIndex": 2,
            "explanation": "Mimikatz is a powerful post-exploitation tool for Windows that can extract plaintext passwords, hashes, PIN codes, and Kerberos tickets from memory. Nmap is a port scanner, Wireshark is a packet analyzer, and Burp Suite is for web application testing.",
            "examTip": "Mimikatz = Extracting credentials from Windows systems."
        },
        {
            "id": 47,
             "question": "Which of the following is a common technique used by attackers to maintain persistence on a compromised Linux system?",
             "options":[
               "Using strong passwords.",
               "Adding a user to the `/etc/sudoers` file, modifying system startup scripts (e.g., in `/etc/init.d/` or systemd units), or creating a cron job.",
               "Enabling a firewall.",
               "Updating the operating system regularly."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Modifying system startup scripts, creating cron jobs (scheduled tasks), or adding a user with `sudo` privileges are all ways to ensure that attacker-controlled code runs automatically, even after reboots. Strong passwords, firewalls, and updates are *defensive* measures.",
             "examTip": "Startup scripts, cron jobs, sudoers = Persistence on Linux."
        },
        {
            "id": 48,
            "question": "What is a common technique used to enumerate active hosts on a network?",
            "options":[
                "Social engineering.",
                "Performing a ping sweep or using Nmap's host discovery features.",
                "Phishing.",
                "Shoulder surfing."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A ping sweep sends ICMP echo requests to a range of IP addresses to see which ones respond, indicating active hosts. Nmap also has more advanced host discovery options. Social engineering, phishing, and shoulder surfing are different reconnaissance or attack techniques.",
            "examTip": "Ping sweep and Nmap host discovery = Finding active hosts."
        },
        {
             "id": 49,
            "question": "Examine the following Burp Suite Repeater request:\n```\nPOST /transfer.php HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 58\n\nfrom_account=123&to_account=456&amount=100&csrf_token=abcdefg\n```\nAnd a modified request:\n```\nPOST /transfer.php HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 58\n\nfrom_account=123&to_account=789&amount=10000&csrf_token=abcdefg\n```\nWhat is the attacker MOST likely attempting to do by modifying this request?",
             "options":[
                 "Perform a cross-site scripting (XSS) attack.",
                 "Perform a cross-site request forgery (CSRF) attack.",
                 "Perform a denial-of-service (DoS) attack.",
                 "Perform a parameter tampering attack, attempting to transfer a larger amount to a different account."
             ],
             "correctAnswerIndex": 3,
             "explanation": "The attacker has changed the `to_account` and `amount` parameters, while keeping the original `csrf_token`. This strongly suggests an attempt to bypass application logic and perform an unauthorized transfer. If the `csrf_token` was valid, the attack might succeed. This is parameter tampering, a broad category that encompasses many attacks. XSS involves injecting scripts, CSRF involves making requests *without* modifying valid tokens (usually), and DoS disrupts service.",
             "examTip": "Modifying parameters in requests = Parameter tampering."
        },
        {
            "id": 50,
            "question": "What is the primary purpose of 'threat modeling'?",
            "options":[
              "To exploit vulnerabilities in a system.",
              "To identify, analyze, and prioritize potential security threats and vulnerabilities *before* they can be exploited, allowing for proactive mitigation.",
              "To write a detailed report about a penetration test.",
              "To install security software on a system."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Threat modeling is a proactive security analysis process, aiming to identify and address potential weaknesses *early* in the development lifecycle or system deployment. Exploitation is part of penetration testing, reporting is a separate phase, and software installation is a different task.",
            "examTip": "Threat modeling = Proactive security analysis."
        },
        {
           "id": 51,
           "question": "Which of the following is a common technique used for performing 'SQL injection' attacks?",
           "options":[
              "Sending phishing emails to users.",
              "Injecting malicious SQL code into input fields of a web application that are not properly sanitized.",
              "Scanning a network for open ports.",
              "Cracking passwords using a dictionary attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "SQL injection specifically targets vulnerabilities in how web applications handle user input in database queries.  Phishing is a social engineering technique, port scanning is reconnaissance, and dictionary attacks target passwords.",
           "examTip": "SQL injection = Injecting malicious SQL code."
        },
        {
            "id": 52,
            "question": "What is the primary purpose of performing 'reconnaissance' (information gathering) in a penetration test?",
            "options":[
                "To exploit vulnerabilities in the target system.",
                "To gather as much information as possible about the target system, network, and organization, in order to identify potential attack vectors and vulnerabilities.",
                "To write a detailed report about the penetration test.",
                "To install security patches on the target system."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Reconnaissance is the crucial first phase, providing the foundation for subsequent attack planning and execution. It's not about exploiting vulnerabilities directly (that comes later), writing reports, or patching systems.",
            "examTip": "Reconnaissance = Information gathering."
        },
        {
            "id": 53,
            "question": "Which of the following Linux commands is MOST useful for viewing the end of a large log file?",
            "options":[
               "cat",
               "head",
               "tail",
               "grep"
            ],
            "correctAnswerIndex": 2,
            "explanation": "The `tail` command displays the last few lines of a file (by default, the last 10). This is very useful for monitoring logs in real-time or quickly checking recent entries. `cat` displays the entire file, `head` shows the beginning, and `grep` searches for specific patterns.",
            "examTip": "`tail` = View the end of a file (Linux)."
        },
        {
            "id": 54,
            "question": "What is the primary purpose of a 'Web Application Firewall' (WAF)?",
            "options":[
                "To encrypt data stored on a web server.",
                "To filter, monitor, and block malicious HTTP/HTTPS traffic to and from a web application, protecting against common web attacks.",
                "To manage user accounts and permissions on a web server.",
                "To improve the performance and speed of a website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A WAF acts as a security guard for web applications, analyzing traffic and blocking attacks like SQL injection, XSS, and others. While some WAFs may handle SSL/TLS termination, their primary function is not encryption. User management and performance optimization are separate concerns.",
            "examTip": "WAF = Web application protection (traffic filtering)."
        },
        {
             "id": 55,
            "question": "Which of the following is a common technique for evading signature-based intrusion detection systems (IDS)?",
            "options":[
              "Using well-known attack signatures.",
              "Using techniques like packet fragmentation, obfuscation, or encryption to alter the appearance of the attack traffic.",
              "Sending very large, unfragmented packets.",
              "Using default IDS settings."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Signature-based IDS relies on recognizing known patterns (signatures) of malicious activity. Altering the appearance of the attack traffic through fragmentation, obfuscation, or encryption can help bypass these signatures. Using known signatures will trigger the IDS, large unfragmented packets are easier to analyze, and default settings might not be tuned for evasion.",
            "examTip": "Fragmentation, obfuscation, encryption = IDS evasion techniques."
        },
        {
           "id": 56,
           "question":"What is a common method for performing a 'man-in-the-middle' (MitM) attack on a wireless network?",
           "options":[
               "SQL injection",
               "Creating a rogue access point (evil twin) that mimics a legitimate network, tricking users into connecting to it.",
               "Cross-site scripting",
               "Phishing"
           ],
           "correctAnswerIndex": 1,
           "explanation":"An evil twin attack involves setting up a fake Wi-Fi access point with the same SSID as a legitimate network. Users unknowingly connect to the attacker's AP, allowing the attacker to intercept their traffic. SQL injection targets databases, XSS targets web applications, and phishing uses deception.",
           "examTip": "Evil twin = Rogue AP for MitM on Wi-Fi."
        },
        {
           "id": 57,
            "question": "You have gained access to a Windows system. Which of the following commands would be MOST useful for listing the currently running processes?",
            "options":[
               "ipconfig",
               "tasklist",
               "netstat",
               "ping"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `tasklist` command displays a list of running processes on a Windows system, similar to `ps` on Linux. `ipconfig` shows network interface configuration, `netstat` shows network connections, and `ping` tests network connectivity.",
            "examTip": "`tasklist` = Show running processes (Windows)."
        },
        {
           "id": 58,
           "question": "What is a common technique for discovering hidden files and directories on a web server during the reconnaissance phase?",
           "options":[
              "Shoulder surfing.",
              "Using tools like DirBuster, Gobuster, or performing directory brute-forcing/dictionary attacks, and checking for files referenced in source code or JavaScript.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Directory brute-forcing/dictionary attacks, and analyzing source code for references, are common ways to find unlinked or hidden web content. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Directory brute-forcing, source code analysis = Finding hidden web content."
        },
        {
          "id": 59,
          "question": "Which of the following is the MOST important step to take *before* conducting any penetration testing activities?",
          "options":[
            "Gathering all available hacking tools.",
            "Obtaining written authorization (scope of work, rules of engagement) from the client, clearly defining the scope and boundaries of the test.",
            "Identifying all potential vulnerabilities in the target system.",
            "Developing a detailed attack plan."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Without written authorization, any testing is illegal and unethical, regardless of tools, vulnerabilities, or planning. The authorization defines the legal and ethical framework for the engagement.",
          "examTip": "Written authorization = Mandatory before *any* penetration testing."
        },
        {
          "id": 60,
           "question": "Analyze the following snippet of a bash script:\n```bash\nfor port in $(seq 1 1024); do\n  nc -z -v 192.168.1.100 $port 2>&1 | grep succeeded & \ndone\nwait\n```\nWhat is the primary purpose of this script?",
           "options":[
             "To encrypt network traffic to 192.168.1.100.",
             "To perform a basic port scan of ports 1-1024 on 192.168.1.100 using Netcat.",
             "To install software on 192.168.1.100.",
             "To crack passwords on 192.168.1.100."
           ],
           "correctAnswerIndex": 1,
           "explanation": "This script uses Netcat (`nc`) in a loop to check for open ports on the target IP address. `-z` tells Netcat to just scan for listening daemons, without sending any data. `-v` provides verbose output. The script checks ports 1 to 1024.  `2>&1` redirects standard error to standard output, and `grep succeeded` filters the output. The `&` runs each check in the background, and `wait` waits for all to complete. It's a basic port scan, not encryption, software installation, or password cracking.",
           "examTip": "Netcat can be used for basic port scanning."
        },
         {
            "id": 61,
            "question": "What is 'OSINT' (Open-Source Intelligence)?",
            "options":[
              "A type of operating system.",
              "The practice of gathering information from publicly available sources, such as websites, social media, and public records.",
              "A method for encrypting data.",
              "A type of network attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "OSINT is about collecting information legally from publicly available sources.  It's not an operating system, encryption method, or network attack.",
            "examTip": "OSINT = Gathering publicly available information."
        },
        {
             "id": 62,
             "question": "Which of the following is a common technique used to bypass a Network Intrusion Detection System (NIDS)?",
             "options":[
                "Using default NIDS settings.",
                "Packet fragmentation, obfuscation (e.g., encoding, Unicode variations), or using encryption.",
                "Sending very large, unfragmented packets.",
                "Using well-known attack signatures."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Fragmentation breaks up attack traffic, obfuscation disguises it, and encryption hides its content, all making it harder for signature-based NIDS to detect malicious activity. Default settings, large unfragmented packets, and known signatures would likely *trigger* the NIDS.",
             "examTip": "Fragmentation, obfuscation, encryption = NIDS evasion techniques."
        },
        {
            "id": 63,
             "question":"What is 'cross-site scripting' (XSS)?",
             "options":[
                "A type of denial-of-service attack.",
                "An attack that involves injecting malicious scripts into trusted websites, which are then executed by other users' browsers.",
                "A method for encrypting web traffic.",
                "A type of password cracking technique."
             ],
             "correctAnswerIndex": 1,
             "explanation": "XSS exploits vulnerabilities in web applications to inject malicious client-side scripts. It's not a DoS attack, encryption method, or password cracking technique.",
             "examTip": "XSS = Injecting malicious scripts into websites."

        },
        {
            "id": 64,
            "question": "What is the main purpose of a 'penetration testing report'?",
            "options":[
              "To list all the usernames and passwords discovered during the test.",
              "To document the findings, risks, and recommendations for remediation, providing the client with a clear understanding of their security posture and actionable steps to improve it.",
              "To provide a step-by-step guide on how to hack the target system.",
              "To list all the software installed on the target systems."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The penetration testing report is the key deliverable, summarizing the vulnerabilities, their impact, and how to fix them. It should *not* include raw credentials or provide a hacking guide. It's not a software inventory.",
            "examTip": "Penetration testing report = Findings, risks, recommendations."
        },
        {
             "id": 65,
            "question": "Which of the following is a common tool used for web application vulnerability scanning?",
            "options":[
               "Nmap",
               "Burp Suite, OWASP ZAP, Nikto",
               "Wireshark",
               "Metasploit"
            ],
            "correctAnswerIndex": 1,
            "explanation": "Burp Suite, OWASP ZAP, and Nikto are specifically designed for identifying vulnerabilities in web applications. Nmap is a port scanner, Wireshark is a packet analyzer, and Metasploit is an exploitation framework.",
            "examTip": "Burp Suite, OWASP ZAP, Nikto = Web application vulnerability scanners."
        },
        {
            "id": 66,
             "question": "What is the primary purpose of 'data exfiltration' in a cyber attack?",
             "options":[
                "To gain initial access to a target system.",
                "To steal sensitive data from a compromised system and transfer it to a location under the attacker's control.",
                "To escalate privileges on a compromised system.",
                "To disrupt the availability of a network service."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Data exfiltration is the unauthorized removal of data, often the ultimate goal of an attacker after gaining access and escalating privileges. Gaining initial access and escalating privileges are earlier stages, and disrupting availability is a different type of attack (DoS).",
             "examTip": "Data exfiltration = Stealing data."
        },
         {
          "id": 67,
          "question": "You are performing a penetration test and discover a web server running an outdated version of Apache with a known vulnerability. According to ethical hacking principles, what should you do NEXT?",
          "options":[
            "Immediately attempt to exploit the vulnerability to demonstrate the risk.",
            "Report the finding to the client's designated contact, following the agreed-upon communication plan, and discuss the next steps (e.g., whether to attempt exploitation).",
            "Attempt to escalate privileges on the server.",
            "Continue scanning for other vulnerabilities before reporting anything."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Ethical hacking requires clear communication and authorization. Reporting the finding promptly allows the client to make informed decisions about how to proceed (including whether to authorize further exploitation for demonstration purposes). Exploiting without explicit permission, escalating privileges, or delaying the report are all unethical.",
          "examTip": "Report critical findings promptly and follow the communication plan."
        },
        {
            "id": 68,
            "question":"What is a common technique for bypassing a network firewall?",
            "options":[
                "Using strong passwords.",
                "Tunneling malicious traffic through commonly allowed ports (e.g., port 80, 443) or using protocols that are typically permitted (e.g., DNS tunneling).",
                "Enabling two-factor authentication.",
                "Regularly updating software."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Tunneling involves encapsulating malicious traffic within legitimate-looking traffic that is allowed through the firewall.  Strong passwords, 2FA, and updates are good security practices, but don't directly address firewall bypass.",
            "examTip": "Tunneling = Bypassing firewalls by disguising traffic."
        },
        {
            "id": 69,
            "question": "Which of the following is a common method for performing a 'man-in-the-middle' (MitM) attack?",
            "options":[
              "SQL Injection",
              "ARP poisoning (for wired networks) or creating a rogue access point (for wireless networks).",
              "Cross-Site Scripting",
              "Phishing"
            ],
            "correctAnswerIndex": 1,
            "explanation": "ARP poisoning manipulates the Address Resolution Protocol to redirect network traffic on wired networks. Creating a rogue access point (evil twin) achieves the same goal on wireless networks. SQL injection targets databases, XSS targets web applications, and phishing uses deception.",
            "examTip": "ARP poisoning (wired) and rogue APs (wireless) = MitM techniques."
        },
        {
           "id": 70,
            "question": "Examine the following Nmap command: `nmap -sU -p 53 192.168.1.1`\nWhat is this command doing?",
            "options":[
              "Performing a TCP SYN scan on port 53.",
              "Performing a UDP scan on port 53.",
              "Performing a TCP connect scan on port 53.",
              "Performing a ping sweep."
            ],
            "correctAnswerIndex": 1,
            "explanation": "`nmap -sU` specifies a UDP scan. `-p 53` targets port 53 (commonly used for DNS). It's not a TCP SYN scan (-sS), a TCP connect scan (-sT), or a ping sweep.",
            "examTip": "`nmap -sU` = UDP scan."
        },
         {
            "id": 71,
            "question":"Which of the following is a common use case for the tool 'Metasploit'?",
            "options":[
              "Scanning a network for open ports.",
              "Developing and executing exploit code against a target system, often after vulnerabilities have been identified.",
              "Analyzing network traffic to capture passwords.",
              "Performing web application vulnerability scanning."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Metasploit is a powerful exploitation framework, providing a library of exploits and tools for penetration testing. While it *can* be used in conjunction with scanners, its primary purpose is exploitation.  Nmap is better for port scanning, Wireshark is for traffic analysis, and Burp Suite/OWASP ZAP are for web app scanning.",
            "examTip":"Metasploit = Exploitation framework."
        },
        {
            "id": 72,
            "question":"What is the primary purpose of using 'nonces' in security protocols?",
            "options":[
              "To encrypt data transmitted over a network.",
              "To prevent replay attacks by ensuring that each message or request is unique.",
              "To crack passwords using a brute-force attack.",
              "To scan a network for open ports."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Nonces (numbers used once) add uniqueness to cryptographic operations and authentication processes, making it impossible for an attacker to simply replay a captured message or request and have it succeed. They are not primarily for encryption, password cracking, or port scanning.",
            "examTip": "Nonce = Number used once to prevent replay attacks."
        },
        {
           "id": 73,
           "question": "What is the primary goal of a 'penetration test'?",
           "options":[
               "To install security software on a target system.",
                "To simulate a real-world attack against a system or network to identify security weaknesses and assess the organization's overall security posture.",
                "To write a report about security best practices.",
                "To train employees on how to use security software."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Penetration testing is about actively *testing* security defenses by simulating attacks.  It's not about installing software, writing general best practices reports, or providing training (though those can be related activities).",
           "examTip": "Penetration testing = Simulating attacks to test security."
        },
        {
           "id": 74,
            "question":"Which Linux command is used to view the end of a file, and is often used for monitoring log files in real-time?",
            "options":[
                "cat",
                "tail -f",
                "head",
                "grep"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `tail` command displays the last part of a file. The `-f` option ('follow') makes it continuously update as new lines are added to the file, making it ideal for monitoring logs. `cat` displays the entire file, `head` shows the beginning, and `grep` searches for patterns.",
            "examTip": "`tail -f` = View the end of a file and follow updates (Linux)."
        },
        {
            "id": 75,
             "question": "You discover a web application that allows you to upload files with any extension, including `.php`, `.asp`, and `.jsp`. What is the MOST significant security risk associated with this finding?",
             "options":[
                "Cross-site scripting (XSS)",
                "Remote Code Execution (RCE)",
                "SQL injection (SQLi)",
                "Denial-of-service (DoS)"
             ],
             "correctAnswerIndex": 1,
             "explanation": "Unrestricted file uploads that allow for the execution of server-side code (like PHP, ASP, JSP) lead to Remote Code Execution (RCE), a very critical vulnerability.  While XSS might be possible (if you can upload HTML/JavaScript), RCE is a much more direct and severe threat. SQLi and DoS are different attack types.",
             "examTip": "Unrestricted file upload + server-side code execution = RCE."
        },
        {
           "id": 76,
           "question": "Which of the following is a common technique for identifying vulnerabilities in web applications?",
           "options":[
              "Shoulder surfing.",
              "Using automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) and performing manual testing.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Automated scanners and manual testing are the primary methods for finding web application vulnerabilities. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Web application scanners + manual testing = Finding web vulnerabilities."
        },
        {
            "id": 77,
            "question": "What is the primary purpose of the 'reporting' phase of a penetration test?",
            "options":[
               "To exploit vulnerabilities in the target system.",
               "To communicate the findings, risks, and recommendations to the client in a clear, concise, and actionable manner.",
               "To gather information about the target system.",
               "To install security patches on the target system."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The reporting phase is about delivering the results of the penetration test in a way that the client can understand and use to improve their security. Exploitation and information gathering happen earlier, and patching is the client's responsibility (based on the report's recommendations).",
            "examTip": "Reporting = Communicating findings, risks, and recommendations."

        },
        {
          "id": 78,
          "question":"Which of the following is a common technique for performing a 'man-in-the-middle' (MitM) attack on a wired network?",
          "options":[
            "SQL injection",
            "ARP poisoning",
            "Cross-site scripting",
            "Phishing"
          ],
          "correctAnswerIndex": 1,
          "explanation":"ARP poisoning manipulates the Address Resolution Protocol to redirect network traffic through the attacker's machine, enabling interception of communication between two devices. SQL injection targets databases, XSS targets web applications, and phishing uses deception to trick users.",
          "examTip": "ARP poisoning = MitM on wired networks."
        },
        {
           "id": 79,
           "question": "What is 'business logic flaw' exploitation?",
           "options":[
              "Exploiting a buffer overflow vulnerability.",
              "Taking advantage of flaws in the design or implementation of an application's *intended* functionality and business rules, leading to unintended or malicious outcomes.",
              "Cracking user passwords.",
              "Performing a denial-of-service attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Business logic flaws are vulnerabilities that arise from mistakes in how the application is *supposed* to work, not necessarily traditional technical vulnerabilities like buffer overflows. They are specific to the application's intended purpose and rules. They don't directly involve password cracking or DoS attacks.",
           "examTip": "Business logic flaws = Exploiting mistakes in application design and rules."
        },
                {
            "id": 80,
             "question": "Analyze the following command:\n```bash\nnikto -h http://example.com\n```\nWhat is this command attempting to do?",
             "options":[
               "Perform a port scan of example.com.",
               "Perform a web server vulnerability scan of http://example.com using Nikto.",
               "Analyze network traffic to and from example.com.",
               "Crack passwords on example.com."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Nikto is a web server vulnerability scanner. The `-h` option specifies the target host. This command is initiating a scan of the web server at `http://example.com`. It's not a general port scan, traffic analysis, or password cracking.",
             "examTip": "Nikto = Web server vulnerability scanner."
        },
        {
            "id": 81,
            "question": "What is the purpose of using 'salted' password hashes?",
            "options":[
                "To make passwords longer and more complex.",
                "To add random data to the password *before* hashing, making each hash unique even for identical passwords and thwarting rainbow table attacks.",
                "To encrypt passwords using a secret key.",
                "To speed up the password hashing process."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Salting adds random data to the password *before* hashing. This makes pre-computed rainbow tables (which store hashes for common passwords) useless. While password length and complexity are important, salting addresses a different attack vector. It's not encryption (hashing is one-way). It *slows down* hashing, but the security benefit outweighs the performance cost.",
            "examTip": "Salt = Random data added before hashing to prevent rainbow table attacks."
        },
        {
            "id": 82,
            "question": "Which of the following is a common technique for gaining a 'reverse shell' from a compromised Linux system?",
            "options":[
               "Using the `ls` command.",
               "Using Netcat, Socat, or scripting languages like Python or Perl to create an outbound connection from the target back to the attacker's machine.",
               "Using the `cd` command.",
               "Using the `mkdir` command."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A reverse shell involves the *target* connecting *back* to the attacker, often to bypass firewall restrictions. Netcat, Socat, and scripting languages are frequently used to achieve this. `ls`, `cd`, and `mkdir` are standard Linux commands, not for establishing reverse shells.",
            "examTip": "Reverse shell = Target connects *back* to attacker (Netcat, Socat, Python)."
        },
        {
            "id": 83,
            "question": "You are performing a penetration test and discover a web application that allows you to upload files without proper validation. Which of the following file extensions, if successfully uploaded and executed, would pose the GREATEST security risk?",
            "options":[
                ".txt",
                ".jpg",
                ".php",
                ".html"
            ],
            "correctAnswerIndex": 2,
            "explanation": "`.php` files contain server-side PHP code. If the web server is configured to execute PHP files (which is common), uploading a malicious `.php` file allows for Remote Code Execution (RCE) – a very serious vulnerability. `.txt` files are plain text, `.jpg` files are images, and while `.html` files *can* contain client-side scripts (potentially leading to XSS), they don't directly allow server-side code execution.",
            "examTip": "Unrestricted file upload + server-side code execution (e.g., .php) = RCE."
        },
        {
            "id": 84,
             "question": "What is the primary difference between 'authentication' and 'authorization' in information security?",
             "options":[
                "Authentication determines what a user is allowed to access; authorization verifies the user's identity.",
                "Authentication verifies a user's identity; authorization determines what resources or actions that user is permitted to access or perform.",
                "Authentication is only used for web applications; authorization is only used for network devices.",
                "There is no significant difference."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Authentication is about proving *who* you are (e.g., with a username and password). Authorization is about determining *what* you are allowed to do *after* you've been authenticated. They are distinct but related security concepts.",
             "examTip": "Authentication = Who you are; Authorization = What you can do."
        },
        {
            "id": 85,
             "question":"Which of the following is a common technique used to prevent cross-site request forgery (CSRF) attacks?",
             "options":[
                "Using strong passwords.",
                "Using synchronizer tokens (anti-CSRF tokens) in web forms and requests.",
                "Enabling HTTPS.",
                "Regularly updating software."
             ],
             "correctAnswerIndex": 1,
             "explanation":"Synchronizer tokens (anti-CSRF tokens) are unique, unpredictable values that are included in requests and validated by the server. This ensures that the request originated from the legitimate application and not an attacker.  Strong passwords, HTTPS, and updates are good security practices, but they don't directly prevent CSRF.",
             "examTip": "Synchronizer tokens (anti-CSRF tokens) = Prevent CSRF."
        },
        {
            "id": 86,
            "question": "You are performing a penetration test and discover a web application that is vulnerable to SQL injection. Which of the following tools would be MOST useful for automating the exploitation of this vulnerability?",
            "options":[
               "Nmap",
               "sqlmap",
               "Wireshark",
               "John the Ripper"
            ],
            "correctAnswerIndex": 1,
            "explanation": "`sqlmap` is a powerful, automated tool specifically designed for detecting and exploiting SQL injection vulnerabilities. Nmap is a port scanner, Wireshark is a packet analyzer, and John the Ripper is a password cracker.",
            "examTip": "`sqlmap` = Automated SQL injection exploitation."
        },
        {
          "id": 87,
          "question": "What is the main purpose of the MITRE ATT&CK framework?",
          "options":[
            "To provide a list of all known software vulnerabilities.",
            "To document common tactics, techniques, and procedures (TTPs) used by adversaries, helping defenders understand and emulate real-world attacks.",
            "To provide legal advice for penetration testers.",
            "To create strong, unique passwords."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The MITRE ATT&CK framework is a knowledge base of adversary behavior, providing a common language and framework for understanding and defending against cyberattacks. It's not an exhaustive vulnerability list, legal advice, or a password creation tool.",
          "examTip": "MITRE ATT&CK = Adversary tactics, techniques, and procedures (TTPs)."
        },
        {
            "id": 88,
             "question": "Which of the following is a common method for an attacker to maintain persistence on a compromised Windows system?",
             "options":[
                "Regularly updating the operating system.",
                "Creating a scheduled task, modifying the registry (e.g., Run keys), or installing a malicious service.",
                "Using a strong, unique password for the administrator account.",
                "Enabling the Windows Firewall."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Scheduled tasks, registry modifications (especially Run keys), and malicious services are common persistence mechanisms, allowing attacker-controlled code to run automatically, even after reboots. Updating the OS, using strong passwords, and enabling the firewall are *defensive* measures.",
             "examTip": "Scheduled tasks, registry keys, services = Persistence on Windows."
        },
        {
           "id": 89,
            "question": "What is 'lateral movement' in the context of a penetration test?",
            "options":[
               "The initial compromise of a target system.",
               "Moving from one compromised system to another within the target network, often by leveraging trust relationships or exploiting vulnerabilities in other systems.",
               "Exfiltrating data from the target network.",
               "Escalating privileges on a single compromised system."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Lateral movement is about expanding access within the network *after* gaining an initial foothold. The initial compromise is the entry point. Data exfiltration is often a later goal, and privilege escalation is on a single system.",
            "examTip": "Lateral movement = Expanding access within the network."
        },
        {
          "id": 90,
          "question": "Examine the following log snippet from a web server:\n```\n192.168.1.100 - - [27/Aug/2024:11:30:00 -0400] \"GET /admin/login.php HTTP/1.1\" 200 1234 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n192.168.1.100 - - [27/Aug/2024:11:30:05 -0400] \"POST /admin/login.php HTTP/1.1\" 302 567 \"http://example.com/admin/login.php\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n192.168.1.100 - - [27/Aug/2024:11:30:06 -0400] \"GET /admin/index.php HTTP/1.1\" 200 4321 \"http://example.com/admin/login.php\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n```\nBased on this log, what likely happened?",
          "options":[
             "The user at 192.168.1.100 was unsuccessful in logging in.",
             "The user at 192.168.1.100 successfully logged in to the admin panel.",
             "The web server experienced a denial-of-service attack.",
             "The user at 192.168.1.100 was performing a SQL injection attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The sequence shows a GET request to `/admin/login.php` (likely displaying the login form), followed by a POST request to the same page (submitting credentials). The 302 status code on the POST request indicates a redirect (likely to the admin dashboard after successful login). Finally, a GET request to `/admin/index.php` with a 200 status code (success) suggests the user is now accessing the admin panel. This indicates a successful login. There's no evidence of a DoS or SQLi attack in this snippet.",
          "examTip": "HTTP status codes (200=OK, 302=Redirect) and request methods (GET, POST) are key to interpreting web server logs."
        },
        {
            "id": 91,
            "question":"What is the primary purpose of performing 'vulnerability scanning'?",
            "options":[
              "To manually test a system's security defenses.",
              "To automatically identify potential security weaknesses in a system or network, often using a database of known vulnerabilities.",
              "To exploit vulnerabilities and gain unauthorized access to a system.",
              "To write a report about a penetration test."
            ],
            "correctAnswerIndex": 1,
            "explanation":"Vulnerability scanning is an *automated* process for finding known vulnerabilities. Manual testing is a different approach. Exploiting vulnerabilities is part of penetration testing, and report writing is a subsequent step.",
            "examTip": "Vulnerability scanning = Automated weakness detection."
        },
        {
            "id": 92,
            "question": "Which of the following is a common technique used for 'password spraying' attacks?",
            "options":[
               "Trying a large number of passwords against a single user account.",
               "Trying a small number of common passwords against a large number of user accounts.",
               "Exploiting a vulnerability in a web application.",
               "Sending phishing emails to users."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Password spraying avoids account lockouts by trying a *few* common passwords (e.g., 'Password123', 'Summer2023') against *many* accounts, rather than many passwords against one account (brute-forcing). Exploiting vulnerabilities and phishing are different attack methods.",
            "examTip": "Password spraying = Few passwords, many accounts."
        },
         {
            "id": 93,
            "question": "What is the purpose of using 'hping3' in a penetration test?",
            "options":[
              "To scan for open ports on a target system.",
              "To craft and send custom network packets, allowing for detailed testing of firewalls, intrusion detection systems, and other network security controls.",
              "To analyze network traffic and capture passwords.",
              "To crack Wi-Fi passwords."
            ],
            "correctAnswerIndex": 1,
            "explanation": "`hping3` is a powerful packet crafting tool that allows for fine-grained control over packet contents and flags. While it *can* be used for some basic port scanning, Nmap is generally preferred for that. It's not primarily for traffic analysis (Wireshark) or Wi-Fi cracking (Aircrack-ng).",
            "examTip": "`hping3` = Crafting custom network packets for advanced testing."
        },
        {
           "id": 94,
           "question": "Which of the following is a common technique used to discover hidden files and directories on a web server?",
           "options":[
               "Shoulder surfing.",
              "Using tools like DirBuster, Gobuster, ffuf, or performing directory brute-forcing/dictionary attacks; also, checking for references in source code (HTML, JavaScript) and `robots.txt`.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Directory brute-forcing tools, along with analyzing source code and checking `robots.txt`, are common methods for finding unlinked or hidden web content. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Directory brute-forcing, source code analysis = Finding hidden web content."
        },
        {
          "id": 95,
          "question": "What is the main advantage of using a 'Web Application Firewall' (WAF)?",
          "options":[
            "It guarantees complete protection against all web application attacks.",
            "It filters, monitors, and blocks malicious HTTP/HTTPS traffic to and from a web application, providing a layer of defense against common attacks like SQL injection, XSS, and others.",
            "It automatically patches all vulnerabilities in a web application.",
            "It eliminates the need for secure coding practices."
          ],
          "correctAnswerIndex": 1,
          "explanation": "A WAF acts as a security guard for web applications, analyzing traffic and blocking known attack patterns. It doesn't guarantee *complete* protection, automatically patch vulnerabilities, or eliminate the need for secure coding (defense in depth is crucial).",
          "examTip": "WAF = Web application protection (traffic filtering)."
        },
        {
          "id": 96,
          "question": "What is 'clickjacking'?",
          "options":[
            "A type of denial-of-service attack.",
            "A technique where an attacker tricks a user into clicking something different from what the user perceives, often by using iframes or transparent layers on a web page.",
            "A method for encrypting data transmitted over a network.",
            "A type of social engineering attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Clickjacking is a UI-based attack, tricking users into clicking on something they don't intend to. It's not a DoS attack, encryption method, or a generic social engineering attack (though it could be used as *part* of one).",
          "examTip": "Clickjacking = Tricking users into clicking hidden elements."
        },
        {
            "id": 97,
            "question":"Which of the following is a common technique used to escalate privileges on a Linux system after gaining initial access?",
            "options":[
              "Phishing",
              "Exploiting vulnerabilities in SUID binaries, misconfigured services, or kernel vulnerabilities.",
              "Social engineering",
              "Shoulder surfing"
            ],
            "correctAnswerIndex": 1,
            "explanation": "SUID binaries (which run with the owner's privileges, often root), misconfigured services, and kernel vulnerabilities are common targets for privilege escalation on Linux. Phishing and social engineering are typically used for initial access, not privilege escalation. Shoulder surfing is an information-gathering technique.",
            "examTip":"SUID binaries, misconfigured services, kernel vulnerabilities = Linux privilege escalation."
        },
        {
          "id": 98,
          "question":"What is 'wardriving'?",
          "options":[
            "A type of social engineering attack.",
            "The act of driving around searching for and mapping Wi-Fi networks, often with the intent of identifying vulnerable or open networks.",
            "A method for encrypting data transmitted over a network.",
            "A type of denial-of-service attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Wardriving is a reconnaissance technique specifically focused on locating and assessing Wi-Fi networks. It's not inherently a social engineering attack, encryption method, or DoS attack.",
          "examTip": "Wardriving = Locating and mapping Wi-Fi networks."
        },
        {
           "id": 99,
           "question": "Which of the following Linux commands is used to display the current working directory?",
           "options":[
              "ls",
              "pwd",
              "cd",
              "mkdir"
           ],
           "correctAnswerIndex": 1,
           "explanation": "The `pwd` command (print working directory) shows the current directory you are in. `ls` lists files, `cd` changes directories, and `mkdir` creates directories.",
           "examTip": "`pwd` = Print working directory (Linux)."

        },
        {
        "id": 100,
        "question": "You are performing a penetration test and discover that a web server is revealing its version number in the `Server` HTTP response header.  Why is this a security concern?",
        "options":[
           "It makes the website load slower.",
           "It allows attackers to quickly identify potential vulnerabilities associated with that specific server version, making targeted attacks easier.",
           "It improves the website's search engine ranking.",
           "It is not a security concern."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Revealing the server version provides attackers with valuable information, allowing them to research known vulnerabilities specific to that version and potentially exploit them. It doesn't affect website speed or search engine ranking.  It *is* a security concern (information disclosure).",
        "examTip": "Revealing server version = Information disclosure, aids targeted attacks."
       }
  ]
}
