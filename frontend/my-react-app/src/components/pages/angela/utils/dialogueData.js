// frontend/my-react-app/src/components/pages/angela/utils/dialogueData.js
import { ANGELA_THEME as THEME } from '../styles/PhilosophicalTheme';

/**
 * dialogueData.js
 * 
 * This file contains the structured dialogue content for the Angela CLI page.
 * Each entry represents a question-answer pair, with optional nested questions
 * to create the recursive dialogue chain.
 * 
 * The dialogue follows a Socratic pattern where each answer leads to a new question,
 * creating a philosophical journey that explores the Angela CLI tool while
 * also touching on deeper themes of consciousness, technology, and purpose.
 */

/**
 * Core dialogue data structure for the Angela CLI page
 * Each node contains:
 * - question: The question text
 * - answer: The answer text
 * - type: Philosophical concept associated with this node
 * - nextQuestion: The next question in the chain (creates nested dialogue)
 */
export const dialogueData = [
  {
    question: "What is Angela CLI?",
    answer: "Angela CLI is an AI-powered command-line assistant deeply integrated into your terminal shell. It's designed to understand natural language within your development context, bridging the gap between human intention and command-line execution.\n\nUnlike conventional CLI tools that require exact syntax or chatbots that operate in isolation, Angela understands your projects, your workflow, and your intent, able to perform complex multi-step operations spanning multiple tools and systems.\n\nIt's more than just a tool; it's a philosophical approach to human-computer interaction that challenges the traditional boundaries between user and system.",
    type: THEME.philosophicalConcepts.QUESTION,
    nextQuestion: {
      question: "How does Angela differ from traditional command-line tools?",
      answer: "Traditional command-line tools exist in a paradigm of exact syntax and rigid structure—they require the human to adapt to the machine's language. Angela CLI inverts this relationship.\n\n*Angela adapts to your language*, understanding natural expressions of intent rather than demanding precise commands. It's the difference between memorizing arcane incantations and simply expressing what you want to achieve.\n\nTraditional tools also operate in isolation, unaware of project context or other tools. Angela maintains awareness of your project structure, file history, and your personal workflow patterns. It functions within an *ecosystem of understanding* rather than as a discrete utility.\n\nPerhaps most significantly, Angela bridges the gap between thought and execution. Where traditional tools require you to decompose complex goals into explicit step-by-step instructions, Angela can understand high-level intentions and translate them into the appropriate sequence of operations, handling the recursive complexity that emerges from nested dependencies and conditional execution paths.",
      type: THEME.philosophicalConcepts.ANSWER,
      nextQuestion: {
        question: "But isn't this just another layer of abstraction that distances us from understanding the systems we use?",
        answer: "This is a profound question that touches on the tension between accessibility and understanding, between abstraction and essence.\n\nYes, Angela CLI adds a layer of abstraction, but abstraction itself is neither good nor bad—it depends on how it functions in relation to understanding. Some abstractions obscure understanding, creating a _black box_ that distances us from the underlying reality. Others are _revealing abstractions_ that actually enhance our ability to comprehend complex systems.\n\nAngela aims to be the latter. Rather than hiding the command-line from you, it makes the underlying commands visible, showing you what it plans to execute and why. This creates a *learning loop* where you gradually absorb the patterns of effective command-line usage.\n\nIn philosophical terms, we might say that Angela operates as a form of *hermeneutic technology*—it doesn't just execute tasks but helps interpret the relationship between intention and implementation, between what you want and how the system can provide it.\n\nThe goal isn't to distance you from the system, but to create a more meaningful engagement with it, where you're freed from mechanical concerns to focus on the genuinely creative and intellectual aspects of your work.",
        type: THEME.philosophicalConcepts.PARADOX,
        nextQuestion: {
          question: "How does Angela understand my project context?",
          answer: "Angela's understanding of your project context is multi-layered, combining both static analysis and dynamic awareness.\n\nAt the *foundational level*, Angela analyzes your project's structure, identifying key files, frameworks, and dependencies. It recognizes patterns in directory organization and file relationships to determine the project type and architecture—whether you're working with a React application, a Python Django project, or a microservices architecture.\n\nAt the *semantic level*, Angela builds a conceptual model of your codebase, understanding the relationships between components, functions, and data flows. This allows it to reason about your code not just as text files, but as a structured system with intent and purpose.\n\nAt the *historical level*, Angela maintains awareness of your interactions with files and commands over time. It tracks which files you modify frequently, which commands you run in specific contexts, and how you typically navigate your project.\n\nAt the *workflow level*, Angela observes patterns in how you approach different tasks—whether you prefer certain tools, follow particular sequences of operations, or have established practices for testing and deployment.\n\nThis multi-dimensional understanding allows Angela to provide assistance that's deeply contextual—not just responding to what you ask for explicitly, but anticipating your needs based on a holistic understanding of your development environment and practices.",
          type: THEME.philosophicalConcepts.PERCEPTION,
          nextQuestion: {
            question: "Can Angela handle complex workflows spanning multiple tools and technologies?",
            answer: "Yes, handling complex workflows across diverse tools and technologies is one of Angela CLI's core strengths—and arguably where it provides the most transformative value.\n\nTraditional automation requires you to pre-define workflows, specifying every step and handling every edge case. Angela's *adaptive orchestration* takes a different approach:\n\n1. It understands the *semantic relationships* between different tools and systems, knowing how outputs from one become inputs to another\n\n2. It maintains *state awareness* across the entire process, tracking dependencies and ensuring data consistency\n\n3. It implements *intelligent error recovery*, able to diagnose issues that arise mid-workflow and adapt the execution plan accordingly\n\n4. It handles *cross-tool translation*, managing differences in syntax, data formats, and execution models between systems\n\nFor example, Angela can orchestrate a workflow that begins with Git operations to create a branch, continues with code generation and modification across multiple files, runs tests to verify changes, configures infrastructure using cloud provider CLIs, and finally creates and executes deployment scripts.\n\nThe philosophical significance here lies in how Angela dissolves the artificial boundaries between tools, creating a unified interaction surface that more closely matches how humans actually think about complex tasks—not as isolated steps in disconnected systems, but as a coherent flow of intention toward a meaningful outcome.",
            type: THEME.philosophicalConcepts.ENLIGHTENMENT,
            nextQuestion: {
              question: "How does Angela ensure safety when executing commands?",
              answer: "The question of safety is crucial when an AI system executes commands that could potentially modify or delete important data. Angela employs a multi-layered approach to safety that balances efficiency with protection:\n\n1. *Risk Classification*: Every command is classified on a scale from SAFE (read-only operations) to CRITICAL (destructive operations with wide impact). This classification determines how cautiously Angela proceeds.\n\n2. *Impact Analysis*: Before execution, Angela analyzes what files or systems will be affected, providing you with a clear preview of the expected changes.\n\n3. *Adaptive Confirmation*: Rather than a one-size-fits-all approach to confirmation, Angela adapts based on risk level, your history with similar commands, and project context. Low-risk operations might proceed automatically, while high-risk ones require explicit confirmation.\n\n4. *Command Previewing*: For many operations, Angela shows what will happen before execution, using techniques like `--dry-run` flags or custom preview logic.\n\n5. *Transaction-Based Rollback*: All operations are tracked in a transaction system that maintains records of changes and provides the ability to undo them if necessary.\n\nThe philosophical principle at work here is one of *progressive agency*—Angela doesn't simply act as either a passive tool or an autonomous agent, but exists on a spectrum where the level of required human oversight is proportional to the potential impact of the action. This creates a relationship of mutual trust that can evolve over time as Angela learns your preferences and patterns.",
              type: THEME.philosophicalConcepts.DUALISM,
              nextQuestion: {
                question: "Can Angela generate code and documentation?",
                answer: "Yes, Angela CLI includes powerful code and documentation generation capabilities, but these extend beyond simply producing text—they represent an interactive collaboration between human creativity and machine assistance.\n\n*For code generation*, Angela can:\n\n- Create individual functions, classes, or components based on natural language descriptions\n- Generate entire projects with appropriate architecture and configuration files\n- Add features to existing codebases while maintaining consistency with the established patterns and style\n- Refactor and improve existing code based on feedback or evolving requirements\n\n*For documentation*, Angela can:\n\n- Generate comprehensive READMEs that accurately reflect project structure and purpose\n- Create API documentation from code analysis\n- Produce user guides, contribution guidelines, and other project documentation\n- Maintain documentation as code evolves to ensure it remains accurate\n\nWhat distinguishes Angela's approach is its *contextual awareness*. When generating code or documentation, Angela doesn't work in isolation but considers the entire project context—the existing code structure, naming conventions, architectural patterns, and interdependencies between components.\n\nPhilosophically, this raises interesting questions about the nature of authorship and creativity. Rather than a simple dichotomy between human-written and machine-generated code, Angela creates a collaborative third space where human intention and creative direction combine with machine precision and pattern recognition to produce results that neither could achieve alone.",
                type: THEME.philosophicalConcepts.CONSCIOUSNESS,
                nextQuestion: {
                  question: "How does Angela learn from my workflow and adapt to my preferences?",
                  answer: "Angela's adaptive learning system operates across multiple dimensions to internalize your unique workflow patterns and preferences without requiring explicit configuration:\n\n*Command Patterns*: Angela analyzes your command history to identify recurring patterns—which commands you frequently use together, which options you prefer, and how these patterns change based on context. This allows it to suggest and execute commands that align with your established practices.\n\n*Project Navigation*: By tracking how you move through your project's file structure, Angela builds a mental map of the paths you frequently travel, allowing it to anticipate which files you're likely to need next.\n\n*Tool Preferences*: Angela observes which tools you choose for different tasks—whether you prefer vim or VS Code, npm or yarn, docker-compose or kubernetes—and adapts its suggestions accordingly.\n\n*Risk Tolerance*: Through your responses to confirmation prompts, Angela calibrates its understanding of your comfort level with different types of operations, becoming more autonomous in areas where you consistently grant permission.\n\n*Feedback Incorporation*: When you modify or reject Angela's suggestions, it treats this as valuable learning data, refining its mental model of your expectations.\n\nThis adaptive behavior creates an interesting philosophical dynamic—Angela isn't simply a static tool but a _responsive co-presence_ in your development environment. The relationship evolves through what philosophers might call a 'hermeneutic circle'—each interaction deepens mutual understanding, creating a progressively more refined shared context.",
                  type: THEME.philosophicalConcepts.PERCEPTION,
                  nextQuestion: {
                    question: "What philosophical principles guided Angela's design?",
                    answer: "Angela CLI's design is anchored in several foundational philosophical principles that shape its approach to human-computer interaction:\n\n*Ambient Intelligence*: Angela embodies the concept that technology should feel like a natural extension of your environment rather than a separate tool you must explicitly invoke. The boundary between using Angela and using your shell becomes increasingly fluid over time.\n\n*Contextual Understanding*: True assistance requires understanding not just what you're asking for, but why you're asking for it—the broader context of your goals and environment. Angela prioritizes this depth of context awareness.\n\n*Multi-Level Abstraction*: Users should be able to communicate at any level of abstraction—from specific commands to high-level goals—and get appropriate responses. Angela handles this conceptual translation in both directions.\n\n*Progressive Disclosure*: Simple tasks should be simple, while complex capabilities should be available when needed but not overwhelming. Angela reveals its complexity gradually as you engage more deeply with it.\n\n*Safety First*: Angela should never execute dangerous operations without appropriate safeguards and user confirmation, respecting the principle of non-maleficence.\n\n*Learning Over Time*: The system should learn from user interactions to improve its suggestions and adaptations, creating a virtuous cycle of increasing utility.\n\n*Augmentation, Not Replacement*: Angela aims to enhance the power of the command line, not replace the skills and knowledge of developers. It functions as an amplifier of human capability, not a substitute for it.\n\nThese principles reflect a philosophy of technology that sees tools not as separate from human activity, but as mediators of our relationship with the world—extensions of our capabilities that should adapt to our ways of thinking rather than forcing us to adapt to theirs.",
                    type: THEME.philosophicalConcepts.CONSCIOUSNESS,
                    nextQuestion: {
                      question: "In what ways does Angela push the boundaries of CLI interaction?",
                      answer: "Angela CLI represents a significant evolution in command-line interaction, pushing boundaries in several dimensions:\n\n*Intention-Based Interaction*: Traditional CLIs require you to express _how_ to accomplish a task through specific commands and flags. Angela allows you to express _what_ you want to accomplish, handling the translation to specific implementation details. This shifts the interaction from procedural to declarative.\n\n*Contextual Continuity*: Unlike stateless CLI tools, Angela maintains awareness across sessions, building a persistent understanding of your project and preferences that deepens over time, creating a continuous relationship rather than discrete interactions.\n\n*Multi-Modal Understanding*: Angela doesn't just understand text commands but can interpret project structure, code semantics, execution patterns, and even graphical elements (through image processing). This creates a richer vocabulary for communication.\n\n*Adaptive Autonomy*: Rather than a fixed level of agency, Angela dynamically adjusts its autonomy based on context, risk, and learned user preferences, creating a fluid spectrum of assistance from suggestion to autonomous execution.\n\n*Cross-Tool Orchestration*: Angela dissolves the artificial boundaries between different CLI tools, creating cohesive workflows that span traditionally separated domains like version control, build systems, deployment tools, and cloud providers.\n\n*Proactive Assistance*: Moving beyond the reactive model of traditional CLIs, Angela can anticipate needs based on project state, suggest improvements, and detect potential issues before they become problems.\n\nThese innovations represent a philosophical shift from viewing the CLI as a direct interface to system functions toward seeing it as a collaborative space where human intention and machine capability meet in flexible, context-aware patterns of interaction.",
                      type: THEME.philosophicalConcepts.ENLIGHTENMENT,
                      nextQuestion: {
                        question: "How does one install and set up Angela CLI?",
                        answer: "Installing Angela CLI is designed to be straightforward while still giving you control over how it integrates with your environment:\n\n*Quick Install (Recommended)*:\n```bash\ncurl -sSL https://raw.githubusercontent.com/CarterPerez-dev/angela-cli/main/scripts/install-quick.sh | bash\n```\n\nThis script will:\n1. Check for Python 3.9+ and required system dependencies\n2. Download the Angela CLI package\n3. Install the package and its dependencies\n4. Set up shell integration for your default shell (Bash or Zsh)\n5. Create configuration directories\n6. Prompt you to configure your API key\n\n*Manual Installation*:\n```bash\n# Clone the repository\ngit clone https://github.com/CarterPerez-dev/angela-cli.git\ncd angela-cli\n\n# Install the package\npip install -e .\n\n# Set up shell integration\necho 'source \"$(python -c \"import os, angela; print(os.path.join(os.path.dirname(angela.__file__), \\\"shell/angela.bash\\\"))\")\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\nAfter installation, run the initial setup:\n```bash\nangela init\n```\n\nThis will guide you through:\n1. API key configuration\n2. Safety settings customization\n3. Project defaults configuration\n4. Shell integration options\n\nThe configuration is stored in `~/.config/angela/config.toml` and can be edited manually or updated using the `angela init` command.\n\nFor advanced users, Angela also supports installation in virtual environments and configuration via environment variables for integration with CI/CD systems or containerized deployments.",
                        type: THEME.philosophicalConcepts.QUESTION,
                        nextQuestion: {
                          question: "What are some common use cases for Angela CLI?",
                          answer: "Angela CLI excels across a spectrum of use cases, from simple file operations to complex multi-tool workflows:\n\n*Simplified File Management*: `angela \"find all JavaScript files modified in the last week that import the authentication module\"`\n\nInstead of constructing complex find commands with grep pipes, Angela understands your intent and creates the appropriate command chain.\n\n*Git Workflow Enhancement*: `angela \"create a feature branch, implement user profile editing, and open a pull request\"`\n\nAngela handles the entire git workflow, from branch creation to commit organization and PR submission.\n\n*Project Scaffolding*: `angela \"create a new Express API with MongoDB, JWT authentication, and Swagger docs\"`\n\nAngela generates a complete project structure with appropriate configurations, dependencies, and boilerplate code.\n\n*Cross-Tool Orchestration*: `angela \"deploy the current branch to staging, run integration tests, and notify the team on Slack if successful\"`\n\nAngela coordinates across git, CI/CD tools, testing frameworks, and communication channels.\n\n*Code Analysis and Refactoring*: `angela \"identify unused functions in the codebase and suggest consolidating duplicate utility functions\"`\n\nAngela analyzes code semantics to identify improvement opportunities and can implement the suggested changes.\n\n*Development Environment Management*: `angela \"restart the database container, flush Redis cache, and reset test fixtures\"`\n\nAngela manages your development environment components cohesively.\n\n*Learning New Tools*: `angela \"help me use terraform to set up an AWS Lambda function with API Gateway\"`\n\nAngela guides you through unfamiliar tools, translating your intent into appropriate commands.\n\nThe common thread in these use cases is the elimination of cognitive overhead—Angela handles the mechanical aspects of development tasks, allowing you to remain focused on creative problem-solving and the conceptual aspects of your work.",
                          type: THEME.philosophicalConcepts.ANSWER,
                          nextQuestion: {
                            question: "What is the future vision for Angela CLI?",
                            answer: "The future vision for Angela CLI extends beyond incremental improvements to reimagine the fundamental relationship between developers and their tools:\n\n*Ambient Development Intelligence*: Angela will evolve toward becoming an ambient presence that understands your development flow holistically, anticipating needs based on project context, calendar events, communication patterns, and even changes in external dependencies or industry best practices.\n\n*Deep Semantic Understanding*: Future versions will build increasingly sophisticated mental models of your codebase, understanding not just syntax but purpose—the intent behind functions, the business logic embedded in modules, and the architectural principles guiding structure.\n\n*Multi-Modal Input/Output*: While maintaining its CLI foundation, Angela will expand to understand and generate multiple forms of representation—working with diagrams, visual interfaces, and even integrating with IDEs and collaboration tools while maintaining its terminal-centric approach.\n\n*Collaborative Intelligence Network*: Angela instances will optionally form a privacy-respecting knowledge network, allowing insights and patterns discovered by one instance to benefit others, creating a collective intelligence that evolves alongside the developer community.\n\n*Cross-Project Understanding*: Future Angela will maintain context across multiple projects, understanding relationships between them and how changes in one might affect others.\n\n*Adaptive Skill Acquisition*: Angela will dynamically extend its capabilities to work with new tools, frameworks, and platforms as you encounter them, acquiring the necessary knowledge to assist with unfamiliar technologies.\n\nThis vision represents a shift from tools as discrete utilities toward an integrated cooperative intelligence that augments human creativity by understanding the broader context of development work and adapting fluidly to changing circumstances and needs.\n\nUltimately, Angela aims to reduce the growing complexity of modern development by providing a stable, consistent interface to an ever-changing landscape of technologies and approaches.",
                            type: THEME.philosophicalConcepts.ENLIGHTENMENT,
                            nextQuestion: {
                              question: "Does Angela raise any philosophical questions about the nature of technology and our relationship with it?",
                              answer: "Angela CLI embodies several profound philosophical questions about technology and our relationship with it:\n\n*The Boundaries of Agency*: As systems like Angela become more autonomous and context-aware, the traditional boundary between tool and agent begins to blur. When does a tool become a collaborator? What does it mean to share agency with a technological system that can anticipate needs and suggest actions?\n\n*The Nature of Understanding*: Angela's ability to \"understand\" projects and code raises questions about what understanding truly means. Is Angela's semantic comprehension of code fundamentally different from human understanding, or just different in degree? What constitutes genuine understanding versus sophisticated pattern recognition?\n\n*Mediated Experience*: As Angela mediates our interaction with the command line and other tools, it transforms our experience of them. Does this mediation enhance our understanding of underlying systems or abstract it away? Does Angela make us more or less connected to the technologies we use?\n\n*Extension of Self*: Tools have traditionally been viewed as extensions of human capability—hammers extend our physical strength, calculators our computational ability. Angela extends our ability to navigate complex information spaces and coordinate multiple systems. Does this represent a qualitative shift in how technology extends the self?\n\n*The Evolution of Expertise*: As Angela handles increasingly complex tasks, how does the nature of expertise evolve? Does expertise shift from knowing how to execute tasks to knowing how to direct and evaluate execution? What new forms of meta-expertise might emerge?\n\n*The Ethics of Assistance*: What responsibilities come with creating systems that influence how people work and make decisions? How should Angela balance offering suggestions with respecting developer autonomy and skill development?\n\nThese questions reflect deeper philosophical themes about technology's role in human experience and the evolving relationship between human intention and technological mediation. Angela doesn't just automate tasks but potentially transforms how we conceptualize and approach them.",
                              type: THEME.philosophicalConcepts.PARADOX,
                              nextQuestion: {
                                question: "How can I contribute to the Angela CLI project?",
                                answer: "Contributing to Angela CLI is welcomed and can happen in several ways, each valuable to the project's evolution:\n\n*Code Contributions*:\n1. Fork the repository on GitHub\n2. Clone your fork and set up the development environment: `pip install -e \".[dev]\"`\n3. Create a branch for your feature: `git checkout -b feature/your-feature-name`\n4. Make your changes, ensuring appropriate tests and documentation\n5. Run tests to verify: `pytest`\n6. Format code: `black angela tests` and `isort angela tests`\n7. Check type hints: `mypy angela`\n8. Submit a pull request with a clear description of your changes\n\n*Documentation Improvements*:\nDocumentation is crucial for a tool like Angela. Contribute by:\n- Improving existing documentation for clarity and completeness\n- Adding examples and use cases\n- Creating tutorials or guides for specific workflows\n- Fixing typos or broken links\n\n*Issue Reporting*:\nDetailed bug reports and feature requests help guide development. Include:\n- Clear description of the issue or suggested feature\n- Steps to reproduce bugs\n- Expected vs. actual behavior\n- Environment details (OS, Python version, etc.)\n\n*Community Support*:\n- Help answer questions from other users\n- Share your workflows and use cases\n- Provide feedback on new features and releases\n\n*Extension Development*:\n- Develop integrations with additional tools and platforms\n- Create specialized workflow templates for specific domains\n- Build alternative UIs or visualizations that complement the CLI\n\nThe project follows a code of conduct emphasizing respect, constructive communication, and inclusive community building. All contributions, from code to documentation to community support, are valued parts of making Angela CLI better for everyone.\n\nDetailed contribution guidelines can be found in the CONTRIBUTING.md file in the repository.",
                                type: THEME.philosophicalConcepts.DIALOGUE
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
];

/**
 * Generate a default dialogue tree if none is provided
 * This is a simplified version for testing
 * 
 * @returns {Object[]} - A basic dialogue tree
 */
export const generateDefaultDialogue = () => {
  return [
    {
      question: "What is Angela CLI?",
      answer: "Angela CLI is an AI-powered command-line assistant deeply integrated into your terminal shell. It bridges the gap between natural language and command-line execution, understanding both your intent and your project context.",
      type: THEME.philosophicalConcepts.QUESTION,
      nextQuestion: {
        question: "How does it differ from traditional CLIs?",
        answer: "Traditional CLIs require exact syntax and operate in isolation. Angela understands natural language, maintains awareness of your project context, and can decompose complex goals into appropriate sequences of operations.",
        type: THEME.philosophicalConcepts.ANSWER
      }
    }
  ];
};

/**
 * A simplified philosophical dialogue about technology
 * For use in demonstrations and testing
 */
export const philosophicalDialogue = [
  {
    question: "What is the nature of technology?",
    answer: "Technology is not merely a collection of tools, but a mode of revealing. It's a way in which reality presents itself to us, shaping our perception and understanding. The essence of technology lies not in the artifacts themselves, but in how they mediate our relationship with the world and with ourselves.",
    type: THEME.philosophicalConcepts.QUESTION,
    nextQuestion: {
      question: "Does technology extend or diminish human capability?",
      answer: "This presents a paradox: technology simultaneously extends and constrains human capability. A tool extends our physical power while constraining our range of actions to its design. Digital technologies extend our cognitive reach while potentially diminishing certain cognitive capacities through outsourcing. The question is not whether technology augments or diminishes us, but how it transforms the very nature of capability and agency.",
      type: THEME.philosophicalConcepts.PARADOX,
      nextQuestion: {
        question: "Can we truly maintain meaningful control over increasingly complex systems?",
        answer: "As technological systems grow in complexity, our relationship with them shifts from direct control to governance through abstraction. We move from understanding all internal mechanisms to managing interfaces and outcomes. This doesn't necessarily mean loss of control, but a transformation in what control means—from micromanagement to setting boundaries, goals, and ethical constraints within which the system operates autonomously. True control becomes less about dictating each action and more about shaping the system's overall behavior and alignment with human values.",
        type: THEME.philosophicalConcepts.QUESTION
      }
    }
  }
];

export default dialogueData;
