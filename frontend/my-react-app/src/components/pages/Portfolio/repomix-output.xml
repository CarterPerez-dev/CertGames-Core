This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/__pycache__/**, **/.git/**, **/node_modules/**, **/.venv/**, **/target/**, **/dist/**, **/build/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
CodeEditor.js
DeploymentMonitor.js
portfolio.css
PortfolioDeployment.js
PortfolioForm.js
PortfolioList.js
PortfolioPage.js
PortfolioPreview.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="CodeEditor.js">
// frontend/my-react-app/src/components/pages/Portfolio/CodeEditor.js
import React, { useEffect, useRef, useState } from 'react';
import { Editor } from '@monaco-editor/react';

const CodeEditor = ({ value, language, theme, onChange, onError }) => {
  const editorRef = useRef(null);
  const [editorHeight, setEditorHeight] = useState('650px');
  const containerRef = useRef(null); // Keep containerRef if used for other styling/layout

  useEffect(() => {
    let resizeTimeout = null;

    const handleResize = () => {
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }

      resizeTimeout = setTimeout(() => {
        // No need to check containerRef.current here if it's not directly used for height calculation
        const viewportHeight = window.innerHeight;
        const newHeight = Math.max(500, viewportHeight * 0.6); // At least 500px, up to 60% of viewport
        setEditorHeight(`${newHeight}px`);

        // If the editor instance is available, you could also tell it to layout
        // This can sometimes be beneficial if the component wrapper doesn't always catch all scenarios
        // But often, the prop change is enough.
        // if (editorRef.current) {
        //   editorRef.current.layout();
        // }

      }, 100); // 100ms debounce
    };

    handleResize(); // Initial sizing
    window.addEventListener('resize', handleResize, { passive: true });

    return () => {
      window.removeEventListener('resize', handleResize);
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
    };
  }, []); // Removed editorRef from dependency array, as it's stable


  const handleEditorDidMount = (editor, monaco) => {
    editorRef.current = editor;

    editor.updateOptions({
      lineHeight: 20,
      fontFamily: "'Fira Code', 'Consolas', monospace",
      fontLigatures: true,
      cursorSmoothCaretAnimation: "on",
    });

    if (language === 'javascript' || language === 'jsx') {
      const checkErrors = () => {
        const model = editor.getModel();
        if (!model) return; // Ensure model exists
        const markers = monaco.editor.getModelMarkers({ resource: model.uri }); // Better to use resource
        if (markers.length > 0) {
          const errorMarker = markers.sort((a, b) => b.severity - a.severity)[0];
          const errorMessage = `${errorMarker.message} (Line ${errorMarker.startLineNumber})`;
          if (onError) onError(errorMessage);
        } else {
          if (onError) onError(null);
        }
      };

      let errorCheckTimeout = null;
      editor.onDidChangeModelContent(() => {
        if (errorCheckTimeout) clearTimeout(errorCheckTimeout);
        errorCheckTimeout = setTimeout(checkErrors, 1000);
      });
      
      // Check errors on initial load if there's initial content
      if (value) {
         setTimeout(checkErrors, 1500);
      }
    }
  };

  // This useEffect to set value is fine.
  useEffect(() => {
    if (editorRef.current && editorRef.current.getValue() !== value) {
      editorRef.current.setValue(value);
    }
  }, [value]);

  return (
    <div ref={containerRef} className="portfolio-code-editor-wrapper" style={{ width: '100%' }}>
      <Editor
        // The height prop change should trigger the editor to re-layout
        height={editorHeight}
        // Ensure width is also handled, often "100%" on the Editor itself is good if its container manages width
        width="100%"
        language={language}
        theme={theme || "vs-dark"}
        value={value} // Provide initial value here
        onMount={handleEditorDidMount}
        onChange={(newValue) => onChange(newValue || '')} // Ensure newValue is not undefined
        options={{
          minimap: { enabled: true },
          lineNumbers: 'on',
          scrollBeyondLastLine: false,
          fontSize: 14,
          autoIndent: 'full',
          formatOnPaste: true,
          formatOnType: true,
          wordWrap: 'on', // 'on', 'off', 'wordWrapColumn', 'bounded'
          automaticLayout: true, // This option often helps Monaco adjust to container changes.
          scrollbar: {
            vertical: 'visible',
            horizontal: 'visible',
            useShadows: true,
            verticalHasArrows: true,
            horizontalHasArrows: true
          },
          suggest: {
            showIcons: true,
            showFunctions: true,
            showConstructors: true,
            showVariables: true,
            showClasses: true,
            showStructs: true,
            showInterfaces: true,
            showModules: true
          }
        }}
      />
    </div>
  );
};

export default CodeEditor;
</file>

<file path="DeploymentMonitor.js">
// src/components/pages/Portfolio/DeploymentMonitor.js
import React, { useState, useEffect } from 'react';
import { FaSpinner, FaExclamationTriangle, FaCheckCircle } from 'react-icons/fa';

const DeploymentMonitor = ({ userId, deploymentId, onComplete, onError }) => {
  const [status, setStatus] = useState('pending');
  const [progress, setProgress] = useState(0);
  const [deploymentUrl, setDeploymentUrl] = useState('');
  const [error, setError] = useState(null);
  
  useEffect(() => {
    if (!deploymentId) return;
    
    const checkInterval = setInterval(async () => {
      try {
        const response = await fetch(`/api/portfolio/deployment-status/${deploymentId}`, {
          headers: {
            'X-User-Id': userId
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to check deployment status');
        }
        
        const data = await response.json();
        
        setStatus(data.status);
        setProgress(data.progress || 0);
        
        if (data.status === 'complete') {
          setDeploymentUrl(data.url);
          clearInterval(checkInterval);
          onComplete({
            deployment_url: data.url,
            github_repo: data.github_repo
          });
        } else if (data.status === 'failed') {
          setError(data.error);
          clearInterval(checkInterval);
          onError(data.error);
        }
      } catch (err) {
        console.error('Error checking deployment status:', err);
        setError(err.message);
        clearInterval(checkInterval);
        onError(err.message);
      }
    }, 5000);
    
    return () => clearInterval(checkInterval);
  }, [deploymentId, userId, onComplete, onError]);
  
  return (
    <div className="deployment-monitor">
      {status === 'complete' ? (
        <div className="deployment-success">
          <FaCheckCircle className="success-icon" />
          <h3>Deployment Complete!</h3>
          <p>Your portfolio is now live at:</p>
          <a href={deploymentUrl} target="_blank" rel="noopener noreferrer" className="deployment-url">
            {deploymentUrl}
          </a>
        </div>
      ) : status === 'failed' ? (
        <div className="deployment-error">
          <FaExclamationTriangle className="error-icon" />
          <h3>Deployment Failed</h3>
          <p>{error || 'An error occurred during deployment.'}</p>
        </div>
      ) : (
        <div className="deployment-progress">
          <FaSpinner className="spinner-icon" />
          <h3>Deployment in Progress</h3>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progress}%` }}></div>
          </div>
          <p>{progress}% complete</p>
        </div>
      )}
    </div>
  );
};

export default DeploymentMonitor;
</file>

<file path="portfolio.css">
/* ENHANCED PORTFOLIO CSS
 * Based on the high-quality login/register page styling
 * Enhanced with better animations, layout, and preview functionality
 */

:root,
:root[data-theme="default"],
:root[data-theme="blue"],
:root[data-theme="green"],
:root[data-theme="red"],
:root[data-theme="teal"],
:root[data-theme="dark"],
:root[data-theme="orange"],
:root[data-theme="pink"],
:root[data-theme="gold"],
:root[data-theme="cyan"],
:root[data-theme="neon"],
:root[data-theme="navy"],
:root[data-theme="indigo"],
:root[data-theme="violet"],
:root[data-theme="magenta"],
:root[data-theme="crimson"],
:root[data-theme="amber"],
:root[data-theme="lime"],
:root[data-theme="emerald"],
:root[data-theme="turquoise"],
:root[data-theme="sky"],
:root[data-theme="midnight"],
:root[data-theme="chocolate"],
:root[data-theme="silver"],
:root[data-theme="light"],
:root[data-theme="cream"] {
  /* Add these portfolio variables to your existing theme mapping */
  --portfolio-bg-dark: var(--theme-bg-dark);
  --portfolio-bg-card: var(--theme-bg-card);
  --portfolio-primary: var(--theme-accent);
  --portfolio-primary-glow: var(--theme-accent-glow);
  --portfolio-secondary: var(--theme-accent-secondary);
  --portfolio-text: var(--profile-text);
  --portfolio-text-secondary: var(--profile-text-secondary);
  --portfolio-border: var(--profile-border);
  --portfolio-input-bg: rgba(0, 0, 0, 0.2);
  --portfolio-success: var(--profile-success);
  --portfolio-error: var(--profile-error);
  --portfolio-warning: var(--profile-warning);
  --portfolio-gradient-primary: var(--theme-gradient-primary);
  --portfolio-gradient-secondary: var(--theme-gradient-secondary);
  --portfolio-shadow: var(--profile-shadow);
  --portfolio-glow: var(--profile-glow);
}

/* #####################################################
 * MAIN LAYOUT CONTAINER AND COMMON COMPONENTS
 * #####################################################
 */


.portfolio-page-container {
  width: 100%;
  min-height: 100vh;
  color: var(--portfolio-text);
  font-family: 'Arial', sans-serif;
  display: flex;
  flex-direction: column;
  padding: 30px;
  position: relative;
  overflow: hidden;
  background-color: var(--portfolio-bg-dark);
  background-image: 
    radial-gradient(circle at 10% 20%, rgba(var(--theme-accent-rgb), 0.2) 0%, transparent 45%),
    radial-gradient(circle at 80% 70%, rgba(var(--theme-accent-rgb), 0.15) 0%, transparent 40%),
    repeating-linear-gradient(rgba(0, 0, 0, 0.05) 0px, rgba(0, 0, 0, 0.05) 1px, transparent 1px, transparent 10px);
}


.portfolio-page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  position: relative;
  z-index: 10;
  color: var(--portfolio-text);
}

.portfolio-page-title-section {
  max-width: 60%;
}

.portfolio-page-title {
  font-size: 32px;
  font-weight: 700;
  margin: 0;
  margin-top: 25px;
  background: var(--portfolio-gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  color: var(--portfolio-text);
  font-family: 'Orbitron', 'Roboto', sans-serif;  
}

.portfolio-page-subtitle {
  font-size: 18px;
  color: var(--portfolio-text-secondary);
  margin: 10px 0 0;
}

.portfolio-page-actions {
  display: flex;
  gap: 15px;
}

.portfolio-refresh-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 16px;
  background: rgba(101, 67, 204, 0.2);
  border: 1px solid rgba(101, 67, 204, 0.3);
  border-radius: 8px;
  color: var(--portfolio-text);
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.portfolio-refresh-button:hover {
  background: rgba(101, 67, 204, 0.3);
  transform: translateY(-2px);
}

.portfolio-refresh-button.refreshing {
  opacity: 0.7;
  cursor: not-allowed;
}

.refresh-icon {
  font-size: 1rem;
  transition: transform 0.5s ease;
}

.refresh-icon.spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Portfolio Tabs */
.portfolio-page-tabs {
  display: flex;
  gap: 10px;
  margin-bottom: 30px;
  position: relative;
  z-index: 10;
  flex-wrap: wrap;
}

.portfolio-tab-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 10px;
  color: var(--portfolio-text-secondary);
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.portfolio-tab-button:hover {
  background: rgba(101, 67, 204, 0.1);
  transform: translateY(-2px);
}

.portfolio-tab-button.active {
  background: var(--portfolio-gradient-primary);
  color: white;
  border-color: transparent;
  box-shadow: var(--portfolio-glow);
}

.tab-icon {
  font-size: 1.1rem;
}

/* Error Banner */
.portfolio-error-banner {
  margin-bottom: 20px;
  animation: slideDown 0.3s ease-out;
}

@keyframes slideDown {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Portfolio Content Container */
.portfolio-page-content {
  flex: 1;
  position: relative;
  z-index: 10;
}

/* Loading Container */
.portfolio-loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 400px;
  text-align: center;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  padding: 40px;
  animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.portfolio-loading-progress-container {
  width: 80%;
  max-width: 500px;
  height: 10px;
  background-color: rgba(101, 67, 204, 0.1);
  border-radius: 5px;
  margin: 30px auto;
  overflow: hidden;
  position: relative;
}

.portfolio-loading-progress-bar {
  height: 100%;
  background: var(--portfolio-gradient-primary);
  transition: width 0.5s ease;
  border-radius: 5px;
  position: relative;
  overflow: hidden;
}

.portfolio-loading-progress-bar::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  animation: progress-shine 2s infinite;
}

@keyframes progress-shine {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

.portfolio-loading-progress-text {
  position: absolute;
  top: 15px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 0.9rem;
  color: var(--portfolio-primary);
  font-weight: 500;
}

/* #####################################################
 * FORM STEPS & PROGRESS BAR
 * #####################################################
 */

.portfolio-form-container {
  background: var(--portfolio-bg-card);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  padding: 30px;
  box-shadow: var(--portfolio-shadow);
  animation: slideUp 0.5s ease;
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.portfolio-form-progress {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 40px;
  position: relative;
}

.step-connector {
  position: absolute;
  top: 30px;
  left: 0;
  right: 0;
  height: 2px;
  background-color: var(--portfolio-border);
  z-index: 1;
}

.step-connector-progress {
  position: absolute;
  top: 30px;
  left: 0;
  height: 2px;
  background: var(--portfolio-gradient-primary);
  z-index: 2;
  transition: width 0.5s ease;
}

.progress-step {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  z-index: 3;
}

.step-number {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--portfolio-input-bg);
  border: 2px solid var(--portfolio-border);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  color: var(--portfolio-text-secondary);
  margin-bottom: 10px;
  transition: all 0.3s ease;
  margin-top: 15px;
}

.progress-step.active .step-number {
  background: var(--portfolio-primary);
  border-color: var(--portfolio-primary-glow);
  color: white;
  box-shadow: var(--portfolio-glow);
}

.progress-step.completed .step-number {
  background: var(--portfolio-primary);
  border-color: var(--portfolio-primary-glow);
  color: white;
}

.step-check-icon {
  font-size: 1rem;
  color: white;
}

.step-label {
  font-size: 0.9rem;
  color: var(--portfolio-text-secondary);
  text-align: center;
  transition: all 0.3s ease;
}

.progress-step.active .step-label {
  color: var(--portfolio-text);
  font-weight: 500;
}

.progress-step.completed {
  cursor: pointer;
}

.progress-step.completed:hover .step-number {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(101, 67, 204, 0.3);
}

/* Form Step */
.portfolio-form-step {
  animation: fadeIn 0.5s ease;
}

.portfolio-form-header {
  text-align: center;
  margin-bottom: 30px;
  color: #fff;
}

.form-header-icon {
  font-size: 30px;
  color: var(--portfolio-primary);
  margin-bottom: 15px;
}

.portfolio-form-header h2 {
  font-size: 24px;
  margin: 0 0 10px;
  color: var(--portfolio-text);
}

.form-header-description {
  font-size: 16px;
  color: var(--portfolio-text-secondary);
  margin: 0;
  max-width: 700px;
  margin: 0 auto;
}

/* Navigation Buttons */
.portfolio-form-navigation {
  display: flex;
  justify-content: space-between;
  margin-top: 40px;
}

.navigation-placeholder {
  width: 120px;
}

.portfolio-back-button,
.portfolio-next-button,
.portfolio-generate-button {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 14px 24px;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.portfolio-back-button {
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  color: var(--portfolio-text);
}

.portfolio-back-button:hover {
  background: rgba(255, 255, 255, 0.1);
}

.portfolio-next-button {
  background: var(--portfolio-gradient-primary);
  border: none;
  color: white;
  box-shadow: 0 4px 12px rgba(101, 67, 204, 0.3);
}

.portfolio-next-button:hover:not(:disabled) {
  transform: translateY(-3px);
  box-shadow: 0 6px 18px rgba(101, 67, 204, 0.4);
}

.portfolio-generate-button {
  background: var(--portfolio-gradient-primary);
  border: none;
  color: white;
  box-shadow: 0 4px 12px rgba(101, 67, 204, 0.3);
  position: relative;
  overflow: hidden;
}

.portfolio-generate-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: left 0.7s;
}

.portfolio-generate-button:hover:not(:disabled)::before {
  left: 100%;
}

.portfolio-generate-button:hover:not(:disabled) {
  transform: translateY(-3px);
  box-shadow: 0 6px 18px rgba(101, 67, 204, 0.4);
}

.portfolio-back-button:disabled,
.portfolio-next-button:disabled,
.portfolio-generate-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: translateY(0);
}

.button-icon {
  font-size: 1.1rem;
}

.button-spinner {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s linear infinite;
}

/* #####################################################
 * TEMPLATE SELECTION STYLES
 * #####################################################
 */

.portfolio-template-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 30px;
  margin-top: 30px;
}

.portfolio-template-option {
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 12px;
  padding: 20px;
  transition: all 0.3s ease;
  cursor: pointer;
}

.portfolio-template-option:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
  border-color: rgba(101, 67, 204, 0.3);
  background: rgba(101, 67, 204, 0.05);
}

.portfolio-template-option.selected {
  border: 2px solid var(--portfolio-primary);
  box-shadow: 0 0 0 2px rgba(101, 67, 204, 0.3), 0 5px 20px rgba(0, 0, 0, 0.3);
  background: rgba(101, 67, 204, 0.07);
}

.template-preview {
  width: 100%;
  height: 180px;
  border-radius: 8px;
  margin-bottom: 15px;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
}

.template-hover-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(101, 67, 204, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.portfolio-template-option.selected .template-hover-overlay {
  opacity: 1;
}

.template-selected-icon {
  font-size: 3rem;
  color: white;
  filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.3));
}

.modern-preview {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><rect width="400" height="200" fill="%23111827"/><rect x="0" y="0" width="400" height="40" fill="%230f172a"/><circle cx="20" cy="20" r="5" fill="%233b82f6"/><circle cx="40" cy="20" r="5" fill="%2310b981"/><rect x="60" y="60" width="280" height="30" rx="2" fill="%233b82f6"/><rect x="60" y="100" width="180" height="12" rx="2" fill="%23e2e8f0"/><rect x="60" y="120" width="240" height="12" rx="2" fill="%239ca3af"/><rect x="60" y="150" width="100" height="30" rx="4" fill="%233b82f6"/><rect x="300" y="70" width="40" height="40" rx="20" fill="%230ea5e9"/></svg>');
  background-size: cover;
}

.creative-preview {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><defs><linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" style="stop-color:%23dc2626;stop-opacity:0.3" /><stop offset="100%" style="stop-color:%23f97316;stop-opacity:0.3" /></linearGradient></defs><rect width="400" height="200" fill="url(%23grad)"/><rect x="40" y="40" width="320" height="30" rx="2" fill="%23dc2626"/><rect x="40" y="85" width="150" height="12" rx="2" fill="%23f8fafc"/><rect x="40" y="105" width="200" height="12" rx="2" fill="%23f8fafc"/><rect x="40" y="130" width="120" height="12" rx="2" fill="%23f8fafc"/><circle cx="330" cy="100" r="30" fill="%23f97316" stroke="%23dc2626" stroke-width="2"/><rect x="40" y="150" width="80" height="30" rx="4" fill="%23dc2626"/></svg>');
  background-size: cover;
}

.corporate-preview {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><rect width="400" height="200" fill="%23f8f9fa"/><rect x="50" y="20" width="300" height="40" rx="2" fill="%232c5282"/><rect x="50" y="75" width="300" height="1" fill="%23cbd5e0"/><rect x="50" y="90" width="300" height="12" rx="2" fill="%234a5568"/><rect x="50" y="115" width="140" height="10" rx="2" fill="%23718096"/><rect x="50" y="135" width="140" height="10" rx="2" fill="%23718096"/><rect x="50" y="155" width="120" height="30" rx="2" fill="%232c5282"/></svg>');
  background-size: cover;
}

.tech-preview {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200"><rect width="400" height="200" fill="%23111827"/><rect x="70" y="40" width="260" height="25" rx="2" fill="%2338b2ac"/><rect x="70" y="85" width="260" height="10" rx="2" fill="%23e2e8f0"/><rect x="70" y="105" width="260" height="10" rx="2" fill="%23e2e8f0"/><rect x="70" y="130" width="260" height="35" rx="2" fill="%23213746" stroke="%2338b2ac" stroke-width="1"/><rect x="85" y="140" width="100" height="15" rx="2" fill="%2338b2ac"/></svg>');
  background-size: cover;
}

.template-info h3 {
  font-size: 18px;
  margin: 0 0 8px;
  color: var(--portfolio-text);
}

.template-info p {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  margin: 0 0 12px;
}

.template-features {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
}

.feature-tag {
  background: rgba(101, 67, 204, 0.1);
  color: var(--portfolio-primary-glow);
  border-radius: 4px;
  padding: 3px 8px;
  font-size: 12px;
  font-weight: 500;
}

.portfolio-form-guidance {
  margin-top: 30px;
  padding: 20px;
  border-radius: 10px;
  background: rgba(0, 0, 0, 0.1);
  border: 1px solid var(--portfolio-border);
  display: flex;
  gap: 15px;
}

.guidance-icon {
  font-size: 20px;
  color: var(--portfolio-primary);
  margin-top: 5px;
}

.guidance-content h4 {
  margin: 0 0 10px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.guidance-content p {
  margin: 0 0 10px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.guidance-content ul {
  margin: 0;
  padding: 0 0 0 20px;
}

.guidance-content li {
  margin-bottom: 5px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.guidance-content strong {
  color: var(--portfolio-text);
}

/* #####################################################
 * COLOR SCHEME SELECTION STYLES
 * #####################################################
 */

.portfolio-color-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 30px;
  margin-top: 30px;
}

.portfolio-color-option {
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 12px;
  padding: 20px;
  transition: all 0.3s ease;
  cursor: pointer;
}

.portfolio-color-option:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
  border-color: rgba(101, 67, 204, 0.3);
  background: rgba(101, 67, 204, 0.05);
}

.portfolio-color-option.selected {
  border: 2px solid var(--portfolio-primary);
  box-shadow: 0 0 0 2px rgba(101, 67, 204, 0.3), 0 5px 20px rgba(0, 0, 0, 0.3);
  background: rgba(101, 67, 204, 0.07);
}

.color-preview {
  height: 140px;
  border-radius: 8px;
  margin-bottom: 15px;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  display: flex;
}

.color-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.portfolio-color-option.selected .color-overlay {
  opacity: 1;
}

.color-selected-icon {
  font-size: 3rem;
  color: white;
  filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.3));
}

.color-swatch {
  flex: 1;
  height: 100%;
}

.professional-colors {
  background: linear-gradient(to right, #1a365d, #2a4365, #3182ce);
}

.creative-colors {
  background: linear-gradient(to right, #702459, #b83280, #d53f8c);
}

.tech-colors {
  background: linear-gradient(to right, #1a202c, #2d3748, #38b2ac);
}

.minimal-colors {
  background: linear-gradient(to right, #1a202c, #4a5568, #e2e8f0);
}

.color-info h3 {
  font-size: 18px;
  margin: 0 0 8px;
  color: var(--portfolio-text);
}

.color-info p {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  margin: 0 0 12px;
}

.color-best-for {
  background: rgba(101, 67, 204, 0.1);
  border-radius: 6px;
  padding: 8px 12px;
}

.color-best-for span {
  font-size: 13px;
  color: var(--portfolio-primary-glow);
}

/* #####################################################
 * FEATURES SELECTION STYLES
 * #####################################################
 */

.portfolio-features-selection {
  margin-top: 30px;
}

.features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 30px;
}

.feature-category {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  padding: 20px;
  border: 1px solid var(--portfolio-border);
}

.feature-category-title {
  font-size: 18px;
  margin: 0 0 20px;
  color: var(--portfolio-text);
  border-bottom: 1px solid var(--portfolio-border);
  padding-bottom: 10px;
}

.portfolio-feature-checkbox {
  display: flex;
  align-items: flex-start;
  padding: 15px;
  border-radius: 8px;
  transition: all 0.3s ease;
  cursor: pointer;
  margin-bottom: 10px;
  border: 1px solid transparent;
}

.portfolio-feature-checkbox:hover {
  background: rgba(101, 67, 204, 0.1);
}

.portfolio-feature-checkbox.selected {
  background: rgba(101, 67, 204, 0.15);
  border: 1px solid rgba(101, 67, 204, 0.3);
}

.checkbox-input {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 15px;
  position: relative;
}

.checkbox-input input[type="checkbox"] {
  position: absolute;
  opacity: 0;
  width: 24px;
  height: 24px;
  z-index: 1;
  cursor: pointer;
}

.custom-checkbox {
  width: 24px;
  height: 24px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.check-icon {
  color: white;
  opacity: 0;
  transform: scale(0);
  transition: all 0.2s;
}

.checkbox-input input[type="checkbox"]:checked ~ .custom-checkbox {
  background: var(--portfolio-primary);
  border-color: var(--portfolio-primary);
}

.checkbox-input input[type="checkbox"]:checked ~ .custom-checkbox .check-icon {
  opacity: 1;
  transform: scale(1);
}

.checkbox-content {
  flex: 1;
}

.checkbox-header {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
}

.checkbox-label {
  font-weight: 500;
  font-size: 16px;
  color: var(--portfolio-text);
  margin-right: 10px;
}

.checkbox-tag {
  background: rgba(101, 67, 204, 0.2);
  color: var(--portfolio-primary-glow);
  font-size: 12px;
  padding: 2px 8px;
  border-radius: 4px;
}

.checkbox-description {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  margin: 0;
}

/* #####################################################
 * RESUME TEXT AREA STYLES
 * #####################################################
 */

.portfolio-resume-section {
  display: grid;
  grid-template-columns: 1fr 350px;
  gap: 30px;
  margin-top: 30px;
}

.resume-input-area {
  position: relative;
}

.resume-textarea-container {
  position: relative;
  margin-bottom: 20px;
}

.portfolio-resume-textarea {
  width: 100%;
  min-height: 300px;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  color: var(--portfolio-text);
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 10px;
  resize: vertical;
  transition: all 0.3s ease;
}

.portfolio-resume-textarea:focus {
  outline: none;
  border-color: var(--portfolio-primary);
  box-shadow: 0 0 0 3px rgba(101, 67, 204, 0.2);
}

.portfolio-resume-textarea.invalid {
  border-color: var(--portfolio-error);
}

.resume-validation-error {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 10px;
  color: var(--portfolio-error);
  font-size: 14px;
  animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
  20%, 40%, 60%, 80% { transform: translateX(5px); }
}

.error-icon {
  font-size: 16px;
}

.resume-char-counter {
  position: absolute;
  bottom: -25px;
  right: 5px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.resume-analyzing {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 20px;
  color: var(--portfolio-text-secondary);
  font-size: 14px;
}

.analyzing-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(101, 67, 204, 0.3);
  border-radius: 50%;
  border-top-color: var(--portfolio-primary);
  animation: spin 1s linear infinite;
}

.resume-analysis-results {
  margin-top: 30px;
  background: rgba(101, 67, 204, 0.1);
  border-radius: 10px;
  padding: 20px;
  border: 1px solid rgba(101, 67, 204, 0.2);
}

.resume-analysis-results h3 {
  margin: 0 0 15px;
  font-size: 18px;
  color: var(--portfolio-text);
}

.content-score {
  margin-bottom: 20px;
}

.score-label {
  font-size: 14px;
  color: var(--portfolio-text);
  margin-bottom: 8px;
}

.score-bar-container {
  height: 10px;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 5px;
  overflow: hidden;
  margin-bottom: 5px;
}

.score-bar {
  height: 100%;
  border-radius: 5px;
  transition: width 1s ease;
}

.score-bar.good {
  background: var(--portfolio-success);
}

.score-bar.needs-improvement {
  background: var(--portfolio-warning);
}

.score-value {
  text-align: right;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.analysis-stats {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  margin-bottom: 20px;
}

.analysis-stat {
  flex: 1;
  min-width: 120px;
  padding: 15px;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  text-align: center;
}

.stat-label {
  font-size: 13px;
  color: var(--portfolio-text-secondary);
  margin-bottom: 8px;
}

.stat-value {
  font-size: 20px;
  color: var(--portfolio-text);
  margin-bottom: 8px;
  font-weight: 600;
}

.stat-tag {
  display: inline-block;
  padding: 3px 8px;
  font-size: 12px;
  border-radius: 4px;
}

.stat-tag.good {
  background: rgba(46, 187, 119, 0.2);
  color: var(--portfolio-success);
}

.stat-tag.poor {
  background: rgba(255, 78, 78, 0.2);
  color: var(--portfolio-error);
}

.analysis-recommendation {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  padding: 15px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
}

.recommendation-icon {
  color: var(--portfolio-warning);
  font-size: 16px;
  margin-top: 3px;
}

.analysis-recommendation p {
  margin: 0;
  color: var(--portfolio-text);
  font-size: 14px;
  line-height: 1.5;
}

.resume-tips-container {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 20px;
  border: 1px solid var(--portfolio-border);
  position: sticky;
  top: 30px;
}

.resume-tips h4 {
  margin: 0 0 15px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.tips-list {
  padding-left: 20px;
  margin: 0 0 20px;
}

.tips-list li {
  margin-bottom: 10px;
  color: var(--portfolio-text-secondary);
  font-size: 14px;
  line-height: 1.5;
}

.tips-list strong {
  color: var(--portfolio-text);
}

.example-snippet {
  margin-top: 20px;
  border-top: 1px solid var(--portfolio-border);
  padding-top: 20px;
}

.example-snippet h4 {
  margin: 0 0 15px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.example-content {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 15px;
  font-family: 'Arial', sans-serif;
  font-size: 14px;
  line-height: 1.5;
  color: var(--portfolio-text);
}

.example-content p {
  margin: 0 0 10px;
}

.example-content strong {
  color: var(--portfolio-primary);
}

.example-content p:last-child {
  margin-bottom: 0;
}

/* #####################################################
 * PORTFOLIO LIST STYLES
 * #####################################################
 */

.portfolio-list-container {
  background: var(--portfolio-bg-card);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  padding: 30px;
  box-shadow: var(--portfolio-shadow);
  animation: slideUp 0.5s ease;
}

.portfolio-list-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.portfolio-list-header h2 {
  font-size: 24px;
  margin: 0;
  color: var(--portfolio-text);
}

.portfolio-list-actions {
  display: flex;
  gap: 15px;
}

.portfolio-search-container {
  position: relative;
  transition: all 0.3s ease;
}

.portfolio-search-container.focused {
  transform: scale(1.03);
}

.search-icon {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--portfolio-text-secondary);
  font-size: 0.9rem;
}

.portfolio-search-input {
  padding: 10px 15px 10px 35px;
  width: 220px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 20px;
  color: var(--portfolio-text);
  font-size: 14px;
  transition: all 0.3s ease;
}

.portfolio-search-input:focus {
  outline: none;
  width: 280px;
  border-color: var(--portfolio-primary);
  box-shadow: 0 0 0 2px rgba(101, 67, 204, 0.2);
}

.search-clear-button {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--portfolio-text-secondary);
  font-size: 16px;
  cursor: pointer;
  padding: 0;
  line-height: 1;
}

.search-clear-button:hover {
  color: var(--portfolio-text);
}

.portfolio-controls {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 30px;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 15px;
}

.portfolio-filter-controls,
.portfolio-sort-controls {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;
}

.filter-label,
.sort-label {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  white-space: nowrap;
}

.filter-icon,
.sort-icon {
  font-size: 14px;
  color: var(--portfolio-primary);
}

.filter-options,
.sort-options {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.filter-option,
.sort-option {
  padding: 8px 12px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 6px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 6px;
}

.filter-option:hover,
.sort-option:hover {
  background: rgba(101, 67, 204, 0.1);
  transform: translateY(-2px);
}

.filter-option.active,
.sort-option.active {
  background: var(--portfolio-primary);
  color: white;
  border-color: var(--portfolio-primary);
}

.portfolio-list-stats {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
}

.portfolio-stat {
  flex: 1;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 20px;
  text-align: center;
  border: 1px solid var(--portfolio-border);
  transition: all 0.3s ease;
}

.portfolio-stat:hover {
  background: rgba(101, 67, 204, 0.1);
  border-color: rgba(101, 67, 204, 0.2);
  transform: translateY(-3px);
}

.portfolio-stat-value {
  font-size: 28px;
  font-weight: 700;
  color: var(--portfolio-text);
  margin-bottom: 5px;
}

.portfolio-stat-label {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.portfolio-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 30px;
  margin-bottom: 30px;
}

.portfolio-item-card {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  border: 1px solid var(--portfolio-border);
  overflow: hidden;
  transition: all 0.3s ease;
  position: relative;
}

.portfolio-item-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  border-color: rgba(101, 67, 204, 0.2);
}

.portfolio-card-header {
  padding: 20px;
  position: relative;
}

.portfolio-card-header::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 20px;
  right: 20px;
  height: 1px;
  background: var(--portfolio-border);
}

.portfolio-card-title-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.portfolio-card-title {
  margin: 0;
  font-size: 18px;
  color: var(--portfolio-text);
}

.portfolio-status-badge {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
}

.portfolio-status-badge.generated {
  background: rgba(255, 193, 7, 0.2);
  color: #ffc107;
}

.portfolio-status-badge.deployed {
  background: rgba(46, 187, 119, 0.2);
  color: var(--portfolio-success);
}

.status-icon {
  font-size: 12px;
}

.portfolio-card-meta {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.portfolio-creation-time {
  display: flex;
  align-items: center;
  gap: 6px;
}

.portfolio-card-details {
  padding: 20px;
}

.portfolio-detail-item {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
}

.detail-icon {
  width: 18px;
  margin-right: 10px;
  color: var(--portfolio-primary);
}

.detail-label {
  width: 80px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.detail-value {
  flex: 1;
  font-size: 14px;
  color: var(--portfolio-text);
}

.portfolio-url-link {
  color: var(--portfolio-primary);
  text-decoration: none;
  transition: all 0.2s;
}

.portfolio-url-link:hover {
  color: var(--portfolio-primary-glow);
  text-decoration: underline;
}

.portfolio-card-actions {
  padding: 20px;
  display: flex;
  gap: 10px;
  justify-content: space-between;
  border-top: 1px solid var(--portfolio-border);
}

.portfolio-select-button,
.portfolio-view-button {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 8px;
  padding: 10px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.portfolio-select-button {
  background: var(--portfolio-gradient-primary);
  color: white;
  border: none;
}

.portfolio-select-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(101, 67, 204, 0.3);
}

.portfolio-view-button {
  background: rgba(0, 0, 0, 0.2);
  color: var(--portfolio-text);
  border: 1px solid var(--portfolio-border);
  text-decoration: none;
}

.portfolio-view-button:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-2px);
}

.portfolio-no-results {
  text-align: center;
  padding: 40px;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  border: 1px solid var(--portfolio-border);
  margin-bottom: 30px;
}

.no-results-icon {
  font-size: 30px;
  color: var(--portfolio-text-secondary);
  margin-bottom: 15px;
}

.portfolio-no-results p {
  margin: 0 0 20px;
  color: var(--portfolio-text);
  font-size: 16px;
}

.clear-search-button {
  padding: 10px 20px;
  background: var(--portfolio-primary);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.clear-search-button:hover {
  background: var(--portfolio-primary-glow);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(101, 67, 204, 0.3);
}

.portfolio-list-explanation {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 20px;
  border: 1px solid var(--portfolio-border);
}

.portfolio-list-explanation h3 {
  margin: 0 0 15px;
  font-size: 18px;
  color: var(--portfolio-text);
}

.portfolio-list-explanation p {
  margin: 0 0 15px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.portfolio-tips {
  padding-left: 20px;
  margin: 0;
}

.portfolio-tips li {
  margin-bottom: 8px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.portfolio-tips strong {
  color: var(--portfolio-text);
}

.portfolio-empty-state {
  text-align: center;
  padding: 60px 20px;
  background: var(--portfolio-input-bg);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  margin-bottom: 30px;
}

.portfolio-empty-icon {
  font-size: 60px;
  color: var(--portfolio-primary);
  opacity: 0.6;
  margin-bottom: 20px;
}

.portfolio-empty-state h3 {
  margin: 0 0 15px;
  font-size: 24px;
  color: var(--portfolio-text);
}

.portfolio-empty-state p {
  margin: 0 0 30px;
  color: var(--portfolio-text-secondary);
  font-size: 16px;
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
}

.portfolio-empty-actions {
  display: flex;
  justify-content: center;
  gap: 20px;
  flex-wrap: wrap;
}

.portfolio-create-first-button {
  padding: 14px 24px;
  background: var(--portfolio-gradient-primary);
  color: white;
  border: none;
  border-radius: 10px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 10px;
}

.portfolio-create-first-button:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 18px rgba(101, 67, 204, 0.4);
}

/* #####################################################
 * PORTFOLIO PREVIEW STYLES
 * #####################################################
 */

.portfolio-preview-container {
  background: var(--portfolio-bg-card);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  padding: 30px;
  box-shadow: var(--portfolio-shadow);
  animation: slideUp 0.5s ease;
}

.portfolio-preview-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.portfolio-preview-header h2 {
  font-size: 24px;
  margin: 0;
  color: var(--portfolio-text);
}

.portfolio-preview-tabs {
  display: flex;
  gap: 15px;
}

.portfolio-preview-tab {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 16px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 8px;
  color: var(--portfolio-text-secondary);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.portfolio-preview-tab:hover {
  background: rgba(101, 67, 204, 0.1);
}

.portfolio-preview-tab.active {
  background: var(--portfolio-primary);
  color: white;
  border-color: var(--portfolio-primary);
}

.tab-icon {
  font-size: 14px;
}

.portfolio-code-preview {
  display: flex;
  height: 75vh;
  border-radius: 10px;
  overflow: hidden;
  border: 1px solid var(--portfolio-border);
}

.portfolio-file-explorer {
  width: 280px;
  background: rgba(0, 0, 0, 0.2);
  border-right: 1px solid var(--portfolio-border);
  display: flex;
  flex-direction: column;
}

.portfolio-file-explorer-header {
  padding: 15px;
  border-bottom: 1px solid var(--portfolio-border);
}

.portfolio-file-explorer-header h3 {
  margin: 0 0 10px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.portfolio-file-search {
  position: relative;
}

.portfolio-file-search-input {
  width: 100%;
  padding: 8px 12px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 6px;
  color: var(--portfolio-text);
  font-size: 13px;
}

.portfolio-file-search-input:focus {
  outline: none;
  border-color: var(--portfolio-primary);
}

.portfolio-file-tree {
  flex: 1;
  overflow-y: auto;
  padding: 10px;
}

.portfolio-file-tree-node {
  margin-bottom: 5px;
}

.portfolio-file-tree-node.root-node {
  margin-left: 0;
}

.portfolio-directory-node {
  margin-bottom: 10px;
}

.portfolio-directory-name {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 10px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 14px;
  color: var(--portfolio-text);
}

.portfolio-directory-name:hover {
  background: rgba(255, 255, 255, 0.05);
}

.directory-icon {
  color: #ffc107;
  font-size: 14px;
}

.directory-label {
  font-weight: 500;
}

.portfolio-directory-children {
  padding-left: 20px;
  margin-top: 5px;
}

.portfolio-file-item {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 10px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 13px;
  color: var(--portfolio-text-secondary);
}

.portfolio-file-item:hover {
  background: rgba(255, 255, 255, 0.05);
  color: var(--portfolio-text);
}

.portfolio-file-item.active {
  background: rgba(101, 67, 204, 0.2);
  color: var(--portfolio-text);
}

.js-file-icon {
  color: #f7df1e;
  font-size: 14px;
}

.css-file-icon {
  color: #2965f1;
  font-size: 14px;
}

.html-file-icon {
  color: #e34c26;
  font-size: 14px;
}

.json-file-icon {
  color: #5b5b5b;
  font-size: 14px;
}

.svg-file-icon {
  color: #ff9a00;
  font-size: 14px;
}

.md-file-icon {
  color: #2aa5dc;
  font-size: 14px;
}

.file-name {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.portfolio-code-editor-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #1e1e1e;
}

.portfolio-editor-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background: rgba(0, 0, 0, 0.3);
  border-bottom: 1px solid var(--portfolio-border);
}

.portfolio-active-file {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: var(--portfolio-text);
}

.file-path {
  font-family: 'Consolas', monospace;
}

.portfolio-editor-actions {
  display: flex;
  gap: 10px;
}

.portfolio-editor-action-btn {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  color: var(--portfolio-text-secondary);
  font-size: 13px;
  cursor: pointer;
  transition: all 0.2s;
}

.portfolio-editor-action-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  color: var(--portfolio-text);
  transform: translateY(-2px);
}

.portfolio-editor-action-btn .action-icon {
  color: var(--portfolio-accent);
}

.portfolio-editor-action-btn .copied-icon {
  color: var(--portfolio-success);
}
.refreshing {
  animation: spin 1s linear infinite;
}

.portfolio-code-editor-wrapper {
  flex: 1;
  overflow: hidden;
}

.portfolio-error-container {
  padding: 15px;
  background: rgba(255, 78, 78, 0.1);
  border-top: 1px solid rgba(255, 78, 78, 0.3);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.portfolio-error-message {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #ff4e4e;
  font-size: 14px;
  flex: 1;
}

.error-icon {
  font-size: 16px;
}

.error-text {
  font-family: 'Consolas', monospace;
}

.portfolio-fix-error-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  background: rgba(46, 187, 119, 0.2);
  border: 1px solid rgba(46, 187, 119, 0.3);
  border-radius: 6px;
  color: var(--portfolio-success);
  font-size: 13px;
  cursor: pointer;
  transition: all 0.3s;
}

.portfolio-fix-error-button:hover {
  background: rgba(46, 187, 119, 0.3);
  transform: translateY(-2px);
}

.portfolio-fix-error-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.fix-icon {
  font-size: 14px;
}

.fix-spinner {
  display: inline-block;
  width: 14px;
  height: 14px;
  border: 2px solid rgba(46, 187, 119, 0.3);
  border-radius: 50%;
  border-top-color: var(--portfolio-success);
  animation: spin 1s linear infinite;
  margin-right: 5px;
}

.portfolio-no-file-selected {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: var(--portfolio-text-secondary);
  text-align: center;
  padding: 40px;
}

.no-file-icon {
  font-size: 40px;
  margin-bottom: 15px;
  opacity: 0.5;
}

.portfolio-no-file-selected h3 {
  margin: 0 0 10px;
  font-size: 18px;
  color: var(--portfolio-text);
}

.portfolio-no-file-selected p {
  margin: 0;
  font-size: 14px;
  max-width: 300px;
}

.portfolio-live-preview-container {
  display: flex;
  flex-direction: column;
  height: 75vh;
  border-radius: 10px;
  overflow: hidden;
  border: 1px solid var(--portfolio-border);
  background: rgba(0, 0, 0, 0.2);
}

.portfolio-preview-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background: rgba(0, 0, 0, 0.3);
  border-bottom: 1px solid var(--portfolio-border);
}

.portfolio-preview-device-selector {
  display: flex;
  gap: 10px;
}

.portfolio-device-button {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 10px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  color: var(--portfolio-text-secondary);
  font-size: 13px;
  cursor: pointer;
  transition: all 0.2s;
}

.portfolio-device-button:hover {
  background: rgba(255, 255, 255, 0.1);
  color: var(--portfolio-text);
}

.portfolio-device-button.active {
  background: rgba(101, 67, 204, 0.2);
  border-color: rgba(101, 67, 204, 0.3);
  color: var(--portfolio-primary-glow);
}

.device-icon {
  font-size: 14px;
}

.portfolio-preview-refresh-btn {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  background: rgba(101, 67, 204, 0.2);
  border: 1px solid rgba(101, 67, 204, 0.3);
  border-radius: 4px;
  color: var(--portfolio-primary-glow);
  font-size: 13px;
  cursor: pointer;
  transition: all 0.2s;
}

.portfolio-preview-refresh-btn:hover {
  background: rgba(101, 67, 204, 0.3);
  transform: translateY(-2px);
}

.portfolio-preview-refresh-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.refresh-icon {
  font-size: 14px;
  transition: transform 0.2s;
}

.refresh-icon.refreshing {
  animation: spin 1s linear infinite;
}

.portfolio-preview-frame-container {
  flex: 1;
  padding: 20px;
  display: flex;
  justify-content: center;
  background: #f4f5f8;
  transition: all 0.3s ease;
}

.portfolio-preview-frame-container.mobile-container {
  width: 375px;
  margin: 0 auto;
}

.portfolio-preview-frame {
  background: white;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
  border: none;
  transition: all 0.3s ease;
  border-radius: 4px;
  max-width: 100%;
}

.portfolio-no-portfolio {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 400px;
}

.portfolio-empty-message {
  text-align: center;
  max-width: 400px;
}

.empty-icon {
  font-size: 40px;
  color: var(--portfolio-text-secondary);
  margin-bottom: 20px;
  opacity: 0.5;
}

.portfolio-empty-message h3 {
  margin: 0 0 10px;
  font-size: 24px;
  color: var(--portfolio-text);
}

.portfolio-empty-message p {
  margin: 0;
  font-size: 16px;
  color: var(--portfolio-text-secondary);
}

.no-files-message {
  padding: 20px;
  color: var(--portfolio-text-secondary);
  font-size: 14px;
  text-align: center;
}

/* #####################################################
 * DEPLOYMENT STYLES
 * #####################################################
 */

.portfolio-deployment-container {
  background: var(--portfolio-bg-card);
  border-radius: 15px;
  border: 1px solid var(--portfolio-border);
  padding: 30px;
  box-shadow: var(--portfolio-shadow);
  animation: slideUp 0.5s ease;
}

.portfolio-deployment-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 15px;
  padding: 25px;
  border: 1px solid var(--portfolio-border);
  overflow: hidden;
  position: relative;
}

.deployment-header-content {
  max-width: 60%;
  z-index: 2;
}

.deployment-title-icon {
  font-size: 30px;
  color: var(--portfolio-primary);
  margin-bottom: 15px;
  filter: drop-shadow(0 0 10px rgba(101, 67, 204, 0.5));
}

.portfolio-deployment-header h2 {
  font-size: 28px;
  margin: 0 0 10px;
  color: var(--portfolio-text);
  background: var(--portfolio-gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.portfolio-deployment-subtitle {
  font-size: 16px;
  color: var(--portfolio-text-secondary);
  margin: 0;
}

.deployment-header-graphic {
  position: relative;
  width: 180px;
  height: 150px;
  z-index: 1;
}

.deployment-illustration {
  position: relative;
  width: 100%;
  height: 100%;
}

.deployment-rocket {
  position: absolute;
  font-size: 24px;
  color: var(--portfolio-primary);
  animation: rocket-float 4s ease-in-out infinite;
  top: 30%;
  left: 30%;
  z-index: 3;
  filter: drop-shadow(0 0 8px rgba(101, 67, 204, 0.7));
}

.deployment-planet {
  position: absolute;
  width: 80px;
  height: 80px;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, var(--portfolio-accent-glow), var(--portfolio-accent));
  bottom: 10px;
  right: 10px;
  opacity: 0.8;
  box-shadow: 0 0 20px rgba(101, 67, 204, 0.4);
}

.deployment-stars .star {
  position: absolute;
  background: white;
  border-radius: 50%;
  filter: blur(1px);
  animation: twinkle 2s infinite alternate;
}

.star.s1 {
  width: 3px;
  height: 3px;
  top: 20%;
  left: 15%;
  animation-delay: 0s;
}

.star.s2 {
  width: 2px;
  height: 2px;
  top: 50%;
  left: 60%;
  animation-delay: 0.3s;
}

.star.s3 {
  width: 4px;
  height: 4px;
  top: 70%;
  left: 30%;
  animation-delay: 0.7s;
}

@keyframes rocket-float {
  0%, 100% {
    transform: translateY(0) rotate(45deg);
  }
  50% {
    transform: translateY(-10px) rotate(45deg);
  }
}

@keyframes twinkle {
  0% {
    opacity: 0.2;
  }
  100% {
    opacity: 0.8;
  }
}

.portfolio-deployment-success {
  background: rgba(46, 187, 119, 0.1);
  border: 1px solid rgba(46, 187, 119, 0.2);
  border-radius: 12px;
  padding: 30px;
  margin-top: 20px;
}

.deployment-success-header {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.deployment-success-icon {
  font-size: 40px;
  color: var(--portfolio-success);
}

.deployment-success-header h3 {
  margin: 0;
  font-size: 24px;
  color: var(--portfolio-text);
}

.deployment-success-content {
  padding: 0 15px;
}

.deployment-success-content p {
  margin: 0 0 20px;
  font-size: 16px;
  color: var(--portfolio-text-secondary);
}

.deployment-url-container {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 30px;
}

.deployment-url-header {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
}

.url-icon {
  font-size: 16px;
  color: var(--portfolio-primary);
}

.deployment-url-header h4 {
  margin: 0;
  font-size: 16px;
  color: var(--portfolio-text);
}

.deployment-url-display {
  display: flex;
  align-items: center;
  gap: 10px;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 12px 15px;
  border: 1px solid var(--portfolio-border);
}

.portfolio-url-link {
  font-family: 'Consolas', monospace;
  font-size: 14px;
  color: var(--portfolio-primary-glow);
  text-decoration: none;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
}

.portfolio-url-link:hover {
  text-decoration: underline;
}

.copy-url-button {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  background: rgba(101, 67, 204, 0.2);
  border: 1px solid rgba(101, 67, 204, 0.3);
  border-radius: 4px;
  color: var(--portfolio-primary-glow);
  font-size: 13px;
  cursor: pointer;
  transition: all 0.2s;
  white-space: nowrap;
}

.copy-url-button:hover {
  background: rgba(101, 67, 204, 0.3);
  transform: translateY(-2px);
}

.deployment-actions {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
}

.view-portfolio-button,
.share-portfolio-button {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  padding: 14px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.view-portfolio-button {
  background: var(--portfolio-gradient-primary);
  color: white;
  border: none;
  text-decoration: none;
}

.view-portfolio-button:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 18px rgba(101, 67, 204, 0.4);
}

.share-portfolio-button {
  background: rgba(0, 0, 0, 0.2);
  color: var(--portfolio-text);
  border: 1px solid var(--portfolio-border);
}

.share-portfolio-button:hover {
  background: rgba(255, 255, 255, 0.05);
  transform: translateY(-3px);
}

.view-icon,
.share-icon {
  font-size: 16px;
}

.deployment-note {
  display: flex;
  gap: 10px;
  padding: 15px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
}

.note-icon {
  font-size: 16px;
  color: var(--portfolio-primary);
  margin-top: 3px;
}

.deployment-note p {
  margin: 0;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.portfolio-deployment-options {
  margin-top: 20px;
}

.portfolio-deployment-section {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  padding: 30px;
  margin-bottom: 30px;
  border: 1px solid var(--portfolio-border);
}

.deployment-section-header {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.section-icon {
  font-size: 24px;
  color: var(--portfolio-primary);
}

.deployment-section-header h3 {
  margin: 0;
  font-size: 22px;
  color: var(--portfolio-text);
}

.deployment-section-content {
  padding: 0 15px;
}

.deployment-section-content p {
  margin: 0 0 25px;
  font-size: 16px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.deployment-starter {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 30px;
  align-items: center;
}

.deployment-benefits {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 20px;
}

.deployment-benefits h4 {
  margin: 0 0 15px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.benefits-list {
  margin: 0;
  padding: 0 0 0 20px;
}

.benefits-list li {
  margin-bottom: 10px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.start-deployment-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
  padding: 5px;
  background: var(--portfolio-gradient-primary);
  border: 1px solid var(--portfolio-text-secondary);
  border-radius: 10px;
  color: white;
  font-size: 19px;
  cursor: pointer;
  transition: all 0.3s ease;
  height: 69px;
}

.start-deployment-button:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(101, 67, 204, 0.4);
}

.button-icon {
  font-size: 50px;
}

.portfolio-deployment-form {
  margin-top: 20px;
}

.form-section {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  border: 1px solid var(--portfolio-border);
}

.form-section-title {
  display: flex;
  align-items: center;
  gap: 10px;
  margin: 0 0 15px;
  font-size: 18px;
  color: var(--portfolio-text);
}

.form-section-icon {
  font-size: 16px;
  color: var(--portfolio-primary);
}

.form-section-description {
  margin: 0 0 20px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-size: 14px;
  color: var(--portfolio-text);
}

.input-with-icon {
  position: relative;
}

.input-icon {
  position: absolute;
  left: 20px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--portfolio-text-secondary);
  font-size: 14px;
  margin-left: 210px;
}

.form-group input {
  width: 100%;
  padding: 12px 15px 12px 38px;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  border-radius: 8px;
  color: var(--portfolio-text);
  font-size: 14px;
  transition: all 0.2s;
}

.form-group input:focus {
  outline: none;
  border-color: var(--portfolio-primary);
  box-shadow: 0 0 0 2px rgba(101, 67, 204, 0.2);
}

.form-group input.input-error {
  border-color: var(--portfolio-error);
}

.input-error-message {
  margin-top: 5px;
  color: var(--portfolio-error);
  font-size: 13px;
  display: flex;
  align-items: center;
  gap: 5px;
  animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
}

.token-help {
  margin: 8px 0 0;
  font-size: 13px;
  color: var(--portfolio-text-secondary);
}

.token-help a {
  color: var(--portfolio-primary);
  text-decoration: none;
}

.token-help a:hover {
  text-decoration: underline;
  color: var(--portfolio-primary-glow);
}

.form-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
}

.deployment-back-button {
  padding: 12px 24px;
  background: rgba(0, 0, 0, 0.2);
  border: 1px solid var(--portfolio-border);
  border-radius: 8px;
  color: var(--portfolio-text);
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.deployment-back-button:hover {
  background: rgba(255, 255, 255, 0.05);
}

.deploy-button {
  padding: 12px 24px;
  background: var(--portfolio-gradient-primary);
  border: none;
  border-radius: 8px;
  color: white;
  font-size: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 10px;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(101, 67, 204, 0.3);
}

.deploy-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.7s;
}

.deploy-button:hover:not(:disabled)::before {
  left: 100%;
}

.deploy-button:hover:not(:disabled) {
  transform: translateY(-3px);
  box-shadow: 0 6px 18px rgba(101, 67, 204, 0.4);
}

.deploy-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.portfolio-deployment-progress {
  text-align: center;
  padding: 40px 20px;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  border: 1px solid var(--portfolio-border);
  margin-bottom: 30px;
}

.deployment-progress-animation {
  margin-bottom: 30px;
}

.deployment-rocket-container {
  position: relative;
  width: 300px;
  height: 100px;
  margin: 0 auto;
}

.deployment-rocket {
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  font-size: 30px;
  color: var(--portfolio-primary);
  filter: drop-shadow(0 0 10px rgba(101, 67, 204, 0.5));
  animation: rocketMove 4s linear infinite;
}

.deployment-trail {
  position: absolute;
  top: 50%;
  left: 30px;
  width: 0;
  height: 5px;
  background: linear-gradient(90deg, var(--portfolio-primary), transparent);
  animation: trailGrow 4s linear infinite;
}

@keyframes rocketMove {
  0% {
    left: 0;
    transform: translateY(-80%) rotate(0deg);
  }
  100% {
    left: 1200px;
    transform: translateY(-80%) rotate(0deg);
  }
}

@keyframes trailGrow {
  0% {
    width: 0;
    left: 30px;
  }
  100% {
    width: 250px;
    left: 30px;
  }
}

.deployment-progress-title {
  font-size: 24px;
  margin: 0 0 30px;
  color: var(--portfolio-text);
}

.deployment-stages {
  max-width: 600px;
  margin: 0 auto 30px;
  text-align: left;
}

.deployment-stage {
  display: flex;
  margin-bottom: 20px;
  opacity: 0.5;
  transition: all 0.3s ease;
}

.deployment-stage.active {
  opacity: 1;
}

.deployment-stage.completed {
  opacity: 0.8;
}

.stage-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-right: 15px;
}

.stage-number {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: var(--portfolio-input-bg);
  border: 1px solid var(--portfolio-border);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: 600;
  color: var(--portfolio-text-secondary);
  transition: all 0.3s ease;
}

.deployment-stage.active .stage-number {
  background: var(--portfolio-primary);
  border-color: var(--portfolio-primary);
  color: white;
  box-shadow: 0 0 0 4px rgba(101, 67, 204, 0.2);
}

.deployment-stage.completed .stage-number {
  background: var(--portfolio-success);
  border-color: var(--portfolio-success);
  color: white;
}

.stage-line {
  width: 2px;
  height: 40px;
  background: var(--portfolio-border);
  margin: 5px 0;
}

.deployment-stage:last-child .stage-line {
  display: none;
}

.stage-content {
  flex: 1;
}

.stage-content h4 {
  margin: 0 0 5px;
  font-size: 16px;
  color: var(--portfolio-text);
}

.stage-content p {
  margin: 0;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
}

.deployment-wait-message {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  margin: 0;
}

.faq-container {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 12px;
  padding: 30px;
  margin-top: 30px;
  border: 1px solid var(--portfolio-border);
}

.faq-header-icon {
  font-size: 20px;
  color: var(--portfolio-primary);
  margin-right: 10px;
}

.faq-container h3 {
  display: flex;
  align-items: center;
  margin: 0 0 25px;
  font-size: 22px;
  color: var(--portfolio-text);
  border-bottom: 1px solid var(--portfolio-border);
  padding-bottom: 15px;
}

.faq-questions {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.faq-item {
  background: rgba(0, 0, 0, 0.3);
  border-radius: 8px;
  overflow: hidden;
  border: 1px solid var(--portfolio-border);
}

.faq-question {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 20px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.faq-question:hover {
  background: rgba(101, 67, 204, 0.1);
}

.faq-question span {
  font-size: 16px;
  color: var(--portfolio-text);
  font-weight: 500;
}

.faq-toggle {
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  transition: transform 0.3s;
}

.faq-toggle.expanded {
  transform: rotate(180deg);
}

.faq-answer {
  padding: 0 20px 20px;
  color: var(--portfolio-text-secondary);
  font-size: 14px;
  line-height: 1.6;
  border-top: 1px solid rgba(255, 255, 255, 0.05);
  padding-top: 15px;
  animation: fadeIn 0.3s ease;
}


/* Generation progress UI */
.portfolio-generation-status {
  width: 100%;
  max-width: 600px;
  margin-top: 40px;
}

.generation-steps {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 30px;
}

.generation-step {
  display: flex;
  align-items: center;
  gap: 15px;
  padding: 15px;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  border: 1px solid var(--portfolio-border);
  opacity: 0.5;
  transition: all 0.3s ease;
}

.generation-step.active {
  opacity: 1;
  border-color: var(--portfolio-primary);
  background: rgba(101, 67, 204, 0.1);
  transform: translateX(10px);
}

.step-icon {
  font-size: 24px;
}

.step-text {
  flex: 1;
  font-size: 16px;
  color: var(--portfolio-text);
}

.step-check {
  font-size: 20px;
  color: var(--portfolio-success);
}

.generation-tip {
  display: flex;
  align-items: flex-start;
  gap: 15px;
  padding: 15px;
  background: rgba(255, 193, 7, 0.1);
  border: 1px solid rgba(255, 193, 7, 0.3);
  border-radius: 10px;
  margin-top: 20px;
}

.tip-icon {
  font-size: 20px;
  color: var(--theme-accent-glow);
  margin-right: 15px;
}

.tip-text {
  font-size: 14px;
  line-height: 1.5;
  color: var(--portfolio-text-secondary);
}

.portfolio-debug-console {
  position: absolute;
  bottom: 40px;
  right: 20px;
  width: 400px;
  max-width: calc(100% - 40px);
  height: 250px;
  background: rgba(20, 20, 30, 0.9);
  border: 1px solid var(--portfolio-border);
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  z-index: 100;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: all 0.3s ease;
}

.portfolio-debug-console:hover {
  box-shadow: 0 8px 25px rgba(101, 67, 204, 0.4);
}

.debug-console-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background: rgba(101, 67, 204, 0.2);
  border-bottom: 1px solid var(--portfolio-border);
}

.debug-console-header h4 {
  margin: 0;
  font-size: 16px;
  color: white;
}

.debug-console-clear-btn {
  background: transparent;
  border: none;
  color: var(--portfolio-text-secondary);
  cursor: pointer;
  font-size: 14px;
  padding: 4px 8px;
  border-radius: 4px;
  transition: all 0.2s;
}

.debug-console-clear-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  color: var(--portfolio-text);
}

.debug-console-content {
  flex: 1;
  overflow-y: auto;
  padding: 10px;
  font-family: 'Consolas', monospace;
  font-size: 13px;
  color: #d1d5db;
}

.debug-console-empty {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--portfolio-text-secondary);
  font-style: italic;
}

.debug-log {
  padding: 4px 8px;
  margin-bottom: 6px;
  border-radius: 4px;
  display: flex;
  align-items: flex-start;
  gap: 8px;
  word-break: break-all;
}

.debug-log:hover {
  background: rgba(255, 255, 255, 0.05);
}

.debug-log-indicator {
  flex-shrink: 0;
  font-size: 12px;
}

.debug-log-message {
  flex: 1;
  line-height: 1.4;
}

.debug-log-error {
  background: rgba(255, 78, 78, 0.1);
  border-left: 3px solid #ff4e4e;
}

/* Enhanced Preview Error */
.portfolio-preview-error {
  display: flex;
  background: rgba(255, 78, 78, 0.1);
  border: 1px solid rgba(255, 78, 78, 0.3);
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 20px;
  gap: 15px;
  animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
  20%, 40%, 60%, 80% { transform: translateX(5px); }
}

.preview-error-icon {
  font-size: 24px;
  color: #ff4e4e;
  margin-top: 3px;
  flex-shrink: 0;
}

.preview-error-message {
  flex: 1;
}

.preview-error-message h3 {
  margin: 0 0 10px;
  font-size: 18px;
  color: var(--portfolio-text);
}

.preview-error-message p {
  margin: 0 0 10px;
  font-size: 14px;
  color: var(--portfolio-text-secondary);
  line-height: 1.5;
}

.preview-error-help {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 6px;
  padding: 10px 15px;
  margin-top: 10px;
}

.preview-error-help p {
  margin: 0 0 8px;
  font-size: 14px;
  color: var(--portfolio-text);
  font-weight: 500;
}

.preview-error-help ul {
  margin: 0;
  padding: 0 0 0 20px;
}

.preview-error-help li {
  margin-bottom: 5px;
  font-size: 13px;
  color: var(--portfolio-text-secondary);
}

/* Loading animation for preview generation */
.preview-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  gap: 20px;
}

.preview-loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(101, 67, 204, 0.3);
  border-radius: 50%;
  border-top-color: var(--portfolio-primary);
  animation: spin 1s linear infinite;
}

.preview-loading p {
  font-size: 16px;
  color: var(--portfolio-text-secondary);
}

/* Enhanced Preview Frame */
.portfolio-preview-frame-container {
  position: relative; /* To properly position the debug console */
}

/* Preview device toggle animation */
.portfolio-preview-frame {
  transition: all 0.5s cubic-bezier(0.22, 1, 0.36, 1);
  transform-origin: top center;
}

.portfolio-preview-frame-container.mobile-container .portfolio-preview-frame {
  transform: scale(0.9);
  height: calc(100% - 40px);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
              0 8px 10px -6px rgba(0, 0, 0, 0.1);
  border: 10px solid #2d3748;
  border-radius: 20px;
}

/* #####################################################
 * RESPONSIVE STYLES
 * #####################################################
 */

@media (max-width: 1200px) {
  .portfolio-resume-section {
    grid-template-columns: 1fr;
  }
  
  .deployment-starter {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .portfolio-empty-actions {
    flex-direction: column;
    align-items: center;
  }
}

@media (max-width: 992px) {
  .portfolio-page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }
  
  .portfolio-page-title-section {
    max-width: 100%;
  }
  
  .portfolio-page-tabs {
    overflow-x: auto;
    padding-bottom: 10px;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .portfolio-page-tabs::-webkit-scrollbar {
    display: none;
  }
  
  .portfolio-tab-button {
    flex-shrink: 0;
  }
  
  .portfolio-code-preview {
    flex-direction: column;
    height: auto;
  }
  
  .portfolio-file-explorer {
    width: 100%;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .portfolio-code-editor-container {
    height: 70vh;
  }
}

@media (max-width: 768px) {
  .portfolio-page-container {
    padding: 15px;
  }
  
  .portfolio-form-progress {
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
  }
  
  .step-connector, .step-connector-progress {
    display: none;
  }
  
  .progress-step {
    margin: 0 10px;
  }
  
  .portfolio-template-options,
  .portfolio-color-options {
    grid-template-columns: 1fr;
  }
  
  .features-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .form-actions {
    flex-direction: column;
    gap: 15px;
  }
  
  .deployment-actions {
    flex-direction: column;
  }
  
  .portfolio-list-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }
  
  .portfolio-list-stats {
    flex-direction: column;
    gap: 15px;
  }
  
  .portfolio-grid {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="PortfolioDeployment.js">
// Enhanced PortfolioDeployment Component
import React, { useState, useEffect } from 'react';
import { FaFighterJet, FaGithub, FaLink, FaCheckCircle, FaInfoCircle, FaClipboard, FaCode, FaQuestion, FaChevronDown, FaExternalLinkAlt } from 'react-icons/fa';
import './portfolio.css';

const PortfolioDeployment = ({ portfolio, userId, onDeploymentStart, onDeploymentComplete, onError }) => {
  const [githubToken, setGithubToken] = useState('');
  const [vercelToken, setVercelToken] = useState('');
  const [showTokenFields, setShowTokenFields] = useState(false);
  const [deploymentInProgress, setDeploymentInProgress] = useState(false);
  const [deploymentStage, setDeploymentStage] = useState(0);
  const [copied, setCopied] = useState(false);
  const [expandedFaq, setExpandedFaq] = useState(null);
  const [hasInteractedWithForm, setHasInteractedWithForm] = useState(false);

  // Frequently Asked Questions
  const faqItems = [
    {
      question: "Will I be able to update my portfolio later?",
      answer: "Yes, any changes you make to your portfolio code will be automatically deployed to your live site. You can edit your portfolio at any time through the Code Editor tab."
    },
    {
      question: "Is the hosting really free?",
      answer: "Yes, Vercel provides free hosting for personal projects. You can even connect a custom domain if you wish. The free tier includes SSL certificates, global CDN, and continuous deployment."
    },
    {
      question: "Are my tokens stored securely?",
      answer: "Your tokens are used only for the deployment process and are not stored on our servers. For added security, we recommend creating tokens with minimal permissions and revoking them after your portfolio is deployed."
    },
    {
      question: "How do I set up a custom domain?",
      answer: "After deployment, you can set up a custom domain through the Vercel dashboard. Go to your project settings, navigate to the Domains section, and follow the instructions to add and configure your domain."
    },
    {
      question: "What happens if I make changes to my portfolio?",
      answer: "Any changes you make to your portfolio in the Code Editor will be automatically committed to your GitHub repository. Vercel will detect these changes and automatically redeploy your portfolio."
    }
  ];

  // Animation for deployment stages
  useEffect(() => {
    if (deploymentInProgress) {
      console.log("Deployment in progress, starting stage animation");
      const stageInterval = setInterval(() => {
        setDeploymentStage(prevStage => {
          if (prevStage >= 3) {
            clearInterval(stageInterval);
            return 3;
          }
          return prevStage + 1;
        });
      }, 4000);
      
      return () => clearInterval(stageInterval);
    }
  }, [deploymentInProgress]);

  // Validate form fields
  const validateForm = () => {
    if (!githubToken || !vercelToken) {
      return false;
    }
    
    if (githubToken.length < 10 || vercelToken.length < 10) {
      return false;
    }
    
    return true;
  };

  const handleInputChange = (e, field) => {
    setHasInteractedWithForm(true);
    
    if (field === 'github') {
      setGithubToken(e.target.value);
    } else if (field === 'vercel') {
      setVercelToken(e.target.value);
    }
  };

  const handleDeploy = async (e) => {
    e.preventDefault();
    
    // Validate inputs
    if (showTokenFields && (!githubToken || !vercelToken)) {
      onError('Please provide both GitHub and Vercel tokens');
      return;
    }
    
    try {
      console.log("Starting deployment process");
      onDeploymentStart();
      setDeploymentInProgress(true);
      setDeploymentStage(0);
      
      // Add validation for token formats
      if (githubToken.length < 36 || !githubToken.match(/^gh[ps]_[A-Za-z0-9_]{36,}$/)) {
        throw new Error('Invalid GitHub token format. Please ensure you are using a valid Personal Access Token.');
      }
      
      if (vercelToken.length < 24) {
        throw new Error('Invalid Vercel token format. Please ensure you are using a valid API token.');
      }
      
      // Show stage 1: Preparing files
      setDeploymentStage(1);
      
      // Make the deployment request
      const response = await fetch('/api/portfolio/deploy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': userId
        },
        body: JSON.stringify({
          portfolio_id: portfolio._id,
          github_token: githubToken,
          vercel_token: vercelToken
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Deployment failed');
      }
      
      // Show stage 2: Creating Repository
      setDeploymentStage(2);
      
      // Add a delay to simulate the process steps
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Show stage 3: Configuring Hosting
      setDeploymentStage(3);
      
      // Add another delay
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const data = await response.json();
      console.log("Deployment successful:", data);
      
      // Wait a moment to show the final stage
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setDeploymentInProgress(false);
      onDeploymentComplete(data);
      
    } catch (err) {
      console.error('Error deploying portfolio:', err);
      setDeploymentInProgress(false);
      onError(err.message || 'Deployment failed. Please try again.');
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  const toggleFaq = (index) => {
    if (expandedFaq === index) {
      setExpandedFaq(null);
    } else {
      setExpandedFaq(index);
    }
  };

  const isDeployed = portfolio?.deployment?.deployed;
  const deploymentUrl = portfolio?.deployment?.url;

  return (
      <div className="portfolio-deployment-header">
        <div className="deployment-header-content">
          <FaFighterJet className="deployment-title-icon" />
          <h2>Deploy Your Portfolio</h2>
          <p className="portfolio-deployment-subtitle">Make your portfolio accessible online with just a few clicks</p>
        </div>
        <div className="deployment-header-graphic">
          <div className="deployment-illustration">
            <div className="deployment-rocket">
              <FaFighterJet />
            </div>
            <div className="deployment-planet"></div>
            <div className="deployment-stars">
              <div className="star s1"></div>
              <div className="star s2"></div>
              <div className="star s3"></div>
            </div>
          </div>
        </div>

      
      {isDeployed ? (
        <div className="portfolio-deployment-success">
          <div className="deployment-success-header">
            <FaCheckCircle className="deployment-success-icon" />
            <h3>Your Portfolio is Live!</h3>
          </div>
          
          <div className="deployment-success-content">
            <p>Your portfolio has been successfully deployed and is now accessible online.</p>
            
            <div className="deployment-url-container">
              <div className="deployment-url-header">
                <FaLink className="url-icon" />
                <h4>Portfolio URL</h4>
              </div>
              
              <div className="deployment-url-display">
                <a 
                  href={deploymentUrl} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="portfolio-url-link"
                >
                  {deploymentUrl}
                </a>
                
                <button 
                  className="copy-url-button"
                  onClick={() => copyToClipboard(deploymentUrl)}
                  title="Copy URL to clipboard"
                >
                  <FaClipboard />
                  <span className="copy-text">{copied ? 'Copied!' : 'Copy'}</span>
                </button>
              </div>
            </div>
            
            <div className="deployment-actions">
              <a 
                href={deploymentUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                className="view-portfolio-button"
              >
                <FaExternalLinkAlt className="view-icon" />
                <span>View Portfolio</span>
              </a>
              
              <button className="share-portfolio-button">
                <FaLink className="share-icon" />
                <span>Share Portfolio</span>
              </button>
            </div>
            
            <div className="deployment-note">
              <FaInfoCircle className="note-icon" />
              <p>
                Your portfolio is automatically updated when you make changes to your code. 
                If the link doesn't work immediately, please try again in a few minutes as 
                deployment may take some time to propagate.
              </p>
            </div>
          </div>
        </div>
      ) : (
        <div className="portfolio-deployment-options">
          {deploymentInProgress ? (
            <div className="portfolio-deployment-progress">
              <div className="deployment-progress-animation">
                <div className="deployment-rocket-container">
                  <div className="deployment-rocket">
                    <FaFighterJet />
                  </div>
                  <div className="deployment-trail"></div>
                </div>
              </div>
              
              <h3 className="deployment-progress-title">Deployment in Progress</h3>
              
              <div className="deployment-stages">
                <div className={`deployment-stage ${deploymentStage >= 0 ? 'active' : ''} ${deploymentStage > 0 ? 'completed' : ''}`}>
                  <div className="stage-indicator">
                    <div className="stage-number">1</div>
                    <div className="stage-line"></div>
                  </div>
                  <div className="stage-content">
                    <h4>Preparing Files</h4>
                    <p>Optimizing your portfolio code for deployment</p>
                  </div>
                </div>
                
                <div className={`deployment-stage ${deploymentStage >= 1 ? 'active' : ''} ${deploymentStage > 1 ? 'completed' : ''}`}>
                  <div className="stage-indicator">
                    <div className="stage-number">2</div>
                    <div className="stage-line"></div>
                  </div>
                  <div className="stage-content">
                    <h4>Creating Repository</h4>
                    <p>Setting up a GitHub repository with your portfolio</p>
                  </div>
                </div>
                
                <div className={`deployment-stage ${deploymentStage >= 2 ? 'active' : ''} ${deploymentStage > 2 ? 'completed' : ''}`}>
                  <div className="stage-indicator">
                    <div className="stage-number">3</div>
                    <div className="stage-line"></div>
                  </div>
                  <div className="stage-content">
                    <h4>Configuring Hosting</h4>
                    <p>Setting up deployment on Vercel</p>
                  </div>
                </div>
                
                <div className={`deployment-stage ${deploymentStage >= 3 ? 'active' : ''} ${deploymentStage > 3 ? 'completed' : ''}`}>
                  <div className="stage-indicator">
                    <div className="stage-number">4</div>
                  </div>
                  <div className="stage-content">
                    <h4>Going Live</h4>
                    <p>Making your portfolio accessible online</p>
                  </div>
                </div>
              </div>
              
              <p className="deployment-wait-message">This process may take a few minutes. Please do not close this window.</p>
            </div>
          ) : (
            <>
              <div className="portfolio-deployment-section">
                <div className="deployment-section-header">
                  <FaCode className="section-icon" />
                  <h3>Get Your Portfolio Online</h3>
                </div>
                
                <div className="deployment-section-content">
                  <p>
                    Deploy your portfolio to make it accessible on the web. Your portfolio will be 
                    hosted on Vercel, a leading platform for frontend applications, which provides 
                    free hosting with custom domains, SSL certificates, and global CDN.
                  </p>
                  
                  {!showTokenFields ? (
                    <div className="deployment-starter">
                      <div className="deployment-benefits">
                        <h4>Deployment Benefits:</h4>
                        <ul className="benefits-list">
                          <li>Free, reliable hosting with global CDN</li>
                          <li>Custom domain support with SSL included</li>
                          <li>Professional URL to share with employers</li>
                          <li>Automatic updates when you edit your portfolio</li>
                          <li>Analytics to track visitor engagement</li>
                        </ul>
                      </div>
                      
                      <button 
                        className="start-deployment-button"
                        onClick={() => setShowTokenFields(true)}
                      >
                        <FaGithub className="button-icon" />
                        <span>Start Deployment</span>
                      </button>
                    </div>
                  ) : (
<form className="portfolio-deployment-form" onSubmit={handleDeploy}>
                      <div className="form-section">
                        <div className="form-section-header">
                          <FaGithub className="form-section-icon" />
                          <h4 className="form-section-title">GitHub Configuration</h4>
                        </div>
                        
                        <p className="form-section-description">
                          Your portfolio code will be stored in a GitHub repository. This allows 
                          for version control and easy updates.
                        </p>
                        
                        <div className="deployment-visual-container">
                          <div className="deployment-visual">
                            <div className="deployment-github-icon">
                            </div>
                            <div className="deployment-visual-arrow"></div>
                            <div className="deployment-code-icon">
                            </div>
                          </div>
                        </div>
                        
                        <div className="form-group">
                          <label htmlFor="github-token">GitHub Access Token</label>
                          <div className="">
                            <FaGithub className="input-icon" />
                            <input 
                              type="password"
                              id="github-token"
                              value={githubToken}
                              onChange={(e) => handleInputChange(e, 'github')}
                              placeholder="Enter your GitHub access token"
                              className={hasInteractedWithForm && !githubToken ? 'input-error' : ''}
                            />
                          </div>
                          {hasInteractedWithForm && !githubToken && 
                            <div className="input-error-message">GitHub token is required</div>
                          }
                          <p className="token-help">
                            <a 
                              href="https://github.com/settings/tokens/new" 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="token-help-link"
                            >
                              Create a GitHub token
                            </a> with these permissions:
                            <ul className="token-permissions">
                              <li><strong>repo</strong> - Full control of private repositories</li>
                              <li><strong>workflow</strong> - Update GitHub Action workflows</li>
                            </ul>
                            <span className="token-tip">Important: Make sure to copy your token immediately after creation, as GitHub won't show it again!</span>
                          </p>
                          
                          // For Vercel token:
                          <p className="token-help">
                            <a 
                              href="https://vercel.com/account/tokens" 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="token-help-link"
                            >
                              Create a Vercel token
                            </a> from your account settings with these settings:
                            <ul className="token-permissions">
                              <li>Description: Portfolio Generator</li>
                              <li>Scope: Full Account</li>
                            </ul>
                          </p>
                        </div>
                      </div>
                      
                      <div className="form-section">
                        <div className="form-section-header">
                          <FaFighterJet className="form-section-icon" />
                          <h4 className="form-section-title">Vercel Configuration</h4>
                        </div>
                        
                        <p className="form-section-description">
                          Vercel will build and host your portfolio, making it accessible online with a custom URL.
                        </p>
                        
                        <div className="deployment-visual-container">
                          <div className="deployment-visual">
                            <div className="deployment-code-icon">
                            </div>
                            <div className="deployment-visual-arrow"></div>
                            <div className="deployment-vercel-icon">
                            </div>
                            <div className="deployment-visual-arrow"></div>
                            <div className="deployment-globe-icon">
                            </div>
                          </div>
                        </div>
                        
                        <div className="form-group">
                          <label htmlFor="vercel-token">Vercel Access Token</label>
                          <div className="input-with-icon">
                            <span className="input-icon vercel-icon"></span>
                            <input 
                              type="password"
                              id="vercel-token"
                              value={vercelToken}
                              onChange={(e) => handleInputChange(e, 'vercel')}
                              placeholder="Enter your Vercel access token"
                              className={hasInteractedWithForm && !vercelToken ? 'input-error' : ''}
                            />
                          </div>
                          {hasInteractedWithForm && !vercelToken && 
                            <div className="input-error-message">Vercel token is required</div>
                          }
                          <p className="token-help">
                            <a 
                              href="https://vercel.com/account/tokens" 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="token-help-link"
                            >
                              Create a Vercel token
                            </a> from your account settings.
                          </p>
                        </div>
                      </div>
                      
                      <div className="form-actions">
                        <button 
                          type="button"
                          className="deployment-back-button"
                          onClick={() => setShowTokenFields(false)}
                        >
                          Back
                        </button>
                        
                        <button 
                          type="submit"
                          className="deploy-button"
                          disabled={!validateForm()}
                        >
                          <FaGithub className="button-icon" />
                          <span>Deploy Portfolio</span>
                        </button>
                      </div>
                    </form>
                  )}
                </div>
              </div>
              
              <div className="faq-container">
                <h3>
                  <FaQuestion className="faq-header-icon" />
                  Frequently Asked Questions
                </h3>
                
                <div className="faq-questions">
                  {faqItems.map((item, index) => (
                    <div key={index} className="faq-item">
                      <div 
                        className="faq-question"
                        onClick={() => toggleFaq(index)}
                      >
                        <span>{item.question}</span>
                        <FaChevronDown className={`faq-toggle ${expandedFaq === index ? 'expanded' : ''}`} />
                      </div>
                      {expandedFaq === index && (
                        <div className="faq-answer">
                          {item.answer}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default PortfolioDeployment;
</file>

<file path="PortfolioForm.js">
// Enhanced PortfolioForm Component
import React, { useState, useEffect } from 'react';
import { FaPalette, FaDesktop, FaCode, FaPencilAlt, FaLayerGroup, FaMagic, FaArrowRight, FaArrowLeft, FaRocket, FaCheck, FaTimes, FaInfoCircle } from 'react-icons/fa';
import './portfolio.css';

const PortfolioForm = ({ userId, onGenerationStart, onGenerationComplete, onError }) => {
  const [resumeText, setResumeText] = useState('');
  const [preferences, setPreferences] = useState({
    template_style: 'modern',
    color_scheme: 'professional',
    features: ['projects', 'skills', 'contact']
  });
  const [step, setStep] = useState(1);
  const [isValidatingResume, setIsValidatingResume] = useState(false);
  const [resumeAnalysis, setResumeAnalysis] = useState(null);
  const [touchedFields, setTouchedFields] = useState({
    template_style: false,
    color_scheme: false,
    features: false,
    resumeText: false
  });
  const [formSubmitting, setFormSubmitting] = useState(false);
  
  const totalSteps = 4;

  // Check if the current step is valid to proceed
  const isStepValid = () => {
    switch(step) {
      case 1:
        return preferences.template_style;
      case 2:
        return preferences.color_scheme;
      case 3:
        return preferences.features.length > 0;
      case 4:
        return resumeText.trim().length >= 100;
      default:
        return true;
    }
  };

  // Analyze resume when it changes
  useEffect(() => {
    if (resumeText.trim().length >= 100 && touchedFields.resumeText) {
      const analyzeResume = setTimeout(() => {
        setIsValidatingResume(true);
        
        // Simulate resume analysis (in a real app, this would call an API)
        setTimeout(() => {
          const keywordCount = resumeText.toLowerCase().split(/\s+/).filter(word => 
            ['experience', 'skills', 'project', 'education', 'developed', 'created', 'designed'].includes(word)
          ).length;
          
          const contentScore = Math.min(100, Math.floor((resumeText.length / 500) * 70) + (keywordCount * 3));
          
          setResumeAnalysis({
            score: contentScore,
            wordCount: resumeText.split(/\s+/).length,
            characterCount: resumeText.length,
            keyPhrases: keywordCount >= 3,
            recommendation: contentScore < 70 ? 'Add more details about your experience and skills' : 'Your resume looks good!'
          });
          
          setIsValidatingResume(false);
        }, 1000);
      }, 800);
      
      return () => clearTimeout(analyzeResume);
    }
  }, [resumeText, touchedFields.resumeText]);

  const handleTemplateStyleChange = (style) => {
    console.log(`Selected template style: ${style}`);
    setPreferences(prev => ({
      ...prev,
      template_style: style
    }));
    setTouchedFields(prev => ({
      ...prev,
      template_style: true
    }));
  };

  const handleColorSchemeChange = (scheme) => {
    console.log(`Selected color scheme: ${scheme}`);
    setPreferences(prev => ({
      ...prev,
      color_scheme: scheme
    }));
    setTouchedFields(prev => ({
      ...prev,
      color_scheme: true
    }));
  };

  const handleFeatureToggle = (feature) => {
    console.log(`Toggling feature: ${feature}`);
    setPreferences(prev => {
      const features = [...prev.features];
      
      if (features.includes(feature)) {
        return {
          ...prev,
          features: features.filter(f => f !== feature)
        };
      } else {
        return {
          ...prev,
          features: [...features, feature]
        };
      }
    });
    setTouchedFields(prev => ({
      ...prev,
      features: true
    }));
  };


  
  const handleGeneratePortfolio = async (e) => {
    e.preventDefault();
    
    if (!resumeText.trim()) {
      onError('Please provide your resume text');
      return;
    }
    
    if (resumeText.trim().length < 100) {
      onError('Your resume text is too short. Please provide more details for better results.');
      return;
    }
    
    try {
      setFormSubmitting(true);
      
      // Call this ONCE to initiate loading sequence in PortfolioPage
      if (onGenerationStart) {
        onGenerationStart(); 
      }
      
      console.log("Starting portfolio generation request:", {
        userId,
        resumeLength: resumeText.length,
        preferences
      });
      
      const response = await fetch('/api/portfolio/generate-stream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': userId
        },
        body: JSON.stringify({
          resume_text: resumeText,
          preferences
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to start portfolio generation');
      }
      
      const pollingStartTime = Date.now(); // For polling timeout, not the visual message start
      let attemptCount = 0;
      
      const checkStatusInterval = setInterval(async () => {
        try {
          attemptCount++;
          console.log(`Checking portfolio status: attempt ${attemptCount}`);
          

          // Check for timeout
          if (Date.now() - pollingStartTime > 10 * 60 * 1200) { 
              clearInterval(checkStatusInterval);
              throw new Error("Portfolio generation timed out. Please try again.");
          }

          const statusResponse = await fetch('/api/portfolio/status/generation', {
            headers: { 'X-User-Id': userId }
          });
          
          if (statusResponse.ok) {
            const statusData = await statusResponse.json();
            console.log("Status check response:", statusData);
            
            if (statusData.success && statusData.status === 'completed' && statusData.portfolio_id) {
              console.log("Portfolio generation completed! ID:", statusData.portfolio_id);
              clearInterval(checkStatusInterval);
              
              try {
                const portfolioResponse = await fetch(`/api/portfolio/${statusData.portfolio_id}`, {
                  headers: { 'X-User-Id': userId }
                });
                
                if (portfolioResponse.ok) {
                  const portfolioData = await portfolioResponse.json();
                  console.log("Portfolio data received:", portfolioData);
                  
                  if (!portfolioData.portfolio || Object.keys(portfolioData.portfolio.components || {}).length === 0) {
                    throw new Error('Received empty portfolio data');
                  }
                  
                  onGenerationComplete(portfolioData.portfolio);
                  setFormSubmitting(false);
                } else {
                  console.error("Error fetching portfolio:", await portfolioResponse.text());
                  throw new Error('Failed to fetch the generated portfolio');
                }
              } catch (fetchError) {
                console.error("Error fetching portfolio details:", fetchError);
                throw fetchError; // Propagate to outer catch
              }
            } else if (statusData.status === 'failed') {
                clearInterval(checkStatusInterval);
                throw new Error(statusData.error || "Portfolio generation failed on the server.");
            }
            // If status is 'pending' or other, just continue polling
          } else {
              // Handle non-OK status response if necessary, or let it retry
              console.warn("Status check returned non-OK:", statusResponse.status);
          }
        } catch (checkError) {
          clearInterval(checkStatusInterval);
          console.error('Error checking portfolio status:', checkError);
          onError(checkError.message || 'An error occurred while checking generation status.');
          setFormSubmitting(false);
        }
      }, 5000); 
      
    } catch (err) {
      console.error('Error generating portfolio:', err);
      onError(err.message || 'Failed to generate portfolio. Please try again.');
      setFormSubmitting(false);
    }
  };
  
           

  const nextStep = () => {
    if (step < totalSteps && isStepValid()) {
      console.log(`Moving from step ${step} to step ${step + 1}`);
      setStep(prev => prev + 1);
      window.scrollTo(0, 0);
    }
  };

  const prevStep = () => {
    if (step > 1) {
      console.log(`Moving from step ${step} to step ${step - 1}`);
      setStep(prev => prev - 1);
      window.scrollTo(0, 0);
    }
  };


/**
 * Provides a more helpful generation status message based on elapsed time
 * @param {number} startTimeMs The start time in milliseconds
 * @returns {string} A contextual loading message
 */
  const getPortfolioGenerationMessage = (startTimeMs) => {
    if (!startTimeMs) return "Generating your portfolio...";
    
    const elapsedSeconds = Math.floor((Date.now() - startTimeMs) / 1000);
    
    if (elapsedSeconds < 30) {
      return "Analyzing your resume and planning portfolio structure...";
    } else if (elapsedSeconds < 60) {
      return "Creating component files and styling...";
    } else if (elapsedSeconds < 120) {
      return "Generation in progress - this may take a few minutes...";
    } else if (elapsedSeconds < 240) {
      return "Still working - almost there! Complex portfolios take longer to generate.";
    } else {
      return "Portfolio is being finalized - please wait while we complete the process...";
    }
  };



  const renderProgressBar = () => {
    return (
      <div className="portfolio-form-progress">
        <div className="step-connector"></div>
        <div 
          className="step-connector-progress" 
          style={{ width: `${((step - 1) / (totalSteps - 1)) * 100}%` }}
        ></div>
        
        {[...Array(totalSteps)].map((_, index) => {
          const stepNumber = index + 1;
          return (
            <div 
              key={stepNumber} 
              className={`progress-step ${stepNumber < step ? 'completed' : ''} ${stepNumber === step ? 'active' : ''}`}
              onClick={() => {
                if (stepNumber < step) {
                  setStep(stepNumber);
                }
              }}
            >
              <div className="step-number">
                {stepNumber < step ? <FaCheck className="step-check-icon" /> : stepNumber}
              </div>
              <div className="step-label">
                {stepNumber === 1 && 'Template Style'}
                {stepNumber === 2 && 'Colors'}
                {stepNumber === 3 && 'Features'}
                {stepNumber === 4 && 'Resume'}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  return (
    <div className="portfolio-form-container">
      {renderProgressBar()}
      
      {step === 1 && (
        <div className="portfolio-form-step">
          <div className="portfolio-form-header">
            <FaDesktop className="form-header-icon" />
            <h2>Choose Your Template Style</h2>
            <p className="form-header-description">
              Select a template style that best represents your professional brand and the industry you're targeting
            </p>
          </div>
          
          <div className="portfolio-template-options">
            <div 
              className={`portfolio-template-option ${preferences.template_style === 'modern' ? 'selected' : ''}`}
              onClick={() => handleTemplateStyleChange('modern')}
            >
              <div className="template-preview modern-preview">
                <div className="template-hover-overlay">
                  <FaCheck className="template-selected-icon" />
                </div>
              </div>
              <div className="template-info">
                <h3>Modern</h3>
                <p>Sleek dark interface with vibrant blue accents, perfect for developers and tech professionals</p>
                <div className="template-features">
                  <span className="feature-tag">Sleek UI</span>
                  <span className="feature-tag">Developer-Focused</span>
                  <span className="feature-tag">Professional</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-template-option ${preferences.template_style === 'creative' ? 'selected' : ''}`}
              onClick={() => handleTemplateStyleChange('creative')}
            >
              <div className="template-preview creative-preview">
                <div className="template-hover-overlay">
                  <FaCheck className="template-selected-icon" />
                </div>
              </div>
              <div className="template-info">
                <h3>Creative</h3>
                <p>Bold design with vibrant red and orange gradients to showcase your creative talents and stand out</p>
                <div className="template-features">
                  <span className="feature-tag">Eye-Catching</span>
                  <span className="feature-tag">Vibrant</span>
                  <span className="feature-tag">Dynamic</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-template-option ${preferences.template_style === 'corporate' ? 'selected' : ''}`}
              onClick={() => handleTemplateStyleChange('corporate')}
            >
              <div className="template-preview corporate-preview">
                <div className="template-hover-overlay">
                  <FaCheck className="template-selected-icon" />
                </div>
              </div>
              <div className="template-info">
                <h3>Corporate</h3>
                <p>Clean professional layout with strategic use of white space and navy blue accents for business portfolios</p>
                <div className="template-features">
                  <span className="feature-tag">Business-Ready</span>
                  <span className="feature-tag">Structured</span>
                  <span className="feature-tag">Professional</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-template-option ${preferences.template_style === 'tech' ? 'selected' : ''}`}
              onClick={() => handleTemplateStyleChange('tech')}
            >
              <div className="template-preview tech-preview">
                <div className="template-hover-overlay">
                  <FaCheck className="template-selected-icon" />
                </div>
              </div>
              <div className="template-info">
                <h3>Tech</h3>
                <p>Dark-themed developer portfolio with code elements, terminal-inspired UI, and teal accent highlights</p>
                <div className="template-features">
                  <span className="feature-tag">Code-Inspired</span>
                  <span className="feature-tag">Terminal UI</span>
                  <span className="feature-tag">Dark Theme</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="portfolio-form-guidance">
            <FaInfoCircle className="guidance-icon" />
            <div className="guidance-content">
              <h4>How to choose the right template</h4>
              <p>Consider your industry and target audience when selecting a template style:</p>
              <ul>
                <li><strong>Modern</strong>: Great for most industries, especially tech and digital</li>
                <li><strong>Creative</strong>: Ideal for designers, artists, photographers, and marketers</li>
                <li><strong>Corporate</strong>: Perfect for finance, consulting, legal, and traditional businesses</li>
                <li><strong>Tech</strong>: Designed for developers, IT professionals, and tech enthusiasts</li>
              </ul>
            </div>
          </div>
          
          <div className="portfolio-form-navigation">
            <div className="navigation-placeholder"></div>
            <button 
              className="portfolio-next-button"
              onClick={nextStep}
              disabled={!isStepValid()}
            >
              <span>Next: Choose Colors</span>
              <FaArrowRight className="button-icon" />
            </button>
          </div>
        </div>
      )}
      
      {step === 2 && (
        <div className="portfolio-form-step">
          <div className="portfolio-form-header">
            <FaPalette className="form-header-icon" />
            <h2>Select Color Scheme</h2>
            <p className="form-header-description">
              Choose a color palette that complements your template style and personal brand
            </p>
          </div>
          
          <div className="portfolio-color-options">
            <div 
              className={`portfolio-color-option ${preferences.color_scheme === 'professional' ? 'selected' : ''}`}
              onClick={() => handleColorSchemeChange('professional')}
            >
              <div className="color-preview professional-colors">
                <div className="color-overlay">
                  <FaCheck className="color-selected-icon" />
                </div>
                <div className="color-swatch professional-1"></div>
                <div className="color-swatch professional-2"></div>
                <div className="color-swatch professional-3"></div>
              </div>
              <div className="color-info">
                <h3>Professional</h3>
                <p>Navy blue, light gray, and white - timeless and trustworthy</p>
                <div className="color-best-for">
                  <span>Best for: Business, Finance, Law, Healthcare</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-color-option ${preferences.color_scheme === 'creative' ? 'selected' : ''}`}
              onClick={() => handleColorSchemeChange('creative')}
            >
              <div className="color-preview creative-colors">
                <div className="color-overlay">
                  <FaCheck className="color-selected-icon" />
                </div>
                <div className="color-swatch creative-1"></div>
                <div className="color-swatch creative-2"></div>
                <div className="color-swatch creative-3"></div>
              </div>
              <div className="color-info">
                <h3>Creative</h3>
                <p>Purple, pink gradients, and white - expressive and distinctive</p>
                <div className="color-best-for">
                  <span>Best for: Design, Arts, Marketing, Entertainment</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-color-option ${preferences.color_scheme === 'tech' ? 'selected' : ''}`}
              onClick={() => handleColorSchemeChange('tech')}
            >
              <div className="color-preview tech-colors">
                <div className="color-overlay">
                  <FaCheck className="color-selected-icon" />
                </div>
                <div className="color-swatch tech-1"></div>
                <div className="color-swatch tech-2"></div>
                <div className="color-swatch tech-3"></div>
              </div>
              <div className="color-info">
                <h3>Tech</h3>
                <p>Dark gray, neon green accents, and white - modern and technical</p>
                <div className="color-best-for">
                  <span>Best for: Software Development, IT, Data Science</span>
                </div>
              </div>
            </div>
            
            <div 
              className={`portfolio-color-option ${preferences.color_scheme === 'minimal' ? 'selected' : ''}`}
              onClick={() => handleColorSchemeChange('minimal')}
            >
              <div className="color-preview minimal-colors">
                <div className="color-overlay">
                  <FaCheck className="color-selected-icon" />
                </div>
                <div className="color-swatch minimal-1"></div>
                <div className="color-swatch minimal-2"></div>
                <div className="color-swatch minimal-3"></div>
              </div>
              <div className="color-info">
                <h3>Minimal</h3>
                <p>Black, white, and subtle gray - clean, focused and versatile</p>
                <div className="color-best-for">
                  <span>Best for: Photography, Architecture, Any Industry</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="portfolio-form-navigation">
            <button 
              className="portfolio-back-button"
              onClick={prevStep}
            >
              <FaArrowLeft className="button-icon" />
              <span>Back</span>
            </button>
            
            <button 
              className="portfolio-next-button"
              onClick={nextStep}
              disabled={!isStepValid()}
            >
              <span>Next: Select Features</span>
              <FaArrowRight className="button-icon" />
            </button>
          </div>
        </div>
      )}
      
      {step === 3 && (
        <div className="portfolio-form-step">
          <div className="portfolio-form-header">
            <FaLayerGroup className="form-header-icon" />
            <h2>Choose Portfolio Features</h2>
            <p className="form-header-description">
              Select which sections and features to include in your professional portfolio
            </p>
          </div>
          
          <div className="portfolio-features-selection">
            <div className="features-grid">
              <div className="feature-category">
                <h3 className="feature-category-title">Core Sections</h3>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('projects') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('projects')}
                      onChange={() => handleFeatureToggle('projects')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Projects</span>
                      <span className="checkbox-tag">Recommended</span>
                    </div>
                    <p className="checkbox-description">Showcase your work with detailed project descriptions</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('skills') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('skills')}
                      onChange={() => handleFeatureToggle('skills')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Skills</span>
                      <span className="checkbox-tag">Recommended</span>
                    </div>
                    <p className="checkbox-description">Display your technical and professional skills with ratings</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('experience') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('experience')}
                      onChange={() => handleFeatureToggle('experience')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Experience</span>
                      <span className="checkbox-tag">Recommended</span>
                    </div>
                    <p className="checkbox-description">Detail your work history and professional experience</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('education') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('education')}
                      onChange={() => handleFeatureToggle('education')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Education</span>
                    </div>
                    <p className="checkbox-description">Highlight your educational background and certifications</p>
                  </div>
                </label>
              </div>
              
              <div className="feature-category">
                <h3 className="feature-category-title">Additional Features</h3>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('contact') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('contact')}
                      onChange={() => handleFeatureToggle('contact')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Contact Form</span>
                      <span className="checkbox-tag">Recommended</span>
                    </div>
                    <p className="checkbox-description">Allow potential employers to contact you directly</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('testimonials') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('testimonials')}
                      onChange={() => handleFeatureToggle('testimonials')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Testimonials</span>
                    </div>
                    <p className="checkbox-description">Display recommendations and testimonials from colleagues</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('blog') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('blog')}
                      onChange={() => handleFeatureToggle('blog')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Blog Section</span>
                    </div>
                    <p className="checkbox-description">Add a blog to showcase your expertise and thoughts</p>
                  </div>
                </label>
                
                <label className={`portfolio-feature-checkbox ${preferences.features.includes('darkmode') ? 'selected' : ''}`}>
                  <div className="checkbox-input">
                    <input 
                      type="checkbox" 
                      checked={preferences.features.includes('darkmode')}
                      onChange={() => handleFeatureToggle('darkmode')}
                    />
                    <div className="custom-checkbox">
                      <FaCheck className="check-icon" />
                    </div>
                  </div>
                  <div className="checkbox-content">
                    <div className="checkbox-header">
                      <span className="checkbox-label">Dark Mode Toggle</span>
                      <span className="checkbox-tag">Popular</span>
                    </div>
                    <p className="checkbox-description">Add a light/dark mode switch for better accessibility</p>
                  </div>
                </label>
              </div>
            </div>
          </div>
          
          <div className="portfolio-form-navigation">
            <button 
              className="portfolio-back-button"
              onClick={prevStep}
            >
              <FaArrowLeft className="button-icon" />
              <span>Back</span>
            </button>
            
            <button 
              className="portfolio-next-button"
              onClick={nextStep}
              disabled={!isStepValid()}
            >
              <span>Next: Add Resume Content</span>
              <FaArrowRight className="button-icon" />
            </button>
          </div>
        </div>
      )}
      
      {step === 4 && (
        <div className="portfolio-form-step">
          <div className="portfolio-form-header">
            <FaPencilAlt className="form-header-icon" />
            <h2>Add Your Resume Content</h2>
            <p className="form-header-description">
              Provide your resume text to generate a personalized portfolio that showcases your experience and skills
            </p>
          </div>
          
          <div className="portfolio-resume-section">
            <div className="resume-input-area">
              <div className="resume-textarea-container">
                <textarea
                  className={`portfolio-resume-textarea ${touchedFields.resumeText && resumeText.trim().length < 100 ? 'invalid' : ''}`}
                  value={resumeText}
                  onChange={(e) => {
                    setResumeText(e.target.value);
                    if (!touchedFields.resumeText) {
                      setTouchedFields(prev => ({
                        ...prev,
                        resumeText: true
                      }));
                    }
                  }}
                  placeholder="Copy and paste your resume text here. Include your professional experience, education, skills, and any projects you'd like to showcase."
                  rows={15}
                ></textarea>
                
                {touchedFields.resumeText && resumeText.trim().length < 100 && (
                  <div className="resume-validation-error">
                    <FaTimes className="error-icon" />
                    <span>Please provide more detailed content (at least 100 characters)</span>
                  </div>
                )}
                
                <div className="resume-char-counter">
                  {resumeText.length} characters
                  {resumeText.length > 0 && ` (${resumeText.split(/\s+/).length} words)`}
                </div>
              </div>
              
              {isValidatingResume && (
                <div className="resume-analyzing">
                  <div className="analyzing-spinner"></div>
                  <span>Analyzing content...</span>
                </div>
              )}
              
              {resumeAnalysis && !isValidatingResume && (
                <div className="resume-analysis-results">
                  <h3>Content Analysis</h3>
                  
                  <div className="content-score">
                    <div className="score-label">Content Quality Score</div>
                    <div className="score-bar-container">
                      <div 
                        className={`score-bar ${resumeAnalysis.score >= 70 ? 'good' : 'needs-improvement'}`}
                        style={{ width: `${resumeAnalysis.score}%` }}
                      ></div>
                    </div>
                    <div className="score-value">{resumeAnalysis.score}%</div>
                  </div>
                  
                  <div className="analysis-stats">
                    <div className="analysis-stat">
                      <div className="stat-label">Word Count</div>
                      <div className="stat-value">{resumeAnalysis.wordCount}</div>
                      <div className="stat-tag">{resumeAnalysis.wordCount >= 100 ? 'Good' : 'Too Short'}</div>
                    </div>
                    
                    <div className="analysis-stat">
                      <div className="stat-label">Key Phrases</div>
                      <div className="stat-value">{resumeAnalysis.keyPhrases ? 'Detected' : 'Limited'}</div>
                      <div className="stat-tag">{resumeAnalysis.keyPhrases ? 'Good' : 'Add More'}</div>
                    </div>
                  </div>
                  
                  <div className="analysis-recommendation">
                    <FaInfoCircle className="recommendation-icon" />
                    <p>{resumeAnalysis.recommendation}</p>
                  </div>
                </div>
              )}
            </div>
            
            <div className="resume-tips-container">
              <div className="resume-tips">
                <h4>Tips for Best Results</h4>
                <ul className="tips-list">
                  <li>Include your <strong>full name</strong> and professional title</li>
                  <li>List your <strong>technical skills</strong> and proficiency levels</li>
                  <li>Describe your <strong>professional experience</strong> with bullet points</li>
                  <li>Include <strong>education</strong>, certifications, and notable achievements</li>
                  <li>Mention any <strong>significant projects</strong> with brief descriptions</li>
                  <li>Highlight your <strong>accomplishments</strong> and <strong>metrics</strong> where possible</li>
                </ul>
              </div>
              
              <div className="example-snippet">
                <h4>Example Snippet</h4>
                <div className="example-content">
                  <p><strong>John Smith</strong> | Full Stack Developer</p>
                  <p><strong>Experience:</strong> 3 years as a Full Stack Developer at XYZ Tech, where I led the development of a customer portal that increased user engagement by 45%.</p>
                  <p><strong>Skills:</strong> JavaScript, React, Node.js, Python, SQL, AWS</p>
                  <p><strong>Education:</strong> BS Computer Science, State University (2018)</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="portfolio-form-navigation">
            <button 
              className="portfolio-back-button"
              onClick={prevStep}
            >
              <FaArrowLeft className="button-icon" />
              <span>Back</span>
            </button>
            
            <button 
              className="portfolio-generate-button"
              onClick={handleGeneratePortfolio}
              disabled={!isStepValid() || formSubmitting}
            >
              {formSubmitting ? (
                <>
                  <div className="button-spinner"></div>
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <FaMagic className="button-icon" />
                  <span>Generate Portfolio</span>
                </>
              )}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PortfolioForm;
</file>

<file path="PortfolioList.js">
// Enhanced PortfolioList Component
import React, { useState, useEffect } from 'react';
import { 
  FaRocket, 
  FaEdit, 
  FaCalendarAlt, 
  FaPalette, 
  FaSwatchbook, 
  FaExternalLinkAlt, 
  FaSearch, 
  FaPlus, 
  FaInfo, 
  FaFilter, 
  FaSort, 
  FaSortAlphaDown, 
  FaSortAmountUp, 
  FaRegClock, 
  FaFolderOpen, 
  FaSyncAlt, 
  FaEye, 
  FaPencilAlt,
  FaExclamationCircle,
  FaLightbulb,
  FaChessKnight,
  FaChessBishop,
  FaChessQueen,
  FaChessKing,
  FaAtom,
  FaAsterisk,
  FaBahai,
  FaBattleNet,
} from 'react-icons/fa';
import './portfolio.css';

const PortfolioList = ({ portfolios, onSelectPortfolio, onRefresh }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredPortfolios, setFilteredPortfolios] = useState(portfolios);
  const [sortBy, setSortBy] = useState('date');
  const [sortDirection, setSortDirection] = useState('desc');
  const [filterStatus, setFilterStatus] = useState('all');
  const [isSearchFocused, setIsSearchFocused] = useState(false);

  // Update filtered portfolios when search term, sort options, or portfolios change
  useEffect(() => {
    console.log(`Filtering portfolios with search: "${searchTerm}", filter: ${filterStatus}, sort: ${sortBy}-${sortDirection}`);
    let filtered = [...portfolios];
    
    // Filter by search term
    if (searchTerm.trim() !== '') {
      filtered = filtered.filter(portfolio => {
        // Search through preferences
        const templateStyle = portfolio.preferences?.template_style?.toLowerCase() || '';
        const colorScheme = portfolio.preferences?.color_scheme?.toLowerCase() || '';
        
        // Get creation date for search
        const creationDate = formatDate(portfolio.created_at);
        
        // Combine searchable fields
        const searchableText = `${templateStyle} ${colorScheme} ${creationDate} ${portfolio.status}`.toLowerCase();
        
        return searchableText.includes(searchTerm.toLowerCase());
      });
    }
    
    // Filter by status
    if (filterStatus !== 'all') {
      filtered = filtered.filter(portfolio => {
        if (filterStatus === 'deployed') {
          return portfolio.deployment?.deployed === true;
        } else if (filterStatus === 'generated') {
          return !portfolio.deployment?.deployed;
        }
        return true;
      });
    }
    
    // Sort the filtered results
    filtered.sort((a, b) => {
      let comparison = 0;
      
      if (sortBy === 'date') {
        // Sort by creation date
        comparison = (a.created_at || 0) - (b.created_at || 0);
      } else if (sortBy === 'template') {
        // Sort by template style
        const templateA = a.preferences?.template_style?.toLowerCase() || '';
        const templateB = b.preferences?.template_style?.toLowerCase() || '';
        comparison = templateA.localeCompare(templateB);
      } else if (sortBy === 'color') {
        // Sort by color scheme
        const colorA = a.preferences?.color_scheme?.toLowerCase() || '';
        const colorB = b.preferences?.color_scheme?.toLowerCase() || '';
        comparison = colorA.localeCompare(colorB);
      }
      
      // Apply sort direction
      return sortDirection === 'asc' ? comparison : -comparison;
    });
    
    setFilteredPortfolios(filtered);
  }, [searchTerm, sortBy, sortDirection, filterStatus, portfolios]);

  const formatDate = (timestamp) => {
    if (!timestamp) return 'Unknown';
    const date = new Date(timestamp * 1000);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  };

  const getRelativeTime = (timestamp) => {
    if (!timestamp) return 'Unknown time';
    
    const now = new Date();
    const then = new Date(timestamp * 1000);
    const diffInSeconds = Math.floor((now - then) / 1000);
    
    if (diffInSeconds < 60) {
      return 'Just now';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} hour${hours > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 2592000) {
      const days = Math.floor(diffInSeconds / 86400);
      return `${days} day${days > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 31536000) {
      const months = Math.floor(diffInSeconds / 2592000);
      return `${months} month${months > 1 ? 's' : ''} ago`;
    } else {
      const years = Math.floor(diffInSeconds / 31536000);
      return `${years} year${years > 1 ? 's' : ''} ago`;
    }
  };

  const getTemplateIcon = (templateStyle) => {
    switch(templateStyle?.toLowerCase()) {
      case 'modern':
        return <FaBahai className="template-icon modern" />;
      case 'creative':
        return <FaBattleNet className="template-icon creative" />;
      case 'corporate':
        return <FaAsterisk className="template-icon corporate" />;
      case 'tech':
        return <FaAtom className="template-icon tech" />;
      default:
        return <FaSwatchbook className="template-icon" />;
    }
  };

  const getColorIcon = (colorScheme) => {
    switch(colorScheme?.toLowerCase()) {
      case 'professional':
        return <FaChessKnight className="color-icon professional" />;
      case 'creative':
        return <FaChessBishop className="color-icon creative" />;
      case 'tech':
        return <FaChessQueen className="color-icon tech" />;
      case 'minimal':
        return <FaChessKing className="color-icon minimal" />;
      default:
        return <FaPalette className="color-icon" />;
    }
  };

  const toggleSortDirection = () => {
    console.log(`Toggling sort direction from ${sortDirection} to ${sortDirection === 'asc' ? 'desc' : 'asc'}`);
    setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
  };

  const handleChangeSortBy = (newSortBy) => {
    console.log(`Changing sort from ${sortBy} to ${newSortBy}`);
    if (sortBy === newSortBy) {
      // If clicking on the same sort option, toggle direction
      toggleSortDirection();
    } else {
      // If clicking on a different sort option, set it and use desc direction
      setSortBy(newSortBy);
      setSortDirection('desc');
    }
  };

  const handleFilterChange = (newFilter) => {
    console.log(`Changing filter from ${filterStatus} to ${newFilter}`);
    setFilterStatus(newFilter);
  };

  if (!portfolios || portfolios.length === 0) {
    return (
      <div className="portfolio-empty-state">
        <div className="portfolio-empty-icon">
          <FaFolderOpen size={50} />
        </div>
        <h3>You haven't created any portfolios yet</h3>
        <p>Go to the 'Create Portfolio' tab to generate your first portfolio.</p>
        <div className="portfolio-empty-actions">
          <button className="portfolio-create-first-button">
            <FaPlus className="button-icon" />
            <span>Create Your First Portfolio</span>
          </button>
          <button className="portfolio-refresh-button" onClick={onRefresh}>
            <FaSyncAlt className="refresh-icon" />
            <span>Refresh</span>
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="portfolio-list-container">
      <div className="portfolio-list-header">
        <h2>My Portfolios</h2>
        <div className="portfolio-list-actions">
          <div className={`portfolio-search-container ${isSearchFocused ? 'focused' : ''}`}>
            <FaSearch className="search-icon" />
            <input
              type="text"
              placeholder="Search portfolios..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onFocus={() => setIsSearchFocused(true)}
              onBlur={() => setIsSearchFocused(false)}
              className="portfolio-search-input"
            />
            {searchTerm && (
              <button 
                className="search-clear-button"
                onClick={() => setSearchTerm('')}
              >
                ×
              </button>
            )}
          </div>
          <button 
            className="portfolio-refresh-button"
            onClick={onRefresh}
          >
            <FaSyncAlt className="refresh-icon" />
            <span>Refresh</span>
          </button>
        </div>
      </div>
      
      <div className="portfolio-controls">
        <div className="portfolio-filter-controls">
          <div className="filter-label">
            <FaFilter className="filter-icon" />
            <span>Filter:</span>
          </div>
          <div className="filter-options">
            <button 
              className={`filter-option ${filterStatus === 'all' ? 'active' : ''}`}
              onClick={() => handleFilterChange('all')}
            >
              All
            </button>
            <button 
              className={`filter-option ${filterStatus === 'deployed' ? 'active' : ''}`}
              onClick={() => handleFilterChange('deployed')}
            >
              Deployed
            </button>
            <button 
              className={`filter-option ${filterStatus === 'generated' ? 'active' : ''}`}
              onClick={() => handleFilterChange('generated')}
            >
              Generated
            </button>
          </div>
        </div>
        
        <div className="portfolio-sort-controls">
          <div className="sort-label">
            <FaSort className="sort-icon" />
            <span>Sort by:</span>
          </div>
          <div className="sort-options">
            <button 
              className={`sort-option ${sortBy === 'date' ? 'active' : ''}`}
              onClick={() => handleChangeSortBy('date')}
            >
              <FaRegClock className="sort-option-icon" />
              <span>Date {sortBy === 'date' && (sortDirection === 'asc' ? '↑' : '↓')}</span>
            </button>
            <button 
              className={`sort-option ${sortBy === 'template' ? 'active' : ''}`}
              onClick={() => handleChangeSortBy('template')}
            >
              <FaSwatchbook className="sort-option-icon" />
              <span>Template {sortBy === 'template' && (sortDirection === 'asc' ? '↑' : '↓')}</span>
            </button>
            <button 
              className={`sort-option ${sortBy === 'color' ? 'active' : ''}`}
              onClick={() => handleChangeSortBy('color')}
            >
              <FaPalette className="sort-option-icon" />
              <span>Color {sortBy === 'color' && (sortDirection === 'asc' ? '↑' : '↓')}</span>
            </button>
          </div>
        </div>
      </div>
      
      <div className="portfolio-list-stats">
        <div className="portfolio-stat">
          <div className="portfolio-stat-value">{portfolios.length}</div>
          <div className="portfolio-stat-label">Total Portfolios</div>
        </div>
        <div className="portfolio-stat">
          <div className="portfolio-stat-value">
            {portfolios.filter(p => p.deployment?.deployed).length}
          </div>
          <div className="portfolio-stat-label">Deployed</div>
        </div>
        <div className="portfolio-stat">
          <div className="portfolio-stat-value">
            {portfolios.filter(p => !p.deployment?.deployed).length}
          </div>
          <div className="portfolio-stat-label">In Progress</div>
        </div>
      </div>
      
      {filteredPortfolios.length === 0 ? (
        <div className="portfolio-no-results">
          <FaExclamationCircle className="no-results-icon" />
          <p>No portfolios match your search criteria.</p>
          <button 
            className="clear-search-button"
            onClick={() => {
              setSearchTerm('');
              setFilterStatus('all');
            }}
          >
            Clear Search & Filters
          </button>
        </div>
      ) : (
        <div className="portfolio-grid">
          {filteredPortfolios.map(portfolio => (
            <div key={portfolio._id} className="portfolio-item-card">
              <div className="portfolio-card-header">
                <div className="portfolio-card-title-row">
                  <h3 className="portfolio-card-title">
                    {getTemplateIcon(portfolio.preferences?.template_style)} Portfolio
                  </h3>
                  <span className={`portfolio-status-badge ${portfolio.status}`}>
                    {portfolio.deployment?.deployed ? (
                      <><FaRocket className="status-icon" /> Deployed</>
                    ) : (
                      <><FaEdit className="status-icon" /> Generated</>
                    )}
                  </span>
                </div>
                <div className="portfolio-card-meta">
                  <span className="portfolio-creation-time">
                    Created {getRelativeTime(portfolio.created_at)}
                  </span>
                </div>
              </div>
              
              <div className="portfolio-card-details">
                <div className="portfolio-detail-item">
                  <FaCalendarAlt className="detail-icon" />
                  <span className="detail-label">Created:</span>
                  <span className="detail-value">{formatDate(portfolio.created_at)}</span>
                </div>
                
                <div className="portfolio-detail-item">
                  <FaSwatchbook className="detail-icon" />
                  <span className="detail-label">Template:</span>
                  <span className="detail-value">
                    {getTemplateIcon(portfolio.preferences?.template_style)} {portfolio.preferences?.template_style || 'Custom'}
                  </span>
                </div>
                
                <div className="portfolio-detail-item">
                  <FaPalette className="detail-icon" />
                  <span className="detail-label">Colors:</span>
                  <span className="detail-value">
                    {getColorIcon(portfolio.preferences?.color_scheme)} {portfolio.preferences?.color_scheme || 'Default'}
                  </span>
                </div>
                
                {portfolio.deployment?.deployed && (
                  <div className="portfolio-detail-item portfolio-url-item">
                    <FaExternalLinkAlt className="detail-icon" />
                    <span className="detail-label">URL:</span>
                    <a 
                      href={portfolio.deployment.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="portfolio-url-link"
                    >
                      {portfolio.deployment.url.replace(/^https?:\/\//, '')}
                    </a>
                  </div>
                )}
              </div>
              
              <div className="portfolio-card-actions">
                <button 
                  className="portfolio-select-button"
                  onClick={() => onSelectPortfolio(portfolio._id)}
                >
                  <FaPencilAlt className="select-icon" />
                  <span>Edit Portfolio</span>
                </button>
                {portfolio.deployment?.deployed && (
                  <a 
                    href={portfolio.deployment.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="portfolio-view-button"
                  >
                    <FaEye className="view-icon" />
                    <span>View Live</span>
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      
      <div className="portfolio-list-explanation">
        <h3>Managing Your Portfolios</h3>
        <p>
          Each portfolio you create is saved and can be edited or deployed at any time.
          Select a portfolio to preview, make changes, or deploy it to the web.
        </p>
        <div className="portfolio-tips">
          <div className="portfolio-tip">
            <FaPencilAlt className="tip-icon" />
            <span>Click <strong>Edit Portfolio</strong> to view and modify your portfolio code</span>
          </div>
          <div className="portfolio-tip">
            <FaRocket className="tip-icon" />
            <span>Use the <strong>Deploy</strong> tab to make your portfolio accessible online</span>
          </div>
          <div className="portfolio-tip">
            <FaFolderOpen className="tip-icon" />
            <span>Your portfolios are stored securely and can be accessed anytime</span>
          </div>
          <div className="portfolio-tip">
            <FaLightbulb className="tip-icon" />
            <span>You can create multiple portfolios with different styles and content</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PortfolioList;
</file>

<file path="PortfolioPage.js">
// Enhanced PortfolioPage Component
import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import './portfolio.css';
import PortfolioForm from './PortfolioForm';
import PortfolioPreview from './PortfolioPreview';
import PortfolioList from './PortfolioList';
import PortfolioDeployment from './PortfolioDeployment';
import LoadingSpinner from '../common/LoadingSpinner';
import ErrorMessage from '../common/ErrorMessage';
import { FaCode, FaRocket, FaList, FaPlus, FaStar, FaExclamationCircle, FaSync, FaGithub} from 'react-icons/fa';

const PortfolioPage = () => {
  const { userId } = useSelector((state) => state.user);
  const [activeTab, setActiveTab] = useState('create');
  const [portfolios, setPortfolios] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentPortfolio, setCurrentPortfolio] = useState(null);
  const [generationComplete, setGenerationComplete] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState('Loading...');
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [refreshing, setRefreshing] = useState(false);

  console.log("Rendering PortfolioPage component");

  // Fetch user's portfolios on initial load
  useEffect(() => {
    if (userId) {
      console.log("User ID detected, fetching portfolios");
      fetchPortfolios();
    }
  }, [userId]);

  const fetchPortfolios = async () => {
    try {
      setRefreshing(true);
      setLoading(true);
      setLoadingMessage('Fetching your portfolios...');
      
      console.log("Making API request to fetch portfolios");
      const response = await fetch('/api/portfolio/list', {
        headers: {
          'X-User-Id': userId
        }
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Failed to fetch portfolios: ${response.status} - ${errorText}`);
        throw new Error('Failed to fetch portfolios');
      }
      
      const data = await response.json();
      console.log(`Fetched ${data.portfolios?.length || 0} portfolios:`, data.portfolios);
      
      if (!data.portfolios || !Array.isArray(data.portfolios)) {
        console.error("Invalid portfolios data structure:", data);
        throw new Error('Invalid portfolio data received');
      }
      
      setPortfolios(data.portfolios || []);
      setLoading(false);
      setRefreshing(false);
    } catch (err) {
      console.error('Error fetching portfolios:', err);
      setError('Failed to load existing portfolios. Please try again later.');
      setLoading(false);
      setRefreshing(false);
    }
  };

  const handleRefresh = () => {
    console.log("Manual refresh triggered");
    fetchPortfolios();
  };

  const handlePortfolioGenerated = (portfolioData) => {
    console.log("Portfolio generation completed successfully", portfolioData);
    
    // Ensure we have a valid portfolio object
    if (!portfolioData || !portfolioData._id) {
      console.error("Invalid portfolio data received:", portfolioData);
      setError("Generated portfolio data is incomplete");
      setLoading(false);
      return;
    }
    
    setCurrentPortfolio(portfolioData);
    setGenerationComplete(true);
    setActiveTab('preview'); // Switch to preview tab
    
    // Add a small delay before fetching portfolios to ensure the backend has updated
    setTimeout(() => {
      fetchPortfolios();
    }, 1000);
    
    setLoading(false);
  };

  const handlePortfolioError = (errorMessage) => {
    console.error("Portfolio error:", errorMessage);
    setError(errorMessage);
    setLoading(false);
  };

  const handleDismissError = () => {
    console.log("Dismissing error message");
    setError(null);
  };

  const handleDeploymentComplete = (deploymentData) => {
    console.log("Portfolio deployment completed", deploymentData);
    // Update the current portfolio with deployment info
    setCurrentPortfolio(prev => ({
      ...prev,
      deployment: {
        deployed: true,
        url: deploymentData.deployment_url
      }
    }));
    
    fetchPortfolios(); // Refresh the list
    setActiveTab('deploy'); // Switch to deploy tab
  };

  const handleSelectPortfolio = async (portfolioId) => {
    try {
      console.log(`Selecting portfolio with ID: ${portfolioId}`);
      setLoading(true);
      setLoadingMessage('Loading portfolio...');
      
      // Simulate loading progress
      const progressInterval = setInterval(() => {
        setLoadingProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 300);
      
      const response = await fetch(`/api/portfolio/${portfolioId}`, {
        headers: {
          'X-User-Id': userId
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch portfolio details');
      }
      
      const data = await response.json();
      console.log("Received portfolio details successfully");
      
      // Complete progress
      setLoadingProgress(100);
      clearInterval(progressInterval);
      
      setCurrentPortfolio(data.portfolio);
      setGenerationComplete(true);
      setLoading(false);
      setActiveTab('preview');
      
      // Reset progress for next time
      setTimeout(() => setLoadingProgress(0), 500);
      
    } catch (err) {
      console.error("Error selecting portfolio:", err);
      setError('Failed to load portfolio details');
      setLoading(false);
      setLoadingProgress(0);
    }
  };

  return (
    <div className="portfolio-page-container">
      <div className="portfolio-page-header">
        <div className="portfolio-page-title-section">
          <h1 className="portfolio-page-title">Portfolio Creator</h1>
          <p className="portfolio-page-subtitle">Build a professional portfolio to showcase your skills and experience</p>
        </div>
        
        <div className="portfolio-page-actions">
          <button 
            className={`portfolio-refresh-button ${refreshing ? 'refreshing' : ''}`}
            onClick={handleRefresh}
            disabled={loading || refreshing}
          >
            <FaSync className={`refresh-icon ${refreshing ? 'spin' : ''}`} />
            <span>{refreshing ? 'Refreshing...' : 'Refresh'}</span>
          </button>
        </div>
      </div>

      <div className="portfolio-page-tabs">
        <button 
          className={`portfolio-tab-button ${activeTab === 'create' ? 'active' : ''}`}
          onClick={() => setActiveTab('create')}
        >
          <FaPlus className="tab-icon" />
          <span>Create</span>
        </button>
        
        <button 
          className={`portfolio-tab-button ${activeTab === 'list' ? 'active' : ''}`}
          onClick={() => setActiveTab('list')}
        >
          <FaList className="tab-icon" />
          <span>My Portfolios</span>
        </button>
        
        {generationComplete && (
          <>
            <button 
              className={`portfolio-tab-button ${activeTab === 'preview' ? 'active' : ''}`}
              onClick={() => setActiveTab('preview')}
            >
              <FaCode className="tab-icon" />
              <span>Preview & Edit</span>
            </button>
            
            <button 
              className={`portfolio-tab-button ${activeTab === 'deploy' ? 'active' : ''}`}
              onClick={() => setActiveTab('deploy')}
            >
              <FaGithub className="tab-icon" />
              <span>Deploy</span>
            </button>
          </>
        )}
      </div>

      {error && (
        <div className="portfolio-error-banner">
          <ErrorMessage message={error} onDismiss={handleDismissError} />
        </div>
      )}

      <div className="portfolio-page-content">
        {loading ? (
          <div className="portfolio-loading-container">
            <LoadingSpinner message={loadingMessage} />
            
            {loadingProgress > 0 && (
              <div className="portfolio-loading-progress-container">
                <div 
                  className="portfolio-loading-progress-bar" 
                  style={{ width: `${loadingProgress}%` }}
                ></div>
                <span className="portfolio-loading-progress-text">{loadingProgress}%</span>
              </div>
            )}
            
            {/* Add this new section for generation status */}
            {loadingMessage.includes('Generating') && (
              <div className="portfolio-generation-status">
                <div className="generation-steps">
                  <div className={`generation-step ${loadingProgress > 10 ? 'active' : ''}`}>
                    <div className="step-icon">📝</div>
                    <div className="step-text">Analyzing Resume</div>
                    {loadingProgress > 10 && <div className="step-check">✓</div>}
                  </div>
                  
                  <div className={`generation-step ${loadingProgress > 35 ? 'active' : ''}`}>
                    <div className="step-icon">💻</div>
                    <div className="step-text">Creating Components</div>
                    {loadingProgress > 35 && <div className="step-check">✓</div>}
                  </div>
                  
                  <div className={`generation-step ${loadingProgress > 70 ? 'active' : ''}`}>
                    <div className="step-icon">🎨</div>
                    <div className="step-text">Applying Styles</div>
                    {loadingProgress > 70 && <div className="step-check">✓</div>}
                  </div>
                  
                  <div className={`generation-step ${loadingProgress > 95 ? 'active' : ''}`}>
                    <div className="step-icon">🚀</div>
                    <div className="step-text">Finalizing Portfolio</div>
                    {loadingProgress > 95 && <div className="step-check">✓</div>}
                  </div>
                </div>
                
                <div className="generation-tip">
                  <div className="tip-icon">💡</div>
                  <div className="tip-text">
                    This process typically takes 3-5 minutes. Can you Click off the page? I dont know....I vibe coded this so I really cant tell yah ¯\_(ツ)_/¯
                  </div>
                </div>
              </div>
            )}
          </div>
        ) : (
          <>
            {activeTab === 'create' && (
              <PortfolioForm 
                userId={userId}
                onGenerationStart={(message) => {
                  setLoading(true);
                  // Use the custom message if provided, otherwise use default
                  setLoadingMessage(message || 'Generating your portfolio...');
                  
                  // Clear any existing interval to prevent multiple intervals running
                  if (window.progressInterval) {
                    clearInterval(window.progressInterval);
                  }
                  
                  // Reset progress to ensure we start from 0
                  setLoadingProgress(0);
                  
                  // Improved progressive simulation - no back and forth
                  let progress = 0;
                  const progressInterval = setInterval(() => {
                    // Gradually slow down progress as we approach 95%
                    const increment = progress < 30 ? 3 : 
                                      progress < 60 ? 2 : 
                                      progress < 85 ? 1 : 0.5;
                    
                    progress += increment;
                    if (progress >= 95) {
                      clearInterval(progressInterval);
                      progress = 95; // Cap at 95% until complete
                    }
                    setLoadingProgress(progress);
                  }, 1000); // Longer interval for more stable appearance
                  
                  // Store interval ID to clear it when generation completes
                  window.progressInterval = progressInterval;
                }}
                onGenerationComplete={(data) => {
                  // Clear progress interval
                  if (window.progressInterval) {
                    clearInterval(window.progressInterval);
                  }
                  
                  // Complete progress animation
                  setLoadingProgress(100);
                  setTimeout(() => {
                    setLoadingProgress(0);
                    handlePortfolioGenerated(data);
                  }, 500);
                }}
                onError={handlePortfolioError}
              />
            )}

            {activeTab === 'list' && (
              <PortfolioList
                portfolios={portfolios}
                onSelectPortfolio={handleSelectPortfolio}
                onRefresh={handleRefresh}
              />
            )}

            {activeTab === 'preview' && currentPortfolio && (
              <PortfolioPreview
                portfolio={currentPortfolio}
                userId={userId}
                onFixError={(isFixing) => { /* You might want to set a state for this if 'isFixingError' is used in PortfolioPreview */
                    console.log("Fix error status from preview:", isFixing);
                 }}
              />
            )}
            
            {activeTab === 'deploy' && currentPortfolio && (
              <PortfolioDeployment
                portfolio={currentPortfolio}
                userId={userId}
                onDeploymentStart={() => {
                  setLoading(true);
                  setLoadingMessage('Deploying your portfolio...');
                  
                  // Simulate deployment progress
                  let progress = 0;
                  const progressInterval = setInterval(() => {
                    progress += 3;
                    if (progress >= 90) {
                      clearInterval(progressInterval);
                      progress = 90;
                    }
                    setLoadingProgress(progress);
                  }, 500);
                  
                  // Store interval ID
                  window.deployProgressInterval = progressInterval;
                }}
                onDeploymentComplete={(data) => {
                  // Clear progress interval
                  if (window.deployProgressInterval) {
                    clearInterval(window.deployProgressInterval);
                  }
                  
                  // Complete progress animation
                  setLoadingProgress(100);
                  setTimeout(() => {
                    setLoadingProgress(0);
                    handleDeploymentComplete(data);
                  }, 500);
                }}
                onError={handlePortfolioError}
              />
            )}
          </>
        )}
      </div>
    </div>
  );
};
export default PortfolioPage;
</file>

<file path="PortfolioPreview.js">
// frontend/my-react-app/src/components/pages/Portfolio/PortfolioPreview.js
import React, { useState, useEffect, useRef } from 'react';
import CodeEditor from './CodeEditor';
import { FaCode, FaInfo, FaFile, FaFolder, FaExclamationTriangle, FaWrench, FaCopy, FaSync, FaCheck, FaQuestionCircle, FaInfoCircle, FaListAlt, FaLightbulb } from 'react-icons/fa';
import './portfolio.css';

const PortfolioPreview = ({ portfolio, userId, onFixError }) => {
  const [activeFile, setActiveFile] = useState(null);
  const [fileContent, setFileContent] = useState('');
  const [previewMode, setPreviewMode] = useState('code'); // 'code' or 'help'
  const [errorMessage, setErrorMessage] = useState(null);
  const [isFixingError, setIsFixingError] = useState(false);
  const [fileTree, setFileTree] = useState({});
  const [searchQuery, setSearchQuery] = useState('');
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Process portfolio data when it changes
  useEffect(() => {
    if (portfolio && portfolio.components) {
      console.log("Portfolio provided to editor:", {
        id: portfolio._id,
        componentCount: Object.keys(portfolio.components).length,
        componentKeys: Object.keys(portfolio.components)
      });
      
      // If no components, log warning and set error
      if (Object.keys(portfolio.components).length === 0) {
        console.error("Portfolio has no components");
        setErrorMessage("Portfolio data is incomplete. No components found.");
        return;
      }
      
      // Organize files into a tree structure
      const tree = organizeFilesIntoTree(portfolio.components);
      setFileTree(tree);
      
      // If we have a portfolio but no activeFile is set, set the first file as active
      if (!activeFile || !portfolio.components[activeFile]) {
        const files = Object.keys(portfolio.components);
        if (files.length > 0) {
          const defaultFile = files.find(f => f.endsWith('App.js')) || files[0];
          console.log(`Setting default active file: ${defaultFile}`);
          handleFileSelect(defaultFile);
        }
      }
    }
  }, [portfolio]);

  // Organize files into directory structure
  const organizeFilesIntoTree = (components) => {
    console.log("Organizing file tree structure");
    const tree = {};
    
    Object.keys(components).forEach(filePath => {
      const parts = filePath.split('/');
      let currentLevel = tree;
      
      // Build the tree structure
      for (let i = 0; i < parts.length - 1; i++) {
        const part = parts[i];
        if (!currentLevel[part]) {
          currentLevel[part] = { __isDir: true };
        }
        currentLevel = currentLevel[part];
      }
      
      // Add the file at the correct level
      const fileName = parts[parts.length - 1];
      currentLevel[fileName] = { __filePath: filePath };
    });
    
    return tree;
  };

  const handleFileSelect = (filePath) => {
    console.log(`Selecting file: ${filePath}`);
    setActiveFile(filePath);
    
    if (portfolio && portfolio.components && portfolio.components[filePath]) {
      setFileContent(portfolio.components[filePath]);
      
      // Clear any previous error when switching files
      setErrorMessage(null);
    } else {
      console.warn(`File not found in portfolio components: ${filePath}`);
      setFileContent('');
    }
  };

  const handleUpdateFileContent = (newContent) => {
    if (newContent === fileContent) return;
    
    console.log(`Updating content for file: ${activeFile}`);
    setFileContent(newContent);
    
    // Update the portfolio object locally
    if (portfolio && portfolio.components) {
      const updatedComponents = {
        ...portfolio.components,
        [activeFile]: newContent
      };
      
      // Add log for file update
      console.log(`Updated content for ${activeFile}`);
    }
  };

  const handleFixError = async () => {
    if (!errorMessage || !activeFile) {
      console.warn("Cannot fix error: No error message or active file");
      return;
    }
    
    try {
      console.log(`Attempting to fix error in ${activeFile}:`, errorMessage);
      setIsFixingError(true);
      if (onFixError) onFixError(true);
      
      const response = await fetch('/api/portfolio/fix-error', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': userId
        },
        body: JSON.stringify({
          portfolio_id: portfolio._id,
          component_path: activeFile,
          error_message: errorMessage,
          component_code: fileContent
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to fix error');
      }
      
      const data = await response.json();
      console.log("Error fixed successfully");
      
      // Update the file content with the fixed code
      setFileContent(data.fixed_code);
      setErrorMessage(null);
      
      setIsFixingError(false);
      if (onFixError) onFixError(false);
      
    } catch (err) {
      console.error('Error fixing code:', err);
      setErrorMessage(`Failed to fix the error: ${err.message}. Please try again.`);
      setIsFixingError(false);
      if (onFixError) onFixError(false);
    }
  };

  const getFileIcon = (filePath) => {
    if (filePath.endsWith('.js') || filePath.endsWith('.jsx')) return <FaFile className="js-file-icon" />;
    if (filePath.endsWith('.css')) return <FaFile className="css-file-icon" />;
    if (filePath.endsWith('.html')) return <FaFile className="html-file-icon" />;
    if (filePath.endsWith('.json')) return <FaFile className="json-file-icon" />;
    if (filePath.endsWith('.svg')) return <FaFile className="svg-file-icon" />;
    if (filePath.endsWith('.md')) return <FaFile className="md-file-icon" />;
    return <FaFile />;
  };

  const getFileLanguage = (filePath) => {
    if (filePath.endsWith('.js')) return 'javascript';
    if (filePath.endsWith('.jsx')) return 'javascript';
    if (filePath.endsWith('.css')) return 'css';
    if (filePath.endsWith('.html')) return 'html';
    if (filePath.endsWith('.json')) return 'json';
    if (filePath.endsWith('.svg')) return 'xml';
    if (filePath.endsWith('.md')) return 'markdown';
    return 'plaintext';
  };

  // Filter files based on search query
  const filterFiles = (node, path = '', results = {}, parentMatched = false) => {
    if (!node) return results;
    
    if (searchQuery.trim() === '') return node;
    
    const searchLower = searchQuery.toLowerCase();
    let nodeMatched = parentMatched;
    
    // Copy non-file/dir properties
    const filteredNode = {};
    Object.entries(node).forEach(([key, value]) => {
      if (key === '__isDir' || key === '__filePath') {
        filteredNode[key] = value;
      }
    });
    
    // Process entries
    Object.entries(node).forEach(([name, value]) => {
      if (name === '__isDir' || name === '__filePath') return;
      
      const fullPath = path ? `${path}/${name}` : name;
      
      if (value.__isDir) {
        // It's a directory
        const matchesSearch = name.toLowerCase().includes(searchLower);
        const subResults = filterFiles(value, fullPath, {}, matchesSearch || parentMatched);
        
        // Check if there are any entries in the filtered subdirectory
        const hasMatchingChildren = Object.keys(subResults).some(key => 
          key !== '__isDir' && key !== '__filePath'
        );
        
        if (matchesSearch || hasMatchingChildren) {
          filteredNode[name] = subResults;
          nodeMatched = true;
        }
      } else if (value.__filePath) {
        // It's a file
        const filePath = value.__filePath;
        if (name.toLowerCase().includes(searchLower) || parentMatched) {
          filteredNode[name] = { __filePath: filePath };
          nodeMatched = true;
        }
      }
    });
    
    return nodeMatched ? filteredNode : {};
  };

  const filteredFileTree = searchQuery.trim() ? filterFiles(fileTree) : fileTree;

  // Recursive function to render the file tree
  const renderFileTreeNode = (node, path = '', isRoot = true) => {
    if (!node) return null;
    
    // Sort entries: directories first, then files
    const entries = Object.entries(node).sort((a, b) => {
      // Skip the __isDir and __filePath special properties
      if (a[0] === '__isDir' || a[0] === '__filePath') return 1;
      if (b[0] === '__isDir' || b[0] === '__filePath') return -1;
      
      // Directories before files
      const aIsDir = a[1].__isDir;
      const bIsDir = b[1].__isDir;
      if (aIsDir && !bIsDir) return -1;
      if (!aIsDir && bIsDir) return 1;
      
      // Alphabetical order within same type
      return a[0].localeCompare(b[0]);
    });
    
    return (
      <div className={`portfolio-file-tree-node ${isRoot ? 'root-node' : ''}`}>
        {entries.map(([name, value]) => {
          // Skip special properties
          if (name === '__isDir' || name === '__filePath') return null;
          
          const fullPath = path ? `${path}/${name}` : name;
          
          if (value.__isDir) {
            // Directory node
            return (
              <div key={fullPath} className="portfolio-directory-node">
                <div className="portfolio-directory-name">
                  <FaFolder className="directory-icon" />
                  <span className="directory-label">{name}</span>
                </div>
                <div className="portfolio-directory-children">
                  {renderFileTreeNode(value, fullPath, false)}
                </div>
              </div>
            );
          } else if (value.__filePath) {
            // File node
            const filePath = value.__filePath;
            return (
              <div 
                key={filePath}
                className={`portfolio-file-item ${activeFile === filePath ? 'active' : ''}`}
                onClick={() => handleFileSelect(filePath)}
              >
                {getFileIcon(filePath)}
                <span className="file-name">{name}</span>
              </div>
            );
          }
          
          return null;
        })}
      </div>
    );
  };

  // FAQ/Help content for the Help tab
  const renderHelpContent = () => {
    return (
      <div className="portfolio-help-content">
        <div className="help-section">
          <h3><FaInfoCircle /> About Your Portfolio</h3>
          <p>This is your generated portfolio project. You can view and edit all the code files in the Code Editor tab. Here are some answers to common questions:</p>
        </div>
        
        <div className="help-section">
          <h3><FaQuestionCircle /> Frequently Asked Questions</h3>
          
          <div className="help-question">
            <h4>What files make up my portfolio?</h4>
            <p>Your portfolio consists of:</p>
            <ul>
              <li><strong>public/index.html</strong> - The main HTML template</li>
              <li><strong>src/index.js</strong> - The entry point for React</li>
              <li><strong>src/App.js</strong> - The main React component</li>
              <li><strong>src/components/</strong> - Individual UI components</li>
              <li><strong>*.css files</strong> - Styling for your components</li>
            </ul>
          </div>
          
          <div className="help-question">
            <h4>How do I edit my portfolio?</h4>
            <p>Use the Code Editor tab to edit any file. Changes are saved automatically. If you encounter errors, the Auto-Fix feature can help resolve common issues.</p>
          </div>
          
          <div className="help-question">
            <h4>How do I view my portfolio?</h4>
            <p>To see your portfolio, you'll need to deploy it using the Deploy tab. After deployment, you'll receive a live URL to share with others.</p>
          </div>
          
          <div className="help-question">
            <h4>What if I want to change my portfolio content?</h4>
            <p>Edit the text directly in the components. For example, to change your personal information, find the component that displays it (often in a file like About.js or Home.js) and update the text.</p>
          </div>
          
          <div className="help-question">
            <h4>Can I add more pages or sections?</h4>
            <p>Yes! You can create new components in the src/components folder and import them in your App.js or other existing components.</p>
          </div>
        </div>
        
        <div className="help-section">
          <h3><FaLightbulb /> Tips for Editing</h3>
          <ul>
            <li>Use the search function to quickly find files</li>
            <li>Check App.js to understand the structure of your portfolio</li>
            <li>CSS files control the appearance - look there to change colors, spacing, etc.</li>
            <li>If you break something, don't worry! Use the Auto-Fix feature or revert your changes</li>
            <li>Remember to save your changes before deploying</li>
          </ul>
        </div>
        
        <div className="help-section">
          <h3><FaListAlt /> Common Tasks</h3>
          <div className="common-tasks">
            <div className="task-item">
              <h4>Changing Colors</h4>
              <p>Look for CSS variables (often in index.css) or color values like #ffffff or rgb(0,0,0) in CSS files.</p>
            </div>
            
            <div className="task-item">
              <h4>Updating Your Information</h4>
              <p>Search for placeholder text in component files (like "John Doe" or "Lorem ipsum") and replace with your info.</p>
            </div>
            
            <div className="task-item">
              <h4>Adding Projects</h4>
              <p>Find the projects component and add new project entries following the existing pattern.</p>
            </div>
            
            <div className="task-item">
              <h4>Fixing Layout Issues</h4>
              <p>Check the CSS files for the component with layout problems. Look for properties like margin, padding, display, and flex.</p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  if (!portfolio) {
    return (
      <div className="portfolio-preview-container portfolio-no-portfolio">
        <div className="portfolio-empty-message">
          <FaInfo className="empty-icon" />
          <h3>No Portfolio Selected</h3>
          <p>Create or select a portfolio to edit</p>
        </div>
      </div>
    );
  }

  return (
    <div className="portfolio-preview-container">
      <div className="portfolio-preview-header">
        <h2>Portfolio Editor</h2>
        <div className="portfolio-preview-tabs">
          <button 
            className={`portfolio-preview-tab ${previewMode === 'code' ? 'active' : ''}`}
            onClick={() => setPreviewMode('code')}
          >
            <FaCode className="tab-icon" />
            Code Editor
          </button>
          <button 
            className={`portfolio-preview-tab ${previewMode === 'help' ? 'active' : ''}`}
            onClick={() => setPreviewMode('help')}
          >
            <FaQuestionCircle className="tab-icon" />
            Documentation & Help
          </button>
        </div>
      </div>
      
      {previewMode === 'code' ? (
        <div className="portfolio-code-preview">
          <div className="portfolio-file-explorer">
            <div className="portfolio-file-explorer-header">
              <h3>Files</h3>
              <div className="portfolio-file-search">
                <input 
                  type="text" 
                  placeholder="Search files..."
                  className="portfolio-file-search-input"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
            <div className="portfolio-file-tree">
              {Object.keys(filteredFileTree).length > 0 ? 
                renderFileTreeNode(filteredFileTree) : 
                <div className="no-files-message">No files matching search</div>
              }
            </div>
          </div>
          
          <div className="portfolio-code-editor-container">
            {activeFile ? (
              <>
                <div className="portfolio-editor-header">
                  <div className="portfolio-active-file">
                    {getFileIcon(activeFile)}
                    <span className="file-path">{activeFile}</span>
                  </div>
                  <div className="portfolio-editor-actions">
                    <button 
                      className="portfolio-editor-action-btn"
                      onClick={() => {
                        navigator.clipboard.writeText(fileContent);
                        // Show a brief "Copied!" message
                        const tempBtn = document.getElementById('copy-button');
                        if (tempBtn) {
                          const originalText = tempBtn.innerHTML;
                          tempBtn.innerHTML = '<span class="copied-icon">✓</span> Copied!';
                          setTimeout(() => {
                            tempBtn.innerHTML = originalText;
                          }, 2000);
                        }
                      }}
                      id="copy-button"
                    >
                      <FaCopy className="action-icon" />
                      <span>Copy</span>
                    </button>
                  </div>
                </div>
                
                <CodeEditor
                  value={fileContent}
                  language={getFileLanguage(activeFile)}
                  theme="vs-dark"
                  onChange={handleUpdateFileContent}
                  onError={(error) => {
                    setErrorMessage(error);
                  }}
                />
                
                {errorMessage && (
                  <div className="portfolio-error-container">
                    <div className="portfolio-error-message">
                      <FaExclamationTriangle className="error-icon" />
                      <span className="error-text">{errorMessage}</span>
                    </div>
                    <button 
                      className="portfolio-fix-error-button"
                      onClick={handleFixError}
                      disabled={isFixingError}
                    >
                      {isFixingError ? (
                        <>
                          <span className="fix-spinner"></span>
                          <span>Fixing...</span>
                        </>
                      ) : (
                        <>
                          <FaWrench className="fix-icon" />
                          <span>Auto-Fix Error</span>
                        </>
                      )}
                    </button>
                  </div>
                )}
              </>
            ) : (
              <div className="portfolio-no-file-selected">
                <FaCode className="no-file-icon" />
                <h3>No file selected</h3>
                <p>Select a file from the explorer to view and edit</p>
              </div>
            )}
          </div>
        </div>
      ) : (
        renderHelpContent()
      )}
    </div>
  );
};

export default PortfolioPreview;
</file>

</files>
